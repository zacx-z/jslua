// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }

  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  Module['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  addFunction: function (func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func) {
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        FUNCTION_TABLE[func].apply(null, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;_memset(STACKTOP, 0, size);STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': HEAP32[((ptr)>>2)]=value; break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[(((ptr)+(4))>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[(((ptr)+(4))>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STATIC);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = ptr;
  while (HEAP8[(i++)]) {}; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i - ptr - 1;
}
Module['String_len'] = String_len;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    if (!calledRun) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===




function _lua_setlevel($from, $to) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$from;
  $2=$to;
  var $3=$1; //@line 126 "lapi.c"
  var $4=(($3+52)|0); //@line 126 "lapi.c"
  var $5=HEAP16[(($4)>>1)]; //@line 126 "lapi.c"
  var $6=$2; //@line 126 "lapi.c"
  var $7=(($6+52)|0); //@line 126 "lapi.c"
  HEAP16[(($7)>>1)]=$5; //@line 126 "lapi.c"
  ;
  return; //@line 127 "lapi.c"
}


function _lua_atpanic($L, $panicf) {
  ;
  var __label__;

  var $1;
  var $2;
  var $old;
  $1=$L;
  $2=$panicf;
  var $3=$1; //@line 133 "lapi.c"
  var $4=(($3+16)|0); //@line 133 "lapi.c"
  var $5=HEAP32[(($4)>>2)]; //@line 133 "lapi.c"
  var $6=(($5+88)|0); //@line 133 "lapi.c"
  var $7=HEAP32[(($6)>>2)]; //@line 133 "lapi.c"
  $old=$7; //@line 133 "lapi.c"
  var $8=$2; //@line 134 "lapi.c"
  var $9=$1; //@line 134 "lapi.c"
  var $10=(($9+16)|0); //@line 134 "lapi.c"
  var $11=HEAP32[(($10)>>2)]; //@line 134 "lapi.c"
  var $12=(($11+88)|0); //@line 134 "lapi.c"
  HEAP32[(($12)>>2)]=$8; //@line 134 "lapi.c"
  var $13=$old; //@line 136 "lapi.c"
  ;
  return $13; //@line 136 "lapi.c"
}


function _lua_gettop($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 160 "lapi.c"
  var $3=(($2+8)|0); //@line 160 "lapi.c"
  var $4=HEAP32[(($3)>>2)]; //@line 160 "lapi.c"
  var $5=$1; //@line 160 "lapi.c"
  var $6=(($5+12)|0); //@line 160 "lapi.c"
  var $7=HEAP32[(($6)>>2)]; //@line 160 "lapi.c"
  var $8=$4; //@line 160 "lapi.c"
  var $9=$7; //@line 160 "lapi.c"
  var $10=((($8)-($9))|0); //@line 160 "lapi.c"
  var $11=((((($10)|0))/(12))&-1); //@line 160 "lapi.c"
  ;
  return $11; //@line 160 "lapi.c"
}


function _lua_settop($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$idx;
      var $3=$2; //@line 166 "lapi.c"
      var $4=(($3)|0) >= 0; //@line 166 "lapi.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 166 "lapi.c"
    case 3: 
      __label__ = 4; break; //@line 168 "lapi.c"
    case 4: 
      var $7=$1; //@line 168 "lapi.c"
      var $8=(($7+8)|0); //@line 168 "lapi.c"
      var $9=HEAPU32[(($8)>>2)]; //@line 168 "lapi.c"
      var $10=$1; //@line 168 "lapi.c"
      var $11=(($10+12)|0); //@line 168 "lapi.c"
      var $12=HEAP32[(($11)>>2)]; //@line 168 "lapi.c"
      var $13=$2; //@line 168 "lapi.c"
      var $14=(($12+($13)*(12))|0); //@line 168 "lapi.c"
      var $15=(($9)>>>0) < (($14)>>>0); //@line 168 "lapi.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 168 "lapi.c"
    case 5: 
      var $17=$1; //@line 169 "lapi.c"
      var $18=(($17+8)|0); //@line 169 "lapi.c"
      var $19=HEAP32[(($18)>>2)]; //@line 169 "lapi.c"
      var $20=(($19+12)|0); //@line 169 "lapi.c"
      HEAP32[(($18)>>2)]=$20; //@line 169 "lapi.c"
      var $21=(($19+8)|0); //@line 169 "lapi.c"
      HEAP32[(($21)>>2)]=0; //@line 169 "lapi.c"
      __label__ = 4; break; //@line 169 "lapi.c"
    case 6: 
      var $23=$1; //@line 170 "lapi.c"
      var $24=(($23+12)|0); //@line 170 "lapi.c"
      var $25=HEAP32[(($24)>>2)]; //@line 170 "lapi.c"
      var $26=$2; //@line 170 "lapi.c"
      var $27=(($25+($26)*(12))|0); //@line 170 "lapi.c"
      var $28=$1; //@line 170 "lapi.c"
      var $29=(($28+8)|0); //@line 170 "lapi.c"
      HEAP32[(($29)>>2)]=$27; //@line 170 "lapi.c"
      __label__ = 8; break; //@line 171 "lapi.c"
    case 7: 
      var $31=$2; //@line 174 "lapi.c"
      var $32=((($31)+(1))|0); //@line 174 "lapi.c"
      var $33=$1; //@line 174 "lapi.c"
      var $34=(($33+8)|0); //@line 174 "lapi.c"
      var $35=HEAP32[(($34)>>2)]; //@line 174 "lapi.c"
      var $36=(($35+($32)*(12))|0); //@line 174 "lapi.c"
      HEAP32[(($34)>>2)]=$36; //@line 174 "lapi.c"
      __label__ = 8; break; //@line 175 "lapi.c"
    case 8: 
      ;
      return; //@line 177 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9index2adrP9lua_Statei($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $func;
      var $i_o;
      var $func1;
      $2=$L;
      $3=$idx;
      var $4=$3; //@line 50 "lapi.c"
      var $5=(($4)|0) > 0; //@line 50 "lapi.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 50 "lapi.c"
    case 3: 
      var $7=$2; //@line 51 "lapi.c"
      var $8=(($7+12)|0); //@line 51 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 51 "lapi.c"
      var $10=$3; //@line 51 "lapi.c"
      var $11=((($10)-(1))|0); //@line 51 "lapi.c"
      var $12=(($9+($11)*(12))|0); //@line 51 "lapi.c"
      $o=$12; //@line 51 "lapi.c"
      var $13=$o; //@line 53 "lapi.c"
      var $14=$2; //@line 53 "lapi.c"
      var $15=(($14+8)|0); //@line 53 "lapi.c"
      var $16=HEAPU32[(($15)>>2)]; //@line 53 "lapi.c"
      var $17=(($13)>>>0) >= (($16)>>>0); //@line 53 "lapi.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 53 "lapi.c"
    case 4: 
      $1=_luaO_nilobject_; //@line 53 "lapi.c"
      __label__ = 16; break; //@line 53 "lapi.c"
    case 5: 
      var $20=$o; //@line 54 "lapi.c"
      $1=$20; //@line 54 "lapi.c"
      __label__ = 16; break; //@line 54 "lapi.c"
    case 6: 
      var $22=$3; //@line 56 "lapi.c"
      var $23=(($22)|0) > -10000; //@line 56 "lapi.c"
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 56 "lapi.c"
    case 7: 
      var $25=$2; //@line 58 "lapi.c"
      var $26=(($25+8)|0); //@line 58 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 58 "lapi.c"
      var $28=$3; //@line 58 "lapi.c"
      var $29=(($27+($28)*(12))|0); //@line 58 "lapi.c"
      $1=$29; //@line 58 "lapi.c"
      __label__ = 16; break; //@line 58 "lapi.c"
    case 8: 
      var $31=$3; //@line 60 "lapi.c"
      if ((($31)|0) == -10000) {
        __label__ = 9; break;
      }
      else if ((($31)|0) == -10001) {
        __label__ = 10; break;
      }
      else if ((($31)|0) == -10002) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 9: 
      var $33=$2; //@line 61 "lapi.c"
      var $34=(($33+16)|0); //@line 61 "lapi.c"
      var $35=HEAP32[(($34)>>2)]; //@line 61 "lapi.c"
      var $36=(($35+92)|0); //@line 61 "lapi.c"
      $1=$36; //@line 61 "lapi.c"
      __label__ = 16; break; //@line 61 "lapi.c"
    case 10: 
      var $38=$2; //@line 63 "lapi.c"
      var $39=(($38+20)|0); //@line 63 "lapi.c"
      var $40=HEAP32[(($39)>>2)]; //@line 63 "lapi.c"
      var $41=(($40+4)|0); //@line 63 "lapi.c"
      var $42=HEAP32[(($41)>>2)]; //@line 63 "lapi.c"
      var $43=(($42)|0); //@line 63 "lapi.c"
      var $44=$43; //@line 63 "lapi.c"
      var $45=HEAP32[(($44)>>2)]; //@line 63 "lapi.c"
      var $46=$45; //@line 63 "lapi.c"
      $func=$46; //@line 63 "lapi.c"
      var $47=$2; //@line 64 "lapi.c"
      var $48=(($47+84)|0); //@line 64 "lapi.c"
      $i_o=$48; //@line 64 "lapi.c"
      var $49=$func; //@line 64 "lapi.c"
      var $50=$49; //@line 64 "lapi.c"
      var $51=(($50+12)|0); //@line 64 "lapi.c"
      var $52=HEAP32[(($51)>>2)]; //@line 64 "lapi.c"
      var $53=$52; //@line 64 "lapi.c"
      var $54=$i_o; //@line 64 "lapi.c"
      var $55=(($54)|0); //@line 64 "lapi.c"
      var $56=$55; //@line 64 "lapi.c"
      HEAP32[(($56)>>2)]=$53; //@line 64 "lapi.c"
      var $57=$i_o; //@line 64 "lapi.c"
      var $58=(($57+8)|0); //@line 64 "lapi.c"
      HEAP32[(($58)>>2)]=5; //@line 64 "lapi.c"
      var $59=$2; //@line 65 "lapi.c"
      var $60=(($59+84)|0); //@line 65 "lapi.c"
      $1=$60; //@line 65 "lapi.c"
      __label__ = 16; break; //@line 65 "lapi.c"
    case 11: 
      var $62=$2; //@line 67 "lapi.c"
      var $63=(($62+72)|0); //@line 67 "lapi.c"
      $1=$63; //@line 67 "lapi.c"
      __label__ = 16; break; //@line 67 "lapi.c"
    case 12: 
      var $65=$2; //@line 69 "lapi.c"
      var $66=(($65+20)|0); //@line 69 "lapi.c"
      var $67=HEAP32[(($66)>>2)]; //@line 69 "lapi.c"
      var $68=(($67+4)|0); //@line 69 "lapi.c"
      var $69=HEAP32[(($68)>>2)]; //@line 69 "lapi.c"
      var $70=(($69)|0); //@line 69 "lapi.c"
      var $71=$70; //@line 69 "lapi.c"
      var $72=HEAP32[(($71)>>2)]; //@line 69 "lapi.c"
      var $73=$72; //@line 69 "lapi.c"
      $func1=$73; //@line 69 "lapi.c"
      var $74=$3; //@line 70 "lapi.c"
      var $75=(((-10002)-($74))|0); //@line 70 "lapi.c"
      $3=$75; //@line 70 "lapi.c"
      var $76=$3; //@line 71 "lapi.c"
      var $77=$func1; //@line 71 "lapi.c"
      var $78=$77; //@line 71 "lapi.c"
      var $79=(($78+7)|0); //@line 71 "lapi.c"
      var $80=HEAPU8[($79)]; //@line 71 "lapi.c"
      var $81=(($80)&255); //@line 71 "lapi.c"
      var $82=(($76)|0) <= (($81)|0); //@line 71 "lapi.c"
      if ($82) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 71 "lapi.c"
    case 13: 
      var $84=$3; //@line 71 "lapi.c"
      var $85=((($84)-(1))|0); //@line 71 "lapi.c"
      var $86=$func1; //@line 71 "lapi.c"
      var $87=$86; //@line 71 "lapi.c"
      var $88=(($87+20)|0); //@line 71 "lapi.c"
      var $89=(($88+($85)*(12))|0); //@line 71 "lapi.c"
      var $92 = $89;__label__ = 15; break; //@line 71 "lapi.c"
    case 14: 
      var $92 = _luaO_nilobject_;__label__ = 15; break; //@line 71 "lapi.c"
    case 15: 
      var $92; //@line 71 "lapi.c"
      $1=$92; //@line 71 "lapi.c"
      __label__ = 16; break; //@line 71 "lapi.c"
    case 16: 
      var $94=$1; //@line 76 "lapi.c"
      ;
      return $94; //@line 76 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9index2adrP9lua_Statei["X"]=1;

function _lua_typename($L, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$t;
      var $3=$2; //@line 250 "lapi.c"
      var $4=(($3)|0)==-1; //@line 250 "lapi.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 250 "lapi.c"
    case 3: 
      var $11 = ((STRING_TABLE.__str1)|0);__label__ = 5; break; //@line 250 "lapi.c"
    case 4: 
      var $7=$2; //@line 250 "lapi.c"
      var $8=((_luaT_typenames+($7<<2))|0); //@line 250 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 250 "lapi.c"
      var $11 = $9;__label__ = 5; break; //@line 250 "lapi.c"
    case 5: 
      var $11; //@line 250 "lapi.c"
      ;
      return $11; //@line 250 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15luaA_pushobjectP9lua_StatePK10lua_TValue($L, $o) {
  ;
  var __label__;

  var $1;
  var $2;
  var $o2;
  var $o1;
  $1=$L;
  $2=$o;
  var $3=$2; //@line 90 "lapi.c"
  $o2=$3; //@line 90 "lapi.c"
  var $4=$1; //@line 90 "lapi.c"
  var $5=(($4+8)|0); //@line 90 "lapi.c"
  var $6=HEAP32[(($5)>>2)]; //@line 90 "lapi.c"
  $o1=$6; //@line 90 "lapi.c"
  var $7=$o1; //@line 90 "lapi.c"
  var $8=(($7)|0); //@line 90 "lapi.c"
  var $9=$o2; //@line 90 "lapi.c"
  var $10=(($9)|0); //@line 90 "lapi.c"
  var $11=$8; //@line 90 "lapi.c"
  var $12=$10; //@line 90 "lapi.c"
  HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)]; //@line 90 "lapi.c"
  var $13=$o2; //@line 90 "lapi.c"
  var $14=(($13+8)|0); //@line 90 "lapi.c"
  var $15=HEAP32[(($14)>>2)]; //@line 90 "lapi.c"
  var $16=$o1; //@line 90 "lapi.c"
  var $17=(($16+8)|0); //@line 90 "lapi.c"
  HEAP32[(($17)>>2)]=$15; //@line 90 "lapi.c"
  var $18=$1; //@line 91 "lapi.c"
  var $19=(($18+8)|0); //@line 91 "lapi.c"
  var $20=HEAP32[(($19)>>2)]; //@line 91 "lapi.c"
  var $21=(($20+12)|0); //@line 91 "lapi.c"
  HEAP32[(($19)>>2)]=$21; //@line 91 "lapi.c"
  ;
  return; //@line 92 "lapi.c"
}


function _lua_checkstack($L, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $res;
      $1=$L;
      $2=$size;
      $res=1; //@line 96 "lapi.c"
      var $3=$2; //@line 98 "lapi.c"
      var $4=(($3)|0) > 8000; //@line 98 "lapi.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 98 "lapi.c"
    case 3: 
      var $6=$1; //@line 98 "lapi.c"
      var $7=(($6+8)|0); //@line 98 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 98 "lapi.c"
      var $9=$1; //@line 98 "lapi.c"
      var $10=(($9+12)|0); //@line 98 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 98 "lapi.c"
      var $12=$8; //@line 98 "lapi.c"
      var $13=$11; //@line 98 "lapi.c"
      var $14=((($12)-($13))|0); //@line 98 "lapi.c"
      var $15=((((($14)|0))/(12))&-1); //@line 98 "lapi.c"
      var $16=$2; //@line 98 "lapi.c"
      var $17=((($15)+($16))|0); //@line 98 "lapi.c"
      var $18=(($17)|0) > 8000; //@line 98 "lapi.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 98 "lapi.c"
    case 4: 
      $res=0; //@line 99 "lapi.c"
      __label__ = 13; break; //@line 99 "lapi.c"
    case 5: 
      var $21=$2; //@line 100 "lapi.c"
      var $22=(($21)|0) > 0; //@line 100 "lapi.c"
      if ($22) { __label__ = 6; break; } else { __label__ = 12; break; } //@line 100 "lapi.c"
    case 6: 
      var $24=$1; //@line 101 "lapi.c"
      var $25=(($24+28)|0); //@line 101 "lapi.c"
      var $26=HEAP32[(($25)>>2)]; //@line 101 "lapi.c"
      var $27=$26; //@line 101 "lapi.c"
      var $28=$1; //@line 101 "lapi.c"
      var $29=(($28+8)|0); //@line 101 "lapi.c"
      var $30=HEAP32[(($29)>>2)]; //@line 101 "lapi.c"
      var $31=$30; //@line 101 "lapi.c"
      var $32=$27; //@line 101 "lapi.c"
      var $33=$31; //@line 101 "lapi.c"
      var $34=((($32)-($33))|0); //@line 101 "lapi.c"
      var $35=$2; //@line 101 "lapi.c"
      var $36=((($35)*(12))|0); //@line 101 "lapi.c"
      var $37=(($34)|0) <= (($36)|0); //@line 101 "lapi.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 101 "lapi.c"
    case 7: 
      var $39=$1; //@line 101 "lapi.c"
      var $40=$2; //@line 101 "lapi.c"
      __Z14luaD_growstackP9lua_Statei($39, $40); //@line 101 "lapi.c"
      __label__ = 9; break; //@line 101 "lapi.c"
    case 8: 
      __label__ = 9; break; //@line 101 "lapi.c"
    case 9: 
      var $43=$1; //@line 102 "lapi.c"
      var $44=(($43+20)|0); //@line 102 "lapi.c"
      var $45=HEAP32[(($44)>>2)]; //@line 102 "lapi.c"
      var $46=(($45+8)|0); //@line 102 "lapi.c"
      var $47=HEAPU32[(($46)>>2)]; //@line 102 "lapi.c"
      var $48=$1; //@line 102 "lapi.c"
      var $49=(($48+8)|0); //@line 102 "lapi.c"
      var $50=HEAP32[(($49)>>2)]; //@line 102 "lapi.c"
      var $51=$2; //@line 102 "lapi.c"
      var $52=(($50+($51)*(12))|0); //@line 102 "lapi.c"
      var $53=(($47)>>>0) < (($52)>>>0); //@line 102 "lapi.c"
      if ($53) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 102 "lapi.c"
    case 10: 
      var $55=$1; //@line 103 "lapi.c"
      var $56=(($55+8)|0); //@line 103 "lapi.c"
      var $57=HEAP32[(($56)>>2)]; //@line 103 "lapi.c"
      var $58=$2; //@line 103 "lapi.c"
      var $59=(($57+($58)*(12))|0); //@line 103 "lapi.c"
      var $60=$1; //@line 103 "lapi.c"
      var $61=(($60+20)|0); //@line 103 "lapi.c"
      var $62=HEAP32[(($61)>>2)]; //@line 103 "lapi.c"
      var $63=(($62+8)|0); //@line 103 "lapi.c"
      HEAP32[(($63)>>2)]=$59; //@line 103 "lapi.c"
      __label__ = 11; break; //@line 103 "lapi.c"
    case 11: 
      __label__ = 12; break; //@line 104 "lapi.c"
    case 12: 
      __label__ = 13; break; //@line 104 "lapi.c"
    case 13: 
      var $67=$res; //@line 106 "lapi.c"
      ;
      return $67; //@line 106 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_checkstack["X"]=1;

function _lua_xmove($from, $to, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $o2;
      var $o1;
      $1=$from;
      $2=$to;
      $3=$n;
      var $4=$1; //@line 112 "lapi.c"
      var $5=$2; //@line 112 "lapi.c"
      var $6=(($4)|0)==(($5)|0); //@line 112 "lapi.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 112 "lapi.c"
    case 3: 
      __label__ = 8; break; //@line 112 "lapi.c"
    case 4: 
      var $9=$3; //@line 117 "lapi.c"
      var $10=$1; //@line 117 "lapi.c"
      var $11=(($10+8)|0); //@line 117 "lapi.c"
      var $12=HEAP32[(($11)>>2)]; //@line 117 "lapi.c"
      var $13=(((-$9))|0); //@line 117 "lapi.c"
      var $14=(($12+($13)*(12))|0); //@line 117 "lapi.c"
      HEAP32[(($11)>>2)]=$14; //@line 117 "lapi.c"
      $i=0; //@line 118 "lapi.c"
      __label__ = 5; break; //@line 118 "lapi.c"
    case 5: 
      var $16=$i; //@line 118 "lapi.c"
      var $17=$3; //@line 118 "lapi.c"
      var $18=(($16)|0) < (($17)|0); //@line 118 "lapi.c"
      if ($18) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 118 "lapi.c"
    case 6: 
      var $20=$1; //@line 119 "lapi.c"
      var $21=(($20+8)|0); //@line 119 "lapi.c"
      var $22=HEAP32[(($21)>>2)]; //@line 119 "lapi.c"
      var $23=$i; //@line 119 "lapi.c"
      var $24=(($22+($23)*(12))|0); //@line 119 "lapi.c"
      $o2=$24; //@line 119 "lapi.c"
      var $25=$2; //@line 119 "lapi.c"
      var $26=(($25+8)|0); //@line 119 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 119 "lapi.c"
      var $28=(($27+12)|0); //@line 119 "lapi.c"
      HEAP32[(($26)>>2)]=$28; //@line 119 "lapi.c"
      $o1=$27; //@line 119 "lapi.c"
      var $29=$o1; //@line 119 "lapi.c"
      var $30=(($29)|0); //@line 119 "lapi.c"
      var $31=$o2; //@line 119 "lapi.c"
      var $32=(($31)|0); //@line 119 "lapi.c"
      var $33=$30; //@line 119 "lapi.c"
      var $34=$32; //@line 119 "lapi.c"
      HEAP32[(($33)>>2)]=HEAP32[(($34)>>2)];HEAP32[((($33)+(4))>>2)]=HEAP32[((($34)+(4))>>2)]; //@line 119 "lapi.c"
      var $35=$o2; //@line 119 "lapi.c"
      var $36=(($35+8)|0); //@line 119 "lapi.c"
      var $37=HEAP32[(($36)>>2)]; //@line 119 "lapi.c"
      var $38=$o1; //@line 119 "lapi.c"
      var $39=(($38+8)|0); //@line 119 "lapi.c"
      HEAP32[(($39)>>2)]=$37; //@line 119 "lapi.c"
      __label__ = 7; break; //@line 120 "lapi.c"
    case 7: 
      var $41=$i; //@line 118 "lapi.c"
      var $42=((($41)+(1))|0); //@line 118 "lapi.c"
      $i=$42; //@line 118 "lapi.c"
      __label__ = 5; break; //@line 118 "lapi.c"
    case 8: 
      ;
      return; //@line 122 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_xmove["X"]=1;

function _lua_newthread($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L1;
      var $i_o;
      $1=$L;
      var $2=$1; //@line 143 "lapi.c"
      var $3=(($2+16)|0); //@line 143 "lapi.c"
      var $4=HEAP32[(($3)>>2)]; //@line 143 "lapi.c"
      var $5=(($4+68)|0); //@line 143 "lapi.c"
      var $6=HEAPU32[(($5)>>2)]; //@line 143 "lapi.c"
      var $7=$1; //@line 143 "lapi.c"
      var $8=(($7+16)|0); //@line 143 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 143 "lapi.c"
      var $10=(($9+64)|0); //@line 143 "lapi.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 143 "lapi.c"
      var $12=(($6)>>>0) >= (($11)>>>0); //@line 143 "lapi.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 143 "lapi.c"
    case 3: 
      var $14=$1; //@line 143 "lapi.c"
      __Z9luaC_stepP9lua_State($14); //@line 143 "lapi.c"
      __label__ = 4; break; //@line 143 "lapi.c"
    case 4: 
      var $16=$1; //@line 144 "lapi.c"
      var $17=__Z14luaE_newthreadP9lua_State($16); //@line 144 "lapi.c"
      $L1=$17; //@line 144 "lapi.c"
      var $18=$1; //@line 145 "lapi.c"
      var $19=(($18+8)|0); //@line 145 "lapi.c"
      var $20=HEAP32[(($19)>>2)]; //@line 145 "lapi.c"
      $i_o=$20; //@line 145 "lapi.c"
      var $21=$L1; //@line 145 "lapi.c"
      var $22=$21; //@line 145 "lapi.c"
      var $23=$i_o; //@line 145 "lapi.c"
      var $24=(($23)|0); //@line 145 "lapi.c"
      var $25=$24; //@line 145 "lapi.c"
      HEAP32[(($25)>>2)]=$22; //@line 145 "lapi.c"
      var $26=$i_o; //@line 145 "lapi.c"
      var $27=(($26+8)|0); //@line 145 "lapi.c"
      HEAP32[(($27)>>2)]=8; //@line 145 "lapi.c"
      var $28=$1; //@line 146 "lapi.c"
      var $29=(($28+8)|0); //@line 146 "lapi.c"
      var $30=HEAP32[(($29)>>2)]; //@line 146 "lapi.c"
      var $31=(($30+12)|0); //@line 146 "lapi.c"
      HEAP32[(($29)>>2)]=$31; //@line 146 "lapi.c"
      var $32=$L1; //@line 149 "lapi.c"
      ;
      return $32; //@line 149 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_remove($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 183 "lapi.c"
      var $4=$2; //@line 183 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 183 "lapi.c"
      $p=$5; //@line 183 "lapi.c"
      __label__ = 3; break; //@line 185 "lapi.c"
    case 3: 
      var $7=$p; //@line 185 "lapi.c"
      var $8=(($7+12)|0); //@line 185 "lapi.c"
      $p=$8; //@line 185 "lapi.c"
      var $9=$1; //@line 185 "lapi.c"
      var $10=(($9+8)|0); //@line 185 "lapi.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 185 "lapi.c"
      var $12=(($8)>>>0) < (($11)>>>0); //@line 185 "lapi.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 185 "lapi.c"
    case 4: 
      var $14=$p; //@line 185 "lapi.c"
      $o2=$14; //@line 185 "lapi.c"
      var $15=$p; //@line 185 "lapi.c"
      var $16=((($15)-(12))|0); //@line 185 "lapi.c"
      $o1=$16; //@line 185 "lapi.c"
      var $17=$o1; //@line 185 "lapi.c"
      var $18=(($17)|0); //@line 185 "lapi.c"
      var $19=$o2; //@line 185 "lapi.c"
      var $20=(($19)|0); //@line 185 "lapi.c"
      var $21=$18; //@line 185 "lapi.c"
      var $22=$20; //@line 185 "lapi.c"
      HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)]; //@line 185 "lapi.c"
      var $23=$o2; //@line 185 "lapi.c"
      var $24=(($23+8)|0); //@line 185 "lapi.c"
      var $25=HEAP32[(($24)>>2)]; //@line 185 "lapi.c"
      var $26=$o1; //@line 185 "lapi.c"
      var $27=(($26+8)|0); //@line 185 "lapi.c"
      HEAP32[(($27)>>2)]=$25; //@line 185 "lapi.c"
      __label__ = 3; break; //@line 185 "lapi.c"
    case 5: 
      var $29=$1; //@line 186 "lapi.c"
      var $30=(($29+8)|0); //@line 186 "lapi.c"
      var $31=HEAP32[(($30)>>2)]; //@line 186 "lapi.c"
      var $32=((($31)-(12))|0); //@line 186 "lapi.c"
      HEAP32[(($30)>>2)]=$32; //@line 186 "lapi.c"
      ;
      return; //@line 188 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_insert($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $p;
      var $q;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 195 "lapi.c"
      var $4=$2; //@line 195 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 195 "lapi.c"
      $p=$5; //@line 195 "lapi.c"
      var $6=$1; //@line 197 "lapi.c"
      var $7=(($6+8)|0); //@line 197 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 197 "lapi.c"
      $q=$8; //@line 197 "lapi.c"
      __label__ = 3; break; //@line 197 "lapi.c"
    case 3: 
      var $10=$q; //@line 197 "lapi.c"
      var $11=$p; //@line 197 "lapi.c"
      var $12=(($10)>>>0) > (($11)>>>0); //@line 197 "lapi.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 197 "lapi.c"
    case 4: 
      var $14=$q; //@line 197 "lapi.c"
      var $15=((($14)-(12))|0); //@line 197 "lapi.c"
      $o2=$15; //@line 197 "lapi.c"
      var $16=$q; //@line 197 "lapi.c"
      $o1=$16; //@line 197 "lapi.c"
      var $17=$o1; //@line 197 "lapi.c"
      var $18=(($17)|0); //@line 197 "lapi.c"
      var $19=$o2; //@line 197 "lapi.c"
      var $20=(($19)|0); //@line 197 "lapi.c"
      var $21=$18; //@line 197 "lapi.c"
      var $22=$20; //@line 197 "lapi.c"
      HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)]; //@line 197 "lapi.c"
      var $23=$o2; //@line 197 "lapi.c"
      var $24=(($23+8)|0); //@line 197 "lapi.c"
      var $25=HEAP32[(($24)>>2)]; //@line 197 "lapi.c"
      var $26=$o1; //@line 197 "lapi.c"
      var $27=(($26+8)|0); //@line 197 "lapi.c"
      HEAP32[(($27)>>2)]=$25; //@line 197 "lapi.c"
      __label__ = 5; break; //@line 197 "lapi.c"
    case 5: 
      var $29=$q; //@line 197 "lapi.c"
      var $30=((($29)-(12))|0); //@line 197 "lapi.c"
      $q=$30; //@line 197 "lapi.c"
      __label__ = 3; break; //@line 197 "lapi.c"
    case 6: 
      var $32=$1; //@line 198 "lapi.c"
      var $33=(($32+8)|0); //@line 198 "lapi.c"
      var $34=HEAP32[(($33)>>2)]; //@line 198 "lapi.c"
      $o21=$34; //@line 198 "lapi.c"
      var $35=$p; //@line 198 "lapi.c"
      $o12=$35; //@line 198 "lapi.c"
      var $36=$o12; //@line 198 "lapi.c"
      var $37=(($36)|0); //@line 198 "lapi.c"
      var $38=$o21; //@line 198 "lapi.c"
      var $39=(($38)|0); //@line 198 "lapi.c"
      var $40=$37; //@line 198 "lapi.c"
      var $41=$39; //@line 198 "lapi.c"
      HEAP32[(($40)>>2)]=HEAP32[(($41)>>2)];HEAP32[((($40)+(4))>>2)]=HEAP32[((($41)+(4))>>2)]; //@line 198 "lapi.c"
      var $42=$o21; //@line 198 "lapi.c"
      var $43=(($42+8)|0); //@line 198 "lapi.c"
      var $44=HEAP32[(($43)>>2)]; //@line 198 "lapi.c"
      var $45=$o12; //@line 198 "lapi.c"
      var $46=(($45+8)|0); //@line 198 "lapi.c"
      HEAP32[(($46)>>2)]=$44; //@line 198 "lapi.c"
      ;
      return; //@line 200 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_insert["X"]=1;

function _lua_replace($L, $idx) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $func;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$2; //@line 207 "lapi.c"
      var $4=(($3)|0)==-10001; //@line 207 "lapi.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 207 "lapi.c"
    case 3: 
      var $6=$1; //@line 207 "lapi.c"
      var $7=(($6+20)|0); //@line 207 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 207 "lapi.c"
      var $9=$1; //@line 207 "lapi.c"
      var $10=(($9+40)|0); //@line 207 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 207 "lapi.c"
      var $12=(($8)|0)==(($11)|0); //@line 207 "lapi.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 207 "lapi.c"
    case 4: 
      var $14=$1; //@line 208 "lapi.c"
      __Z13luaG_runerrorP9lua_StatePKcz($14, ((STRING_TABLE.__str)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 208 "lapi.c"
      __label__ = 5; break; //@line 208 "lapi.c"
    case 5: 
      var $16=$1; //@line 210 "lapi.c"
      var $17=$2; //@line 210 "lapi.c"
      var $18=__Z9index2adrP9lua_Statei($16, $17); //@line 210 "lapi.c"
      $o=$18; //@line 210 "lapi.c"
      var $19=$2; //@line 212 "lapi.c"
      var $20=(($19)|0)==-10001; //@line 212 "lapi.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 212 "lapi.c"
    case 6: 
      var $22=$1; //@line 213 "lapi.c"
      var $23=(($22+20)|0); //@line 213 "lapi.c"
      var $24=HEAP32[(($23)>>2)]; //@line 213 "lapi.c"
      var $25=(($24+4)|0); //@line 213 "lapi.c"
      var $26=HEAP32[(($25)>>2)]; //@line 213 "lapi.c"
      var $27=(($26)|0); //@line 213 "lapi.c"
      var $28=$27; //@line 213 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 213 "lapi.c"
      var $30=$29; //@line 213 "lapi.c"
      $func=$30; //@line 213 "lapi.c"
      var $31=$1; //@line 215 "lapi.c"
      var $32=(($31+8)|0); //@line 215 "lapi.c"
      var $33=HEAP32[(($32)>>2)]; //@line 215 "lapi.c"
      var $34=((($33)-(12))|0); //@line 215 "lapi.c"
      var $35=(($34)|0); //@line 215 "lapi.c"
      var $36=$35; //@line 215 "lapi.c"
      var $37=HEAP32[(($36)>>2)]; //@line 215 "lapi.c"
      var $38=$37; //@line 215 "lapi.c"
      var $39=$func; //@line 215 "lapi.c"
      var $40=$39; //@line 215 "lapi.c"
      var $41=(($40+12)|0); //@line 215 "lapi.c"
      HEAP32[(($41)>>2)]=$38; //@line 215 "lapi.c"
      var $42=$1; //@line 216 "lapi.c"
      var $43=(($42+8)|0); //@line 216 "lapi.c"
      var $44=HEAP32[(($43)>>2)]; //@line 216 "lapi.c"
      var $45=((($44)-(12))|0); //@line 216 "lapi.c"
      var $46=(($45+8)|0); //@line 216 "lapi.c"
      var $47=HEAP32[(($46)>>2)]; //@line 216 "lapi.c"
      var $48=(($47)|0) >= 4; //@line 216 "lapi.c"
      if ($48) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 216 "lapi.c"
    case 7: 
      var $50=$1; //@line 216 "lapi.c"
      var $51=(($50+8)|0); //@line 216 "lapi.c"
      var $52=HEAP32[(($51)>>2)]; //@line 216 "lapi.c"
      var $53=((($52)-(12))|0); //@line 216 "lapi.c"
      var $54=(($53)|0); //@line 216 "lapi.c"
      var $55=$54; //@line 216 "lapi.c"
      var $56=HEAP32[(($55)>>2)]; //@line 216 "lapi.c"
      var $57=$56; //@line 216 "lapi.c"
      var $58=(($57+5)|0); //@line 216 "lapi.c"
      var $59=HEAPU8[($58)]; //@line 216 "lapi.c"
      var $60=(($59)&255); //@line 216 "lapi.c"
      var $61=$60 & 3; //@line 216 "lapi.c"
      var $62=(($61)|0)!=0; //@line 216 "lapi.c"
      if ($62) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 216 "lapi.c"
    case 8: 
      var $64=$func; //@line 216 "lapi.c"
      var $65=$64; //@line 216 "lapi.c"
      var $66=$65; //@line 216 "lapi.c"
      var $67=(($66+5)|0); //@line 216 "lapi.c"
      var $68=HEAPU8[($67)]; //@line 216 "lapi.c"
      var $69=(($68)&255); //@line 216 "lapi.c"
      var $70=$69 & 4; //@line 216 "lapi.c"
      var $71=(($70)|0)!=0; //@line 216 "lapi.c"
      if ($71) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 216 "lapi.c"
    case 9: 
      var $73=$1; //@line 216 "lapi.c"
      var $74=$func; //@line 216 "lapi.c"
      var $75=$74; //@line 216 "lapi.c"
      var $76=$1; //@line 216 "lapi.c"
      var $77=(($76+8)|0); //@line 216 "lapi.c"
      var $78=HEAP32[(($77)>>2)]; //@line 216 "lapi.c"
      var $79=((($78)-(12))|0); //@line 216 "lapi.c"
      var $80=(($79)|0); //@line 216 "lapi.c"
      var $81=$80; //@line 216 "lapi.c"
      var $82=HEAP32[(($81)>>2)]; //@line 216 "lapi.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($73, $75, $82); //@line 216 "lapi.c"
      __label__ = 10; break; //@line 216 "lapi.c"
    case 10: 
      __label__ = 18; break; //@line 217 "lapi.c"
    case 11: 
      var $85=$1; //@line 219 "lapi.c"
      var $86=(($85+8)|0); //@line 219 "lapi.c"
      var $87=HEAP32[(($86)>>2)]; //@line 219 "lapi.c"
      var $88=((($87)-(12))|0); //@line 219 "lapi.c"
      $o2=$88; //@line 219 "lapi.c"
      var $89=$o; //@line 219 "lapi.c"
      $o1=$89; //@line 219 "lapi.c"
      var $90=$o1; //@line 219 "lapi.c"
      var $91=(($90)|0); //@line 219 "lapi.c"
      var $92=$o2; //@line 219 "lapi.c"
      var $93=(($92)|0); //@line 219 "lapi.c"
      var $94=$91; //@line 219 "lapi.c"
      var $95=$93; //@line 219 "lapi.c"
      HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)]; //@line 219 "lapi.c"
      var $96=$o2; //@line 219 "lapi.c"
      var $97=(($96+8)|0); //@line 219 "lapi.c"
      var $98=HEAP32[(($97)>>2)]; //@line 219 "lapi.c"
      var $99=$o1; //@line 219 "lapi.c"
      var $100=(($99+8)|0); //@line 219 "lapi.c"
      HEAP32[(($100)>>2)]=$98; //@line 219 "lapi.c"
      var $101=$2; //@line 220 "lapi.c"
      var $102=(($101)|0) < -10002; //@line 220 "lapi.c"
      if ($102) { __label__ = 12; break; } else { __label__ = 17; break; } //@line 220 "lapi.c"
    case 12: 
      var $104=$1; //@line 221 "lapi.c"
      var $105=(($104+8)|0); //@line 221 "lapi.c"
      var $106=HEAP32[(($105)>>2)]; //@line 221 "lapi.c"
      var $107=((($106)-(12))|0); //@line 221 "lapi.c"
      var $108=(($107+8)|0); //@line 221 "lapi.c"
      var $109=HEAP32[(($108)>>2)]; //@line 221 "lapi.c"
      var $110=(($109)|0) >= 4; //@line 221 "lapi.c"
      if ($110) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 221 "lapi.c"
    case 13: 
      var $112=$1; //@line 221 "lapi.c"
      var $113=(($112+8)|0); //@line 221 "lapi.c"
      var $114=HEAP32[(($113)>>2)]; //@line 221 "lapi.c"
      var $115=((($114)-(12))|0); //@line 221 "lapi.c"
      var $116=(($115)|0); //@line 221 "lapi.c"
      var $117=$116; //@line 221 "lapi.c"
      var $118=HEAP32[(($117)>>2)]; //@line 221 "lapi.c"
      var $119=$118; //@line 221 "lapi.c"
      var $120=(($119+5)|0); //@line 221 "lapi.c"
      var $121=HEAPU8[($120)]; //@line 221 "lapi.c"
      var $122=(($121)&255); //@line 221 "lapi.c"
      var $123=$122 & 3; //@line 221 "lapi.c"
      var $124=(($123)|0)!=0; //@line 221 "lapi.c"
      if ($124) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 221 "lapi.c"
    case 14: 
      var $126=$1; //@line 221 "lapi.c"
      var $127=(($126+20)|0); //@line 221 "lapi.c"
      var $128=HEAP32[(($127)>>2)]; //@line 221 "lapi.c"
      var $129=(($128+4)|0); //@line 221 "lapi.c"
      var $130=HEAP32[(($129)>>2)]; //@line 221 "lapi.c"
      var $131=(($130)|0); //@line 221 "lapi.c"
      var $132=$131; //@line 221 "lapi.c"
      var $133=HEAP32[(($132)>>2)]; //@line 221 "lapi.c"
      var $134=$133; //@line 221 "lapi.c"
      var $135=$134; //@line 221 "lapi.c"
      var $136=$135; //@line 221 "lapi.c"
      var $137=(($136+5)|0); //@line 221 "lapi.c"
      var $138=HEAPU8[($137)]; //@line 221 "lapi.c"
      var $139=(($138)&255); //@line 221 "lapi.c"
      var $140=$139 & 4; //@line 221 "lapi.c"
      var $141=(($140)|0)!=0; //@line 221 "lapi.c"
      if ($141) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 221 "lapi.c"
    case 15: 
      var $143=$1; //@line 221 "lapi.c"
      var $144=$1; //@line 221 "lapi.c"
      var $145=(($144+20)|0); //@line 221 "lapi.c"
      var $146=HEAP32[(($145)>>2)]; //@line 221 "lapi.c"
      var $147=(($146+4)|0); //@line 221 "lapi.c"
      var $148=HEAP32[(($147)>>2)]; //@line 221 "lapi.c"
      var $149=(($148)|0); //@line 221 "lapi.c"
      var $150=$149; //@line 221 "lapi.c"
      var $151=HEAP32[(($150)>>2)]; //@line 221 "lapi.c"
      var $152=$151; //@line 221 "lapi.c"
      var $153=$152; //@line 221 "lapi.c"
      var $154=$1; //@line 221 "lapi.c"
      var $155=(($154+8)|0); //@line 221 "lapi.c"
      var $156=HEAP32[(($155)>>2)]; //@line 221 "lapi.c"
      var $157=((($156)-(12))|0); //@line 221 "lapi.c"
      var $158=(($157)|0); //@line 221 "lapi.c"
      var $159=$158; //@line 221 "lapi.c"
      var $160=HEAP32[(($159)>>2)]; //@line 221 "lapi.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($143, $153, $160); //@line 221 "lapi.c"
      __label__ = 16; break; //@line 221 "lapi.c"
    case 16: 
      __label__ = 17; break; //@line 221 "lapi.c"
    case 17: 
      __label__ = 18; break; //@line 222 "lapi.c"
    case 18: 
      var $164=$1; //@line 223 "lapi.c"
      var $165=(($164+8)|0); //@line 223 "lapi.c"
      var $166=HEAP32[(($165)>>2)]; //@line 223 "lapi.c"
      var $167=((($166)-(12))|0); //@line 223 "lapi.c"
      HEAP32[(($165)>>2)]=$167; //@line 223 "lapi.c"
      STACKTOP = __stackBase__;
      return; //@line 225 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_replace["X"]=1;

function _lua_pushvalue($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $o2;
  var $o1;
  $1=$L;
  $2=$idx;
  var $3=$1; //@line 230 "lapi.c"
  var $4=$2; //@line 230 "lapi.c"
  var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 230 "lapi.c"
  $o2=$5; //@line 230 "lapi.c"
  var $6=$1; //@line 230 "lapi.c"
  var $7=(($6+8)|0); //@line 230 "lapi.c"
  var $8=HEAP32[(($7)>>2)]; //@line 230 "lapi.c"
  $o1=$8; //@line 230 "lapi.c"
  var $9=$o1; //@line 230 "lapi.c"
  var $10=(($9)|0); //@line 230 "lapi.c"
  var $11=$o2; //@line 230 "lapi.c"
  var $12=(($11)|0); //@line 230 "lapi.c"
  var $13=$10; //@line 230 "lapi.c"
  var $14=$12; //@line 230 "lapi.c"
  HEAP32[(($13)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($13)+(4))>>2)]=HEAP32[((($14)+(4))>>2)]; //@line 230 "lapi.c"
  var $15=$o2; //@line 230 "lapi.c"
  var $16=(($15+8)|0); //@line 230 "lapi.c"
  var $17=HEAP32[(($16)>>2)]; //@line 230 "lapi.c"
  var $18=$o1; //@line 230 "lapi.c"
  var $19=(($18+8)|0); //@line 230 "lapi.c"
  HEAP32[(($19)>>2)]=$17; //@line 230 "lapi.c"
  var $20=$1; //@line 231 "lapi.c"
  var $21=(($20+8)|0); //@line 231 "lapi.c"
  var $22=HEAP32[(($21)>>2)]; //@line 231 "lapi.c"
  var $23=(($22+12)|0); //@line 231 "lapi.c"
  HEAP32[(($21)>>2)]=$23; //@line 231 "lapi.c"
  ;
  return; //@line 233 "lapi.c"
}


function _lua_type($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 243 "lapi.c"
      var $4=$2; //@line 243 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 243 "lapi.c"
      $o=$5; //@line 243 "lapi.c"
      var $6=$o; //@line 244 "lapi.c"
      var $7=(($6)|0)==((_luaO_nilobject_)|0); //@line 244 "lapi.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 244 "lapi.c"
    case 3: 
      var $14 = -1;__label__ = 5; break; //@line 244 "lapi.c"
    case 4: 
      var $10=$o; //@line 244 "lapi.c"
      var $11=(($10+8)|0); //@line 244 "lapi.c"
      var $12=HEAP32[(($11)>>2)]; //@line 244 "lapi.c"
      var $14 = $12;__label__ = 5; break; //@line 244 "lapi.c"
    case 5: 
      var $14; //@line 244 "lapi.c"
      ;
      return $14; //@line 244 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushnil($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 423 "lapi.c"
  var $3=(($2+8)|0); //@line 423 "lapi.c"
  var $4=HEAP32[(($3)>>2)]; //@line 423 "lapi.c"
  var $5=(($4+8)|0); //@line 423 "lapi.c"
  HEAP32[(($5)>>2)]=0; //@line 423 "lapi.c"
  var $6=$1; //@line 424 "lapi.c"
  var $7=(($6+8)|0); //@line 424 "lapi.c"
  var $8=HEAP32[(($7)>>2)]; //@line 424 "lapi.c"
  var $9=(($8+12)|0); //@line 424 "lapi.c"
  HEAP32[(($7)>>2)]=$9; //@line 424 "lapi.c"
  ;
  return; //@line 426 "lapi.c"
}


function _lua_pushnumber($L, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$n;
  var $3=$1; //@line 431 "lapi.c"
  var $4=(($3+8)|0); //@line 431 "lapi.c"
  var $5=HEAP32[(($4)>>2)]; //@line 431 "lapi.c"
  $i_o=$5; //@line 431 "lapi.c"
  var $6=$2; //@line 431 "lapi.c"
  var $7=$i_o; //@line 431 "lapi.c"
  var $8=(($7)|0); //@line 431 "lapi.c"
  var $9=$8; //@line 431 "lapi.c"
  (tempDoubleF64[0]=$6,HEAP32[(($9)>>2)]=tempDoubleI32[0],HEAP32[((($9)+(4))>>2)]=tempDoubleI32[1]); //@line 431 "lapi.c"
  var $10=$i_o; //@line 431 "lapi.c"
  var $11=(($10+8)|0); //@line 431 "lapi.c"
  HEAP32[(($11)>>2)]=3; //@line 431 "lapi.c"
  var $12=$1; //@line 432 "lapi.c"
  var $13=(($12+8)|0); //@line 432 "lapi.c"
  var $14=HEAP32[(($13)>>2)]; //@line 432 "lapi.c"
  var $15=(($14+12)|0); //@line 432 "lapi.c"
  HEAP32[(($13)>>2)]=$15; //@line 432 "lapi.c"
  ;
  return; //@line 434 "lapi.c"
}


function _lua_pushinteger($L, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$n;
  var $3=$1; //@line 439 "lapi.c"
  var $4=(($3+8)|0); //@line 439 "lapi.c"
  var $5=HEAP32[(($4)>>2)]; //@line 439 "lapi.c"
  $i_o=$5; //@line 439 "lapi.c"
  var $6=$2; //@line 439 "lapi.c"
  var $7=(($6)|0); //@line 439 "lapi.c"
  var $8=$i_o; //@line 439 "lapi.c"
  var $9=(($8)|0); //@line 439 "lapi.c"
  var $10=$9; //@line 439 "lapi.c"
  (tempDoubleF64[0]=$7,HEAP32[(($10)>>2)]=tempDoubleI32[0],HEAP32[((($10)+(4))>>2)]=tempDoubleI32[1]); //@line 439 "lapi.c"
  var $11=$i_o; //@line 439 "lapi.c"
  var $12=(($11+8)|0); //@line 439 "lapi.c"
  HEAP32[(($12)>>2)]=3; //@line 439 "lapi.c"
  var $13=$1; //@line 440 "lapi.c"
  var $14=(($13+8)|0); //@line 440 "lapi.c"
  var $15=HEAP32[(($14)>>2)]; //@line 440 "lapi.c"
  var $16=(($15+12)|0); //@line 440 "lapi.c"
  HEAP32[(($14)>>2)]=$16; //@line 440 "lapi.c"
  ;
  return; //@line 442 "lapi.c"
}


function _lua_iscfunction($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 255 "lapi.c"
      var $4=$2; //@line 255 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 255 "lapi.c"
      $o=$5; //@line 255 "lapi.c"
      var $6=$o; //@line 256 "lapi.c"
      var $7=(($6+8)|0); //@line 256 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 256 "lapi.c"
      var $9=(($8)|0)==6; //@line 256 "lapi.c"
      if ($9) { __label__ = 3; break; } else { var $21 = 0;__label__ = 4; break; } //@line 256 "lapi.c"
    case 3: 
      var $11=$o; //@line 256 "lapi.c"
      var $12=(($11)|0); //@line 256 "lapi.c"
      var $13=$12; //@line 256 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 256 "lapi.c"
      var $15=$14; //@line 256 "lapi.c"
      var $16=$15; //@line 256 "lapi.c"
      var $17=(($16+6)|0); //@line 256 "lapi.c"
      var $18=HEAP8[($17)]; //@line 256 "lapi.c"
      var $19=(($18 << 24) >> 24)!=0; //@line 256 "lapi.c"
      var $21 = $19;__label__ = 4; break; //@line 256 "lapi.c"
    case 4: 
      var $21;
      var $22=(($21)&1); //@line 256 "lapi.c"
      ;
      return $22; //@line 256 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_isnumber($L, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n=__stackBase__;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 262 "lapi.c"
      var $4=$2; //@line 262 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 262 "lapi.c"
      $o=$5; //@line 262 "lapi.c"
      var $6=$o; //@line 263 "lapi.c"
      var $7=(($6+8)|0); //@line 263 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 263 "lapi.c"
      var $9=(($8)|0)==3; //@line 263 "lapi.c"
      if ($9) { var $15 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 263 "lapi.c"
    case 3: 
      var $11=$o; //@line 263 "lapi.c"
      var $12=__Z13luaV_tonumberPK10lua_TValuePS_($11, $n); //@line 263 "lapi.c"
      $o=$12; //@line 263 "lapi.c"
      var $13=(($12)|0)!=0; //@line 263 "lapi.c"
      var $15 = $13;__label__ = 4; break; //@line 263 "lapi.c"
    case 4: 
      var $15;
      var $16=(($15)&1); //@line 263 "lapi.c"
      STACKTOP = __stackBase__;
      return $16; //@line 263 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_isstring($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 268 "lapi.c"
      var $4=$2; //@line 268 "lapi.c"
      var $5=_lua_type($3, $4); //@line 268 "lapi.c"
      $t=$5; //@line 268 "lapi.c"
      var $6=$t; //@line 269 "lapi.c"
      var $7=(($6)|0)==4; //@line 269 "lapi.c"
      if ($7) { var $12 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 269 "lapi.c"
    case 3: 
      var $9=$t; //@line 269 "lapi.c"
      var $10=(($9)|0)==3; //@line 269 "lapi.c"
      var $12 = $10;__label__ = 4; break; //@line 269 "lapi.c"
    case 4: 
      var $12;
      var $13=(($12)&1); //@line 269 "lapi.c"
      ;
      return $13; //@line 269 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_isuserdata($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 274 "lapi.c"
      var $4=$2; //@line 274 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 274 "lapi.c"
      $o=$5; //@line 274 "lapi.c"
      var $6=$o; //@line 275 "lapi.c"
      var $7=(($6+8)|0); //@line 275 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 275 "lapi.c"
      var $9=(($8)|0)==7; //@line 275 "lapi.c"
      if ($9) { var $16 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 275 "lapi.c"
    case 3: 
      var $11=$o; //@line 275 "lapi.c"
      var $12=(($11+8)|0); //@line 275 "lapi.c"
      var $13=HEAP32[(($12)>>2)]; //@line 275 "lapi.c"
      var $14=(($13)|0)==2; //@line 275 "lapi.c"
      var $16 = $14;__label__ = 4; break; //@line 275 "lapi.c"
    case 4: 
      var $16;
      var $17=(($16)&1); //@line 275 "lapi.c"
      ;
      return $17; //@line 275 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_rawequal($L, $index1, $index2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o1;
      var $o2;
      $1=$L;
      $2=$index1;
      $3=$index2;
      var $4=$1; //@line 280 "lapi.c"
      var $5=$2; //@line 280 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 280 "lapi.c"
      $o1=$6; //@line 280 "lapi.c"
      var $7=$1; //@line 281 "lapi.c"
      var $8=$3; //@line 281 "lapi.c"
      var $9=__Z9index2adrP9lua_Statei($7, $8); //@line 281 "lapi.c"
      $o2=$9; //@line 281 "lapi.c"
      var $10=$o1; //@line 282 "lapi.c"
      var $11=(($10)|0)==((_luaO_nilobject_)|0); //@line 282 "lapi.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 282 "lapi.c"
    case 3: 
      var $13=$o2; //@line 282 "lapi.c"
      var $14=(($13)|0)==((_luaO_nilobject_)|0); //@line 282 "lapi.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 282 "lapi.c"
    case 4: 
      var $21 = 0;__label__ = 6; break; //@line 282 "lapi.c"
    case 5: 
      var $17=$o1; //@line 283 "lapi.c"
      var $18=$o2; //@line 283 "lapi.c"
      var $19=__Z16luaO_rawequalObjPK10lua_TValueS1_($17, $18); //@line 283 "lapi.c"
      var $21 = $19;__label__ = 6; break; //@line 283 "lapi.c"
    case 6: 
      var $21; //@line 283 "lapi.c"
      ;
      return $21; //@line 283 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_equal($L, $index1, $index2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o1;
      var $o2;
      var $i;
      $1=$L;
      $2=$index1;
      $3=$index2;
      var $4=$1; //@line 291 "lapi.c"
      var $5=$2; //@line 291 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 291 "lapi.c"
      $o1=$6; //@line 291 "lapi.c"
      var $7=$1; //@line 292 "lapi.c"
      var $8=$3; //@line 292 "lapi.c"
      var $9=__Z9index2adrP9lua_Statei($7, $8); //@line 292 "lapi.c"
      $o2=$9; //@line 292 "lapi.c"
      var $10=$o1; //@line 293 "lapi.c"
      var $11=(($10)|0)==((_luaO_nilobject_)|0); //@line 293 "lapi.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 293 "lapi.c"
    case 3: 
      var $13=$o2; //@line 293 "lapi.c"
      var $14=(($13)|0)==((_luaO_nilobject_)|0); //@line 293 "lapi.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 293 "lapi.c"
    case 4: 
      var $34 = 0;__label__ = 8; break; //@line 293 "lapi.c"
    case 5: 
      var $17=$o1; //@line 293 "lapi.c"
      var $18=(($17+8)|0); //@line 293 "lapi.c"
      var $19=HEAP32[(($18)>>2)]; //@line 293 "lapi.c"
      var $20=$o2; //@line 293 "lapi.c"
      var $21=(($20+8)|0); //@line 293 "lapi.c"
      var $22=HEAP32[(($21)>>2)]; //@line 293 "lapi.c"
      var $23=(($19)|0)==(($22)|0); //@line 293 "lapi.c"
      if ($23) { __label__ = 6; break; } else { var $31 = 0;__label__ = 7; break; } //@line 293 "lapi.c"
    case 6: 
      var $25=$1; //@line 293 "lapi.c"
      var $26=$o1; //@line 293 "lapi.c"
      var $27=$o2; //@line 293 "lapi.c"
      var $28=__Z13luaV_equalvalP9lua_StatePK10lua_TValueS3_($25, $26, $27); //@line 293 "lapi.c"
      var $29=(($28)|0)!=0; //@line 293 "lapi.c"
      var $31 = $29;__label__ = 7; break; //@line 293 "lapi.c"
    case 7: 
      var $31;
      var $32=(($31)&1); //@line 293 "lapi.c"
      var $34 = $32;__label__ = 8; break; //@line 293 "lapi.c"
    case 8: 
      var $34; //@line 293 "lapi.c"
      $i=$34; //@line 293 "lapi.c"
      var $35=$i; //@line 295 "lapi.c"
      ;
      return $35; //@line 295 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_lessthan($L, $index1, $index2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o1;
      var $o2;
      var $i;
      $1=$L;
      $2=$index1;
      $3=$index2;
      var $4=$1; //@line 303 "lapi.c"
      var $5=$2; //@line 303 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 303 "lapi.c"
      $o1=$6; //@line 303 "lapi.c"
      var $7=$1; //@line 304 "lapi.c"
      var $8=$3; //@line 304 "lapi.c"
      var $9=__Z9index2adrP9lua_Statei($7, $8); //@line 304 "lapi.c"
      $o2=$9; //@line 304 "lapi.c"
      var $10=$o1; //@line 305 "lapi.c"
      var $11=(($10)|0)==((_luaO_nilobject_)|0); //@line 305 "lapi.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 305 "lapi.c"
    case 3: 
      var $13=$o2; //@line 305 "lapi.c"
      var $14=(($13)|0)==((_luaO_nilobject_)|0); //@line 305 "lapi.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 305 "lapi.c"
    case 4: 
      var $22 = 0;__label__ = 6; break; //@line 305 "lapi.c"
    case 5: 
      var $17=$1; //@line 306 "lapi.c"
      var $18=$o1; //@line 306 "lapi.c"
      var $19=$o2; //@line 306 "lapi.c"
      var $20=__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_($17, $18, $19); //@line 306 "lapi.c"
      var $22 = $20;__label__ = 6; break; //@line 306 "lapi.c"
    case 6: 
      var $22; //@line 306 "lapi.c"
      $i=$22; //@line 306 "lapi.c"
      var $23=$i; //@line 308 "lapi.c"
      ;
      return $23; //@line 308 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tonumber($L, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $o;
      $2=$L;
      $3=$idx;
      var $4=$2; //@line 315 "lapi.c"
      var $5=$3; //@line 315 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 315 "lapi.c"
      $o=$6; //@line 315 "lapi.c"
      var $7=$o; //@line 316 "lapi.c"
      var $8=(($7+8)|0); //@line 316 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 316 "lapi.c"
      var $10=(($9)|0)==3; //@line 316 "lapi.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 316 "lapi.c"
    case 3: 
      var $12=$o; //@line 316 "lapi.c"
      var $13=__Z13luaV_tonumberPK10lua_TValuePS_($12, $n); //@line 316 "lapi.c"
      $o=$13; //@line 316 "lapi.c"
      var $14=(($13)|0)!=0; //@line 316 "lapi.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 316 "lapi.c"
    case 4: 
      var $16=$o; //@line 317 "lapi.c"
      var $17=(($16)|0); //@line 317 "lapi.c"
      var $18=$17; //@line 317 "lapi.c"
      var $19=(tempDoubleI32[0]=HEAP32[(($18)>>2)],tempDoubleI32[1]=HEAP32[((($18)+(4))>>2)],tempDoubleF64[0]); //@line 317 "lapi.c"
      $1=$19; //@line 317 "lapi.c"
      __label__ = 6; break; //@line 317 "lapi.c"
    case 5: 
      $1=0; //@line 319 "lapi.c"
      __label__ = 6; break; //@line 319 "lapi.c"
    case 6: 
      var $22=$1; //@line 320 "lapi.c"
      STACKTOP = __stackBase__;
      return $22; //@line 320 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tointeger($L, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n=__stackBase__;
      var $o;
      var $res;
      var $num;
      $2=$L;
      $3=$idx;
      var $4=$2; //@line 325 "lapi.c"
      var $5=$3; //@line 325 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 325 "lapi.c"
      $o=$6; //@line 325 "lapi.c"
      var $7=$o; //@line 326 "lapi.c"
      var $8=(($7+8)|0); //@line 326 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 326 "lapi.c"
      var $10=(($9)|0)==3; //@line 326 "lapi.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 326 "lapi.c"
    case 3: 
      var $12=$o; //@line 326 "lapi.c"
      var $13=__Z13luaV_tonumberPK10lua_TValuePS_($12, $n); //@line 326 "lapi.c"
      $o=$13; //@line 326 "lapi.c"
      var $14=(($13)|0)!=0; //@line 326 "lapi.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 326 "lapi.c"
    case 4: 
      var $16=$o; //@line 328 "lapi.c"
      var $17=(($16)|0); //@line 328 "lapi.c"
      var $18=$17; //@line 328 "lapi.c"
      var $19=(tempDoubleI32[0]=HEAP32[(($18)>>2)],tempDoubleI32[1]=HEAP32[((($18)+(4))>>2)],tempDoubleF64[0]); //@line 328 "lapi.c"
      $num=$19; //@line 328 "lapi.c"
      var $20=$num; //@line 329 "lapi.c"
      var $21=(($20)&-1); //@line 329 "lapi.c"
      $res=$21; //@line 329 "lapi.c"
      var $22=$res; //@line 330 "lapi.c"
      $1=$22; //@line 330 "lapi.c"
      __label__ = 6; break; //@line 330 "lapi.c"
    case 5: 
      $1=0; //@line 333 "lapi.c"
      __label__ = 6; break; //@line 333 "lapi.c"
    case 6: 
      var $25=$1; //@line 334 "lapi.c"
      STACKTOP = __stackBase__;
      return $25; //@line 334 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_toboolean($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 338 "lapi.c"
      var $4=$2; //@line 338 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 338 "lapi.c"
      $o=$5; //@line 338 "lapi.c"
      var $6=$o; //@line 339 "lapi.c"
      var $7=(($6+8)|0); //@line 339 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 339 "lapi.c"
      var $9=(($8)|0)==0; //@line 339 "lapi.c"
      if ($9) { var $24 = 1;__label__ = 6; break; } else { __label__ = 3; break; } //@line 339 "lapi.c"
    case 3: 
      var $11=$o; //@line 339 "lapi.c"
      var $12=(($11+8)|0); //@line 339 "lapi.c"
      var $13=HEAP32[(($12)>>2)]; //@line 339 "lapi.c"
      var $14=(($13)|0)==1; //@line 339 "lapi.c"
      if ($14) { __label__ = 4; break; } else { var $22 = 0;__label__ = 5; break; } //@line 339 "lapi.c"
    case 4: 
      var $16=$o; //@line 339 "lapi.c"
      var $17=(($16)|0); //@line 339 "lapi.c"
      var $18=$17; //@line 339 "lapi.c"
      var $19=HEAP32[(($18)>>2)]; //@line 339 "lapi.c"
      var $20=(($19)|0)==0; //@line 339 "lapi.c"
      var $22 = $20;__label__ = 5; break; //@line 339 "lapi.c"
    case 5: 
      var $22;
      var $24 = $22;__label__ = 6; break; //@line 339 "lapi.c"
    case 6: 
      var $24;
      var $25=$24 ^ 1; //@line 339 "lapi.c"
      var $26=(($25)&1); //@line 339 "lapi.c"
      ;
      return $26; //@line 339 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tolstring($L, $idx, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o;
      $2=$L;
      $3=$idx;
      $4=$len;
      var $5=$2; //@line 344 "lapi.c"
      var $6=$3; //@line 344 "lapi.c"
      var $7=__Z9index2adrP9lua_Statei($5, $6); //@line 344 "lapi.c"
      $o=$7; //@line 344 "lapi.c"
      var $8=$o; //@line 345 "lapi.c"
      var $9=(($8+8)|0); //@line 345 "lapi.c"
      var $10=HEAP32[(($9)>>2)]; //@line 345 "lapi.c"
      var $11=(($10)|0)==4; //@line 345 "lapi.c"
      if ($11) { __label__ = 10; break; } else { __label__ = 3; break; } //@line 345 "lapi.c"
    case 3: 
      var $13=$2; //@line 347 "lapi.c"
      var $14=$o; //@line 347 "lapi.c"
      var $15=__Z13luaV_tostringP9lua_StateP10lua_TValue($13, $14); //@line 347 "lapi.c"
      var $16=(($15)|0)!=0; //@line 347 "lapi.c"
      if ($16) { __label__ = 7; break; } else { __label__ = 4; break; } //@line 347 "lapi.c"
    case 4: 
      var $18=$4; //@line 348 "lapi.c"
      var $19=(($18)|0)!=0; //@line 348 "lapi.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 348 "lapi.c"
    case 5: 
      var $21=$4; //@line 348 "lapi.c"
      HEAP32[(($21)>>2)]=0; //@line 348 "lapi.c"
      __label__ = 6; break; //@line 348 "lapi.c"
    case 6: 
      $1=0; //@line 350 "lapi.c"
      __label__ = 13; break; //@line 350 "lapi.c"
    case 7: 
      var $24=$2; //@line 352 "lapi.c"
      var $25=(($24+16)|0); //@line 352 "lapi.c"
      var $26=HEAP32[(($25)>>2)]; //@line 352 "lapi.c"
      var $27=(($26+68)|0); //@line 352 "lapi.c"
      var $28=HEAPU32[(($27)>>2)]; //@line 352 "lapi.c"
      var $29=$2; //@line 352 "lapi.c"
      var $30=(($29+16)|0); //@line 352 "lapi.c"
      var $31=HEAP32[(($30)>>2)]; //@line 352 "lapi.c"
      var $32=(($31+64)|0); //@line 352 "lapi.c"
      var $33=HEAPU32[(($32)>>2)]; //@line 352 "lapi.c"
      var $34=(($28)>>>0) >= (($33)>>>0); //@line 352 "lapi.c"
      if ($34) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 352 "lapi.c"
    case 8: 
      var $36=$2; //@line 352 "lapi.c"
      __Z9luaC_stepP9lua_State($36); //@line 352 "lapi.c"
      __label__ = 9; break; //@line 352 "lapi.c"
    case 9: 
      var $38=$2; //@line 353 "lapi.c"
      var $39=$3; //@line 353 "lapi.c"
      var $40=__Z9index2adrP9lua_Statei($38, $39); //@line 353 "lapi.c"
      $o=$40; //@line 353 "lapi.c"
      __label__ = 10; break; //@line 355 "lapi.c"
    case 10: 
      var $42=$4; //@line 356 "lapi.c"
      var $43=(($42)|0)!=0; //@line 356 "lapi.c"
      if ($43) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 356 "lapi.c"
    case 11: 
      var $45=$o; //@line 356 "lapi.c"
      var $46=(($45)|0); //@line 356 "lapi.c"
      var $47=$46; //@line 356 "lapi.c"
      var $48=HEAP32[(($47)>>2)]; //@line 356 "lapi.c"
      var $49=$48; //@line 356 "lapi.c"
      var $50=$49; //@line 356 "lapi.c"
      var $51=(($50+12)|0); //@line 356 "lapi.c"
      var $52=HEAP32[(($51)>>2)]; //@line 356 "lapi.c"
      var $53=$4; //@line 356 "lapi.c"
      HEAP32[(($53)>>2)]=$52; //@line 356 "lapi.c"
      __label__ = 12; break; //@line 356 "lapi.c"
    case 12: 
      var $55=$o; //@line 357 "lapi.c"
      var $56=(($55)|0); //@line 357 "lapi.c"
      var $57=$56; //@line 357 "lapi.c"
      var $58=HEAP32[(($57)>>2)]; //@line 357 "lapi.c"
      var $59=$58; //@line 357 "lapi.c"
      var $60=(($59+16)|0); //@line 357 "lapi.c"
      var $61=$60; //@line 357 "lapi.c"
      $1=$61; //@line 357 "lapi.c"
      __label__ = 13; break; //@line 357 "lapi.c"
    case 13: 
      var $63=$1; //@line 358 "lapi.c"
      ;
      return $63; //@line 358 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_tolstring["X"]=1;

function _lua_objlen($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $l;
      $2=$L;
      $3=$idx;
      var $4=$2; //@line 362 "lapi.c"
      var $5=$3; //@line 362 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 362 "lapi.c"
      $o=$6; //@line 362 "lapi.c"
      var $7=$o; //@line 363 "lapi.c"
      var $8=(($7+8)|0); //@line 363 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 363 "lapi.c"
      if ((($9)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 5) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 6; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 3: 
      var $11=$o; //@line 364 "lapi.c"
      var $12=(($11)|0); //@line 364 "lapi.c"
      var $13=$12; //@line 364 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 364 "lapi.c"
      var $15=$14; //@line 364 "lapi.c"
      var $16=$15; //@line 364 "lapi.c"
      var $17=(($16+12)|0); //@line 364 "lapi.c"
      var $18=HEAP32[(($17)>>2)]; //@line 364 "lapi.c"
      $1=$18; //@line 364 "lapi.c"
      __label__ = 11; break; //@line 364 "lapi.c"
    case 4: 
      var $20=$o; //@line 365 "lapi.c"
      var $21=(($20)|0); //@line 365 "lapi.c"
      var $22=$21; //@line 365 "lapi.c"
      var $23=HEAP32[(($22)>>2)]; //@line 365 "lapi.c"
      var $24=$23; //@line 365 "lapi.c"
      var $25=$24; //@line 365 "lapi.c"
      var $26=(($25+16)|0); //@line 365 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 365 "lapi.c"
      $1=$27; //@line 365 "lapi.c"
      __label__ = 11; break; //@line 365 "lapi.c"
    case 5: 
      var $29=$o; //@line 366 "lapi.c"
      var $30=(($29)|0); //@line 366 "lapi.c"
      var $31=$30; //@line 366 "lapi.c"
      var $32=HEAP32[(($31)>>2)]; //@line 366 "lapi.c"
      var $33=$32; //@line 366 "lapi.c"
      var $34=__Z9luaH_getnP5Table($33); //@line 366 "lapi.c"
      $1=$34; //@line 366 "lapi.c"
      __label__ = 11; break; //@line 366 "lapi.c"
    case 6: 
      var $36=$2; //@line 370 "lapi.c"
      var $37=$o; //@line 370 "lapi.c"
      var $38=__Z13luaV_tostringP9lua_StateP10lua_TValue($36, $37); //@line 370 "lapi.c"
      var $39=(($38)|0)!=0; //@line 370 "lapi.c"
      if ($39) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 370 "lapi.c"
    case 7: 
      var $41=$o; //@line 370 "lapi.c"
      var $42=(($41)|0); //@line 370 "lapi.c"
      var $43=$42; //@line 370 "lapi.c"
      var $44=HEAP32[(($43)>>2)]; //@line 370 "lapi.c"
      var $45=$44; //@line 370 "lapi.c"
      var $46=$45; //@line 370 "lapi.c"
      var $47=(($46+12)|0); //@line 370 "lapi.c"
      var $48=HEAP32[(($47)>>2)]; //@line 370 "lapi.c"
      var $51 = $48;__label__ = 9; break; //@line 370 "lapi.c"
    case 8: 
      var $51 = 0;__label__ = 9; break; //@line 370 "lapi.c"
    case 9: 
      var $51; //@line 370 "lapi.c"
      $l=$51; //@line 370 "lapi.c"
      var $52=$l; //@line 372 "lapi.c"
      $1=$52; //@line 372 "lapi.c"
      __label__ = 11; break; //@line 372 "lapi.c"
    case 10: 
      $1=0; //@line 374 "lapi.c"
      __label__ = 11; break; //@line 374 "lapi.c"
    case 11: 
      var $55=$1; //@line 376 "lapi.c"
      ;
      return $55; //@line 376 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_objlen["X"]=1;

function _lua_tocfunction($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 380 "lapi.c"
      var $4=$2; //@line 380 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 380 "lapi.c"
      $o=$5; //@line 380 "lapi.c"
      var $6=$o; //@line 381 "lapi.c"
      var $7=(($6+8)|0); //@line 381 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 381 "lapi.c"
      var $9=(($8)|0)==6; //@line 381 "lapi.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 381 "lapi.c"
    case 3: 
      var $11=$o; //@line 381 "lapi.c"
      var $12=(($11)|0); //@line 381 "lapi.c"
      var $13=$12; //@line 381 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 381 "lapi.c"
      var $15=$14; //@line 381 "lapi.c"
      var $16=$15; //@line 381 "lapi.c"
      var $17=(($16+6)|0); //@line 381 "lapi.c"
      var $18=HEAP8[($17)]; //@line 381 "lapi.c"
      var $19=(($18 << 24) >> 24)!=0; //@line 381 "lapi.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 381 "lapi.c"
    case 4: 
      var $31 = 0;__label__ = 6; break; //@line 381 "lapi.c"
    case 5: 
      var $22=$o; //@line 381 "lapi.c"
      var $23=(($22)|0); //@line 381 "lapi.c"
      var $24=$23; //@line 381 "lapi.c"
      var $25=HEAP32[(($24)>>2)]; //@line 381 "lapi.c"
      var $26=$25; //@line 381 "lapi.c"
      var $27=$26; //@line 381 "lapi.c"
      var $28=(($27+16)|0); //@line 381 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 381 "lapi.c"
      var $31 = $29;__label__ = 6; break; //@line 381 "lapi.c"
    case 6: 
      var $31; //@line 381 "lapi.c"
      ;
      return $31; //@line 381 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_touserdata($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      $2=$L;
      $3=$idx;
      var $4=$2; //@line 386 "lapi.c"
      var $5=$3; //@line 386 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 386 "lapi.c"
      $o=$6; //@line 386 "lapi.c"
      var $7=$o; //@line 387 "lapi.c"
      var $8=(($7+8)|0); //@line 387 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 387 "lapi.c"
      if ((($9)|0) == 7) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $11=$o; //@line 388 "lapi.c"
      var $12=(($11)|0); //@line 388 "lapi.c"
      var $13=$12; //@line 388 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 388 "lapi.c"
      var $15=$14; //@line 388 "lapi.c"
      var $16=(($15+20)|0); //@line 388 "lapi.c"
      var $17=$16; //@line 388 "lapi.c"
      $1=$17; //@line 388 "lapi.c"
      __label__ = 6; break; //@line 388 "lapi.c"
    case 4: 
      var $19=$o; //@line 389 "lapi.c"
      var $20=(($19)|0); //@line 389 "lapi.c"
      var $21=$20; //@line 389 "lapi.c"
      var $22=HEAP32[(($21)>>2)]; //@line 389 "lapi.c"
      $1=$22; //@line 389 "lapi.c"
      __label__ = 6; break; //@line 389 "lapi.c"
    case 5: 
      $1=0; //@line 390 "lapi.c"
      __label__ = 6; break; //@line 390 "lapi.c"
    case 6: 
      var $25=$1; //@line 392 "lapi.c"
      ;
      return $25; //@line 392 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_tothread($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 396 "lapi.c"
      var $4=$2; //@line 396 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 396 "lapi.c"
      $o=$5; //@line 396 "lapi.c"
      var $6=$o; //@line 397 "lapi.c"
      var $7=(($6+8)|0); //@line 397 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 397 "lapi.c"
      var $9=(($8)|0)==8; //@line 397 "lapi.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 397 "lapi.c"
    case 3: 
      var $18 = 0;__label__ = 5; break; //@line 397 "lapi.c"
    case 4: 
      var $12=$o; //@line 397 "lapi.c"
      var $13=(($12)|0); //@line 397 "lapi.c"
      var $14=$13; //@line 397 "lapi.c"
      var $15=HEAP32[(($14)>>2)]; //@line 397 "lapi.c"
      var $16=$15; //@line 397 "lapi.c"
      var $18 = $16;__label__ = 5; break; //@line 397 "lapi.c"
    case 5: 
      var $18; //@line 397 "lapi.c"
      ;
      return $18; //@line 397 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_topointer($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      $2=$L;
      $3=$idx;
      var $4=$2; //@line 402 "lapi.c"
      var $5=$3; //@line 402 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 402 "lapi.c"
      $o=$6; //@line 402 "lapi.c"
      var $7=$o; //@line 403 "lapi.c"
      var $8=(($7+8)|0); //@line 403 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 403 "lapi.c"
      if ((($9)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 6) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 8) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 7 || (($9)|0) == 2) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $11=$o; //@line 404 "lapi.c"
      var $12=(($11)|0); //@line 404 "lapi.c"
      var $13=$12; //@line 404 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 404 "lapi.c"
      var $15=$14; //@line 404 "lapi.c"
      var $16=$15; //@line 404 "lapi.c"
      $1=$16; //@line 404 "lapi.c"
      __label__ = 8; break; //@line 404 "lapi.c"
    case 4: 
      var $18=$o; //@line 405 "lapi.c"
      var $19=(($18)|0); //@line 405 "lapi.c"
      var $20=$19; //@line 405 "lapi.c"
      var $21=HEAP32[(($20)>>2)]; //@line 405 "lapi.c"
      var $22=$21; //@line 405 "lapi.c"
      var $23=$22; //@line 405 "lapi.c"
      $1=$23; //@line 405 "lapi.c"
      __label__ = 8; break; //@line 405 "lapi.c"
    case 5: 
      var $25=$o; //@line 406 "lapi.c"
      var $26=(($25)|0); //@line 406 "lapi.c"
      var $27=$26; //@line 406 "lapi.c"
      var $28=HEAP32[(($27)>>2)]; //@line 406 "lapi.c"
      var $29=$28; //@line 406 "lapi.c"
      var $30=$29; //@line 406 "lapi.c"
      $1=$30; //@line 406 "lapi.c"
      __label__ = 8; break; //@line 406 "lapi.c"
    case 6: 
      var $32=$2; //@line 409 "lapi.c"
      var $33=$3; //@line 409 "lapi.c"
      var $34=_lua_touserdata($32, $33); //@line 409 "lapi.c"
      $1=$34; //@line 409 "lapi.c"
      __label__ = 8; break; //@line 409 "lapi.c"
    case 7: 
      $1=0; //@line 410 "lapi.c"
      __label__ = 8; break; //@line 410 "lapi.c"
    case 8: 
      var $37=$1; //@line 412 "lapi.c"
      ;
      return $37; //@line 412 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushlstring($L, $s, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i_o;
      $1=$L;
      $2=$s;
      $3=$len;
      var $4=$1; //@line 447 "lapi.c"
      var $5=(($4+16)|0); //@line 447 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 447 "lapi.c"
      var $7=(($6+68)|0); //@line 447 "lapi.c"
      var $8=HEAPU32[(($7)>>2)]; //@line 447 "lapi.c"
      var $9=$1; //@line 447 "lapi.c"
      var $10=(($9+16)|0); //@line 447 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 447 "lapi.c"
      var $12=(($11+64)|0); //@line 447 "lapi.c"
      var $13=HEAPU32[(($12)>>2)]; //@line 447 "lapi.c"
      var $14=(($8)>>>0) >= (($13)>>>0); //@line 447 "lapi.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 447 "lapi.c"
    case 3: 
      var $16=$1; //@line 447 "lapi.c"
      __Z9luaC_stepP9lua_State($16); //@line 447 "lapi.c"
      __label__ = 4; break; //@line 447 "lapi.c"
    case 4: 
      var $18=$1; //@line 448 "lapi.c"
      var $19=(($18+8)|0); //@line 448 "lapi.c"
      var $20=HEAP32[(($19)>>2)]; //@line 448 "lapi.c"
      $i_o=$20; //@line 448 "lapi.c"
      var $21=$1; //@line 448 "lapi.c"
      var $22=$2; //@line 448 "lapi.c"
      var $23=$3; //@line 448 "lapi.c"
      var $24=__Z12luaS_newlstrP9lua_StatePKcj($21, $22, $23); //@line 448 "lapi.c"
      var $25=$24; //@line 448 "lapi.c"
      var $26=$i_o; //@line 448 "lapi.c"
      var $27=(($26)|0); //@line 448 "lapi.c"
      var $28=$27; //@line 448 "lapi.c"
      HEAP32[(($28)>>2)]=$25; //@line 448 "lapi.c"
      var $29=$i_o; //@line 448 "lapi.c"
      var $30=(($29+8)|0); //@line 448 "lapi.c"
      HEAP32[(($30)>>2)]=4; //@line 448 "lapi.c"
      var $31=$1; //@line 449 "lapi.c"
      var $32=(($31+8)|0); //@line 449 "lapi.c"
      var $33=HEAP32[(($32)>>2)]; //@line 449 "lapi.c"
      var $34=(($33+12)|0); //@line 449 "lapi.c"
      HEAP32[(($32)>>2)]=$34; //@line 449 "lapi.c"
      ;
      return; //@line 451 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushstring($L, $s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$s;
      var $3=$2; //@line 455 "lapi.c"
      var $4=(($3)|0)==0; //@line 455 "lapi.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 455 "lapi.c"
    case 3: 
      var $6=$1; //@line 456 "lapi.c"
      _lua_pushnil($6); //@line 456 "lapi.c"
      __label__ = 5; break; //@line 456 "lapi.c"
    case 4: 
      var $8=$1; //@line 458 "lapi.c"
      var $9=$2; //@line 458 "lapi.c"
      var $10=$2; //@line 458 "lapi.c"
      var $11=_strlen($10); //@line 458 "lapi.c"
      _lua_pushlstring($8, $9, $11); //@line 458 "lapi.c"
      __label__ = 5; break; //@line 458 "lapi.c"
    case 5: 
      ;
      return; //@line 459 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10getcurrenvP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $func;
      $2=$L;
      var $3=$2; //@line 80 "lapi.c"
      var $4=(($3+20)|0); //@line 80 "lapi.c"
      var $5=HEAP32[(($4)>>2)]; //@line 80 "lapi.c"
      var $6=$2; //@line 80 "lapi.c"
      var $7=(($6+40)|0); //@line 80 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 80 "lapi.c"
      var $9=(($5)|0)==(($8)|0); //@line 80 "lapi.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 80 "lapi.c"
    case 3: 
      var $11=$2; //@line 81 "lapi.c"
      var $12=(($11+72)|0); //@line 81 "lapi.c"
      var $13=(($12)|0); //@line 81 "lapi.c"
      var $14=$13; //@line 81 "lapi.c"
      var $15=HEAP32[(($14)>>2)]; //@line 81 "lapi.c"
      var $16=$15; //@line 81 "lapi.c"
      $1=$16; //@line 81 "lapi.c"
      __label__ = 5; break; //@line 81 "lapi.c"
    case 4: 
      var $18=$2; //@line 83 "lapi.c"
      var $19=(($18+20)|0); //@line 83 "lapi.c"
      var $20=HEAP32[(($19)>>2)]; //@line 83 "lapi.c"
      var $21=(($20+4)|0); //@line 83 "lapi.c"
      var $22=HEAP32[(($21)>>2)]; //@line 83 "lapi.c"
      var $23=(($22)|0); //@line 83 "lapi.c"
      var $24=$23; //@line 83 "lapi.c"
      var $25=HEAP32[(($24)>>2)]; //@line 83 "lapi.c"
      var $26=$25; //@line 83 "lapi.c"
      $func=$26; //@line 83 "lapi.c"
      var $27=$func; //@line 84 "lapi.c"
      var $28=$27; //@line 84 "lapi.c"
      var $29=(($28+12)|0); //@line 84 "lapi.c"
      var $30=HEAP32[(($29)>>2)]; //@line 84 "lapi.c"
      $1=$30; //@line 84 "lapi.c"
      __label__ = 5; break; //@line 84 "lapi.c"
    case 5: 
      var $32=$1; //@line 86 "lapi.c"
      ;
      return $32; //@line 86 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushboolean($L, $b) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$b;
  var $3=$1; //@line 505 "lapi.c"
  var $4=(($3+8)|0); //@line 505 "lapi.c"
  var $5=HEAP32[(($4)>>2)]; //@line 505 "lapi.c"
  $i_o=$5; //@line 505 "lapi.c"
  var $6=$2; //@line 505 "lapi.c"
  var $7=(($6)|0)!=0; //@line 505 "lapi.c"
  var $8=(($7)&1); //@line 505 "lapi.c"
  var $9=$i_o; //@line 505 "lapi.c"
  var $10=(($9)|0); //@line 505 "lapi.c"
  var $11=$10; //@line 505 "lapi.c"
  HEAP32[(($11)>>2)]=$8; //@line 505 "lapi.c"
  var $12=$i_o; //@line 505 "lapi.c"
  var $13=(($12+8)|0); //@line 505 "lapi.c"
  HEAP32[(($13)>>2)]=1; //@line 505 "lapi.c"
  var $14=$1; //@line 506 "lapi.c"
  var $15=(($14+8)|0); //@line 506 "lapi.c"
  var $16=HEAP32[(($15)>>2)]; //@line 506 "lapi.c"
  var $17=(($16+12)|0); //@line 506 "lapi.c"
  HEAP32[(($15)>>2)]=$17; //@line 506 "lapi.c"
  ;
  return; //@line 508 "lapi.c"
}


function _lua_pushlightuserdata($L, $p) {
  ;
  var __label__;

  var $1;
  var $2;
  var $i_o;
  $1=$L;
  $2=$p;
  var $3=$1; //@line 513 "lapi.c"
  var $4=(($3+8)|0); //@line 513 "lapi.c"
  var $5=HEAP32[(($4)>>2)]; //@line 513 "lapi.c"
  $i_o=$5; //@line 513 "lapi.c"
  var $6=$2; //@line 513 "lapi.c"
  var $7=$i_o; //@line 513 "lapi.c"
  var $8=(($7)|0); //@line 513 "lapi.c"
  var $9=$8; //@line 513 "lapi.c"
  HEAP32[(($9)>>2)]=$6; //@line 513 "lapi.c"
  var $10=$i_o; //@line 513 "lapi.c"
  var $11=(($10+8)|0); //@line 513 "lapi.c"
  HEAP32[(($11)>>2)]=2; //@line 513 "lapi.c"
  var $12=$1; //@line 514 "lapi.c"
  var $13=(($12+8)|0); //@line 514 "lapi.c"
  var $14=HEAP32[(($13)>>2)]; //@line 514 "lapi.c"
  var $15=(($14+12)|0); //@line 514 "lapi.c"
  HEAP32[(($13)>>2)]=$15; //@line 514 "lapi.c"
  ;
  return; //@line 516 "lapi.c"
}


function _lua_pushthread($L) {
  ;
  var __label__;

  var $1;
  var $i_o;
  $1=$L;
  var $2=$1; //@line 521 "lapi.c"
  var $3=(($2+8)|0); //@line 521 "lapi.c"
  var $4=HEAP32[(($3)>>2)]; //@line 521 "lapi.c"
  $i_o=$4; //@line 521 "lapi.c"
  var $5=$1; //@line 521 "lapi.c"
  var $6=$5; //@line 521 "lapi.c"
  var $7=$i_o; //@line 521 "lapi.c"
  var $8=(($7)|0); //@line 521 "lapi.c"
  var $9=$8; //@line 521 "lapi.c"
  HEAP32[(($9)>>2)]=$6; //@line 521 "lapi.c"
  var $10=$i_o; //@line 521 "lapi.c"
  var $11=(($10+8)|0); //@line 521 "lapi.c"
  HEAP32[(($11)>>2)]=8; //@line 521 "lapi.c"
  var $12=$1; //@line 522 "lapi.c"
  var $13=(($12+8)|0); //@line 522 "lapi.c"
  var $14=HEAP32[(($13)>>2)]; //@line 522 "lapi.c"
  var $15=(($14+12)|0); //@line 522 "lapi.c"
  HEAP32[(($13)>>2)]=$15; //@line 522 "lapi.c"
  var $16=$1; //@line 524 "lapi.c"
  var $17=(($16+16)|0); //@line 524 "lapi.c"
  var $18=HEAP32[(($17)>>2)]; //@line 524 "lapi.c"
  var $19=(($18+104)|0); //@line 524 "lapi.c"
  var $20=HEAP32[(($19)>>2)]; //@line 524 "lapi.c"
  var $21=$1; //@line 524 "lapi.c"
  var $22=(($20)|0)==(($21)|0); //@line 524 "lapi.c"
  var $23=(($22)&1); //@line 524 "lapi.c"
  ;
  return $23; //@line 524 "lapi.c"
}


function _lua_pushvfstring($L, $fmt, $argp) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$L;
      $2=$fmt;
      $3=$argp;
      var $4=$1; //@line 466 "lapi.c"
      var $5=(($4+16)|0); //@line 466 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 466 "lapi.c"
      var $7=(($6+68)|0); //@line 466 "lapi.c"
      var $8=HEAPU32[(($7)>>2)]; //@line 466 "lapi.c"
      var $9=$1; //@line 466 "lapi.c"
      var $10=(($9+16)|0); //@line 466 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 466 "lapi.c"
      var $12=(($11+64)|0); //@line 466 "lapi.c"
      var $13=HEAPU32[(($12)>>2)]; //@line 466 "lapi.c"
      var $14=(($8)>>>0) >= (($13)>>>0); //@line 466 "lapi.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 466 "lapi.c"
    case 3: 
      var $16=$1; //@line 466 "lapi.c"
      __Z9luaC_stepP9lua_State($16); //@line 466 "lapi.c"
      __label__ = 4; break; //@line 466 "lapi.c"
    case 4: 
      var $18=$1; //@line 467 "lapi.c"
      var $19=$2; //@line 467 "lapi.c"
      var $20=$3; //@line 467 "lapi.c"
      var $21=__Z17luaO_pushvfstringP9lua_StatePKcPc($18, $19, $20); //@line 467 "lapi.c"
      $ret=$21; //@line 467 "lapi.c"
      var $22=$ret; //@line 469 "lapi.c"
      ;
      return $22; //@line 469 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushfstring($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ret;
      var $argp=__stackBase__;
      $1=$L;
      $2=$fmt;
      var $3=$1; //@line 477 "lapi.c"
      var $4=(($3+16)|0); //@line 477 "lapi.c"
      var $5=HEAP32[(($4)>>2)]; //@line 477 "lapi.c"
      var $6=(($5+68)|0); //@line 477 "lapi.c"
      var $7=HEAPU32[(($6)>>2)]; //@line 477 "lapi.c"
      var $8=$1; //@line 477 "lapi.c"
      var $9=(($8+16)|0); //@line 477 "lapi.c"
      var $10=HEAP32[(($9)>>2)]; //@line 477 "lapi.c"
      var $11=(($10+64)|0); //@line 477 "lapi.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 477 "lapi.c"
      var $13=(($7)>>>0) >= (($12)>>>0); //@line 477 "lapi.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 477 "lapi.c"
    case 3: 
      var $15=$1; //@line 477 "lapi.c"
      __Z9luaC_stepP9lua_State($15); //@line 477 "lapi.c"
      __label__ = 4; break; //@line 477 "lapi.c"
    case 4: 
      var $17=$argp; //@line 478 "lapi.c"
      HEAP32[(($17)>>2)]=arguments[_lua_pushfstring.length]; //@line 478 "lapi.c"
      var $18=$1; //@line 479 "lapi.c"
      var $19=$2; //@line 479 "lapi.c"
      var $20=HEAP32[(($argp)>>2)]; //@line 479 "lapi.c"
      var $21=__Z17luaO_pushvfstringP9lua_StatePKcPc($18, $19, $20); //@line 479 "lapi.c"
      $ret=$21; //@line 479 "lapi.c"
      var $22=$argp; //@line 480 "lapi.c"
      ; //@line 480 "lapi.c"
      var $23=$ret; //@line 482 "lapi.c"
      STACKTOP = __stackBase__;
      return $23; //@line 482 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pushcclosure($L, $fn, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $cl;
      var $o2;
      var $o1;
      var $i_o;
      $1=$L;
      $2=$fn;
      $3=$n;
      var $4=$1; //@line 489 "lapi.c"
      var $5=(($4+16)|0); //@line 489 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 489 "lapi.c"
      var $7=(($6+68)|0); //@line 489 "lapi.c"
      var $8=HEAPU32[(($7)>>2)]; //@line 489 "lapi.c"
      var $9=$1; //@line 489 "lapi.c"
      var $10=(($9+16)|0); //@line 489 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 489 "lapi.c"
      var $12=(($11+64)|0); //@line 489 "lapi.c"
      var $13=HEAPU32[(($12)>>2)]; //@line 489 "lapi.c"
      var $14=(($8)>>>0) >= (($13)>>>0); //@line 489 "lapi.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 489 "lapi.c"
    case 3: 
      var $16=$1; //@line 489 "lapi.c"
      __Z9luaC_stepP9lua_State($16); //@line 489 "lapi.c"
      __label__ = 4; break; //@line 489 "lapi.c"
    case 4: 
      var $18=$1; //@line 491 "lapi.c"
      var $19=$3; //@line 491 "lapi.c"
      var $20=$1; //@line 491 "lapi.c"
      var $21=__Z10getcurrenvP9lua_State($20); //@line 491 "lapi.c"
      var $22=__Z16luaF_newCclosureP9lua_StateiP5Table($18, $19, $21); //@line 491 "lapi.c"
      $cl=$22; //@line 491 "lapi.c"
      var $23=$2; //@line 492 "lapi.c"
      var $24=$cl; //@line 492 "lapi.c"
      var $25=$24; //@line 492 "lapi.c"
      var $26=(($25+16)|0); //@line 492 "lapi.c"
      HEAP32[(($26)>>2)]=$23; //@line 492 "lapi.c"
      var $27=$3; //@line 493 "lapi.c"
      var $28=$1; //@line 493 "lapi.c"
      var $29=(($28+8)|0); //@line 493 "lapi.c"
      var $30=HEAP32[(($29)>>2)]; //@line 493 "lapi.c"
      var $31=(((-$27))|0); //@line 493 "lapi.c"
      var $32=(($30+($31)*(12))|0); //@line 493 "lapi.c"
      HEAP32[(($29)>>2)]=$32; //@line 493 "lapi.c"
      __label__ = 5; break; //@line 494 "lapi.c"
    case 5: 
      var $34=$3; //@line 494 "lapi.c"
      var $35=((($34)-(1))|0); //@line 494 "lapi.c"
      $3=$35; //@line 494 "lapi.c"
      var $36=(($34)|0)!=0; //@line 494 "lapi.c"
      if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 494 "lapi.c"
    case 6: 
      var $38=$1; //@line 495 "lapi.c"
      var $39=(($38+8)|0); //@line 495 "lapi.c"
      var $40=HEAP32[(($39)>>2)]; //@line 495 "lapi.c"
      var $41=$3; //@line 495 "lapi.c"
      var $42=(($40+($41)*(12))|0); //@line 495 "lapi.c"
      $o2=$42; //@line 495 "lapi.c"
      var $43=$3; //@line 495 "lapi.c"
      var $44=$cl; //@line 495 "lapi.c"
      var $45=$44; //@line 495 "lapi.c"
      var $46=(($45+20)|0); //@line 495 "lapi.c"
      var $47=(($46+($43)*(12))|0); //@line 495 "lapi.c"
      $o1=$47; //@line 495 "lapi.c"
      var $48=$o1; //@line 495 "lapi.c"
      var $49=(($48)|0); //@line 495 "lapi.c"
      var $50=$o2; //@line 495 "lapi.c"
      var $51=(($50)|0); //@line 495 "lapi.c"
      var $52=$49; //@line 495 "lapi.c"
      var $53=$51; //@line 495 "lapi.c"
      HEAP32[(($52)>>2)]=HEAP32[(($53)>>2)];HEAP32[((($52)+(4))>>2)]=HEAP32[((($53)+(4))>>2)]; //@line 495 "lapi.c"
      var $54=$o2; //@line 495 "lapi.c"
      var $55=(($54+8)|0); //@line 495 "lapi.c"
      var $56=HEAP32[(($55)>>2)]; //@line 495 "lapi.c"
      var $57=$o1; //@line 495 "lapi.c"
      var $58=(($57+8)|0); //@line 495 "lapi.c"
      HEAP32[(($58)>>2)]=$56; //@line 495 "lapi.c"
      __label__ = 5; break; //@line 495 "lapi.c"
    case 7: 
      var $60=$1; //@line 496 "lapi.c"
      var $61=(($60+8)|0); //@line 496 "lapi.c"
      var $62=HEAP32[(($61)>>2)]; //@line 496 "lapi.c"
      $i_o=$62; //@line 496 "lapi.c"
      var $63=$cl; //@line 496 "lapi.c"
      var $64=$63; //@line 496 "lapi.c"
      var $65=$i_o; //@line 496 "lapi.c"
      var $66=(($65)|0); //@line 496 "lapi.c"
      var $67=$66; //@line 496 "lapi.c"
      HEAP32[(($67)>>2)]=$64; //@line 496 "lapi.c"
      var $68=$i_o; //@line 496 "lapi.c"
      var $69=(($68+8)|0); //@line 496 "lapi.c"
      HEAP32[(($69)>>2)]=6; //@line 496 "lapi.c"
      var $70=$1; //@line 498 "lapi.c"
      var $71=(($70+8)|0); //@line 498 "lapi.c"
      var $72=HEAP32[(($71)>>2)]; //@line 498 "lapi.c"
      var $73=(($72+12)|0); //@line 498 "lapi.c"
      HEAP32[(($71)>>2)]=$73; //@line 498 "lapi.c"
      ;
      return; //@line 500 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_pushcclosure["X"]=1;

function _lua_gettable($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $t;
  $1=$L;
  $2=$idx;
  var $3=$1; //@line 537 "lapi.c"
  var $4=$2; //@line 537 "lapi.c"
  var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 537 "lapi.c"
  $t=$5; //@line 537 "lapi.c"
  var $6=$1; //@line 539 "lapi.c"
  var $7=$t; //@line 539 "lapi.c"
  var $8=$1; //@line 539 "lapi.c"
  var $9=(($8+8)|0); //@line 539 "lapi.c"
  var $10=HEAP32[(($9)>>2)]; //@line 539 "lapi.c"
  var $11=((($10)-(12))|0); //@line 539 "lapi.c"
  var $12=$1; //@line 539 "lapi.c"
  var $13=(($12+8)|0); //@line 539 "lapi.c"
  var $14=HEAP32[(($13)>>2)]; //@line 539 "lapi.c"
  var $15=((($14)-(12))|0); //@line 539 "lapi.c"
  __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($6, $7, $11, $15); //@line 539 "lapi.c"
  ;
  return; //@line 541 "lapi.c"
}


function _lua_getfield($L, $idx, $k) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $t;
  var $key=__stackBase__;
  var $i_o;
  $1=$L;
  $2=$idx;
  $3=$k;
  var $4=$1; //@line 548 "lapi.c"
  var $5=$2; //@line 548 "lapi.c"
  var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 548 "lapi.c"
  $t=$6; //@line 548 "lapi.c"
  $i_o=$key; //@line 550 "lapi.c"
  var $7=$1; //@line 550 "lapi.c"
  var $8=$3; //@line 550 "lapi.c"
  var $9=$3; //@line 550 "lapi.c"
  var $10=_strlen($9); //@line 550 "lapi.c"
  var $11=__Z12luaS_newlstrP9lua_StatePKcj($7, $8, $10); //@line 550 "lapi.c"
  var $12=$11; //@line 550 "lapi.c"
  var $13=$i_o; //@line 550 "lapi.c"
  var $14=(($13)|0); //@line 550 "lapi.c"
  var $15=$14; //@line 550 "lapi.c"
  HEAP32[(($15)>>2)]=$12; //@line 550 "lapi.c"
  var $16=$i_o; //@line 550 "lapi.c"
  var $17=(($16+8)|0); //@line 550 "lapi.c"
  HEAP32[(($17)>>2)]=4; //@line 550 "lapi.c"
  var $18=$1; //@line 551 "lapi.c"
  var $19=$t; //@line 551 "lapi.c"
  var $20=$1; //@line 551 "lapi.c"
  var $21=(($20+8)|0); //@line 551 "lapi.c"
  var $22=HEAP32[(($21)>>2)]; //@line 551 "lapi.c"
  __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($18, $19, $key, $22); //@line 551 "lapi.c"
  var $23=$1; //@line 552 "lapi.c"
  var $24=(($23+8)|0); //@line 552 "lapi.c"
  var $25=HEAP32[(($24)>>2)]; //@line 552 "lapi.c"
  var $26=(($25+12)|0); //@line 552 "lapi.c"
  HEAP32[(($24)>>2)]=$26; //@line 552 "lapi.c"
  STACKTOP = __stackBase__;
  return; //@line 554 "lapi.c"
}


function _lua_rawget($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $t;
  var $o2;
  var $o1;
  $1=$L;
  $2=$idx;
  var $3=$1; //@line 560 "lapi.c"
  var $4=$2; //@line 560 "lapi.c"
  var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 560 "lapi.c"
  $t=$5; //@line 560 "lapi.c"
  var $6=$t; //@line 562 "lapi.c"
  var $7=(($6)|0); //@line 562 "lapi.c"
  var $8=$7; //@line 562 "lapi.c"
  var $9=HEAP32[(($8)>>2)]; //@line 562 "lapi.c"
  var $10=$9; //@line 562 "lapi.c"
  var $11=$1; //@line 562 "lapi.c"
  var $12=(($11+8)|0); //@line 562 "lapi.c"
  var $13=HEAP32[(($12)>>2)]; //@line 562 "lapi.c"
  var $14=((($13)-(12))|0); //@line 562 "lapi.c"
  var $15=__Z8luaH_getP5TablePK10lua_TValue($10, $14); //@line 562 "lapi.c"
  $o2=$15; //@line 562 "lapi.c"
  var $16=$1; //@line 562 "lapi.c"
  var $17=(($16+8)|0); //@line 562 "lapi.c"
  var $18=HEAP32[(($17)>>2)]; //@line 562 "lapi.c"
  var $19=((($18)-(12))|0); //@line 562 "lapi.c"
  $o1=$19; //@line 562 "lapi.c"
  var $20=$o1; //@line 562 "lapi.c"
  var $21=(($20)|0); //@line 562 "lapi.c"
  var $22=$o2; //@line 562 "lapi.c"
  var $23=(($22)|0); //@line 562 "lapi.c"
  var $24=$21; //@line 562 "lapi.c"
  var $25=$23; //@line 562 "lapi.c"
  HEAP32[(($24)>>2)]=HEAP32[(($25)>>2)];HEAP32[((($24)+(4))>>2)]=HEAP32[((($25)+(4))>>2)]; //@line 562 "lapi.c"
  var $26=$o2; //@line 562 "lapi.c"
  var $27=(($26+8)|0); //@line 562 "lapi.c"
  var $28=HEAP32[(($27)>>2)]; //@line 562 "lapi.c"
  var $29=$o1; //@line 562 "lapi.c"
  var $30=(($29+8)|0); //@line 562 "lapi.c"
  HEAP32[(($30)>>2)]=$28; //@line 562 "lapi.c"
  ;
  return; //@line 564 "lapi.c"
}


function _lua_rawgeti($L, $idx, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $o;
  var $o2;
  var $o1;
  $1=$L;
  $2=$idx;
  $3=$n;
  var $4=$1; //@line 570 "lapi.c"
  var $5=$2; //@line 570 "lapi.c"
  var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 570 "lapi.c"
  $o=$6; //@line 570 "lapi.c"
  var $7=$o; //@line 572 "lapi.c"
  var $8=(($7)|0); //@line 572 "lapi.c"
  var $9=$8; //@line 572 "lapi.c"
  var $10=HEAP32[(($9)>>2)]; //@line 572 "lapi.c"
  var $11=$10; //@line 572 "lapi.c"
  var $12=$3; //@line 572 "lapi.c"
  var $13=__Z11luaH_getnumP5Tablei($11, $12); //@line 572 "lapi.c"
  $o2=$13; //@line 572 "lapi.c"
  var $14=$1; //@line 572 "lapi.c"
  var $15=(($14+8)|0); //@line 572 "lapi.c"
  var $16=HEAP32[(($15)>>2)]; //@line 572 "lapi.c"
  $o1=$16; //@line 572 "lapi.c"
  var $17=$o1; //@line 572 "lapi.c"
  var $18=(($17)|0); //@line 572 "lapi.c"
  var $19=$o2; //@line 572 "lapi.c"
  var $20=(($19)|0); //@line 572 "lapi.c"
  var $21=$18; //@line 572 "lapi.c"
  var $22=$20; //@line 572 "lapi.c"
  HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)]; //@line 572 "lapi.c"
  var $23=$o2; //@line 572 "lapi.c"
  var $24=(($23+8)|0); //@line 572 "lapi.c"
  var $25=HEAP32[(($24)>>2)]; //@line 572 "lapi.c"
  var $26=$o1; //@line 572 "lapi.c"
  var $27=(($26+8)|0); //@line 572 "lapi.c"
  HEAP32[(($27)>>2)]=$25; //@line 572 "lapi.c"
  var $28=$1; //@line 573 "lapi.c"
  var $29=(($28+8)|0); //@line 573 "lapi.c"
  var $30=HEAP32[(($29)>>2)]; //@line 573 "lapi.c"
  var $31=(($30+12)|0); //@line 573 "lapi.c"
  HEAP32[(($29)>>2)]=$31; //@line 573 "lapi.c"
  ;
  return; //@line 575 "lapi.c"
}


function _lua_createtable($L, $narray, $nrec) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i_o;
      $1=$L;
      $2=$narray;
      $3=$nrec;
      var $4=$1; //@line 580 "lapi.c"
      var $5=(($4+16)|0); //@line 580 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 580 "lapi.c"
      var $7=(($6+68)|0); //@line 580 "lapi.c"
      var $8=HEAPU32[(($7)>>2)]; //@line 580 "lapi.c"
      var $9=$1; //@line 580 "lapi.c"
      var $10=(($9+16)|0); //@line 580 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 580 "lapi.c"
      var $12=(($11+64)|0); //@line 580 "lapi.c"
      var $13=HEAPU32[(($12)>>2)]; //@line 580 "lapi.c"
      var $14=(($8)>>>0) >= (($13)>>>0); //@line 580 "lapi.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 580 "lapi.c"
    case 3: 
      var $16=$1; //@line 580 "lapi.c"
      __Z9luaC_stepP9lua_State($16); //@line 580 "lapi.c"
      __label__ = 4; break; //@line 580 "lapi.c"
    case 4: 
      var $18=$1; //@line 581 "lapi.c"
      var $19=(($18+8)|0); //@line 581 "lapi.c"
      var $20=HEAP32[(($19)>>2)]; //@line 581 "lapi.c"
      $i_o=$20; //@line 581 "lapi.c"
      var $21=$1; //@line 581 "lapi.c"
      var $22=$2; //@line 581 "lapi.c"
      var $23=$3; //@line 581 "lapi.c"
      var $24=__Z8luaH_newP9lua_Stateii($21, $22, $23); //@line 581 "lapi.c"
      var $25=$24; //@line 581 "lapi.c"
      var $26=$i_o; //@line 581 "lapi.c"
      var $27=(($26)|0); //@line 581 "lapi.c"
      var $28=$27; //@line 581 "lapi.c"
      HEAP32[(($28)>>2)]=$25; //@line 581 "lapi.c"
      var $29=$i_o; //@line 581 "lapi.c"
      var $30=(($29+8)|0); //@line 581 "lapi.c"
      HEAP32[(($30)>>2)]=5; //@line 581 "lapi.c"
      var $31=$1; //@line 582 "lapi.c"
      var $32=(($31+8)|0); //@line 582 "lapi.c"
      var $33=HEAP32[(($32)>>2)]; //@line 582 "lapi.c"
      var $34=(($33+12)|0); //@line 582 "lapi.c"
      HEAP32[(($32)>>2)]=$34; //@line 582 "lapi.c"
      ;
      return; //@line 584 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_getmetatable($L, $objindex) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $obj;
      var $mt;
      var $res;
      var $i_o;
      $1=$L;
      $2=$objindex;
      $mt=0; //@line 589 "lapi.c"
      var $3=$1; //@line 592 "lapi.c"
      var $4=$2; //@line 592 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 592 "lapi.c"
      $obj=$5; //@line 592 "lapi.c"
      var $6=$obj; //@line 593 "lapi.c"
      var $7=(($6+8)|0); //@line 593 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 593 "lapi.c"
      if ((($8)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 7) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $10=$obj; //@line 595 "lapi.c"
      var $11=(($10)|0); //@line 595 "lapi.c"
      var $12=$11; //@line 595 "lapi.c"
      var $13=HEAP32[(($12)>>2)]; //@line 595 "lapi.c"
      var $14=$13; //@line 595 "lapi.c"
      var $15=(($14+8)|0); //@line 595 "lapi.c"
      var $16=HEAP32[(($15)>>2)]; //@line 595 "lapi.c"
      $mt=$16; //@line 595 "lapi.c"
      __label__ = 6; break; //@line 596 "lapi.c"
    case 4: 
      var $18=$obj; //@line 598 "lapi.c"
      var $19=(($18)|0); //@line 598 "lapi.c"
      var $20=$19; //@line 598 "lapi.c"
      var $21=HEAP32[(($20)>>2)]; //@line 598 "lapi.c"
      var $22=$21; //@line 598 "lapi.c"
      var $23=$22; //@line 598 "lapi.c"
      var $24=(($23+8)|0); //@line 598 "lapi.c"
      var $25=HEAP32[(($24)>>2)]; //@line 598 "lapi.c"
      $mt=$25; //@line 598 "lapi.c"
      __label__ = 6; break; //@line 599 "lapi.c"
    case 5: 
      var $27=$obj; //@line 601 "lapi.c"
      var $28=(($27+8)|0); //@line 601 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 601 "lapi.c"
      var $30=$1; //@line 601 "lapi.c"
      var $31=(($30+16)|0); //@line 601 "lapi.c"
      var $32=HEAP32[(($31)>>2)]; //@line 601 "lapi.c"
      var $33=(($32+132)|0); //@line 601 "lapi.c"
      var $34=(($33+($29<<2))|0); //@line 601 "lapi.c"
      var $35=HEAP32[(($34)>>2)]; //@line 601 "lapi.c"
      $mt=$35; //@line 601 "lapi.c"
      __label__ = 6; break; //@line 602 "lapi.c"
    case 6: 
      var $37=$mt; //@line 604 "lapi.c"
      var $38=(($37)|0)==0; //@line 604 "lapi.c"
      if ($38) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 604 "lapi.c"
    case 7: 
      $res=0; //@line 605 "lapi.c"
      __label__ = 9; break; //@line 605 "lapi.c"
    case 8: 
      var $41=$1; //@line 607 "lapi.c"
      var $42=(($41+8)|0); //@line 607 "lapi.c"
      var $43=HEAP32[(($42)>>2)]; //@line 607 "lapi.c"
      $i_o=$43; //@line 607 "lapi.c"
      var $44=$mt; //@line 607 "lapi.c"
      var $45=$44; //@line 607 "lapi.c"
      var $46=$i_o; //@line 607 "lapi.c"
      var $47=(($46)|0); //@line 607 "lapi.c"
      var $48=$47; //@line 607 "lapi.c"
      HEAP32[(($48)>>2)]=$45; //@line 607 "lapi.c"
      var $49=$i_o; //@line 607 "lapi.c"
      var $50=(($49+8)|0); //@line 607 "lapi.c"
      HEAP32[(($50)>>2)]=5; //@line 607 "lapi.c"
      var $51=$1; //@line 608 "lapi.c"
      var $52=(($51+8)|0); //@line 608 "lapi.c"
      var $53=HEAP32[(($52)>>2)]; //@line 608 "lapi.c"
      var $54=(($53+12)|0); //@line 608 "lapi.c"
      HEAP32[(($52)>>2)]=$54; //@line 608 "lapi.c"
      $res=1; //@line 609 "lapi.c"
      __label__ = 9; break; //@line 610 "lapi.c"
    case 9: 
      var $56=$res; //@line 612 "lapi.c"
      ;
      return $56; //@line 612 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getmetatable["X"]=1;

function _lua_getfenv($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $i_o;
      var $i_o1;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 619 "lapi.c"
      var $4=$2; //@line 619 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 619 "lapi.c"
      $o=$5; //@line 619 "lapi.c"
      var $6=$o; //@line 621 "lapi.c"
      var $7=(($6+8)|0); //@line 621 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 621 "lapi.c"
      if ((($8)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 8) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $10=$1; //@line 623 "lapi.c"
      var $11=(($10+8)|0); //@line 623 "lapi.c"
      var $12=HEAP32[(($11)>>2)]; //@line 623 "lapi.c"
      $i_o=$12; //@line 623 "lapi.c"
      var $13=$o; //@line 623 "lapi.c"
      var $14=(($13)|0); //@line 623 "lapi.c"
      var $15=$14; //@line 623 "lapi.c"
      var $16=HEAP32[(($15)>>2)]; //@line 623 "lapi.c"
      var $17=$16; //@line 623 "lapi.c"
      var $18=$17; //@line 623 "lapi.c"
      var $19=(($18+12)|0); //@line 623 "lapi.c"
      var $20=HEAP32[(($19)>>2)]; //@line 623 "lapi.c"
      var $21=$20; //@line 623 "lapi.c"
      var $22=$i_o; //@line 623 "lapi.c"
      var $23=(($22)|0); //@line 623 "lapi.c"
      var $24=$23; //@line 623 "lapi.c"
      HEAP32[(($24)>>2)]=$21; //@line 623 "lapi.c"
      var $25=$i_o; //@line 623 "lapi.c"
      var $26=(($25+8)|0); //@line 623 "lapi.c"
      HEAP32[(($26)>>2)]=5; //@line 623 "lapi.c"
      __label__ = 7; break; //@line 624 "lapi.c"
    case 4: 
      var $28=$1; //@line 626 "lapi.c"
      var $29=(($28+8)|0); //@line 626 "lapi.c"
      var $30=HEAP32[(($29)>>2)]; //@line 626 "lapi.c"
      $i_o1=$30; //@line 626 "lapi.c"
      var $31=$o; //@line 626 "lapi.c"
      var $32=(($31)|0); //@line 626 "lapi.c"
      var $33=$32; //@line 626 "lapi.c"
      var $34=HEAP32[(($33)>>2)]; //@line 626 "lapi.c"
      var $35=$34; //@line 626 "lapi.c"
      var $36=$35; //@line 626 "lapi.c"
      var $37=(($36+12)|0); //@line 626 "lapi.c"
      var $38=HEAP32[(($37)>>2)]; //@line 626 "lapi.c"
      var $39=$38; //@line 626 "lapi.c"
      var $40=$i_o1; //@line 626 "lapi.c"
      var $41=(($40)|0); //@line 626 "lapi.c"
      var $42=$41; //@line 626 "lapi.c"
      HEAP32[(($42)>>2)]=$39; //@line 626 "lapi.c"
      var $43=$i_o1; //@line 626 "lapi.c"
      var $44=(($43+8)|0); //@line 626 "lapi.c"
      HEAP32[(($44)>>2)]=5; //@line 626 "lapi.c"
      __label__ = 7; break; //@line 627 "lapi.c"
    case 5: 
      var $46=$o; //@line 629 "lapi.c"
      var $47=(($46)|0); //@line 629 "lapi.c"
      var $48=$47; //@line 629 "lapi.c"
      var $49=HEAP32[(($48)>>2)]; //@line 629 "lapi.c"
      var $50=$49; //@line 629 "lapi.c"
      var $51=(($50+72)|0); //@line 629 "lapi.c"
      $o2=$51; //@line 629 "lapi.c"
      var $52=$1; //@line 629 "lapi.c"
      var $53=(($52+8)|0); //@line 629 "lapi.c"
      var $54=HEAP32[(($53)>>2)]; //@line 629 "lapi.c"
      $o1=$54; //@line 629 "lapi.c"
      var $55=$o1; //@line 629 "lapi.c"
      var $56=(($55)|0); //@line 629 "lapi.c"
      var $57=$o2; //@line 629 "lapi.c"
      var $58=(($57)|0); //@line 629 "lapi.c"
      var $59=$56; //@line 629 "lapi.c"
      var $60=$58; //@line 629 "lapi.c"
      HEAP32[(($59)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($59)+(4))>>2)]=HEAP32[((($60)+(4))>>2)]; //@line 629 "lapi.c"
      var $61=$o2; //@line 629 "lapi.c"
      var $62=(($61+8)|0); //@line 629 "lapi.c"
      var $63=HEAP32[(($62)>>2)]; //@line 629 "lapi.c"
      var $64=$o1; //@line 629 "lapi.c"
      var $65=(($64+8)|0); //@line 629 "lapi.c"
      HEAP32[(($65)>>2)]=$63; //@line 629 "lapi.c"
      __label__ = 7; break; //@line 630 "lapi.c"
    case 6: 
      var $67=$1; //@line 632 "lapi.c"
      var $68=(($67+8)|0); //@line 632 "lapi.c"
      var $69=HEAP32[(($68)>>2)]; //@line 632 "lapi.c"
      var $70=(($69+8)|0); //@line 632 "lapi.c"
      HEAP32[(($70)>>2)]=0; //@line 632 "lapi.c"
      __label__ = 7; break; //@line 633 "lapi.c"
    case 7: 
      var $72=$1; //@line 635 "lapi.c"
      var $73=(($72+8)|0); //@line 635 "lapi.c"
      var $74=HEAP32[(($73)>>2)]; //@line 635 "lapi.c"
      var $75=(($74+12)|0); //@line 635 "lapi.c"
      HEAP32[(($73)>>2)]=$75; //@line 635 "lapi.c"
      ;
      return; //@line 637 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getfenv["X"]=1;

function _lua_settable($L, $idx) {
  ;
  var __label__;

  var $1;
  var $2;
  var $t;
  $1=$L;
  $2=$idx;
  var $3=$1; //@line 649 "lapi.c"
  var $4=$2; //@line 649 "lapi.c"
  var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 649 "lapi.c"
  $t=$5; //@line 649 "lapi.c"
  var $6=$1; //@line 651 "lapi.c"
  var $7=$t; //@line 651 "lapi.c"
  var $8=$1; //@line 651 "lapi.c"
  var $9=(($8+8)|0); //@line 651 "lapi.c"
  var $10=HEAP32[(($9)>>2)]; //@line 651 "lapi.c"
  var $11=((($10)-(24))|0); //@line 651 "lapi.c"
  var $12=$1; //@line 651 "lapi.c"
  var $13=(($12+8)|0); //@line 651 "lapi.c"
  var $14=HEAP32[(($13)>>2)]; //@line 651 "lapi.c"
  var $15=((($14)-(12))|0); //@line 651 "lapi.c"
  __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($6, $7, $11, $15); //@line 651 "lapi.c"
  var $16=$1; //@line 652 "lapi.c"
  var $17=(($16+8)|0); //@line 652 "lapi.c"
  var $18=HEAP32[(($17)>>2)]; //@line 652 "lapi.c"
  var $19=((($18)-(24))|0); //@line 652 "lapi.c"
  HEAP32[(($17)>>2)]=$19; //@line 652 "lapi.c"
  ;
  return; //@line 654 "lapi.c"
}


function _lua_setfield($L, $idx, $k) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $t;
  var $key=__stackBase__;
  var $i_o;
  $1=$L;
  $2=$idx;
  $3=$k;
  var $4=$1; //@line 662 "lapi.c"
  var $5=$2; //@line 662 "lapi.c"
  var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 662 "lapi.c"
  $t=$6; //@line 662 "lapi.c"
  $i_o=$key; //@line 664 "lapi.c"
  var $7=$1; //@line 664 "lapi.c"
  var $8=$3; //@line 664 "lapi.c"
  var $9=$3; //@line 664 "lapi.c"
  var $10=_strlen($9); //@line 664 "lapi.c"
  var $11=__Z12luaS_newlstrP9lua_StatePKcj($7, $8, $10); //@line 664 "lapi.c"
  var $12=$11; //@line 664 "lapi.c"
  var $13=$i_o; //@line 664 "lapi.c"
  var $14=(($13)|0); //@line 664 "lapi.c"
  var $15=$14; //@line 664 "lapi.c"
  HEAP32[(($15)>>2)]=$12; //@line 664 "lapi.c"
  var $16=$i_o; //@line 664 "lapi.c"
  var $17=(($16+8)|0); //@line 664 "lapi.c"
  HEAP32[(($17)>>2)]=4; //@line 664 "lapi.c"
  var $18=$1; //@line 665 "lapi.c"
  var $19=$t; //@line 665 "lapi.c"
  var $20=$1; //@line 665 "lapi.c"
  var $21=(($20+8)|0); //@line 665 "lapi.c"
  var $22=HEAP32[(($21)>>2)]; //@line 665 "lapi.c"
  var $23=((($22)-(12))|0); //@line 665 "lapi.c"
  __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($18, $19, $key, $23); //@line 665 "lapi.c"
  var $24=$1; //@line 666 "lapi.c"
  var $25=(($24+8)|0); //@line 666 "lapi.c"
  var $26=HEAP32[(($25)>>2)]; //@line 666 "lapi.c"
  var $27=((($26)-(12))|0); //@line 666 "lapi.c"
  HEAP32[(($25)>>2)]=$27; //@line 666 "lapi.c"
  STACKTOP = __stackBase__;
  return; //@line 668 "lapi.c"
}


function _lua_rawset($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 675 "lapi.c"
      var $4=$2; //@line 675 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 675 "lapi.c"
      $t=$5; //@line 675 "lapi.c"
      var $6=$1; //@line 677 "lapi.c"
      var $7=(($6+8)|0); //@line 677 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 677 "lapi.c"
      var $9=((($8)-(12))|0); //@line 677 "lapi.c"
      $o2=$9; //@line 677 "lapi.c"
      var $10=$1; //@line 677 "lapi.c"
      var $11=$t; //@line 677 "lapi.c"
      var $12=(($11)|0); //@line 677 "lapi.c"
      var $13=$12; //@line 677 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 677 "lapi.c"
      var $15=$14; //@line 677 "lapi.c"
      var $16=$1; //@line 677 "lapi.c"
      var $17=(($16+8)|0); //@line 677 "lapi.c"
      var $18=HEAP32[(($17)>>2)]; //@line 677 "lapi.c"
      var $19=((($18)-(24))|0); //@line 677 "lapi.c"
      var $20=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($10, $15, $19); //@line 677 "lapi.c"
      $o1=$20; //@line 677 "lapi.c"
      var $21=$o1; //@line 677 "lapi.c"
      var $22=(($21)|0); //@line 677 "lapi.c"
      var $23=$o2; //@line 677 "lapi.c"
      var $24=(($23)|0); //@line 677 "lapi.c"
      var $25=$22; //@line 677 "lapi.c"
      var $26=$24; //@line 677 "lapi.c"
      HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)]; //@line 677 "lapi.c"
      var $27=$o2; //@line 677 "lapi.c"
      var $28=(($27+8)|0); //@line 677 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 677 "lapi.c"
      var $30=$o1; //@line 677 "lapi.c"
      var $31=(($30+8)|0); //@line 677 "lapi.c"
      HEAP32[(($31)>>2)]=$29; //@line 677 "lapi.c"
      var $32=$1; //@line 678 "lapi.c"
      var $33=(($32+8)|0); //@line 678 "lapi.c"
      var $34=HEAP32[(($33)>>2)]; //@line 678 "lapi.c"
      var $35=((($34)-(12))|0); //@line 678 "lapi.c"
      var $36=(($35+8)|0); //@line 678 "lapi.c"
      var $37=HEAP32[(($36)>>2)]; //@line 678 "lapi.c"
      var $38=(($37)|0) >= 4; //@line 678 "lapi.c"
      if ($38) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 678 "lapi.c"
    case 3: 
      var $40=$1; //@line 678 "lapi.c"
      var $41=(($40+8)|0); //@line 678 "lapi.c"
      var $42=HEAP32[(($41)>>2)]; //@line 678 "lapi.c"
      var $43=((($42)-(12))|0); //@line 678 "lapi.c"
      var $44=(($43)|0); //@line 678 "lapi.c"
      var $45=$44; //@line 678 "lapi.c"
      var $46=HEAP32[(($45)>>2)]; //@line 678 "lapi.c"
      var $47=$46; //@line 678 "lapi.c"
      var $48=(($47+5)|0); //@line 678 "lapi.c"
      var $49=HEAPU8[($48)]; //@line 678 "lapi.c"
      var $50=(($49)&255); //@line 678 "lapi.c"
      var $51=$50 & 3; //@line 678 "lapi.c"
      var $52=(($51)|0)!=0; //@line 678 "lapi.c"
      if ($52) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 678 "lapi.c"
    case 4: 
      var $54=$t; //@line 678 "lapi.c"
      var $55=(($54)|0); //@line 678 "lapi.c"
      var $56=$55; //@line 678 "lapi.c"
      var $57=HEAP32[(($56)>>2)]; //@line 678 "lapi.c"
      var $58=$57; //@line 678 "lapi.c"
      var $59=$58; //@line 678 "lapi.c"
      var $60=$59; //@line 678 "lapi.c"
      var $61=(($60+5)|0); //@line 678 "lapi.c"
      var $62=HEAPU8[($61)]; //@line 678 "lapi.c"
      var $63=(($62)&255); //@line 678 "lapi.c"
      var $64=$63 & 4; //@line 678 "lapi.c"
      var $65=(($64)|0)!=0; //@line 678 "lapi.c"
      if ($65) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 678 "lapi.c"
    case 5: 
      var $67=$1; //@line 678 "lapi.c"
      var $68=$t; //@line 678 "lapi.c"
      var $69=(($68)|0); //@line 678 "lapi.c"
      var $70=$69; //@line 678 "lapi.c"
      var $71=HEAP32[(($70)>>2)]; //@line 678 "lapi.c"
      var $72=$71; //@line 678 "lapi.c"
      __Z16luaC_barrierbackP9lua_StateP5Table($67, $72); //@line 678 "lapi.c"
      __label__ = 6; break; //@line 678 "lapi.c"
    case 6: 
      var $74=$1; //@line 679 "lapi.c"
      var $75=(($74+8)|0); //@line 679 "lapi.c"
      var $76=HEAP32[(($75)>>2)]; //@line 679 "lapi.c"
      var $77=((($76)-(24))|0); //@line 679 "lapi.c"
      HEAP32[(($75)>>2)]=$77; //@line 679 "lapi.c"
      ;
      return; //@line 681 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_rawset["X"]=1;

function _lua_status($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 891 "lapi.c"
  var $3=(($2+6)|0); //@line 891 "lapi.c"
  var $4=HEAPU8[($3)]; //@line 891 "lapi.c"
  var $5=(($4)&255); //@line 891 "lapi.c"
  ;
  return $5; //@line 891 "lapi.c"
}


function _lua_rawseti($L, $idx, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $o;
      var $o2;
      var $o1;
      $1=$L;
      $2=$idx;
      $3=$n;
      var $4=$1; //@line 688 "lapi.c"
      var $5=$2; //@line 688 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 688 "lapi.c"
      $o=$6; //@line 688 "lapi.c"
      var $7=$1; //@line 690 "lapi.c"
      var $8=(($7+8)|0); //@line 690 "lapi.c"
      var $9=HEAP32[(($8)>>2)]; //@line 690 "lapi.c"
      var $10=((($9)-(12))|0); //@line 690 "lapi.c"
      $o2=$10; //@line 690 "lapi.c"
      var $11=$1; //@line 690 "lapi.c"
      var $12=$o; //@line 690 "lapi.c"
      var $13=(($12)|0); //@line 690 "lapi.c"
      var $14=$13; //@line 690 "lapi.c"
      var $15=HEAP32[(($14)>>2)]; //@line 690 "lapi.c"
      var $16=$15; //@line 690 "lapi.c"
      var $17=$3; //@line 690 "lapi.c"
      var $18=__Z11luaH_setnumP9lua_StateP5Tablei($11, $16, $17); //@line 690 "lapi.c"
      $o1=$18; //@line 690 "lapi.c"
      var $19=$o1; //@line 690 "lapi.c"
      var $20=(($19)|0); //@line 690 "lapi.c"
      var $21=$o2; //@line 690 "lapi.c"
      var $22=(($21)|0); //@line 690 "lapi.c"
      var $23=$20; //@line 690 "lapi.c"
      var $24=$22; //@line 690 "lapi.c"
      HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)]; //@line 690 "lapi.c"
      var $25=$o2; //@line 690 "lapi.c"
      var $26=(($25+8)|0); //@line 690 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 690 "lapi.c"
      var $28=$o1; //@line 690 "lapi.c"
      var $29=(($28+8)|0); //@line 690 "lapi.c"
      HEAP32[(($29)>>2)]=$27; //@line 690 "lapi.c"
      var $30=$1; //@line 691 "lapi.c"
      var $31=(($30+8)|0); //@line 691 "lapi.c"
      var $32=HEAP32[(($31)>>2)]; //@line 691 "lapi.c"
      var $33=((($32)-(12))|0); //@line 691 "lapi.c"
      var $34=(($33+8)|0); //@line 691 "lapi.c"
      var $35=HEAP32[(($34)>>2)]; //@line 691 "lapi.c"
      var $36=(($35)|0) >= 4; //@line 691 "lapi.c"
      if ($36) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 691 "lapi.c"
    case 3: 
      var $38=$1; //@line 691 "lapi.c"
      var $39=(($38+8)|0); //@line 691 "lapi.c"
      var $40=HEAP32[(($39)>>2)]; //@line 691 "lapi.c"
      var $41=((($40)-(12))|0); //@line 691 "lapi.c"
      var $42=(($41)|0); //@line 691 "lapi.c"
      var $43=$42; //@line 691 "lapi.c"
      var $44=HEAP32[(($43)>>2)]; //@line 691 "lapi.c"
      var $45=$44; //@line 691 "lapi.c"
      var $46=(($45+5)|0); //@line 691 "lapi.c"
      var $47=HEAPU8[($46)]; //@line 691 "lapi.c"
      var $48=(($47)&255); //@line 691 "lapi.c"
      var $49=$48 & 3; //@line 691 "lapi.c"
      var $50=(($49)|0)!=0; //@line 691 "lapi.c"
      if ($50) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 691 "lapi.c"
    case 4: 
      var $52=$o; //@line 691 "lapi.c"
      var $53=(($52)|0); //@line 691 "lapi.c"
      var $54=$53; //@line 691 "lapi.c"
      var $55=HEAP32[(($54)>>2)]; //@line 691 "lapi.c"
      var $56=$55; //@line 691 "lapi.c"
      var $57=$56; //@line 691 "lapi.c"
      var $58=$57; //@line 691 "lapi.c"
      var $59=(($58+5)|0); //@line 691 "lapi.c"
      var $60=HEAPU8[($59)]; //@line 691 "lapi.c"
      var $61=(($60)&255); //@line 691 "lapi.c"
      var $62=$61 & 4; //@line 691 "lapi.c"
      var $63=(($62)|0)!=0; //@line 691 "lapi.c"
      if ($63) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 691 "lapi.c"
    case 5: 
      var $65=$1; //@line 691 "lapi.c"
      var $66=$o; //@line 691 "lapi.c"
      var $67=(($66)|0); //@line 691 "lapi.c"
      var $68=$67; //@line 691 "lapi.c"
      var $69=HEAP32[(($68)>>2)]; //@line 691 "lapi.c"
      var $70=$69; //@line 691 "lapi.c"
      __Z16luaC_barrierbackP9lua_StateP5Table($65, $70); //@line 691 "lapi.c"
      __label__ = 6; break; //@line 691 "lapi.c"
    case 6: 
      var $72=$1; //@line 692 "lapi.c"
      var $73=(($72+8)|0); //@line 692 "lapi.c"
      var $74=HEAP32[(($73)>>2)]; //@line 692 "lapi.c"
      var $75=((($74)-(12))|0); //@line 692 "lapi.c"
      HEAP32[(($73)>>2)]=$75; //@line 692 "lapi.c"
      ;
      return; //@line 694 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_rawseti["X"]=1;

function _lua_setmetatable($L, $objindex) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $obj;
      var $mt;
      $1=$L;
      $2=$objindex;
      var $3=$1; //@line 702 "lapi.c"
      var $4=$2; //@line 702 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 702 "lapi.c"
      $obj=$5; //@line 702 "lapi.c"
      var $6=$1; //@line 704 "lapi.c"
      var $7=(($6+8)|0); //@line 704 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 704 "lapi.c"
      var $9=((($8)-(12))|0); //@line 704 "lapi.c"
      var $10=(($9+8)|0); //@line 704 "lapi.c"
      var $11=HEAP32[(($10)>>2)]; //@line 704 "lapi.c"
      var $12=(($11)|0)==0; //@line 704 "lapi.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 704 "lapi.c"
    case 3: 
      $mt=0; //@line 705 "lapi.c"
      __label__ = 5; break; //@line 705 "lapi.c"
    case 4: 
      var $15=$1; //@line 708 "lapi.c"
      var $16=(($15+8)|0); //@line 708 "lapi.c"
      var $17=HEAP32[(($16)>>2)]; //@line 708 "lapi.c"
      var $18=((($17)-(12))|0); //@line 708 "lapi.c"
      var $19=(($18)|0); //@line 708 "lapi.c"
      var $20=$19; //@line 708 "lapi.c"
      var $21=HEAP32[(($20)>>2)]; //@line 708 "lapi.c"
      var $22=$21; //@line 708 "lapi.c"
      $mt=$22; //@line 708 "lapi.c"
      __label__ = 5; break; //@line 709 "lapi.c"
    case 5: 
      var $24=$obj; //@line 710 "lapi.c"
      var $25=(($24+8)|0); //@line 710 "lapi.c"
      var $26=HEAP32[(($25)>>2)]; //@line 710 "lapi.c"
      if ((($26)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($26)|0) == 7) {
        __label__ = 12; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 6: 
      var $28=$mt; //@line 712 "lapi.c"
      var $29=$obj; //@line 712 "lapi.c"
      var $30=(($29)|0); //@line 712 "lapi.c"
      var $31=$30; //@line 712 "lapi.c"
      var $32=HEAP32[(($31)>>2)]; //@line 712 "lapi.c"
      var $33=$32; //@line 712 "lapi.c"
      var $34=(($33+8)|0); //@line 712 "lapi.c"
      HEAP32[(($34)>>2)]=$28; //@line 712 "lapi.c"
      var $35=$mt; //@line 713 "lapi.c"
      var $36=(($35)|0)!=0; //@line 713 "lapi.c"
      if ($36) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 713 "lapi.c"
    case 7: 
      var $38=$mt; //@line 714 "lapi.c"
      var $39=$38; //@line 714 "lapi.c"
      var $40=$39; //@line 714 "lapi.c"
      var $41=(($40+5)|0); //@line 714 "lapi.c"
      var $42=HEAPU8[($41)]; //@line 714 "lapi.c"
      var $43=(($42)&255); //@line 714 "lapi.c"
      var $44=$43 & 3; //@line 714 "lapi.c"
      var $45=(($44)|0)!=0; //@line 714 "lapi.c"
      if ($45) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 714 "lapi.c"
    case 8: 
      var $47=$obj; //@line 714 "lapi.c"
      var $48=(($47)|0); //@line 714 "lapi.c"
      var $49=$48; //@line 714 "lapi.c"
      var $50=HEAP32[(($49)>>2)]; //@line 714 "lapi.c"
      var $51=$50; //@line 714 "lapi.c"
      var $52=$51; //@line 714 "lapi.c"
      var $53=$52; //@line 714 "lapi.c"
      var $54=(($53+5)|0); //@line 714 "lapi.c"
      var $55=HEAPU8[($54)]; //@line 714 "lapi.c"
      var $56=(($55)&255); //@line 714 "lapi.c"
      var $57=$56 & 4; //@line 714 "lapi.c"
      var $58=(($57)|0)!=0; //@line 714 "lapi.c"
      if ($58) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 714 "lapi.c"
    case 9: 
      var $60=$1; //@line 714 "lapi.c"
      var $61=$obj; //@line 714 "lapi.c"
      var $62=(($61)|0); //@line 714 "lapi.c"
      var $63=$62; //@line 714 "lapi.c"
      var $64=HEAP32[(($63)>>2)]; //@line 714 "lapi.c"
      var $65=$64; //@line 714 "lapi.c"
      __Z16luaC_barrierbackP9lua_StateP5Table($60, $65); //@line 714 "lapi.c"
      __label__ = 10; break; //@line 714 "lapi.c"
    case 10: 
      __label__ = 11; break; //@line 714 "lapi.c"
    case 11: 
      __label__ = 19; break; //@line 715 "lapi.c"
    case 12: 
      var $69=$mt; //@line 718 "lapi.c"
      var $70=$obj; //@line 718 "lapi.c"
      var $71=(($70)|0); //@line 718 "lapi.c"
      var $72=$71; //@line 718 "lapi.c"
      var $73=HEAP32[(($72)>>2)]; //@line 718 "lapi.c"
      var $74=$73; //@line 718 "lapi.c"
      var $75=$74; //@line 718 "lapi.c"
      var $76=(($75+8)|0); //@line 718 "lapi.c"
      HEAP32[(($76)>>2)]=$69; //@line 718 "lapi.c"
      var $77=$mt; //@line 719 "lapi.c"
      var $78=(($77)|0)!=0; //@line 719 "lapi.c"
      if ($78) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 719 "lapi.c"
    case 13: 
      var $80=$mt; //@line 720 "lapi.c"
      var $81=$80; //@line 720 "lapi.c"
      var $82=$81; //@line 720 "lapi.c"
      var $83=(($82+5)|0); //@line 720 "lapi.c"
      var $84=HEAPU8[($83)]; //@line 720 "lapi.c"
      var $85=(($84)&255); //@line 720 "lapi.c"
      var $86=$85 & 3; //@line 720 "lapi.c"
      var $87=(($86)|0)!=0; //@line 720 "lapi.c"
      if ($87) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 720 "lapi.c"
    case 14: 
      var $89=$obj; //@line 720 "lapi.c"
      var $90=(($89)|0); //@line 720 "lapi.c"
      var $91=$90; //@line 720 "lapi.c"
      var $92=HEAP32[(($91)>>2)]; //@line 720 "lapi.c"
      var $93=$92; //@line 720 "lapi.c"
      var $94=$93; //@line 720 "lapi.c"
      var $95=$94; //@line 720 "lapi.c"
      var $96=(($95+5)|0); //@line 720 "lapi.c"
      var $97=HEAPU8[($96)]; //@line 720 "lapi.c"
      var $98=(($97)&255); //@line 720 "lapi.c"
      var $99=$98 & 4; //@line 720 "lapi.c"
      var $100=(($99)|0)!=0; //@line 720 "lapi.c"
      if ($100) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 720 "lapi.c"
    case 15: 
      var $102=$1; //@line 720 "lapi.c"
      var $103=$obj; //@line 720 "lapi.c"
      var $104=(($103)|0); //@line 720 "lapi.c"
      var $105=$104; //@line 720 "lapi.c"
      var $106=HEAP32[(($105)>>2)]; //@line 720 "lapi.c"
      var $107=$106; //@line 720 "lapi.c"
      var $108=$107; //@line 720 "lapi.c"
      var $109=$mt; //@line 720 "lapi.c"
      var $110=$109; //@line 720 "lapi.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($102, $108, $110); //@line 720 "lapi.c"
      __label__ = 16; break; //@line 720 "lapi.c"
    case 16: 
      __label__ = 17; break; //@line 720 "lapi.c"
    case 17: 
      __label__ = 19; break; //@line 721 "lapi.c"
    case 18: 
      var $114=$mt; //@line 724 "lapi.c"
      var $115=$obj; //@line 724 "lapi.c"
      var $116=(($115+8)|0); //@line 724 "lapi.c"
      var $117=HEAP32[(($116)>>2)]; //@line 724 "lapi.c"
      var $118=$1; //@line 724 "lapi.c"
      var $119=(($118+16)|0); //@line 724 "lapi.c"
      var $120=HEAP32[(($119)>>2)]; //@line 724 "lapi.c"
      var $121=(($120+132)|0); //@line 724 "lapi.c"
      var $122=(($121+($117<<2))|0); //@line 724 "lapi.c"
      HEAP32[(($122)>>2)]=$114; //@line 724 "lapi.c"
      __label__ = 19; break; //@line 725 "lapi.c"
    case 19: 
      var $124=$1; //@line 728 "lapi.c"
      var $125=(($124+8)|0); //@line 728 "lapi.c"
      var $126=HEAP32[(($125)>>2)]; //@line 728 "lapi.c"
      var $127=((($126)-(12))|0); //@line 728 "lapi.c"
      HEAP32[(($125)>>2)]=$127; //@line 728 "lapi.c"
      ;
      return 1; //@line 730 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_setmetatable["X"]=1;

function _lua_setfenv($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $res;
      var $i_o;
      $1=$L;
      $2=$idx;
      $res=1; //@line 736 "lapi.c"
      var $3=$1; //@line 739 "lapi.c"
      var $4=$2; //@line 739 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 739 "lapi.c"
      $o=$5; //@line 739 "lapi.c"
      var $6=$o; //@line 742 "lapi.c"
      var $7=(($6+8)|0); //@line 742 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 742 "lapi.c"
      if ((($8)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 8) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $10=$1; //@line 744 "lapi.c"
      var $11=(($10+8)|0); //@line 744 "lapi.c"
      var $12=HEAP32[(($11)>>2)]; //@line 744 "lapi.c"
      var $13=((($12)-(12))|0); //@line 744 "lapi.c"
      var $14=(($13)|0); //@line 744 "lapi.c"
      var $15=$14; //@line 744 "lapi.c"
      var $16=HEAP32[(($15)>>2)]; //@line 744 "lapi.c"
      var $17=$16; //@line 744 "lapi.c"
      var $18=$o; //@line 744 "lapi.c"
      var $19=(($18)|0); //@line 744 "lapi.c"
      var $20=$19; //@line 744 "lapi.c"
      var $21=HEAP32[(($20)>>2)]; //@line 744 "lapi.c"
      var $22=$21; //@line 744 "lapi.c"
      var $23=$22; //@line 744 "lapi.c"
      var $24=(($23+12)|0); //@line 744 "lapi.c"
      HEAP32[(($24)>>2)]=$17; //@line 744 "lapi.c"
      __label__ = 7; break; //@line 745 "lapi.c"
    case 4: 
      var $26=$1; //@line 747 "lapi.c"
      var $27=(($26+8)|0); //@line 747 "lapi.c"
      var $28=HEAP32[(($27)>>2)]; //@line 747 "lapi.c"
      var $29=((($28)-(12))|0); //@line 747 "lapi.c"
      var $30=(($29)|0); //@line 747 "lapi.c"
      var $31=$30; //@line 747 "lapi.c"
      var $32=HEAP32[(($31)>>2)]; //@line 747 "lapi.c"
      var $33=$32; //@line 747 "lapi.c"
      var $34=$o; //@line 747 "lapi.c"
      var $35=(($34)|0); //@line 747 "lapi.c"
      var $36=$35; //@line 747 "lapi.c"
      var $37=HEAP32[(($36)>>2)]; //@line 747 "lapi.c"
      var $38=$37; //@line 747 "lapi.c"
      var $39=$38; //@line 747 "lapi.c"
      var $40=(($39+12)|0); //@line 747 "lapi.c"
      HEAP32[(($40)>>2)]=$33; //@line 747 "lapi.c"
      __label__ = 7; break; //@line 748 "lapi.c"
    case 5: 
      var $42=$o; //@line 750 "lapi.c"
      var $43=(($42)|0); //@line 750 "lapi.c"
      var $44=$43; //@line 750 "lapi.c"
      var $45=HEAP32[(($44)>>2)]; //@line 750 "lapi.c"
      var $46=$45; //@line 750 "lapi.c"
      var $47=(($46+72)|0); //@line 750 "lapi.c"
      $i_o=$47; //@line 750 "lapi.c"
      var $48=$1; //@line 750 "lapi.c"
      var $49=(($48+8)|0); //@line 750 "lapi.c"
      var $50=HEAP32[(($49)>>2)]; //@line 750 "lapi.c"
      var $51=((($50)-(12))|0); //@line 750 "lapi.c"
      var $52=(($51)|0); //@line 750 "lapi.c"
      var $53=$52; //@line 750 "lapi.c"
      var $54=HEAP32[(($53)>>2)]; //@line 750 "lapi.c"
      var $55=$54; //@line 750 "lapi.c"
      var $56=$55; //@line 750 "lapi.c"
      var $57=$i_o; //@line 750 "lapi.c"
      var $58=(($57)|0); //@line 750 "lapi.c"
      var $59=$58; //@line 750 "lapi.c"
      HEAP32[(($59)>>2)]=$56; //@line 750 "lapi.c"
      var $60=$i_o; //@line 750 "lapi.c"
      var $61=(($60+8)|0); //@line 750 "lapi.c"
      HEAP32[(($61)>>2)]=5; //@line 750 "lapi.c"
      __label__ = 7; break; //@line 751 "lapi.c"
    case 6: 
      $res=0; //@line 753 "lapi.c"
      __label__ = 7; break; //@line 754 "lapi.c"
    case 7: 
      var $64=$res; //@line 756 "lapi.c"
      var $65=(($64)|0)!=0; //@line 756 "lapi.c"
      if ($65) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 756 "lapi.c"
    case 8: 
      var $67=$1; //@line 756 "lapi.c"
      var $68=(($67+8)|0); //@line 756 "lapi.c"
      var $69=HEAP32[(($68)>>2)]; //@line 756 "lapi.c"
      var $70=((($69)-(12))|0); //@line 756 "lapi.c"
      var $71=(($70)|0); //@line 756 "lapi.c"
      var $72=$71; //@line 756 "lapi.c"
      var $73=HEAP32[(($72)>>2)]; //@line 756 "lapi.c"
      var $74=$73; //@line 756 "lapi.c"
      var $75=$74; //@line 756 "lapi.c"
      var $76=$75; //@line 756 "lapi.c"
      var $77=(($76+5)|0); //@line 756 "lapi.c"
      var $78=HEAPU8[($77)]; //@line 756 "lapi.c"
      var $79=(($78)&255); //@line 756 "lapi.c"
      var $80=$79 & 3; //@line 756 "lapi.c"
      var $81=(($80)|0)!=0; //@line 756 "lapi.c"
      if ($81) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 756 "lapi.c"
    case 9: 
      var $83=$o; //@line 756 "lapi.c"
      var $84=(($83)|0); //@line 756 "lapi.c"
      var $85=$84; //@line 756 "lapi.c"
      var $86=HEAP32[(($85)>>2)]; //@line 756 "lapi.c"
      var $87=$86; //@line 756 "lapi.c"
      var $88=(($87+5)|0); //@line 756 "lapi.c"
      var $89=HEAPU8[($88)]; //@line 756 "lapi.c"
      var $90=(($89)&255); //@line 756 "lapi.c"
      var $91=$90 & 4; //@line 756 "lapi.c"
      var $92=(($91)|0)!=0; //@line 756 "lapi.c"
      if ($92) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 756 "lapi.c"
    case 10: 
      var $94=$1; //@line 756 "lapi.c"
      var $95=$o; //@line 756 "lapi.c"
      var $96=(($95)|0); //@line 756 "lapi.c"
      var $97=$96; //@line 756 "lapi.c"
      var $98=HEAP32[(($97)>>2)]; //@line 756 "lapi.c"
      var $99=$1; //@line 756 "lapi.c"
      var $100=(($99+8)|0); //@line 756 "lapi.c"
      var $101=HEAP32[(($100)>>2)]; //@line 756 "lapi.c"
      var $102=((($101)-(12))|0); //@line 756 "lapi.c"
      var $103=(($102)|0); //@line 756 "lapi.c"
      var $104=$103; //@line 756 "lapi.c"
      var $105=HEAP32[(($104)>>2)]; //@line 756 "lapi.c"
      var $106=$105; //@line 756 "lapi.c"
      var $107=$106; //@line 756 "lapi.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($94, $98, $107); //@line 756 "lapi.c"
      __label__ = 11; break; //@line 756 "lapi.c"
    case 11: 
      __label__ = 12; break; //@line 756 "lapi.c"
    case 12: 
      var $110=$1; //@line 757 "lapi.c"
      var $111=(($110+8)|0); //@line 757 "lapi.c"
      var $112=HEAP32[(($111)>>2)]; //@line 757 "lapi.c"
      var $113=((($112)-(12))|0); //@line 757 "lapi.c"
      HEAP32[(($111)>>2)]=$113; //@line 757 "lapi.c"
      var $114=$res; //@line 759 "lapi.c"
      ;
      return $114; //@line 759 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_setfenv["X"]=1;

function _lua_call($L, $nargs, $nresults) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $func;
      $1=$L;
      $2=$nargs;
      $3=$nresults;
      var $4=$1; //@line 781 "lapi.c"
      var $5=(($4+8)|0); //@line 781 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 781 "lapi.c"
      var $7=$2; //@line 781 "lapi.c"
      var $8=((($7)+(1))|0); //@line 781 "lapi.c"
      var $9=(((-$8))|0); //@line 781 "lapi.c"
      var $10=(($6+($9)*(12))|0); //@line 781 "lapi.c"
      $func=$10; //@line 781 "lapi.c"
      var $11=$1; //@line 782 "lapi.c"
      var $12=$func; //@line 782 "lapi.c"
      var $13=$3; //@line 782 "lapi.c"
      __Z9luaD_callP9lua_StateP10lua_TValuei($11, $12, $13); //@line 782 "lapi.c"
      var $14=$3; //@line 783 "lapi.c"
      var $15=(($14)|0)==-1; //@line 783 "lapi.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 783 "lapi.c"
    case 3: 
      var $17=$1; //@line 783 "lapi.c"
      var $18=(($17+8)|0); //@line 783 "lapi.c"
      var $19=HEAPU32[(($18)>>2)]; //@line 783 "lapi.c"
      var $20=$1; //@line 783 "lapi.c"
      var $21=(($20+20)|0); //@line 783 "lapi.c"
      var $22=HEAP32[(($21)>>2)]; //@line 783 "lapi.c"
      var $23=(($22+8)|0); //@line 783 "lapi.c"
      var $24=HEAPU32[(($23)>>2)]; //@line 783 "lapi.c"
      var $25=(($19)>>>0) >= (($24)>>>0); //@line 783 "lapi.c"
      if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 783 "lapi.c"
    case 4: 
      var $27=$1; //@line 783 "lapi.c"
      var $28=(($27+8)|0); //@line 783 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 783 "lapi.c"
      var $30=$1; //@line 783 "lapi.c"
      var $31=(($30+20)|0); //@line 783 "lapi.c"
      var $32=HEAP32[(($31)>>2)]; //@line 783 "lapi.c"
      var $33=(($32+8)|0); //@line 783 "lapi.c"
      HEAP32[(($33)>>2)]=$29; //@line 783 "lapi.c"
      __label__ = 5; break; //@line 783 "lapi.c"
    case 5: 
      ;
      return; //@line 785 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_pcall($L, $nargs, $nresults, $errfunc) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c=__stackBase__;
      var $status;
      var $func;
      var $o;
      $1=$L;
      $2=$nargs;
      $3=$nresults;
      $4=$errfunc;
      var $5=$4; //@line 812 "lapi.c"
      var $6=(($5)|0)==0; //@line 812 "lapi.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 812 "lapi.c"
    case 3: 
      $func=0; //@line 813 "lapi.c"
      __label__ = 5; break; //@line 813 "lapi.c"
    case 4: 
      var $9=$1; //@line 815 "lapi.c"
      var $10=$4; //@line 815 "lapi.c"
      var $11=__Z9index2adrP9lua_Statei($9, $10); //@line 815 "lapi.c"
      $o=$11; //@line 815 "lapi.c"
      var $12=$o; //@line 817 "lapi.c"
      var $13=$12; //@line 817 "lapi.c"
      var $14=$1; //@line 817 "lapi.c"
      var $15=(($14+32)|0); //@line 817 "lapi.c"
      var $16=HEAP32[(($15)>>2)]; //@line 817 "lapi.c"
      var $17=$16; //@line 817 "lapi.c"
      var $18=$13; //@line 817 "lapi.c"
      var $19=$17; //@line 817 "lapi.c"
      var $20=((($18)-($19))|0); //@line 817 "lapi.c"
      $func=$20; //@line 817 "lapi.c"
      __label__ = 5; break; //@line 818 "lapi.c"
    case 5: 
      var $22=$1; //@line 819 "lapi.c"
      var $23=(($22+8)|0); //@line 819 "lapi.c"
      var $24=HEAP32[(($23)>>2)]; //@line 819 "lapi.c"
      var $25=$2; //@line 819 "lapi.c"
      var $26=((($25)+(1))|0); //@line 819 "lapi.c"
      var $27=(((-$26))|0); //@line 819 "lapi.c"
      var $28=(($24+($27)*(12))|0); //@line 819 "lapi.c"
      var $29=(($c)|0); //@line 819 "lapi.c"
      HEAP32[(($29)>>2)]=$28; //@line 819 "lapi.c"
      var $30=$3; //@line 820 "lapi.c"
      var $31=(($c+4)|0); //@line 820 "lapi.c"
      HEAP32[(($31)>>2)]=$30; //@line 820 "lapi.c"
      var $32=$1; //@line 821 "lapi.c"
      var $33=$c; //@line 821 "lapi.c"
      var $34=(($c)|0); //@line 821 "lapi.c"
      var $35=HEAP32[(($34)>>2)]; //@line 821 "lapi.c"
      var $36=$35; //@line 821 "lapi.c"
      var $37=$1; //@line 821 "lapi.c"
      var $38=(($37+32)|0); //@line 821 "lapi.c"
      var $39=HEAP32[(($38)>>2)]; //@line 821 "lapi.c"
      var $40=$39; //@line 821 "lapi.c"
      var $41=$36; //@line 821 "lapi.c"
      var $42=$40; //@line 821 "lapi.c"
      var $43=((($41)-($42))|0); //@line 821 "lapi.c"
      var $44=$func; //@line 821 "lapi.c"
      var $45=__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($32, 2, $33, $43, $44); //@line 821 "lapi.c"
      $status=$45; //@line 821 "lapi.c"
      var $46=$3; //@line 822 "lapi.c"
      var $47=(($46)|0)==-1; //@line 822 "lapi.c"
      if ($47) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 822 "lapi.c"
    case 6: 
      var $49=$1; //@line 822 "lapi.c"
      var $50=(($49+8)|0); //@line 822 "lapi.c"
      var $51=HEAPU32[(($50)>>2)]; //@line 822 "lapi.c"
      var $52=$1; //@line 822 "lapi.c"
      var $53=(($52+20)|0); //@line 822 "lapi.c"
      var $54=HEAP32[(($53)>>2)]; //@line 822 "lapi.c"
      var $55=(($54+8)|0); //@line 822 "lapi.c"
      var $56=HEAPU32[(($55)>>2)]; //@line 822 "lapi.c"
      var $57=(($51)>>>0) >= (($56)>>>0); //@line 822 "lapi.c"
      if ($57) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 822 "lapi.c"
    case 7: 
      var $59=$1; //@line 822 "lapi.c"
      var $60=(($59+8)|0); //@line 822 "lapi.c"
      var $61=HEAP32[(($60)>>2)]; //@line 822 "lapi.c"
      var $62=$1; //@line 822 "lapi.c"
      var $63=(($62+20)|0); //@line 822 "lapi.c"
      var $64=HEAP32[(($63)>>2)]; //@line 822 "lapi.c"
      var $65=(($64+8)|0); //@line 822 "lapi.c"
      HEAP32[(($65)>>2)]=$61; //@line 822 "lapi.c"
      __label__ = 8; break; //@line 822 "lapi.c"
    case 8: 
      var $67=$status; //@line 824 "lapi.c"
      STACKTOP = __stackBase__;
      return $67; //@line 824 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_pcall["X"]=1;

function __Z6f_callP9lua_StatePv($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  var $c;
  $1=$L;
  $2=$ud;
  var $3=$2; //@line 799 "lapi.c"
  var $4=$3; //@line 799 "lapi.c"
  $c=$4; //@line 799 "lapi.c"
  var $5=$1; //@line 800 "lapi.c"
  var $6=$c; //@line 800 "lapi.c"
  var $7=(($6)|0); //@line 800 "lapi.c"
  var $8=HEAP32[(($7)>>2)]; //@line 800 "lapi.c"
  var $9=$c; //@line 800 "lapi.c"
  var $10=(($9+4)|0); //@line 800 "lapi.c"
  var $11=HEAP32[(($10)>>2)]; //@line 800 "lapi.c"
  __Z9luaD_callP9lua_StateP10lua_TValuei($5, $8, $11); //@line 800 "lapi.c"
  ;
  return; //@line 801 "lapi.c"
}


function _lua_cpcall($L, $func, $ud) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $c=__stackBase__;
  var $status;
  $1=$L;
  $2=$func;
  $3=$ud;
  var $4=$2; //@line 854 "lapi.c"
  var $5=(($c)|0); //@line 854 "lapi.c"
  HEAP32[(($5)>>2)]=$4; //@line 854 "lapi.c"
  var $6=$3; //@line 855 "lapi.c"
  var $7=(($c+4)|0); //@line 855 "lapi.c"
  HEAP32[(($7)>>2)]=$6; //@line 855 "lapi.c"
  var $8=$1; //@line 856 "lapi.c"
  var $9=$c; //@line 856 "lapi.c"
  var $10=$1; //@line 856 "lapi.c"
  var $11=(($10+8)|0); //@line 856 "lapi.c"
  var $12=HEAP32[(($11)>>2)]; //@line 856 "lapi.c"
  var $13=$12; //@line 856 "lapi.c"
  var $14=$1; //@line 856 "lapi.c"
  var $15=(($14+32)|0); //@line 856 "lapi.c"
  var $16=HEAP32[(($15)>>2)]; //@line 856 "lapi.c"
  var $17=$16; //@line 856 "lapi.c"
  var $18=$13; //@line 856 "lapi.c"
  var $19=$17; //@line 856 "lapi.c"
  var $20=((($18)-($19))|0); //@line 856 "lapi.c"
  var $21=__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($8, 4, $9, $20, 0); //@line 856 "lapi.c"
  $status=$21; //@line 856 "lapi.c"
  var $22=$status; //@line 858 "lapi.c"
  STACKTOP = __stackBase__;
  return $22; //@line 858 "lapi.c"
}


function __Z7f_CcallP9lua_StatePv($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  var $c;
  var $cl;
  var $i_o;
  var $i_o1;
  $1=$L;
  $2=$ud;
  var $3=$2; //@line 838 "lapi.c"
  var $4=$3; //@line 838 "lapi.c"
  $c=$4; //@line 838 "lapi.c"
  var $5=$1; //@line 840 "lapi.c"
  var $6=$1; //@line 840 "lapi.c"
  var $7=__Z10getcurrenvP9lua_State($6); //@line 840 "lapi.c"
  var $8=__Z16luaF_newCclosureP9lua_StateiP5Table($5, 0, $7); //@line 840 "lapi.c"
  $cl=$8; //@line 840 "lapi.c"
  var $9=$c; //@line 841 "lapi.c"
  var $10=(($9)|0); //@line 841 "lapi.c"
  var $11=HEAP32[(($10)>>2)]; //@line 841 "lapi.c"
  var $12=$cl; //@line 841 "lapi.c"
  var $13=$12; //@line 841 "lapi.c"
  var $14=(($13+16)|0); //@line 841 "lapi.c"
  HEAP32[(($14)>>2)]=$11; //@line 841 "lapi.c"
  var $15=$1; //@line 842 "lapi.c"
  var $16=(($15+8)|0); //@line 842 "lapi.c"
  var $17=HEAP32[(($16)>>2)]; //@line 842 "lapi.c"
  $i_o=$17; //@line 842 "lapi.c"
  var $18=$cl; //@line 842 "lapi.c"
  var $19=$18; //@line 842 "lapi.c"
  var $20=$i_o; //@line 842 "lapi.c"
  var $21=(($20)|0); //@line 842 "lapi.c"
  var $22=$21; //@line 842 "lapi.c"
  HEAP32[(($22)>>2)]=$19; //@line 842 "lapi.c"
  var $23=$i_o; //@line 842 "lapi.c"
  var $24=(($23+8)|0); //@line 842 "lapi.c"
  HEAP32[(($24)>>2)]=6; //@line 842 "lapi.c"
  var $25=$1; //@line 843 "lapi.c"
  var $26=(($25+8)|0); //@line 843 "lapi.c"
  var $27=HEAP32[(($26)>>2)]; //@line 843 "lapi.c"
  var $28=(($27+12)|0); //@line 843 "lapi.c"
  HEAP32[(($26)>>2)]=$28; //@line 843 "lapi.c"
  var $29=$1; //@line 844 "lapi.c"
  var $30=(($29+8)|0); //@line 844 "lapi.c"
  var $31=HEAP32[(($30)>>2)]; //@line 844 "lapi.c"
  $i_o1=$31; //@line 844 "lapi.c"
  var $32=$c; //@line 844 "lapi.c"
  var $33=(($32+4)|0); //@line 844 "lapi.c"
  var $34=HEAP32[(($33)>>2)]; //@line 844 "lapi.c"
  var $35=$i_o1; //@line 844 "lapi.c"
  var $36=(($35)|0); //@line 844 "lapi.c"
  var $37=$36; //@line 844 "lapi.c"
  HEAP32[(($37)>>2)]=$34; //@line 844 "lapi.c"
  var $38=$i_o1; //@line 844 "lapi.c"
  var $39=(($38+8)|0); //@line 844 "lapi.c"
  HEAP32[(($39)>>2)]=2; //@line 844 "lapi.c"
  var $40=$1; //@line 845 "lapi.c"
  var $41=(($40+8)|0); //@line 845 "lapi.c"
  var $42=HEAP32[(($41)>>2)]; //@line 845 "lapi.c"
  var $43=(($42+12)|0); //@line 845 "lapi.c"
  HEAP32[(($41)>>2)]=$43; //@line 845 "lapi.c"
  var $44=$1; //@line 846 "lapi.c"
  var $45=$1; //@line 846 "lapi.c"
  var $46=(($45+8)|0); //@line 846 "lapi.c"
  var $47=HEAP32[(($46)>>2)]; //@line 846 "lapi.c"
  var $48=((($47)-(24))|0); //@line 846 "lapi.c"
  __Z9luaD_callP9lua_StateP10lua_TValuei($44, $48, 0); //@line 846 "lapi.c"
  ;
  return; //@line 847 "lapi.c"
}
__Z7f_CcallP9lua_StatePv["X"]=1;

function _lua_load($L, $reader, $data, $chunkname) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $z=__stackBase__;
      var $status;
      $1=$L;
      $2=$reader;
      $3=$data;
      $4=$chunkname;
      var $5=$4; //@line 867 "lapi.c"
      var $6=(($5)|0)!=0; //@line 867 "lapi.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 867 "lapi.c"
    case 3: 
      $4=((STRING_TABLE.__str2)|0); //@line 867 "lapi.c"
      __label__ = 4; break; //@line 867 "lapi.c"
    case 4: 
      var $9=$1; //@line 868 "lapi.c"
      var $10=$2; //@line 868 "lapi.c"
      var $11=$3; //@line 868 "lapi.c"
      __Z9luaZ_initP9lua_StateP3ZioPFPKcS0_PvPjES5_($9, $z, $10, $11); //@line 868 "lapi.c"
      var $12=$1; //@line 869 "lapi.c"
      var $13=$4; //@line 869 "lapi.c"
      var $14=__Z20luaD_protectedparserP9lua_StateP3ZioPKc($12, $z, $13); //@line 869 "lapi.c"
      $status=$14; //@line 869 "lapi.c"
      var $15=$status; //@line 871 "lapi.c"
      STACKTOP = __stackBase__;
      return $15; //@line 871 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_dump($L, $writer, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      var $o;
      $1=$L;
      $2=$writer;
      $3=$data;
      var $4=$1; //@line 880 "lapi.c"
      var $5=(($4+8)|0); //@line 880 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 880 "lapi.c"
      var $7=((($6)-(12))|0); //@line 880 "lapi.c"
      $o=$7; //@line 880 "lapi.c"
      var $8=$o; //@line 881 "lapi.c"
      var $9=(($8+8)|0); //@line 881 "lapi.c"
      var $10=HEAP32[(($9)>>2)]; //@line 881 "lapi.c"
      var $11=(($10)|0)==6; //@line 881 "lapi.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 881 "lapi.c"
    case 3: 
      var $13=$o; //@line 881 "lapi.c"
      var $14=(($13)|0); //@line 881 "lapi.c"
      var $15=$14; //@line 881 "lapi.c"
      var $16=HEAP32[(($15)>>2)]; //@line 881 "lapi.c"
      var $17=$16; //@line 881 "lapi.c"
      var $18=$17; //@line 881 "lapi.c"
      var $19=(($18+6)|0); //@line 881 "lapi.c"
      var $20=HEAP8[($19)]; //@line 881 "lapi.c"
      var $21=(($20 << 24) >> 24)!=0; //@line 881 "lapi.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 881 "lapi.c"
    case 4: 
      var $23=$1; //@line 882 "lapi.c"
      var $24=$o; //@line 882 "lapi.c"
      var $25=(($24)|0); //@line 882 "lapi.c"
      var $26=$25; //@line 882 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 882 "lapi.c"
      var $28=$27; //@line 882 "lapi.c"
      var $29=$28; //@line 882 "lapi.c"
      var $30=(($29+16)|0); //@line 882 "lapi.c"
      var $31=HEAP32[(($30)>>2)]; //@line 882 "lapi.c"
      var $32=$2; //@line 882 "lapi.c"
      var $33=$3; //@line 882 "lapi.c"
      var $34=__Z9luaU_dumpP9lua_StatePK5ProtoPFiS0_PKvjPvES6_i($23, $31, $32, $33, 0); //@line 882 "lapi.c"
      $status=$34; //@line 882 "lapi.c"
      __label__ = 6; break; //@line 882 "lapi.c"
    case 5: 
      $status=1; //@line 884 "lapi.c"
      __label__ = 6; break; //@line 884 "lapi.c"
    case 6: 
      var $37=$status; //@line 886 "lapi.c"
      ;
      return $37; //@line 886 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_getallocf($L, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      $1=$L;
      $2=$ud;
      var $3=$2; //@line 1010 "lapi.c"
      var $4=(($3)|0)!=0; //@line 1010 "lapi.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1010 "lapi.c"
    case 3: 
      var $6=$1; //@line 1010 "lapi.c"
      var $7=(($6+16)|0); //@line 1010 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 1010 "lapi.c"
      var $9=(($8+16)|0); //@line 1010 "lapi.c"
      var $10=HEAP32[(($9)>>2)]; //@line 1010 "lapi.c"
      var $11=$2; //@line 1010 "lapi.c"
      HEAP32[(($11)>>2)]=$10; //@line 1010 "lapi.c"
      __label__ = 4; break; //@line 1010 "lapi.c"
    case 4: 
      var $13=$1; //@line 1011 "lapi.c"
      var $14=(($13+16)|0); //@line 1011 "lapi.c"
      var $15=HEAP32[(($14)>>2)]; //@line 1011 "lapi.c"
      var $16=(($15+12)|0); //@line 1011 "lapi.c"
      var $17=HEAP32[(($16)>>2)]; //@line 1011 "lapi.c"
      $f=$17; //@line 1011 "lapi.c"
      var $18=$f; //@line 1013 "lapi.c"
      ;
      return $18; //@line 1013 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_setallocf($L, $f, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$f;
  $3=$ud;
  var $4=$3; //@line 1019 "lapi.c"
  var $5=$1; //@line 1019 "lapi.c"
  var $6=(($5+16)|0); //@line 1019 "lapi.c"
  var $7=HEAP32[(($6)>>2)]; //@line 1019 "lapi.c"
  var $8=(($7+16)|0); //@line 1019 "lapi.c"
  HEAP32[(($8)>>2)]=$4; //@line 1019 "lapi.c"
  var $9=$2; //@line 1020 "lapi.c"
  var $10=$1; //@line 1020 "lapi.c"
  var $11=(($10+16)|0); //@line 1020 "lapi.c"
  var $12=HEAP32[(($11)>>2)]; //@line 1020 "lapi.c"
  var $13=(($12+12)|0); //@line 1020 "lapi.c"
  HEAP32[(($13)>>2)]=$9; //@line 1020 "lapi.c"
  ;
  return; //@line 1022 "lapi.c"
}


function __Z11aux_upvalueP10lua_TValueiPS0_($fi, $n, $val) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $f;
      var $p;
      $2=$fi;
      $3=$n;
      $4=$val;
      var $5=$2; //@line 1041 "lapi.c"
      var $6=(($5+8)|0); //@line 1041 "lapi.c"
      var $7=HEAP32[(($6)>>2)]; //@line 1041 "lapi.c"
      var $8=(($7)|0)==6; //@line 1041 "lapi.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1041 "lapi.c"
    case 3: 
      $1=0; //@line 1041 "lapi.c"
      __label__ = 13; break; //@line 1041 "lapi.c"
    case 4: 
      var $11=$2; //@line 1042 "lapi.c"
      var $12=(($11)|0); //@line 1042 "lapi.c"
      var $13=$12; //@line 1042 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 1042 "lapi.c"
      var $15=$14; //@line 1042 "lapi.c"
      $f=$15; //@line 1042 "lapi.c"
      var $16=$f; //@line 1043 "lapi.c"
      var $17=$16; //@line 1043 "lapi.c"
      var $18=(($17+6)|0); //@line 1043 "lapi.c"
      var $19=HEAP8[($18)]; //@line 1043 "lapi.c"
      var $20=(($19 << 24) >> 24)!=0; //@line 1043 "lapi.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 1043 "lapi.c"
    case 5: 
      var $22=$3; //@line 1044 "lapi.c"
      var $23=1 <= (($22)|0); //@line 1044 "lapi.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1044 "lapi.c"
    case 6: 
      var $25=$3; //@line 1044 "lapi.c"
      var $26=$f; //@line 1044 "lapi.c"
      var $27=$26; //@line 1044 "lapi.c"
      var $28=(($27+7)|0); //@line 1044 "lapi.c"
      var $29=HEAPU8[($28)]; //@line 1044 "lapi.c"
      var $30=(($29)&255); //@line 1044 "lapi.c"
      var $31=(($25)|0) <= (($30)|0); //@line 1044 "lapi.c"
      if ($31) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 1044 "lapi.c"
    case 7: 
      $1=0; //@line 1044 "lapi.c"
      __label__ = 13; break; //@line 1044 "lapi.c"
    case 8: 
      var $34=$3; //@line 1045 "lapi.c"
      var $35=((($34)-(1))|0); //@line 1045 "lapi.c"
      var $36=$f; //@line 1045 "lapi.c"
      var $37=$36; //@line 1045 "lapi.c"
      var $38=(($37+20)|0); //@line 1045 "lapi.c"
      var $39=(($38+($35)*(12))|0); //@line 1045 "lapi.c"
      var $40=$4; //@line 1045 "lapi.c"
      HEAP32[(($40)>>2)]=$39; //@line 1045 "lapi.c"
      $1=((__str3)|0); //@line 1046 "lapi.c"
      __label__ = 13; break; //@line 1046 "lapi.c"
    case 9: 
      var $42=$f; //@line 1049 "lapi.c"
      var $43=$42; //@line 1049 "lapi.c"
      var $44=(($43+16)|0); //@line 1049 "lapi.c"
      var $45=HEAP32[(($44)>>2)]; //@line 1049 "lapi.c"
      $p=$45; //@line 1049 "lapi.c"
      var $46=$3; //@line 1050 "lapi.c"
      var $47=1 <= (($46)|0); //@line 1050 "lapi.c"
      if ($47) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1050 "lapi.c"
    case 10: 
      var $49=$3; //@line 1050 "lapi.c"
      var $50=$p; //@line 1050 "lapi.c"
      var $51=(($50+36)|0); //@line 1050 "lapi.c"
      var $52=HEAP32[(($51)>>2)]; //@line 1050 "lapi.c"
      var $53=(($49)|0) <= (($52)|0); //@line 1050 "lapi.c"
      if ($53) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 1050 "lapi.c"
    case 11: 
      $1=0; //@line 1050 "lapi.c"
      __label__ = 13; break; //@line 1050 "lapi.c"
    case 12: 
      var $56=$3; //@line 1051 "lapi.c"
      var $57=((($56)-(1))|0); //@line 1051 "lapi.c"
      var $58=$f; //@line 1051 "lapi.c"
      var $59=$58; //@line 1051 "lapi.c"
      var $60=(($59+20)|0); //@line 1051 "lapi.c"
      var $61=(($60+($57<<2))|0); //@line 1051 "lapi.c"
      var $62=HEAP32[(($61)>>2)]; //@line 1051 "lapi.c"
      var $63=(($62+8)|0); //@line 1051 "lapi.c"
      var $64=HEAP32[(($63)>>2)]; //@line 1051 "lapi.c"
      var $65=$4; //@line 1051 "lapi.c"
      HEAP32[(($65)>>2)]=$64; //@line 1051 "lapi.c"
      var $66=$3; //@line 1052 "lapi.c"
      var $67=((($66)-(1))|0); //@line 1052 "lapi.c"
      var $68=$p; //@line 1052 "lapi.c"
      var $69=(($68+28)|0); //@line 1052 "lapi.c"
      var $70=HEAP32[(($69)>>2)]; //@line 1052 "lapi.c"
      var $71=(($70+($67<<2))|0); //@line 1052 "lapi.c"
      var $72=HEAP32[(($71)>>2)]; //@line 1052 "lapi.c"
      var $73=(($72+16)|0); //@line 1052 "lapi.c"
      var $74=$73; //@line 1052 "lapi.c"
      $1=$74; //@line 1052 "lapi.c"
      __label__ = 13; break; //@line 1052 "lapi.c"
    case 13: 
      var $76=$1; //@line 1054 "lapi.c"
      ;
      return $76; //@line 1054 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11aux_upvalueP10lua_TValueiPS0_["X"]=1;

function _lua_gc($L, $what, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $res;
      var $g;
      var $a;
      $1=$L;
      $2=$what;
      $3=$data;
      $res=0; //@line 900 "lapi.c"
      var $4=$1; //@line 903 "lapi.c"
      var $5=(($4+16)|0); //@line 903 "lapi.c"
      var $6=HEAP32[(($5)>>2)]; //@line 903 "lapi.c"
      $g=$6; //@line 903 "lapi.c"
      var $7=$2; //@line 904 "lapi.c"
      if ((($7)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 3) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 4) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 5) {
        __label__ = 8; break;
      }
      else if ((($7)|0) == 6) {
        __label__ = 17; break;
      }
      else if ((($7)|0) == 7) {
        __label__ = 18; break;
      }
      else {
      __label__ = 19; break;
      }
      
    case 3: 
      var $9=$g; //@line 906 "lapi.c"
      var $10=(($9+64)|0); //@line 906 "lapi.c"
      HEAP32[(($10)>>2)]=-3; //@line 906 "lapi.c"
      __label__ = 20; break; //@line 907 "lapi.c"
    case 4: 
      var $12=$g; //@line 910 "lapi.c"
      var $13=(($12+68)|0); //@line 910 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 910 "lapi.c"
      var $15=$g; //@line 910 "lapi.c"
      var $16=(($15+64)|0); //@line 910 "lapi.c"
      HEAP32[(($16)>>2)]=$14; //@line 910 "lapi.c"
      __label__ = 20; break; //@line 911 "lapi.c"
    case 5: 
      var $18=$1; //@line 914 "lapi.c"
      __Z11luaC_fullgcP9lua_State($18); //@line 914 "lapi.c"
      __label__ = 20; break; //@line 915 "lapi.c"
    case 6: 
      var $20=$g; //@line 919 "lapi.c"
      var $21=(($20+68)|0); //@line 919 "lapi.c"
      var $22=HEAPU32[(($21)>>2)]; //@line 919 "lapi.c"
      var $23=$22 >>> 10; //@line 919 "lapi.c"
      $res=$23; //@line 919 "lapi.c"
      __label__ = 20; break; //@line 920 "lapi.c"
    case 7: 
      var $25=$g; //@line 923 "lapi.c"
      var $26=(($25+68)|0); //@line 923 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 923 "lapi.c"
      var $28=$27 & 1023; //@line 923 "lapi.c"
      $res=$28; //@line 923 "lapi.c"
      __label__ = 20; break; //@line 924 "lapi.c"
    case 8: 
      var $30=$3; //@line 927 "lapi.c"
      var $31=$30 << 10; //@line 927 "lapi.c"
      $a=$31; //@line 927 "lapi.c"
      var $32=$a; //@line 928 "lapi.c"
      var $33=$g; //@line 928 "lapi.c"
      var $34=(($33+68)|0); //@line 928 "lapi.c"
      var $35=HEAPU32[(($34)>>2)]; //@line 928 "lapi.c"
      var $36=(($32)>>>0) <= (($35)>>>0); //@line 928 "lapi.c"
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 928 "lapi.c"
    case 9: 
      var $38=$g; //@line 929 "lapi.c"
      var $39=(($38+68)|0); //@line 929 "lapi.c"
      var $40=HEAP32[(($39)>>2)]; //@line 929 "lapi.c"
      var $41=$a; //@line 929 "lapi.c"
      var $42=((($40)-($41))|0); //@line 929 "lapi.c"
      var $43=$g; //@line 929 "lapi.c"
      var $44=(($43+64)|0); //@line 929 "lapi.c"
      HEAP32[(($44)>>2)]=$42; //@line 929 "lapi.c"
      __label__ = 11; break; //@line 929 "lapi.c"
    case 10: 
      var $46=$g; //@line 931 "lapi.c"
      var $47=(($46+64)|0); //@line 931 "lapi.c"
      HEAP32[(($47)>>2)]=0; //@line 931 "lapi.c"
      __label__ = 11; break; //@line 931 "lapi.c"
    case 11: 
      __label__ = 12; break; //@line 932 "lapi.c"
    case 12: 
      var $50=$g; //@line 932 "lapi.c"
      var $51=(($50+64)|0); //@line 932 "lapi.c"
      var $52=HEAPU32[(($51)>>2)]; //@line 932 "lapi.c"
      var $53=$g; //@line 932 "lapi.c"
      var $54=(($53+68)|0); //@line 932 "lapi.c"
      var $55=HEAPU32[(($54)>>2)]; //@line 932 "lapi.c"
      var $56=(($52)>>>0) <= (($55)>>>0); //@line 932 "lapi.c"
      if ($56) { __label__ = 13; break; } else { __label__ = 16; break; } //@line 932 "lapi.c"
    case 13: 
      var $58=$1; //@line 933 "lapi.c"
      __Z9luaC_stepP9lua_State($58); //@line 933 "lapi.c"
      var $59=$g; //@line 934 "lapi.c"
      var $60=(($59+21)|0); //@line 934 "lapi.c"
      var $61=HEAPU8[($60)]; //@line 934 "lapi.c"
      var $62=(($61)&255); //@line 934 "lapi.c"
      var $63=(($62)|0)==0; //@line 934 "lapi.c"
      if ($63) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 934 "lapi.c"
    case 14: 
      $res=1; //@line 935 "lapi.c"
      __label__ = 16; break; //@line 936 "lapi.c"
    case 15: 
      __label__ = 12; break; //@line 938 "lapi.c"
    case 16: 
      __label__ = 20; break; //@line 939 "lapi.c"
    case 17: 
      var $68=$g; //@line 942 "lapi.c"
      var $69=(($68+80)|0); //@line 942 "lapi.c"
      var $70=HEAP32[(($69)>>2)]; //@line 942 "lapi.c"
      $res=$70; //@line 942 "lapi.c"
      var $71=$3; //@line 943 "lapi.c"
      var $72=$g; //@line 943 "lapi.c"
      var $73=(($72+80)|0); //@line 943 "lapi.c"
      HEAP32[(($73)>>2)]=$71; //@line 943 "lapi.c"
      __label__ = 20; break; //@line 944 "lapi.c"
    case 18: 
      var $75=$g; //@line 947 "lapi.c"
      var $76=(($75+84)|0); //@line 947 "lapi.c"
      var $77=HEAP32[(($76)>>2)]; //@line 947 "lapi.c"
      $res=$77; //@line 947 "lapi.c"
      var $78=$3; //@line 948 "lapi.c"
      var $79=$g; //@line 948 "lapi.c"
      var $80=(($79+84)|0); //@line 948 "lapi.c"
      HEAP32[(($80)>>2)]=$78; //@line 948 "lapi.c"
      __label__ = 20; break; //@line 949 "lapi.c"
    case 19: 
      $res=-1; //@line 951 "lapi.c"
      __label__ = 20; break; //@line 952 "lapi.c"
    case 20: 
      var $83=$res; //@line 954 "lapi.c"
      ;
      return $83; //@line 954 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_gc["X"]=1;

function _lua_error($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 967 "lapi.c"
  __Z13luaG_errormsgP9lua_State($2); //@line 967 "lapi.c"
  ;
  return 0; //@line 969 "lapi.c"
}


function _lua_next($L, $idx) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $more;
      $1=$L;
      $2=$idx;
      var $3=$1; //@line 977 "lapi.c"
      var $4=$2; //@line 977 "lapi.c"
      var $5=__Z9index2adrP9lua_Statei($3, $4); //@line 977 "lapi.c"
      $t=$5; //@line 977 "lapi.c"
      var $6=$1; //@line 979 "lapi.c"
      var $7=$t; //@line 979 "lapi.c"
      var $8=(($7)|0); //@line 979 "lapi.c"
      var $9=$8; //@line 979 "lapi.c"
      var $10=HEAP32[(($9)>>2)]; //@line 979 "lapi.c"
      var $11=$10; //@line 979 "lapi.c"
      var $12=$1; //@line 979 "lapi.c"
      var $13=(($12+8)|0); //@line 979 "lapi.c"
      var $14=HEAP32[(($13)>>2)]; //@line 979 "lapi.c"
      var $15=((($14)-(12))|0); //@line 979 "lapi.c"
      var $16=__Z9luaH_nextP9lua_StateP5TableP10lua_TValue($6, $11, $15); //@line 979 "lapi.c"
      $more=$16; //@line 979 "lapi.c"
      var $17=$more; //@line 980 "lapi.c"
      var $18=(($17)|0)!=0; //@line 980 "lapi.c"
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 980 "lapi.c"
    case 3: 
      var $20=$1; //@line 981 "lapi.c"
      var $21=(($20+8)|0); //@line 981 "lapi.c"
      var $22=HEAP32[(($21)>>2)]; //@line 981 "lapi.c"
      var $23=(($22+12)|0); //@line 981 "lapi.c"
      HEAP32[(($21)>>2)]=$23; //@line 981 "lapi.c"
      __label__ = 5; break; //@line 982 "lapi.c"
    case 4: 
      var $25=$1; //@line 984 "lapi.c"
      var $26=(($25+8)|0); //@line 984 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 984 "lapi.c"
      var $28=((($27)-(12))|0); //@line 984 "lapi.c"
      HEAP32[(($26)>>2)]=$28; //@line 984 "lapi.c"
      __label__ = 5; break; //@line 984 "lapi.c"
    case 5: 
      var $30=$more; //@line 986 "lapi.c"
      ;
      return $30; //@line 986 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_concat($L, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i_o;
      $1=$L;
      $2=$n;
      var $3=$2; //@line 993 "lapi.c"
      var $4=(($3)|0) >= 2; //@line 993 "lapi.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 993 "lapi.c"
    case 3: 
      var $6=$1; //@line 994 "lapi.c"
      var $7=(($6+16)|0); //@line 994 "lapi.c"
      var $8=HEAP32[(($7)>>2)]; //@line 994 "lapi.c"
      var $9=(($8+68)|0); //@line 994 "lapi.c"
      var $10=HEAPU32[(($9)>>2)]; //@line 994 "lapi.c"
      var $11=$1; //@line 994 "lapi.c"
      var $12=(($11+16)|0); //@line 994 "lapi.c"
      var $13=HEAP32[(($12)>>2)]; //@line 994 "lapi.c"
      var $14=(($13+64)|0); //@line 994 "lapi.c"
      var $15=HEAPU32[(($14)>>2)]; //@line 994 "lapi.c"
      var $16=(($10)>>>0) >= (($15)>>>0); //@line 994 "lapi.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 994 "lapi.c"
    case 4: 
      var $18=$1; //@line 994 "lapi.c"
      __Z9luaC_stepP9lua_State($18); //@line 994 "lapi.c"
      __label__ = 5; break; //@line 994 "lapi.c"
    case 5: 
      var $20=$1; //@line 995 "lapi.c"
      var $21=$2; //@line 995 "lapi.c"
      var $22=$1; //@line 995 "lapi.c"
      var $23=(($22+8)|0); //@line 995 "lapi.c"
      var $24=HEAP32[(($23)>>2)]; //@line 995 "lapi.c"
      var $25=$1; //@line 995 "lapi.c"
      var $26=(($25+12)|0); //@line 995 "lapi.c"
      var $27=HEAP32[(($26)>>2)]; //@line 995 "lapi.c"
      var $28=$24; //@line 995 "lapi.c"
      var $29=$27; //@line 995 "lapi.c"
      var $30=((($28)-($29))|0); //@line 995 "lapi.c"
      var $31=((((($30)|0))/(12))&-1); //@line 995 "lapi.c"
      var $32=((($31)-(1))|0); //@line 995 "lapi.c"
      __Z11luaV_concatP9lua_Stateii($20, $21, $32); //@line 995 "lapi.c"
      var $33=$2; //@line 996 "lapi.c"
      var $34=((($33)-(1))|0); //@line 996 "lapi.c"
      var $35=$1; //@line 996 "lapi.c"
      var $36=(($35+8)|0); //@line 996 "lapi.c"
      var $37=HEAP32[(($36)>>2)]; //@line 996 "lapi.c"
      var $38=(((-$34))|0); //@line 996 "lapi.c"
      var $39=(($37+($38)*(12))|0); //@line 996 "lapi.c"
      HEAP32[(($36)>>2)]=$39; //@line 996 "lapi.c"
      __label__ = 9; break; //@line 997 "lapi.c"
    case 6: 
      var $41=$2; //@line 998 "lapi.c"
      var $42=(($41)|0)==0; //@line 998 "lapi.c"
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 998 "lapi.c"
    case 7: 
      var $44=$1; //@line 999 "lapi.c"
      var $45=(($44+8)|0); //@line 999 "lapi.c"
      var $46=HEAP32[(($45)>>2)]; //@line 999 "lapi.c"
      $i_o=$46; //@line 999 "lapi.c"
      var $47=$1; //@line 999 "lapi.c"
      var $48=__Z12luaS_newlstrP9lua_StatePKcj($47, ((__str3)|0), 0); //@line 999 "lapi.c"
      var $49=$48; //@line 999 "lapi.c"
      var $50=$i_o; //@line 999 "lapi.c"
      var $51=(($50)|0); //@line 999 "lapi.c"
      var $52=$51; //@line 999 "lapi.c"
      HEAP32[(($52)>>2)]=$49; //@line 999 "lapi.c"
      var $53=$i_o; //@line 999 "lapi.c"
      var $54=(($53+8)|0); //@line 999 "lapi.c"
      HEAP32[(($54)>>2)]=4; //@line 999 "lapi.c"
      var $55=$1; //@line 1000 "lapi.c"
      var $56=(($55+8)|0); //@line 1000 "lapi.c"
      var $57=HEAP32[(($56)>>2)]; //@line 1000 "lapi.c"
      var $58=(($57+12)|0); //@line 1000 "lapi.c"
      HEAP32[(($56)>>2)]=$58; //@line 1000 "lapi.c"
      __label__ = 8; break; //@line 1001 "lapi.c"
    case 8: 
      __label__ = 9; break; //@line 1001 "lapi.c"
    case 9: 
      ;
      return; //@line 1004 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_concat["X"]=1;

function _lua_newuserdata($L, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $u;
      var $i_o;
      $1=$L;
      $2=$size;
      var $3=$1; //@line 1028 "lapi.c"
      var $4=(($3+16)|0); //@line 1028 "lapi.c"
      var $5=HEAP32[(($4)>>2)]; //@line 1028 "lapi.c"
      var $6=(($5+68)|0); //@line 1028 "lapi.c"
      var $7=HEAPU32[(($6)>>2)]; //@line 1028 "lapi.c"
      var $8=$1; //@line 1028 "lapi.c"
      var $9=(($8+16)|0); //@line 1028 "lapi.c"
      var $10=HEAP32[(($9)>>2)]; //@line 1028 "lapi.c"
      var $11=(($10+64)|0); //@line 1028 "lapi.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 1028 "lapi.c"
      var $13=(($7)>>>0) >= (($12)>>>0); //@line 1028 "lapi.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1028 "lapi.c"
    case 3: 
      var $15=$1; //@line 1028 "lapi.c"
      __Z9luaC_stepP9lua_State($15); //@line 1028 "lapi.c"
      __label__ = 4; break; //@line 1028 "lapi.c"
    case 4: 
      var $17=$1; //@line 1029 "lapi.c"
      var $18=$2; //@line 1029 "lapi.c"
      var $19=$1; //@line 1029 "lapi.c"
      var $20=__Z10getcurrenvP9lua_State($19); //@line 1029 "lapi.c"
      var $21=__Z13luaS_newudataP9lua_StatejP5Table($17, $18, $20); //@line 1029 "lapi.c"
      $u=$21; //@line 1029 "lapi.c"
      var $22=$1; //@line 1030 "lapi.c"
      var $23=(($22+8)|0); //@line 1030 "lapi.c"
      var $24=HEAP32[(($23)>>2)]; //@line 1030 "lapi.c"
      $i_o=$24; //@line 1030 "lapi.c"
      var $25=$u; //@line 1030 "lapi.c"
      var $26=$25; //@line 1030 "lapi.c"
      var $27=$i_o; //@line 1030 "lapi.c"
      var $28=(($27)|0); //@line 1030 "lapi.c"
      var $29=$28; //@line 1030 "lapi.c"
      HEAP32[(($29)>>2)]=$26; //@line 1030 "lapi.c"
      var $30=$i_o; //@line 1030 "lapi.c"
      var $31=(($30+8)|0); //@line 1030 "lapi.c"
      HEAP32[(($31)>>2)]=7; //@line 1030 "lapi.c"
      var $32=$1; //@line 1031 "lapi.c"
      var $33=(($32+8)|0); //@line 1031 "lapi.c"
      var $34=HEAP32[(($33)>>2)]; //@line 1031 "lapi.c"
      var $35=(($34+12)|0); //@line 1031 "lapi.c"
      HEAP32[(($33)>>2)]=$35; //@line 1031 "lapi.c"
      var $36=$u; //@line 1033 "lapi.c"
      var $37=(($36+20)|0); //@line 1033 "lapi.c"
      var $38=$37; //@line 1033 "lapi.c"
      ;
      return $38; //@line 1033 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_getupvalue($L, $funcindex, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $name;
      var $val=__stackBase__;
      var $o2;
      var $o1;
      $1=$L;
      $2=$funcindex;
      $3=$n;
      var $4=$1; //@line 1061 "lapi.c"
      var $5=$2; //@line 1061 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 1061 "lapi.c"
      var $7=$3; //@line 1061 "lapi.c"
      var $8=__Z11aux_upvalueP10lua_TValueiPS0_($6, $7, $val); //@line 1061 "lapi.c"
      $name=$8; //@line 1061 "lapi.c"
      var $9=$name; //@line 1062 "lapi.c"
      var $10=(($9)|0)!=0; //@line 1062 "lapi.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1062 "lapi.c"
    case 3: 
      var $12=HEAP32[(($val)>>2)]; //@line 1063 "lapi.c"
      $o2=$12; //@line 1063 "lapi.c"
      var $13=$1; //@line 1063 "lapi.c"
      var $14=(($13+8)|0); //@line 1063 "lapi.c"
      var $15=HEAP32[(($14)>>2)]; //@line 1063 "lapi.c"
      $o1=$15; //@line 1063 "lapi.c"
      var $16=$o1; //@line 1063 "lapi.c"
      var $17=(($16)|0); //@line 1063 "lapi.c"
      var $18=$o2; //@line 1063 "lapi.c"
      var $19=(($18)|0); //@line 1063 "lapi.c"
      var $20=$17; //@line 1063 "lapi.c"
      var $21=$19; //@line 1063 "lapi.c"
      HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)]; //@line 1063 "lapi.c"
      var $22=$o2; //@line 1063 "lapi.c"
      var $23=(($22+8)|0); //@line 1063 "lapi.c"
      var $24=HEAP32[(($23)>>2)]; //@line 1063 "lapi.c"
      var $25=$o1; //@line 1063 "lapi.c"
      var $26=(($25+8)|0); //@line 1063 "lapi.c"
      HEAP32[(($26)>>2)]=$24; //@line 1063 "lapi.c"
      var $27=$1; //@line 1064 "lapi.c"
      var $28=(($27+8)|0); //@line 1064 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 1064 "lapi.c"
      var $30=(($29+12)|0); //@line 1064 "lapi.c"
      HEAP32[(($28)>>2)]=$30; //@line 1064 "lapi.c"
      __label__ = 4; break; //@line 1065 "lapi.c"
    case 4: 
      var $32=$name; //@line 1067 "lapi.c"
      STACKTOP = __stackBase__;
      return $32; //@line 1067 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_setupvalue($L, $funcindex, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $name;
      var $val=__stackBase__;
      var $fi;
      var $o2;
      var $o1;
      $1=$L;
      $2=$funcindex;
      $3=$n;
      var $4=$1; //@line 1076 "lapi.c"
      var $5=$2; //@line 1076 "lapi.c"
      var $6=__Z9index2adrP9lua_Statei($4, $5); //@line 1076 "lapi.c"
      $fi=$6; //@line 1076 "lapi.c"
      var $7=$fi; //@line 1078 "lapi.c"
      var $8=$3; //@line 1078 "lapi.c"
      var $9=__Z11aux_upvalueP10lua_TValueiPS0_($7, $8, $val); //@line 1078 "lapi.c"
      $name=$9; //@line 1078 "lapi.c"
      var $10=$name; //@line 1079 "lapi.c"
      var $11=(($10)|0)!=0; //@line 1079 "lapi.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 1079 "lapi.c"
    case 3: 
      var $13=$1; //@line 1080 "lapi.c"
      var $14=(($13+8)|0); //@line 1080 "lapi.c"
      var $15=HEAP32[(($14)>>2)]; //@line 1080 "lapi.c"
      var $16=((($15)-(12))|0); //@line 1080 "lapi.c"
      HEAP32[(($14)>>2)]=$16; //@line 1080 "lapi.c"
      var $17=$1; //@line 1081 "lapi.c"
      var $18=(($17+8)|0); //@line 1081 "lapi.c"
      var $19=HEAP32[(($18)>>2)]; //@line 1081 "lapi.c"
      $o2=$19; //@line 1081 "lapi.c"
      var $20=HEAP32[(($val)>>2)]; //@line 1081 "lapi.c"
      $o1=$20; //@line 1081 "lapi.c"
      var $21=$o1; //@line 1081 "lapi.c"
      var $22=(($21)|0); //@line 1081 "lapi.c"
      var $23=$o2; //@line 1081 "lapi.c"
      var $24=(($23)|0); //@line 1081 "lapi.c"
      var $25=$22; //@line 1081 "lapi.c"
      var $26=$24; //@line 1081 "lapi.c"
      HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)]; //@line 1081 "lapi.c"
      var $27=$o2; //@line 1081 "lapi.c"
      var $28=(($27+8)|0); //@line 1081 "lapi.c"
      var $29=HEAP32[(($28)>>2)]; //@line 1081 "lapi.c"
      var $30=$o1; //@line 1081 "lapi.c"
      var $31=(($30+8)|0); //@line 1081 "lapi.c"
      HEAP32[(($31)>>2)]=$29; //@line 1081 "lapi.c"
      var $32=$1; //@line 1082 "lapi.c"
      var $33=(($32+8)|0); //@line 1082 "lapi.c"
      var $34=HEAP32[(($33)>>2)]; //@line 1082 "lapi.c"
      var $35=(($34+8)|0); //@line 1082 "lapi.c"
      var $36=HEAP32[(($35)>>2)]; //@line 1082 "lapi.c"
      var $37=(($36)|0) >= 4; //@line 1082 "lapi.c"
      if ($37) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 1082 "lapi.c"
    case 4: 
      var $39=$1; //@line 1082 "lapi.c"
      var $40=(($39+8)|0); //@line 1082 "lapi.c"
      var $41=HEAP32[(($40)>>2)]; //@line 1082 "lapi.c"
      var $42=(($41)|0); //@line 1082 "lapi.c"
      var $43=$42; //@line 1082 "lapi.c"
      var $44=HEAP32[(($43)>>2)]; //@line 1082 "lapi.c"
      var $45=$44; //@line 1082 "lapi.c"
      var $46=(($45+5)|0); //@line 1082 "lapi.c"
      var $47=HEAPU8[($46)]; //@line 1082 "lapi.c"
      var $48=(($47)&255); //@line 1082 "lapi.c"
      var $49=$48 & 3; //@line 1082 "lapi.c"
      var $50=(($49)|0)!=0; //@line 1082 "lapi.c"
      if ($50) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 1082 "lapi.c"
    case 5: 
      var $52=$fi; //@line 1082 "lapi.c"
      var $53=(($52)|0); //@line 1082 "lapi.c"
      var $54=$53; //@line 1082 "lapi.c"
      var $55=HEAP32[(($54)>>2)]; //@line 1082 "lapi.c"
      var $56=$55; //@line 1082 "lapi.c"
      var $57=$56; //@line 1082 "lapi.c"
      var $58=$57; //@line 1082 "lapi.c"
      var $59=(($58+5)|0); //@line 1082 "lapi.c"
      var $60=HEAPU8[($59)]; //@line 1082 "lapi.c"
      var $61=(($60)&255); //@line 1082 "lapi.c"
      var $62=$61 & 4; //@line 1082 "lapi.c"
      var $63=(($62)|0)!=0; //@line 1082 "lapi.c"
      if ($63) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1082 "lapi.c"
    case 6: 
      var $65=$1; //@line 1082 "lapi.c"
      var $66=$fi; //@line 1082 "lapi.c"
      var $67=(($66)|0); //@line 1082 "lapi.c"
      var $68=$67; //@line 1082 "lapi.c"
      var $69=HEAP32[(($68)>>2)]; //@line 1082 "lapi.c"
      var $70=$69; //@line 1082 "lapi.c"
      var $71=$70; //@line 1082 "lapi.c"
      var $72=$1; //@line 1082 "lapi.c"
      var $73=(($72+8)|0); //@line 1082 "lapi.c"
      var $74=HEAP32[(($73)>>2)]; //@line 1082 "lapi.c"
      var $75=(($74)|0); //@line 1082 "lapi.c"
      var $76=$75; //@line 1082 "lapi.c"
      var $77=HEAP32[(($76)>>2)]; //@line 1082 "lapi.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($65, $71, $77); //@line 1082 "lapi.c"
      __label__ = 7; break; //@line 1082 "lapi.c"
    case 7: 
      __label__ = 8; break; //@line 1083 "lapi.c"
    case 8: 
      var $80=$name; //@line 1085 "lapi.c"
      STACKTOP = __stackBase__;
      return $80; //@line 1085 "lapi.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_setupvalue["X"]=1;

function __Z8luaK_nilP9FuncStateii($fs, $from, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $previous;
      var $pfrom;
      var $pto;
      $1=$fs;
      $2=$from;
      $3=$n;
      var $4=$1; //@line 37 "lcode.c"
      var $5=(($4+24)|0); //@line 37 "lcode.c"
      var $6=HEAP32[(($5)>>2)]; //@line 37 "lcode.c"
      var $7=$1; //@line 37 "lcode.c"
      var $8=(($7+28)|0); //@line 37 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 37 "lcode.c"
      var $10=(($6)|0) > (($9)|0); //@line 37 "lcode.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 16; break; } //@line 37 "lcode.c"
    case 3: 
      var $12=$1; //@line 38 "lcode.c"
      var $13=(($12+24)|0); //@line 38 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 38 "lcode.c"
      var $15=(($14)|0)==0; //@line 38 "lcode.c"
      if ($15) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 38 "lcode.c"
    case 4: 
      var $17=$2; //@line 39 "lcode.c"
      var $18=$1; //@line 39 "lcode.c"
      var $19=(($18+50)|0); //@line 39 "lcode.c"
      var $20=HEAPU8[($19)]; //@line 39 "lcode.c"
      var $21=(($20)&255); //@line 39 "lcode.c"
      var $22=(($17)|0) >= (($21)|0); //@line 39 "lcode.c"
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 39 "lcode.c"
    case 5: 
      __label__ = 17; break; //@line 40 "lcode.c"
    case 6: 
      __label__ = 15; break; //@line 41 "lcode.c"
    case 7: 
      var $26=$1; //@line 43 "lcode.c"
      var $27=(($26+24)|0); //@line 43 "lcode.c"
      var $28=HEAP32[(($27)>>2)]; //@line 43 "lcode.c"
      var $29=((($28)-(1))|0); //@line 43 "lcode.c"
      var $30=$1; //@line 43 "lcode.c"
      var $31=(($30)|0); //@line 43 "lcode.c"
      var $32=HEAP32[(($31)>>2)]; //@line 43 "lcode.c"
      var $33=(($32+12)|0); //@line 43 "lcode.c"
      var $34=HEAP32[(($33)>>2)]; //@line 43 "lcode.c"
      var $35=(($34+($29<<2))|0); //@line 43 "lcode.c"
      $previous=$35; //@line 43 "lcode.c"
      var $36=$previous; //@line 44 "lcode.c"
      var $37=HEAPU32[(($36)>>2)]; //@line 44 "lcode.c"
      var $38=$37 >>> 0; //@line 44 "lcode.c"
      var $39=$38 & 63; //@line 44 "lcode.c"
      var $40=(($39)|0)==3; //@line 44 "lcode.c"
      if ($40) { __label__ = 8; break; } else { __label__ = 14; break; } //@line 44 "lcode.c"
    case 8: 
      var $42=$previous; //@line 45 "lcode.c"
      var $43=HEAPU32[(($42)>>2)]; //@line 45 "lcode.c"
      var $44=$43 >>> 6; //@line 45 "lcode.c"
      var $45=$44 & 255; //@line 45 "lcode.c"
      $pfrom=$45; //@line 45 "lcode.c"
      var $46=$previous; //@line 46 "lcode.c"
      var $47=HEAPU32[(($46)>>2)]; //@line 46 "lcode.c"
      var $48=$47 >>> 23; //@line 46 "lcode.c"
      var $49=$48 & 511; //@line 46 "lcode.c"
      $pto=$49; //@line 46 "lcode.c"
      var $50=$pfrom; //@line 47 "lcode.c"
      var $51=$2; //@line 47 "lcode.c"
      var $52=(($50)|0) <= (($51)|0); //@line 47 "lcode.c"
      if ($52) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 47 "lcode.c"
    case 9: 
      var $54=$2; //@line 47 "lcode.c"
      var $55=$pto; //@line 47 "lcode.c"
      var $56=((($55)+(1))|0); //@line 47 "lcode.c"
      var $57=(($54)|0) <= (($56)|0); //@line 47 "lcode.c"
      if ($57) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 47 "lcode.c"
    case 10: 
      var $59=$2; //@line 48 "lcode.c"
      var $60=$3; //@line 48 "lcode.c"
      var $61=((($59)+($60))|0); //@line 48 "lcode.c"
      var $62=((($61)-(1))|0); //@line 48 "lcode.c"
      var $63=$pto; //@line 48 "lcode.c"
      var $64=(($62)|0) > (($63)|0); //@line 48 "lcode.c"
      if ($64) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 48 "lcode.c"
    case 11: 
      var $66=$previous; //@line 49 "lcode.c"
      var $67=HEAP32[(($66)>>2)]; //@line 49 "lcode.c"
      var $68=$67 & 8388607; //@line 49 "lcode.c"
      var $69=$2; //@line 49 "lcode.c"
      var $70=$3; //@line 49 "lcode.c"
      var $71=((($69)+($70))|0); //@line 49 "lcode.c"
      var $72=((($71)-(1))|0); //@line 49 "lcode.c"
      var $73=$72 << 23; //@line 49 "lcode.c"
      var $74=$73 & -8388608; //@line 49 "lcode.c"
      var $75=$68 | $74; //@line 49 "lcode.c"
      var $76=$previous; //@line 49 "lcode.c"
      HEAP32[(($76)>>2)]=$75; //@line 49 "lcode.c"
      __label__ = 12; break; //@line 49 "lcode.c"
    case 12: 
      __label__ = 17; break; //@line 50 "lcode.c"
    case 13: 
      __label__ = 14; break; //@line 52 "lcode.c"
    case 14: 
      __label__ = 15; break; //@line 53 "lcode.c"
    case 15: 
      __label__ = 16; break; //@line 54 "lcode.c"
    case 16: 
      var $82=$1; //@line 55 "lcode.c"
      var $83=$2; //@line 55 "lcode.c"
      var $84=$2; //@line 55 "lcode.c"
      var $85=$3; //@line 55 "lcode.c"
      var $86=((($84)+($85))|0); //@line 55 "lcode.c"
      var $87=((($86)-(1))|0); //@line 55 "lcode.c"
      var $88=__Z12luaK_codeABCP9FuncState6OpCodeiii($82, 3, $83, $87, 0); //@line 55 "lcode.c"
      __label__ = 17; break; //@line 56 "lcode.c"
    case 17: 
      ;
      return; //@line 56 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8luaK_nilP9FuncStateii["X"]=1;

function __Z12luaK_codeABCP9FuncState6OpCodeiii($fs, $o, $a, $b, $c) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$fs;
  $2=$o;
  $3=$a;
  $4=$b;
  $5=$c;
  var $6=$1; //@line 808 "lcode.c"
  var $7=$2; //@line 808 "lcode.c"
  var $8=$7 << 0; //@line 808 "lcode.c"
  var $9=$3; //@line 808 "lcode.c"
  var $10=$9 << 6; //@line 808 "lcode.c"
  var $11=$8 | $10; //@line 808 "lcode.c"
  var $12=$4; //@line 808 "lcode.c"
  var $13=$12 << 23; //@line 808 "lcode.c"
  var $14=$11 | $13; //@line 808 "lcode.c"
  var $15=$5; //@line 808 "lcode.c"
  var $16=$15 << 14; //@line 808 "lcode.c"
  var $17=$14 | $16; //@line 808 "lcode.c"
  var $18=$1; //@line 808 "lcode.c"
  var $19=(($18+12)|0); //@line 808 "lcode.c"
  var $20=HEAP32[(($19)>>2)]; //@line 808 "lcode.c"
  var $21=(($20+8)|0); //@line 808 "lcode.c"
  var $22=HEAP32[(($21)>>2)]; //@line 808 "lcode.c"
  var $23=__Z9luaK_codeP9FuncStateji($6, $17, $22); //@line 808 "lcode.c"
  ;
  return $23; //@line 808 "lcode.c"
}


function __Z9luaK_jumpP9FuncState($fs) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $jpc;
  var $j=__stackBase__;
  $1=$fs;
  var $2=$1; //@line 60 "lcode.c"
  var $3=(($2+32)|0); //@line 60 "lcode.c"
  var $4=HEAP32[(($3)>>2)]; //@line 60 "lcode.c"
  $jpc=$4; //@line 60 "lcode.c"
  var $5=$1; //@line 62 "lcode.c"
  var $6=(($5+32)|0); //@line 62 "lcode.c"
  HEAP32[(($6)>>2)]=-1; //@line 62 "lcode.c"
  var $7=$1; //@line 63 "lcode.c"
  var $8=__Z12luaK_codeABxP9FuncState6OpCodeij($7, 22, 0, 131070); //@line 63 "lcode.c"
  HEAP32[(($j)>>2)]=$8; //@line 63 "lcode.c"
  var $9=$1; //@line 64 "lcode.c"
  var $10=$jpc; //@line 64 "lcode.c"
  __Z11luaK_concatP9FuncStatePii($9, $j, $10); //@line 64 "lcode.c"
  var $11=HEAP32[(($j)>>2)]; //@line 65 "lcode.c"
  STACKTOP = __stackBase__;
  return $11; //@line 65 "lcode.c"
}


function __Z12luaK_codeABxP9FuncState6OpCodeij($fs, $o, $a, $bc) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$fs;
  $2=$o;
  $3=$a;
  $4=$bc;
  var $5=$1; //@line 815 "lcode.c"
  var $6=$2; //@line 815 "lcode.c"
  var $7=$6 << 0; //@line 815 "lcode.c"
  var $8=$3; //@line 815 "lcode.c"
  var $9=$8 << 6; //@line 815 "lcode.c"
  var $10=$7 | $9; //@line 815 "lcode.c"
  var $11=$4; //@line 815 "lcode.c"
  var $12=$11 << 14; //@line 815 "lcode.c"
  var $13=$10 | $12; //@line 815 "lcode.c"
  var $14=$1; //@line 815 "lcode.c"
  var $15=(($14+12)|0); //@line 815 "lcode.c"
  var $16=HEAP32[(($15)>>2)]; //@line 815 "lcode.c"
  var $17=(($16+8)|0); //@line 815 "lcode.c"
  var $18=HEAP32[(($17)>>2)]; //@line 815 "lcode.c"
  var $19=__Z9luaK_codeP9FuncStateji($5, $13, $18); //@line 815 "lcode.c"
  ;
  return $19; //@line 815 "lcode.c"
}


function __Z13luaK_getlabelP9FuncState($fs) {
  ;
  var __label__;

  var $1;
  $1=$fs;
  var $2=$1; //@line 95 "lcode.c"
  var $3=(($2+24)|0); //@line 95 "lcode.c"
  var $4=HEAP32[(($3)>>2)]; //@line 95 "lcode.c"
  var $5=$1; //@line 95 "lcode.c"
  var $6=(($5+28)|0); //@line 95 "lcode.c"
  HEAP32[(($6)>>2)]=$4; //@line 95 "lcode.c"
  var $7=$1; //@line 96 "lcode.c"
  var $8=(($7+24)|0); //@line 96 "lcode.c"
  var $9=HEAP32[(($8)>>2)]; //@line 96 "lcode.c"
  ;
  return $9; //@line 96 "lcode.c"
}


function __Z7getjumpP9FuncStatei($fs, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $2=$fs;
      $3=$pc;
      var $4=$3; //@line 101 "lcode.c"
      var $5=$2; //@line 101 "lcode.c"
      var $6=(($5)|0); //@line 101 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 101 "lcode.c"
      var $8=(($7+12)|0); //@line 101 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 101 "lcode.c"
      var $10=(($9+($4<<2))|0); //@line 101 "lcode.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 101 "lcode.c"
      var $12=$11 >>> 14; //@line 101 "lcode.c"
      var $13=$12 & 262143; //@line 101 "lcode.c"
      var $14=((($13)-(131071))|0); //@line 101 "lcode.c"
      $offset=$14; //@line 101 "lcode.c"
      var $15=$offset; //@line 102 "lcode.c"
      var $16=(($15)|0)==-1; //@line 102 "lcode.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 102 "lcode.c"
    case 3: 
      $1=-1; //@line 103 "lcode.c"
      __label__ = 5; break; //@line 103 "lcode.c"
    case 4: 
      var $19=$3; //@line 105 "lcode.c"
      var $20=((($19)+(1))|0); //@line 105 "lcode.c"
      var $21=$offset; //@line 105 "lcode.c"
      var $22=((($20)+($21))|0); //@line 105 "lcode.c"
      $1=$22; //@line 105 "lcode.c"
      __label__ = 5; break; //@line 105 "lcode.c"
    case 5: 
      var $24=$1; //@line 106 "lcode.c"
      ;
      return $24; //@line 106 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaK_setoneretP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2; //@line 293 "lcode.c"
      var $4=(($3)|0); //@line 293 "lcode.c"
      var $5=HEAP32[(($4)>>2)]; //@line 293 "lcode.c"
      var $6=(($5)|0)==13; //@line 293 "lcode.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 293 "lcode.c"
    case 3: 
      var $8=$2; //@line 294 "lcode.c"
      var $9=(($8)|0); //@line 294 "lcode.c"
      HEAP32[(($9)>>2)]=12; //@line 294 "lcode.c"
      var $10=$2; //@line 295 "lcode.c"
      var $11=(($10+4)|0); //@line 295 "lcode.c"
      var $12=$11; //@line 295 "lcode.c"
      var $13=(($12)|0); //@line 295 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 295 "lcode.c"
      var $15=$1; //@line 295 "lcode.c"
      var $16=(($15)|0); //@line 295 "lcode.c"
      var $17=HEAP32[(($16)>>2)]; //@line 295 "lcode.c"
      var $18=(($17+12)|0); //@line 295 "lcode.c"
      var $19=HEAP32[(($18)>>2)]; //@line 295 "lcode.c"
      var $20=(($19+($14<<2))|0); //@line 295 "lcode.c"
      var $21=HEAPU32[(($20)>>2)]; //@line 295 "lcode.c"
      var $22=$21 >>> 6; //@line 295 "lcode.c"
      var $23=$22 & 255; //@line 295 "lcode.c"
      var $24=$2; //@line 295 "lcode.c"
      var $25=(($24+4)|0); //@line 295 "lcode.c"
      var $26=$25; //@line 295 "lcode.c"
      var $27=(($26)|0); //@line 295 "lcode.c"
      HEAP32[(($27)>>2)]=$23; //@line 295 "lcode.c"
      __label__ = 7; break; //@line 296 "lcode.c"
    case 4: 
      var $29=$2; //@line 297 "lcode.c"
      var $30=(($29)|0); //@line 297 "lcode.c"
      var $31=HEAP32[(($30)>>2)]; //@line 297 "lcode.c"
      var $32=(($31)|0)==14; //@line 297 "lcode.c"
      if ($32) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 297 "lcode.c"
    case 5: 
      var $34=$2; //@line 298 "lcode.c"
      var $35=(($34+4)|0); //@line 298 "lcode.c"
      var $36=$35; //@line 298 "lcode.c"
      var $37=(($36)|0); //@line 298 "lcode.c"
      var $38=HEAP32[(($37)>>2)]; //@line 298 "lcode.c"
      var $39=$1; //@line 298 "lcode.c"
      var $40=(($39)|0); //@line 298 "lcode.c"
      var $41=HEAP32[(($40)>>2)]; //@line 298 "lcode.c"
      var $42=(($41+12)|0); //@line 298 "lcode.c"
      var $43=HEAP32[(($42)>>2)]; //@line 298 "lcode.c"
      var $44=(($43+($38<<2))|0); //@line 298 "lcode.c"
      var $45=HEAP32[(($44)>>2)]; //@line 298 "lcode.c"
      var $46=$45 & 8388607; //@line 298 "lcode.c"
      var $47=$46 | 16777216; //@line 298 "lcode.c"
      var $48=$2; //@line 298 "lcode.c"
      var $49=(($48+4)|0); //@line 298 "lcode.c"
      var $50=$49; //@line 298 "lcode.c"
      var $51=(($50)|0); //@line 298 "lcode.c"
      var $52=HEAP32[(($51)>>2)]; //@line 298 "lcode.c"
      var $53=$1; //@line 298 "lcode.c"
      var $54=(($53)|0); //@line 298 "lcode.c"
      var $55=HEAP32[(($54)>>2)]; //@line 298 "lcode.c"
      var $56=(($55+12)|0); //@line 298 "lcode.c"
      var $57=HEAP32[(($56)>>2)]; //@line 298 "lcode.c"
      var $58=(($57+($52<<2))|0); //@line 298 "lcode.c"
      HEAP32[(($58)>>2)]=$47; //@line 298 "lcode.c"
      var $59=$2; //@line 299 "lcode.c"
      var $60=(($59)|0); //@line 299 "lcode.c"
      HEAP32[(($60)>>2)]=11; //@line 299 "lcode.c"
      __label__ = 6; break; //@line 300 "lcode.c"
    case 6: 
      __label__ = 7; break; //@line 300 "lcode.c"
    case 7: 
      ;
      return; //@line 301 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14luaK_setoneretP9FuncStateP7expdesc["X"]=1;

function __Z7freeregP9FuncStatei($fs, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$reg;
      var $3=$2; //@line 216 "lcode.c"
      var $4=$3 & 256; //@line 216 "lcode.c"
      var $5=(($4)|0)!=0; //@line 216 "lcode.c"
      if ($5) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 216 "lcode.c"
    case 3: 
      var $7=$2; //@line 216 "lcode.c"
      var $8=$1; //@line 216 "lcode.c"
      var $9=(($8+50)|0); //@line 216 "lcode.c"
      var $10=HEAPU8[($9)]; //@line 216 "lcode.c"
      var $11=(($10)&255); //@line 216 "lcode.c"
      var $12=(($7)|0) >= (($11)|0); //@line 216 "lcode.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 216 "lcode.c"
    case 4: 
      var $14=$1; //@line 217 "lcode.c"
      var $15=(($14+36)|0); //@line 217 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 217 "lcode.c"
      var $17=((($16)-(1))|0); //@line 217 "lcode.c"
      HEAP32[(($15)>>2)]=$17; //@line 217 "lcode.c"
      __label__ = 5; break; //@line 219 "lcode.c"
    case 5: 
      ;
      return; //@line 220 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaK_concatP9FuncStatePii($fs, $l1, $l2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $list;
      var $next;
      $1=$fs;
      $2=$l1;
      $3=$l2;
      var $4=$3; //@line 186 "lcode.c"
      var $5=(($4)|0)==-1; //@line 186 "lcode.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 186 "lcode.c"
    case 3: 
      __label__ = 11; break; //@line 186 "lcode.c"
    case 4: 
      var $8=$2; //@line 187 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 187 "lcode.c"
      var $10=(($9)|0)==-1; //@line 187 "lcode.c"
      if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 187 "lcode.c"
    case 5: 
      var $12=$3; //@line 188 "lcode.c"
      var $13=$2; //@line 188 "lcode.c"
      HEAP32[(($13)>>2)]=$12; //@line 188 "lcode.c"
      __label__ = 10; break; //@line 188 "lcode.c"
    case 6: 
      var $15=$2; //@line 190 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 190 "lcode.c"
      $list=$16; //@line 190 "lcode.c"
      __label__ = 7; break; //@line 192 "lcode.c"
    case 7: 
      var $18=$1; //@line 192 "lcode.c"
      var $19=$list; //@line 192 "lcode.c"
      var $20=__Z7getjumpP9FuncStatei($18, $19); //@line 192 "lcode.c"
      $next=$20; //@line 192 "lcode.c"
      var $21=(($20)|0)!=-1; //@line 192 "lcode.c"
      if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 192 "lcode.c"
    case 8: 
      var $23=$next; //@line 193 "lcode.c"
      $list=$23; //@line 193 "lcode.c"
      __label__ = 7; break; //@line 193 "lcode.c"
    case 9: 
      var $25=$1; //@line 194 "lcode.c"
      var $26=$list; //@line 194 "lcode.c"
      var $27=$3; //@line 194 "lcode.c"
      __Z7fixjumpP9FuncStateii($25, $26, $27); //@line 194 "lcode.c"
      __label__ = 10; break; //@line 195 "lcode.c"
    case 10: 
      __label__ = 11; break; //@line 195 "lcode.c"
    case 11: 
      ;
      return; //@line 196 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8luaK_retP9FuncStateii($fs, $first, $nret) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$fs;
  $2=$first;
  $3=$nret;
  var $4=$1; //@line 70 "lcode.c"
  var $5=$2; //@line 70 "lcode.c"
  var $6=$3; //@line 70 "lcode.c"
  var $7=((($6)+(1))|0); //@line 70 "lcode.c"
  var $8=__Z12luaK_codeABCP9FuncState6OpCodeiii($4, 30, $5, $7, 0); //@line 70 "lcode.c"
  ;
  return; //@line 71 "lcode.c"
}


function __Z14luaK_patchlistP9FuncStateii($fs, $list, $target) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$fs;
      $2=$list;
      $3=$target;
      var $4=$3; //@line 170 "lcode.c"
      var $5=$1; //@line 170 "lcode.c"
      var $6=(($5+24)|0); //@line 170 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 170 "lcode.c"
      var $8=(($4)|0)==(($7)|0); //@line 170 "lcode.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 170 "lcode.c"
    case 3: 
      var $10=$1; //@line 171 "lcode.c"
      var $11=$2; //@line 171 "lcode.c"
      __Z16luaK_patchtohereP9FuncStatei($10, $11); //@line 171 "lcode.c"
      __label__ = 5; break; //@line 171 "lcode.c"
    case 4: 
      var $13=$1; //@line 174 "lcode.c"
      var $14=$2; //@line 174 "lcode.c"
      var $15=$3; //@line 174 "lcode.c"
      var $16=$3; //@line 174 "lcode.c"
      __Z12patchlistauxP9FuncStateiiii($13, $14, $15, 255, $16); //@line 174 "lcode.c"
      __label__ = 5; break; //@line 175 "lcode.c"
    case 5: 
      ;
      return; //@line 176 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16luaK_patchtohereP9FuncStatei($fs, $list) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$list;
  var $3=$1; //@line 180 "lcode.c"
  var $4=__Z13luaK_getlabelP9FuncState($3); //@line 180 "lcode.c"
  var $5=$1; //@line 181 "lcode.c"
  var $6=$1; //@line 181 "lcode.c"
  var $7=(($6+32)|0); //@line 181 "lcode.c"
  var $8=$2; //@line 181 "lcode.c"
  __Z11luaK_concatP9FuncStatePii($5, $7, $8); //@line 181 "lcode.c"
  ;
  return; //@line 182 "lcode.c"
}


function __Z12patchlistauxP9FuncStateiiii($fs, $list, $vtarget, $reg, $dtarget) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $next;
      $1=$fs;
      $2=$list;
      $3=$vtarget;
      $4=$reg;
      $5=$dtarget;
      __label__ = 3; break; //@line 152 "lcode.c"
    case 3: 
      var $7=$2; //@line 152 "lcode.c"
      var $8=(($7)|0)!=-1; //@line 152 "lcode.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 152 "lcode.c"
    case 4: 
      var $10=$1; //@line 153 "lcode.c"
      var $11=$2; //@line 153 "lcode.c"
      var $12=__Z7getjumpP9FuncStatei($10, $11); //@line 153 "lcode.c"
      $next=$12; //@line 153 "lcode.c"
      var $13=$1; //@line 154 "lcode.c"
      var $14=$2; //@line 154 "lcode.c"
      var $15=$4; //@line 154 "lcode.c"
      var $16=__Z12patchtestregP9FuncStateii($13, $14, $15); //@line 154 "lcode.c"
      var $17=(($16)|0)!=0; //@line 154 "lcode.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 154 "lcode.c"
    case 5: 
      var $19=$1; //@line 155 "lcode.c"
      var $20=$2; //@line 155 "lcode.c"
      var $21=$3; //@line 155 "lcode.c"
      __Z7fixjumpP9FuncStateii($19, $20, $21); //@line 155 "lcode.c"
      __label__ = 7; break; //@line 155 "lcode.c"
    case 6: 
      var $23=$1; //@line 157 "lcode.c"
      var $24=$2; //@line 157 "lcode.c"
      var $25=$5; //@line 157 "lcode.c"
      __Z7fixjumpP9FuncStateii($23, $24, $25); //@line 157 "lcode.c"
      __label__ = 7; break; //@line 157 "lcode.c"
    case 7: 
      var $27=$next; //@line 158 "lcode.c"
      $2=$27; //@line 158 "lcode.c"
      __label__ = 3; break; //@line 159 "lcode.c"
    case 8: 
      ;
      return; //@line 160 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7fixjumpP9FuncStateii($fs, $pc, $dest) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $jmp;
      var $offset;
      $1=$fs;
      $2=$pc;
      $3=$dest;
      var $4=$2; //@line 81 "lcode.c"
      var $5=$1; //@line 81 "lcode.c"
      var $6=(($5)|0); //@line 81 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 81 "lcode.c"
      var $8=(($7+12)|0); //@line 81 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 81 "lcode.c"
      var $10=(($9+($4<<2))|0); //@line 81 "lcode.c"
      $jmp=$10; //@line 81 "lcode.c"
      var $11=$3; //@line 82 "lcode.c"
      var $12=$2; //@line 82 "lcode.c"
      var $13=((($12)+(1))|0); //@line 82 "lcode.c"
      var $14=((($11)-($13))|0); //@line 82 "lcode.c"
      $offset=$14; //@line 82 "lcode.c"
      var $15=$offset; //@line 84 "lcode.c"
      var $16=_abs($15); //@line 84 "lcode.c"
      var $17=(($16)|0) > 131071; //@line 84 "lcode.c"
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 84 "lcode.c"
    case 3: 
      var $19=$1; //@line 85 "lcode.c"
      var $20=(($19+12)|0); //@line 85 "lcode.c"
      var $21=HEAP32[(($20)>>2)]; //@line 85 "lcode.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($21, ((STRING_TABLE.__str37)|0)); //@line 85 "lcode.c"
      __label__ = 4; break; //@line 85 "lcode.c"
    case 4: 
      var $23=$jmp; //@line 86 "lcode.c"
      var $24=HEAP32[(($23)>>2)]; //@line 86 "lcode.c"
      var $25=$24 & 16383; //@line 86 "lcode.c"
      var $26=$offset; //@line 86 "lcode.c"
      var $27=((($26)+(131071))|0); //@line 86 "lcode.c"
      var $28=$27 << 14; //@line 86 "lcode.c"
      var $29=$28 & -16384; //@line 86 "lcode.c"
      var $30=$25 | $29; //@line 86 "lcode.c"
      var $31=$jmp; //@line 86 "lcode.c"
      HEAP32[(($31)>>2)]=$30; //@line 86 "lcode.c"
      ;
      return; //@line 87 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15luaK_checkstackP9FuncStatei($fs, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $newstack;
      $1=$fs;
      $2=$n;
      var $3=$1; //@line 200 "lcode.c"
      var $4=(($3+36)|0); //@line 200 "lcode.c"
      var $5=HEAP32[(($4)>>2)]; //@line 200 "lcode.c"
      var $6=$2; //@line 200 "lcode.c"
      var $7=((($5)+($6))|0); //@line 200 "lcode.c"
      $newstack=$7; //@line 200 "lcode.c"
      var $8=$newstack; //@line 201 "lcode.c"
      var $9=$1; //@line 201 "lcode.c"
      var $10=(($9)|0); //@line 201 "lcode.c"
      var $11=HEAP32[(($10)>>2)]; //@line 201 "lcode.c"
      var $12=(($11+75)|0); //@line 201 "lcode.c"
      var $13=HEAPU8[($12)]; //@line 201 "lcode.c"
      var $14=(($13)&255); //@line 201 "lcode.c"
      var $15=(($8)|0) > (($14)|0); //@line 201 "lcode.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 201 "lcode.c"
    case 3: 
      var $17=$newstack; //@line 202 "lcode.c"
      var $18=(($17)|0) >= 250; //@line 202 "lcode.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 202 "lcode.c"
    case 4: 
      var $20=$1; //@line 203 "lcode.c"
      var $21=(($20+12)|0); //@line 203 "lcode.c"
      var $22=HEAP32[(($21)>>2)]; //@line 203 "lcode.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($22, ((STRING_TABLE.__str4)|0)); //@line 203 "lcode.c"
      __label__ = 5; break; //@line 203 "lcode.c"
    case 5: 
      var $24=$newstack; //@line 204 "lcode.c"
      var $25=(($24) & 255); //@line 204 "lcode.c"
      var $26=$1; //@line 204 "lcode.c"
      var $27=(($26)|0); //@line 204 "lcode.c"
      var $28=HEAP32[(($27)>>2)]; //@line 204 "lcode.c"
      var $29=(($28+75)|0); //@line 204 "lcode.c"
      HEAP8[($29)]=$25; //@line 204 "lcode.c"
      __label__ = 6; break; //@line 205 "lcode.c"
    case 6: 
      ;
      return; //@line 206 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16luaK_reserveregsP9FuncStatei($fs, $n) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$n;
  var $3=$1; //@line 210 "lcode.c"
  var $4=$2; //@line 210 "lcode.c"
  __Z15luaK_checkstackP9FuncStatei($3, $4); //@line 210 "lcode.c"
  var $5=$2; //@line 211 "lcode.c"
  var $6=$1; //@line 211 "lcode.c"
  var $7=(($6+36)|0); //@line 211 "lcode.c"
  var $8=HEAP32[(($7)>>2)]; //@line 211 "lcode.c"
  var $9=((($8)+($5))|0); //@line 211 "lcode.c"
  HEAP32[(($7)>>2)]=$9; //@line 211 "lcode.c"
  ;
  return; //@line 212 "lcode.c"
}


function __Z12luaK_stringKP9FuncStateP7TString($fs, $s) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $2;
  var $o=__stackBase__;
  var $i_o;
  $1=$fs;
  $2=$s;
  $i_o=$o; //@line 252 "lcode.c"
  var $3=$2; //@line 252 "lcode.c"
  var $4=$3; //@line 252 "lcode.c"
  var $5=$i_o; //@line 252 "lcode.c"
  var $6=(($5)|0); //@line 252 "lcode.c"
  var $7=$6; //@line 252 "lcode.c"
  HEAP32[(($7)>>2)]=$4; //@line 252 "lcode.c"
  var $8=$i_o; //@line 252 "lcode.c"
  var $9=(($8+8)|0); //@line 252 "lcode.c"
  HEAP32[(($9)>>2)]=4; //@line 252 "lcode.c"
  var $10=$1; //@line 253 "lcode.c"
  var $11=__Z4addkP9FuncStateP10lua_TValueS2_($10, $o, $o); //@line 253 "lcode.c"
  STACKTOP = __stackBase__;
  return $11; //@line 253 "lcode.c"
}


function __Z4addkP9FuncStateP10lua_TValueS2_($fs, $k, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $L;
      var $idx;
      var $f;
      var $oldsize;
      var $i_o;
      var $o2;
      var $o1;
      $2=$fs;
      $3=$k;
      $4=$v;
      var $5=$2; //@line 230 "lcode.c"
      var $6=(($5+16)|0); //@line 230 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 230 "lcode.c"
      $L=$7; //@line 230 "lcode.c"
      var $8=$L; //@line 231 "lcode.c"
      var $9=$2; //@line 231 "lcode.c"
      var $10=(($9+4)|0); //@line 231 "lcode.c"
      var $11=HEAP32[(($10)>>2)]; //@line 231 "lcode.c"
      var $12=$3; //@line 231 "lcode.c"
      var $13=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($8, $11, $12); //@line 231 "lcode.c"
      $idx=$13; //@line 231 "lcode.c"
      var $14=$2; //@line 232 "lcode.c"
      var $15=(($14)|0); //@line 232 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 232 "lcode.c"
      $f=$16; //@line 232 "lcode.c"
      var $17=$f; //@line 233 "lcode.c"
      var $18=(($17+40)|0); //@line 233 "lcode.c"
      var $19=HEAP32[(($18)>>2)]; //@line 233 "lcode.c"
      $oldsize=$19; //@line 233 "lcode.c"
      var $20=$idx; //@line 234 "lcode.c"
      var $21=(($20+8)|0); //@line 234 "lcode.c"
      var $22=HEAP32[(($21)>>2)]; //@line 234 "lcode.c"
      var $23=(($22)|0)==3; //@line 234 "lcode.c"
      if ($23) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 234 "lcode.c"
    case 3: 
      var $25=$idx; //@line 236 "lcode.c"
      var $26=(($25)|0); //@line 236 "lcode.c"
      var $27=$26; //@line 236 "lcode.c"
      var $28=(tempDoubleI32[0]=HEAP32[(($27)>>2)],tempDoubleI32[1]=HEAP32[((($27)+(4))>>2)],tempDoubleF64[0]); //@line 236 "lcode.c"
      var $29=(($28)&-1); //@line 236 "lcode.c"
      $1=$29; //@line 236 "lcode.c"
      __label__ = 14; break; //@line 236 "lcode.c"
    case 4: 
      var $31=$idx; //@line 239 "lcode.c"
      $i_o=$31; //@line 239 "lcode.c"
      var $32=$2; //@line 239 "lcode.c"
      var $33=(($32+40)|0); //@line 239 "lcode.c"
      var $34=HEAP32[(($33)>>2)]; //@line 239 "lcode.c"
      var $35=(($34)|0); //@line 239 "lcode.c"
      var $36=$i_o; //@line 239 "lcode.c"
      var $37=(($36)|0); //@line 239 "lcode.c"
      var $38=$37; //@line 239 "lcode.c"
      (tempDoubleF64[0]=$35,HEAP32[(($38)>>2)]=tempDoubleI32[0],HEAP32[((($38)+(4))>>2)]=tempDoubleI32[1]); //@line 239 "lcode.c"
      var $39=$i_o; //@line 239 "lcode.c"
      var $40=(($39+8)|0); //@line 239 "lcode.c"
      HEAP32[(($40)>>2)]=3; //@line 239 "lcode.c"
      var $41=$2; //@line 240 "lcode.c"
      var $42=(($41+40)|0); //@line 240 "lcode.c"
      var $43=HEAP32[(($42)>>2)]; //@line 240 "lcode.c"
      var $44=((($43)+(1))|0); //@line 240 "lcode.c"
      var $45=$f; //@line 240 "lcode.c"
      var $46=(($45+40)|0); //@line 240 "lcode.c"
      var $47=HEAP32[(($46)>>2)]; //@line 240 "lcode.c"
      var $48=(($44)|0) > (($47)|0); //@line 240 "lcode.c"
      if ($48) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 240 "lcode.c"
    case 5: 
      var $50=$L; //@line 240 "lcode.c"
      var $51=$f; //@line 240 "lcode.c"
      var $52=(($51+8)|0); //@line 240 "lcode.c"
      var $53=HEAP32[(($52)>>2)]; //@line 240 "lcode.c"
      var $54=$53; //@line 240 "lcode.c"
      var $55=$f; //@line 240 "lcode.c"
      var $56=(($55+40)|0); //@line 240 "lcode.c"
      var $57=__Z13luaM_growaux_P9lua_StatePvPijiPKc($50, $54, $56, 12, 262143, ((STRING_TABLE.__str26)|0)); //@line 240 "lcode.c"
      var $58=$57; //@line 240 "lcode.c"
      var $59=$f; //@line 240 "lcode.c"
      var $60=(($59+8)|0); //@line 240 "lcode.c"
      HEAP32[(($60)>>2)]=$58; //@line 240 "lcode.c"
      __label__ = 6; break; //@line 240 "lcode.c"
    case 6: 
      __label__ = 7; break; //@line 242 "lcode.c"
    case 7: 
      var $63=$oldsize; //@line 242 "lcode.c"
      var $64=$f; //@line 242 "lcode.c"
      var $65=(($64+40)|0); //@line 242 "lcode.c"
      var $66=HEAP32[(($65)>>2)]; //@line 242 "lcode.c"
      var $67=(($63)|0) < (($66)|0); //@line 242 "lcode.c"
      if ($67) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 242 "lcode.c"
    case 8: 
      var $69=$oldsize; //@line 242 "lcode.c"
      var $70=((($69)+(1))|0); //@line 242 "lcode.c"
      $oldsize=$70; //@line 242 "lcode.c"
      var $71=$f; //@line 242 "lcode.c"
      var $72=(($71+8)|0); //@line 242 "lcode.c"
      var $73=HEAP32[(($72)>>2)]; //@line 242 "lcode.c"
      var $74=(($73+($69)*(12))|0); //@line 242 "lcode.c"
      var $75=(($74+8)|0); //@line 242 "lcode.c"
      HEAP32[(($75)>>2)]=0; //@line 242 "lcode.c"
      __label__ = 7; break; //@line 242 "lcode.c"
    case 9: 
      var $77=$4; //@line 243 "lcode.c"
      $o2=$77; //@line 243 "lcode.c"
      var $78=$2; //@line 243 "lcode.c"
      var $79=(($78+40)|0); //@line 243 "lcode.c"
      var $80=HEAP32[(($79)>>2)]; //@line 243 "lcode.c"
      var $81=$f; //@line 243 "lcode.c"
      var $82=(($81+8)|0); //@line 243 "lcode.c"
      var $83=HEAP32[(($82)>>2)]; //@line 243 "lcode.c"
      var $84=(($83+($80)*(12))|0); //@line 243 "lcode.c"
      $o1=$84; //@line 243 "lcode.c"
      var $85=$o1; //@line 243 "lcode.c"
      var $86=(($85)|0); //@line 243 "lcode.c"
      var $87=$o2; //@line 243 "lcode.c"
      var $88=(($87)|0); //@line 243 "lcode.c"
      var $89=$86; //@line 243 "lcode.c"
      var $90=$88; //@line 243 "lcode.c"
      HEAP32[(($89)>>2)]=HEAP32[(($90)>>2)];HEAP32[((($89)+(4))>>2)]=HEAP32[((($90)+(4))>>2)]; //@line 243 "lcode.c"
      var $91=$o2; //@line 243 "lcode.c"
      var $92=(($91+8)|0); //@line 243 "lcode.c"
      var $93=HEAP32[(($92)>>2)]; //@line 243 "lcode.c"
      var $94=$o1; //@line 243 "lcode.c"
      var $95=(($94+8)|0); //@line 243 "lcode.c"
      HEAP32[(($95)>>2)]=$93; //@line 243 "lcode.c"
      var $96=$4; //@line 244 "lcode.c"
      var $97=(($96+8)|0); //@line 244 "lcode.c"
      var $98=HEAP32[(($97)>>2)]; //@line 244 "lcode.c"
      var $99=(($98)|0) >= 4; //@line 244 "lcode.c"
      if ($99) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 244 "lcode.c"
    case 10: 
      var $101=$4; //@line 244 "lcode.c"
      var $102=(($101)|0); //@line 244 "lcode.c"
      var $103=$102; //@line 244 "lcode.c"
      var $104=HEAP32[(($103)>>2)]; //@line 244 "lcode.c"
      var $105=$104; //@line 244 "lcode.c"
      var $106=(($105+5)|0); //@line 244 "lcode.c"
      var $107=HEAPU8[($106)]; //@line 244 "lcode.c"
      var $108=(($107)&255); //@line 244 "lcode.c"
      var $109=$108 & 3; //@line 244 "lcode.c"
      var $110=(($109)|0)!=0; //@line 244 "lcode.c"
      if ($110) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 244 "lcode.c"
    case 11: 
      var $112=$f; //@line 244 "lcode.c"
      var $113=$112; //@line 244 "lcode.c"
      var $114=$113; //@line 244 "lcode.c"
      var $115=(($114+5)|0); //@line 244 "lcode.c"
      var $116=HEAPU8[($115)]; //@line 244 "lcode.c"
      var $117=(($116)&255); //@line 244 "lcode.c"
      var $118=$117 & 4; //@line 244 "lcode.c"
      var $119=(($118)|0)!=0; //@line 244 "lcode.c"
      if ($119) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 244 "lcode.c"
    case 12: 
      var $121=$L; //@line 244 "lcode.c"
      var $122=$f; //@line 244 "lcode.c"
      var $123=$122; //@line 244 "lcode.c"
      var $124=$4; //@line 244 "lcode.c"
      var $125=(($124)|0); //@line 244 "lcode.c"
      var $126=$125; //@line 244 "lcode.c"
      var $127=HEAP32[(($126)>>2)]; //@line 244 "lcode.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($121, $123, $127); //@line 244 "lcode.c"
      __label__ = 13; break; //@line 244 "lcode.c"
    case 13: 
      var $129=$2; //@line 245 "lcode.c"
      var $130=(($129+40)|0); //@line 245 "lcode.c"
      var $131=HEAP32[(($130)>>2)]; //@line 245 "lcode.c"
      var $132=((($131)+(1))|0); //@line 245 "lcode.c"
      HEAP32[(($130)>>2)]=$132; //@line 245 "lcode.c"
      $1=$131; //@line 245 "lcode.c"
      __label__ = 14; break; //@line 245 "lcode.c"
    case 14: 
      var $134=$1; //@line 247 "lcode.c"
      ;
      return $134; //@line 247 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z4addkP9FuncStateP10lua_TValueS2_["X"]=1;

function __Z12luaK_numberKP9FuncStated($fs, $r) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $2;
  var $o=__stackBase__;
  var $i_o;
  $1=$fs;
  $2=$r;
  $i_o=$o; //@line 259 "lcode.c"
  var $3=$2; //@line 259 "lcode.c"
  var $4=$i_o; //@line 259 "lcode.c"
  var $5=(($4)|0); //@line 259 "lcode.c"
  var $6=$5; //@line 259 "lcode.c"
  (tempDoubleF64[0]=$3,HEAP32[(($6)>>2)]=tempDoubleI32[0],HEAP32[((($6)+(4))>>2)]=tempDoubleI32[1]); //@line 259 "lcode.c"
  var $7=$i_o; //@line 259 "lcode.c"
  var $8=(($7+8)|0); //@line 259 "lcode.c"
  HEAP32[(($8)>>2)]=3; //@line 259 "lcode.c"
  var $9=$1; //@line 260 "lcode.c"
  var $10=__Z4addkP9FuncStateP10lua_TValueS2_($9, $o, $o); //@line 260 "lcode.c"
  STACKTOP = __stackBase__;
  return $10; //@line 260 "lcode.c"
}


function __Z15luaK_setreturnsP9FuncStateP7expdesci($fs, $e, $nresults) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$fs;
      $2=$e;
      $3=$nresults;
      var $4=$2; //@line 281 "lcode.c"
      var $5=(($4)|0); //@line 281 "lcode.c"
      var $6=HEAP32[(($5)>>2)]; //@line 281 "lcode.c"
      var $7=(($6)|0)==13; //@line 281 "lcode.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 281 "lcode.c"
    case 3: 
      var $9=$2; //@line 282 "lcode.c"
      var $10=(($9+4)|0); //@line 282 "lcode.c"
      var $11=$10; //@line 282 "lcode.c"
      var $12=(($11)|0); //@line 282 "lcode.c"
      var $13=HEAP32[(($12)>>2)]; //@line 282 "lcode.c"
      var $14=$1; //@line 282 "lcode.c"
      var $15=(($14)|0); //@line 282 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 282 "lcode.c"
      var $17=(($16+12)|0); //@line 282 "lcode.c"
      var $18=HEAP32[(($17)>>2)]; //@line 282 "lcode.c"
      var $19=(($18+($13<<2))|0); //@line 282 "lcode.c"
      var $20=HEAP32[(($19)>>2)]; //@line 282 "lcode.c"
      var $21=$20 & -8372225; //@line 282 "lcode.c"
      var $22=$3; //@line 282 "lcode.c"
      var $23=((($22)+(1))|0); //@line 282 "lcode.c"
      var $24=$23 << 14; //@line 282 "lcode.c"
      var $25=$24 & 8372224; //@line 282 "lcode.c"
      var $26=$21 | $25; //@line 282 "lcode.c"
      var $27=$2; //@line 282 "lcode.c"
      var $28=(($27+4)|0); //@line 282 "lcode.c"
      var $29=$28; //@line 282 "lcode.c"
      var $30=(($29)|0); //@line 282 "lcode.c"
      var $31=HEAP32[(($30)>>2)]; //@line 282 "lcode.c"
      var $32=$1; //@line 282 "lcode.c"
      var $33=(($32)|0); //@line 282 "lcode.c"
      var $34=HEAP32[(($33)>>2)]; //@line 282 "lcode.c"
      var $35=(($34+12)|0); //@line 282 "lcode.c"
      var $36=HEAP32[(($35)>>2)]; //@line 282 "lcode.c"
      var $37=(($36+($31<<2))|0); //@line 282 "lcode.c"
      HEAP32[(($37)>>2)]=$26; //@line 282 "lcode.c"
      __label__ = 7; break; //@line 283 "lcode.c"
    case 4: 
      var $39=$2; //@line 284 "lcode.c"
      var $40=(($39)|0); //@line 284 "lcode.c"
      var $41=HEAP32[(($40)>>2)]; //@line 284 "lcode.c"
      var $42=(($41)|0)==14; //@line 284 "lcode.c"
      if ($42) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 284 "lcode.c"
    case 5: 
      var $44=$2; //@line 285 "lcode.c"
      var $45=(($44+4)|0); //@line 285 "lcode.c"
      var $46=$45; //@line 285 "lcode.c"
      var $47=(($46)|0); //@line 285 "lcode.c"
      var $48=HEAP32[(($47)>>2)]; //@line 285 "lcode.c"
      var $49=$1; //@line 285 "lcode.c"
      var $50=(($49)|0); //@line 285 "lcode.c"
      var $51=HEAP32[(($50)>>2)]; //@line 285 "lcode.c"
      var $52=(($51+12)|0); //@line 285 "lcode.c"
      var $53=HEAP32[(($52)>>2)]; //@line 285 "lcode.c"
      var $54=(($53+($48<<2))|0); //@line 285 "lcode.c"
      var $55=HEAP32[(($54)>>2)]; //@line 285 "lcode.c"
      var $56=$55 & 8388607; //@line 285 "lcode.c"
      var $57=$3; //@line 285 "lcode.c"
      var $58=((($57)+(1))|0); //@line 285 "lcode.c"
      var $59=$58 << 23; //@line 285 "lcode.c"
      var $60=$59 & -8388608; //@line 285 "lcode.c"
      var $61=$56 | $60; //@line 285 "lcode.c"
      var $62=$2; //@line 285 "lcode.c"
      var $63=(($62+4)|0); //@line 285 "lcode.c"
      var $64=$63; //@line 285 "lcode.c"
      var $65=(($64)|0); //@line 285 "lcode.c"
      var $66=HEAP32[(($65)>>2)]; //@line 285 "lcode.c"
      var $67=$1; //@line 285 "lcode.c"
      var $68=(($67)|0); //@line 285 "lcode.c"
      var $69=HEAP32[(($68)>>2)]; //@line 285 "lcode.c"
      var $70=(($69+12)|0); //@line 285 "lcode.c"
      var $71=HEAP32[(($70)>>2)]; //@line 285 "lcode.c"
      var $72=(($71+($66<<2))|0); //@line 285 "lcode.c"
      HEAP32[(($72)>>2)]=$61; //@line 285 "lcode.c"
      var $73=$2; //@line 286 "lcode.c"
      var $74=(($73+4)|0); //@line 286 "lcode.c"
      var $75=$74; //@line 286 "lcode.c"
      var $76=(($75)|0); //@line 286 "lcode.c"
      var $77=HEAP32[(($76)>>2)]; //@line 286 "lcode.c"
      var $78=$1; //@line 286 "lcode.c"
      var $79=(($78)|0); //@line 286 "lcode.c"
      var $80=HEAP32[(($79)>>2)]; //@line 286 "lcode.c"
      var $81=(($80+12)|0); //@line 286 "lcode.c"
      var $82=HEAP32[(($81)>>2)]; //@line 286 "lcode.c"
      var $83=(($82+($77<<2))|0); //@line 286 "lcode.c"
      var $84=HEAP32[(($83)>>2)]; //@line 286 "lcode.c"
      var $85=$84 & -16321; //@line 286 "lcode.c"
      var $86=$1; //@line 286 "lcode.c"
      var $87=(($86+36)|0); //@line 286 "lcode.c"
      var $88=HEAP32[(($87)>>2)]; //@line 286 "lcode.c"
      var $89=$88 << 6; //@line 286 "lcode.c"
      var $90=$89 & 16320; //@line 286 "lcode.c"
      var $91=$85 | $90; //@line 286 "lcode.c"
      var $92=$2; //@line 286 "lcode.c"
      var $93=(($92+4)|0); //@line 286 "lcode.c"
      var $94=$93; //@line 286 "lcode.c"
      var $95=(($94)|0); //@line 286 "lcode.c"
      var $96=HEAP32[(($95)>>2)]; //@line 286 "lcode.c"
      var $97=$1; //@line 286 "lcode.c"
      var $98=(($97)|0); //@line 286 "lcode.c"
      var $99=HEAP32[(($98)>>2)]; //@line 286 "lcode.c"
      var $100=(($99+12)|0); //@line 286 "lcode.c"
      var $101=HEAP32[(($100)>>2)]; //@line 286 "lcode.c"
      var $102=(($101+($96<<2))|0); //@line 286 "lcode.c"
      HEAP32[(($102)>>2)]=$91; //@line 286 "lcode.c"
      var $103=$1; //@line 287 "lcode.c"
      __Z16luaK_reserveregsP9FuncStatei($103, 1); //@line 287 "lcode.c"
      __label__ = 6; break; //@line 288 "lcode.c"
    case 6: 
      __label__ = 7; break; //@line 288 "lcode.c"
    case 7: 
      ;
      return; //@line 289 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15luaK_setreturnsP9FuncStateP7expdesci["X"]=1;

function __Z18luaK_dischargevarsP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2; //@line 305 "lcode.c"
      var $4=(($3)|0); //@line 305 "lcode.c"
      var $5=HEAP32[(($4)>>2)]; //@line 305 "lcode.c"
      if ((($5)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 8) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 9) {
        __label__ = 6; break;
      }
      else if ((($5)|0) == 14 || (($5)|0) == 13) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      var $7=$2; //@line 307 "lcode.c"
      var $8=(($7)|0); //@line 307 "lcode.c"
      HEAP32[(($8)>>2)]=12; //@line 307 "lcode.c"
      __label__ = 9; break; //@line 308 "lcode.c"
    case 4: 
      var $10=$1; //@line 311 "lcode.c"
      var $11=$2; //@line 311 "lcode.c"
      var $12=(($11+4)|0); //@line 311 "lcode.c"
      var $13=$12; //@line 311 "lcode.c"
      var $14=(($13)|0); //@line 311 "lcode.c"
      var $15=HEAP32[(($14)>>2)]; //@line 311 "lcode.c"
      var $16=__Z12luaK_codeABCP9FuncState6OpCodeiii($10, 4, 0, $15, 0); //@line 311 "lcode.c"
      var $17=$2; //@line 311 "lcode.c"
      var $18=(($17+4)|0); //@line 311 "lcode.c"
      var $19=$18; //@line 311 "lcode.c"
      var $20=(($19)|0); //@line 311 "lcode.c"
      HEAP32[(($20)>>2)]=$16; //@line 311 "lcode.c"
      var $21=$2; //@line 312 "lcode.c"
      var $22=(($21)|0); //@line 312 "lcode.c"
      HEAP32[(($22)>>2)]=11; //@line 312 "lcode.c"
      __label__ = 9; break; //@line 313 "lcode.c"
    case 5: 
      var $24=$1; //@line 316 "lcode.c"
      var $25=$2; //@line 316 "lcode.c"
      var $26=(($25+4)|0); //@line 316 "lcode.c"
      var $27=$26; //@line 316 "lcode.c"
      var $28=(($27)|0); //@line 316 "lcode.c"
      var $29=HEAP32[(($28)>>2)]; //@line 316 "lcode.c"
      var $30=__Z12luaK_codeABxP9FuncState6OpCodeij($24, 5, 0, $29); //@line 316 "lcode.c"
      var $31=$2; //@line 316 "lcode.c"
      var $32=(($31+4)|0); //@line 316 "lcode.c"
      var $33=$32; //@line 316 "lcode.c"
      var $34=(($33)|0); //@line 316 "lcode.c"
      HEAP32[(($34)>>2)]=$30; //@line 316 "lcode.c"
      var $35=$2; //@line 317 "lcode.c"
      var $36=(($35)|0); //@line 317 "lcode.c"
      HEAP32[(($36)>>2)]=11; //@line 317 "lcode.c"
      __label__ = 9; break; //@line 318 "lcode.c"
    case 6: 
      var $38=$1; //@line 321 "lcode.c"
      var $39=$2; //@line 321 "lcode.c"
      var $40=(($39+4)|0); //@line 321 "lcode.c"
      var $41=$40; //@line 321 "lcode.c"
      var $42=(($41+4)|0); //@line 321 "lcode.c"
      var $43=HEAP32[(($42)>>2)]; //@line 321 "lcode.c"
      __Z7freeregP9FuncStatei($38, $43); //@line 321 "lcode.c"
      var $44=$1; //@line 322 "lcode.c"
      var $45=$2; //@line 322 "lcode.c"
      var $46=(($45+4)|0); //@line 322 "lcode.c"
      var $47=$46; //@line 322 "lcode.c"
      var $48=(($47)|0); //@line 322 "lcode.c"
      var $49=HEAP32[(($48)>>2)]; //@line 322 "lcode.c"
      __Z7freeregP9FuncStatei($44, $49); //@line 322 "lcode.c"
      var $50=$1; //@line 323 "lcode.c"
      var $51=$2; //@line 323 "lcode.c"
      var $52=(($51+4)|0); //@line 323 "lcode.c"
      var $53=$52; //@line 323 "lcode.c"
      var $54=(($53)|0); //@line 323 "lcode.c"
      var $55=HEAP32[(($54)>>2)]; //@line 323 "lcode.c"
      var $56=$2; //@line 323 "lcode.c"
      var $57=(($56+4)|0); //@line 323 "lcode.c"
      var $58=$57; //@line 323 "lcode.c"
      var $59=(($58+4)|0); //@line 323 "lcode.c"
      var $60=HEAP32[(($59)>>2)]; //@line 323 "lcode.c"
      var $61=__Z12luaK_codeABCP9FuncState6OpCodeiii($50, 6, 0, $55, $60); //@line 323 "lcode.c"
      var $62=$2; //@line 323 "lcode.c"
      var $63=(($62+4)|0); //@line 323 "lcode.c"
      var $64=$63; //@line 323 "lcode.c"
      var $65=(($64)|0); //@line 323 "lcode.c"
      HEAP32[(($65)>>2)]=$61; //@line 323 "lcode.c"
      var $66=$2; //@line 324 "lcode.c"
      var $67=(($66)|0); //@line 324 "lcode.c"
      HEAP32[(($67)>>2)]=11; //@line 324 "lcode.c"
      __label__ = 9; break; //@line 325 "lcode.c"
    case 7: 
      var $69=$1; //@line 329 "lcode.c"
      var $70=$2; //@line 329 "lcode.c"
      __Z14luaK_setoneretP9FuncStateP7expdesc($69, $70); //@line 329 "lcode.c"
      __label__ = 9; break; //@line 330 "lcode.c"
    case 8: 
      __label__ = 9; break; //@line 332 "lcode.c"
    case 9: 
      ;
      return; //@line 334 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z18luaK_dischargevarsP9FuncStateP7expdesc["X"]=1;

function __Z16luaK_exp2nextregP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$e;
  var $3=$1; //@line 415 "lcode.c"
  var $4=$2; //@line 415 "lcode.c"
  __Z18luaK_dischargevarsP9FuncStateP7expdesc($3, $4); //@line 415 "lcode.c"
  var $5=$1; //@line 416 "lcode.c"
  var $6=$2; //@line 416 "lcode.c"
  __Z7freeexpP9FuncStateP7expdesc($5, $6); //@line 416 "lcode.c"
  var $7=$1; //@line 417 "lcode.c"
  __Z16luaK_reserveregsP9FuncStatei($7, 1); //@line 417 "lcode.c"
  var $8=$1; //@line 418 "lcode.c"
  var $9=$2; //@line 418 "lcode.c"
  var $10=$1; //@line 418 "lcode.c"
  var $11=(($10+36)|0); //@line 418 "lcode.c"
  var $12=HEAP32[(($11)>>2)]; //@line 418 "lcode.c"
  var $13=((($12)-(1))|0); //@line 418 "lcode.c"
  __Z7exp2regP9FuncStateP7expdesci($8, $9, $13); //@line 418 "lcode.c"
  ;
  return; //@line 419 "lcode.c"
}


function __Z9isnumeralP7expdesc($e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$e;
      var $2=$1; //@line 31 "lcode.c"
      var $3=(($2)|0); //@line 31 "lcode.c"
      var $4=HEAP32[(($3)>>2)]; //@line 31 "lcode.c"
      var $5=(($4)|0)==5; //@line 31 "lcode.c"
      if ($5) { __label__ = 3; break; } else { var $17 = 0;__label__ = 5; break; } //@line 31 "lcode.c"
    case 3: 
      var $7=$1; //@line 31 "lcode.c"
      var $8=(($7+12)|0); //@line 31 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 31 "lcode.c"
      var $10=(($9)|0)==-1; //@line 31 "lcode.c"
      if ($10) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; } //@line 31 "lcode.c"
    case 4: 
      var $12=$1; //@line 31 "lcode.c"
      var $13=(($12+16)|0); //@line 31 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 31 "lcode.c"
      var $15=(($14)|0)==-1; //@line 31 "lcode.c"
      var $17 = $15;__label__ = 5; break; //@line 31 "lcode.c"
    case 5: 
      var $17;
      var $18=(($17)&1); //@line 31 "lcode.c"
      ;
      return $18; //@line 31 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7freeexpP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2; //@line 224 "lcode.c"
      var $4=(($3)|0); //@line 224 "lcode.c"
      var $5=HEAP32[(($4)>>2)]; //@line 224 "lcode.c"
      var $6=(($5)|0)==12; //@line 224 "lcode.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 224 "lcode.c"
    case 3: 
      var $8=$1; //@line 225 "lcode.c"
      var $9=$2; //@line 225 "lcode.c"
      var $10=(($9+4)|0); //@line 225 "lcode.c"
      var $11=$10; //@line 225 "lcode.c"
      var $12=(($11)|0); //@line 225 "lcode.c"
      var $13=HEAP32[(($12)>>2)]; //@line 225 "lcode.c"
      __Z7freeregP9FuncStatei($8, $13); //@line 225 "lcode.c"
      __label__ = 4; break; //@line 225 "lcode.c"
    case 4: 
      ;
      return; //@line 226 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7exp2regP9FuncStateP7expdesci($fs, $e, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $final;
      var $p_f;
      var $p_t;
      var $fj;
      $1=$fs;
      $2=$e;
      $3=$reg;
      var $4=$1; //@line 391 "lcode.c"
      var $5=$2; //@line 391 "lcode.c"
      var $6=$3; //@line 391 "lcode.c"
      __Z13discharge2regP9FuncStateP7expdesci($4, $5, $6); //@line 391 "lcode.c"
      var $7=$2; //@line 392 "lcode.c"
      var $8=(($7)|0); //@line 392 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 392 "lcode.c"
      var $10=(($9)|0)==10; //@line 392 "lcode.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 392 "lcode.c"
    case 3: 
      var $12=$1; //@line 393 "lcode.c"
      var $13=$2; //@line 393 "lcode.c"
      var $14=(($13+12)|0); //@line 393 "lcode.c"
      var $15=$2; //@line 393 "lcode.c"
      var $16=(($15+4)|0); //@line 393 "lcode.c"
      var $17=$16; //@line 393 "lcode.c"
      var $18=(($17)|0); //@line 393 "lcode.c"
      var $19=HEAP32[(($18)>>2)]; //@line 393 "lcode.c"
      __Z11luaK_concatP9FuncStatePii($12, $14, $19); //@line 393 "lcode.c"
      __label__ = 4; break; //@line 393 "lcode.c"
    case 4: 
      var $21=$2; //@line 394 "lcode.c"
      var $22=(($21+12)|0); //@line 394 "lcode.c"
      var $23=HEAP32[(($22)>>2)]; //@line 394 "lcode.c"
      var $24=$2; //@line 394 "lcode.c"
      var $25=(($24+16)|0); //@line 394 "lcode.c"
      var $26=HEAP32[(($25)>>2)]; //@line 394 "lcode.c"
      var $27=(($23)|0)!=(($26)|0); //@line 394 "lcode.c"
      if ($27) { __label__ = 5; break; } else { __label__ = 12; break; } //@line 394 "lcode.c"
    case 5: 
      $p_f=-1; //@line 396 "lcode.c"
      $p_t=-1; //@line 397 "lcode.c"
      var $29=$1; //@line 398 "lcode.c"
      var $30=$2; //@line 398 "lcode.c"
      var $31=(($30+12)|0); //@line 398 "lcode.c"
      var $32=HEAP32[(($31)>>2)]; //@line 398 "lcode.c"
      var $33=__Z10need_valueP9FuncStatei($29, $32); //@line 398 "lcode.c"
      var $34=(($33)|0)!=0; //@line 398 "lcode.c"
      if ($34) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 398 "lcode.c"
    case 6: 
      var $36=$1; //@line 398 "lcode.c"
      var $37=$2; //@line 398 "lcode.c"
      var $38=(($37+16)|0); //@line 398 "lcode.c"
      var $39=HEAP32[(($38)>>2)]; //@line 398 "lcode.c"
      var $40=__Z10need_valueP9FuncStatei($36, $39); //@line 398 "lcode.c"
      var $41=(($40)|0)!=0; //@line 398 "lcode.c"
      if ($41) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 398 "lcode.c"
    case 7: 
      var $43=$2; //@line 399 "lcode.c"
      var $44=(($43)|0); //@line 399 "lcode.c"
      var $45=HEAP32[(($44)>>2)]; //@line 399 "lcode.c"
      var $46=(($45)|0)==10; //@line 399 "lcode.c"
      if ($46) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 399 "lcode.c"
    case 8: 
      var $52 = -1;__label__ = 10; break; //@line 399 "lcode.c"
    case 9: 
      var $49=$1; //@line 399 "lcode.c"
      var $50=__Z9luaK_jumpP9FuncState($49); //@line 399 "lcode.c"
      var $52 = $50;__label__ = 10; break; //@line 399 "lcode.c"
    case 10: 
      var $52; //@line 399 "lcode.c"
      $fj=$52; //@line 399 "lcode.c"
      var $53=$1; //@line 400 "lcode.c"
      var $54=$3; //@line 400 "lcode.c"
      var $55=__Z10code_labelP9FuncStateiii($53, $54, 0, 1); //@line 400 "lcode.c"
      $p_f=$55; //@line 400 "lcode.c"
      var $56=$1; //@line 401 "lcode.c"
      var $57=$3; //@line 401 "lcode.c"
      var $58=__Z10code_labelP9FuncStateiii($56, $57, 1, 0); //@line 401 "lcode.c"
      $p_t=$58; //@line 401 "lcode.c"
      var $59=$1; //@line 402 "lcode.c"
      var $60=$fj; //@line 402 "lcode.c"
      __Z16luaK_patchtohereP9FuncStatei($59, $60); //@line 402 "lcode.c"
      __label__ = 11; break; //@line 403 "lcode.c"
    case 11: 
      var $62=$1; //@line 404 "lcode.c"
      var $63=__Z13luaK_getlabelP9FuncState($62); //@line 404 "lcode.c"
      $final=$63; //@line 404 "lcode.c"
      var $64=$1; //@line 405 "lcode.c"
      var $65=$2; //@line 405 "lcode.c"
      var $66=(($65+16)|0); //@line 405 "lcode.c"
      var $67=HEAP32[(($66)>>2)]; //@line 405 "lcode.c"
      var $68=$final; //@line 405 "lcode.c"
      var $69=$3; //@line 405 "lcode.c"
      var $70=$p_f; //@line 405 "lcode.c"
      __Z12patchlistauxP9FuncStateiiii($64, $67, $68, $69, $70); //@line 405 "lcode.c"
      var $71=$1; //@line 406 "lcode.c"
      var $72=$2; //@line 406 "lcode.c"
      var $73=(($72+12)|0); //@line 406 "lcode.c"
      var $74=HEAP32[(($73)>>2)]; //@line 406 "lcode.c"
      var $75=$final; //@line 406 "lcode.c"
      var $76=$3; //@line 406 "lcode.c"
      var $77=$p_t; //@line 406 "lcode.c"
      __Z12patchlistauxP9FuncStateiiii($71, $74, $75, $76, $77); //@line 406 "lcode.c"
      __label__ = 12; break; //@line 407 "lcode.c"
    case 12: 
      var $79=$2; //@line 408 "lcode.c"
      var $80=(($79+12)|0); //@line 408 "lcode.c"
      HEAP32[(($80)>>2)]=-1; //@line 408 "lcode.c"
      var $81=$2; //@line 408 "lcode.c"
      var $82=(($81+16)|0); //@line 408 "lcode.c"
      HEAP32[(($82)>>2)]=-1; //@line 408 "lcode.c"
      var $83=$3; //@line 409 "lcode.c"
      var $84=$2; //@line 409 "lcode.c"
      var $85=(($84+4)|0); //@line 409 "lcode.c"
      var $86=$85; //@line 409 "lcode.c"
      var $87=(($86)|0); //@line 409 "lcode.c"
      HEAP32[(($87)>>2)]=$83; //@line 409 "lcode.c"
      var $88=$2; //@line 410 "lcode.c"
      var $89=(($88)|0); //@line 410 "lcode.c"
      HEAP32[(($89)>>2)]=12; //@line 410 "lcode.c"
      ;
      return; //@line 411 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7exp2regP9FuncStateP7expdesci["X"]=1;

function __Z15luaK_exp2anyregP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$fs;
      $3=$e;
      var $4=$2; //@line 423 "lcode.c"
      var $5=$3; //@line 423 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($4, $5); //@line 423 "lcode.c"
      var $6=$3; //@line 424 "lcode.c"
      var $7=(($6)|0); //@line 424 "lcode.c"
      var $8=HEAP32[(($7)>>2)]; //@line 424 "lcode.c"
      var $9=(($8)|0)==12; //@line 424 "lcode.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 424 "lcode.c"
    case 3: 
      var $11=$3; //@line 425 "lcode.c"
      var $12=(($11+12)|0); //@line 425 "lcode.c"
      var $13=HEAP32[(($12)>>2)]; //@line 425 "lcode.c"
      var $14=$3; //@line 425 "lcode.c"
      var $15=(($14+16)|0); //@line 425 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 425 "lcode.c"
      var $17=(($13)|0)!=(($16)|0); //@line 425 "lcode.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 425 "lcode.c"
    case 4: 
      var $19=$3; //@line 425 "lcode.c"
      var $20=(($19+4)|0); //@line 425 "lcode.c"
      var $21=$20; //@line 425 "lcode.c"
      var $22=(($21)|0); //@line 425 "lcode.c"
      var $23=HEAP32[(($22)>>2)]; //@line 425 "lcode.c"
      $1=$23; //@line 425 "lcode.c"
      __label__ = 9; break; //@line 425 "lcode.c"
    case 5: 
      var $25=$3; //@line 426 "lcode.c"
      var $26=(($25+4)|0); //@line 426 "lcode.c"
      var $27=$26; //@line 426 "lcode.c"
      var $28=(($27)|0); //@line 426 "lcode.c"
      var $29=HEAP32[(($28)>>2)]; //@line 426 "lcode.c"
      var $30=$2; //@line 426 "lcode.c"
      var $31=(($30+50)|0); //@line 426 "lcode.c"
      var $32=HEAPU8[($31)]; //@line 426 "lcode.c"
      var $33=(($32)&255); //@line 426 "lcode.c"
      var $34=(($29)|0) >= (($33)|0); //@line 426 "lcode.c"
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 426 "lcode.c"
    case 6: 
      var $36=$2; //@line 427 "lcode.c"
      var $37=$3; //@line 427 "lcode.c"
      var $38=$3; //@line 427 "lcode.c"
      var $39=(($38+4)|0); //@line 427 "lcode.c"
      var $40=$39; //@line 427 "lcode.c"
      var $41=(($40)|0); //@line 427 "lcode.c"
      var $42=HEAP32[(($41)>>2)]; //@line 427 "lcode.c"
      __Z7exp2regP9FuncStateP7expdesci($36, $37, $42); //@line 427 "lcode.c"
      var $43=$3; //@line 428 "lcode.c"
      var $44=(($43+4)|0); //@line 428 "lcode.c"
      var $45=$44; //@line 428 "lcode.c"
      var $46=(($45)|0); //@line 428 "lcode.c"
      var $47=HEAP32[(($46)>>2)]; //@line 428 "lcode.c"
      $1=$47; //@line 428 "lcode.c"
      __label__ = 9; break; //@line 428 "lcode.c"
    case 7: 
      __label__ = 8; break; //@line 430 "lcode.c"
    case 8: 
      var $50=$2; //@line 431 "lcode.c"
      var $51=$3; //@line 431 "lcode.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($50, $51); //@line 431 "lcode.c"
      var $52=$3; //@line 432 "lcode.c"
      var $53=(($52+4)|0); //@line 432 "lcode.c"
      var $54=$53; //@line 432 "lcode.c"
      var $55=(($54)|0); //@line 432 "lcode.c"
      var $56=HEAP32[(($55)>>2)]; //@line 432 "lcode.c"
      $1=$56; //@line 432 "lcode.c"
      __label__ = 9; break; //@line 432 "lcode.c"
    case 9: 
      var $58=$1; //@line 433 "lcode.c"
      ;
      return $58; //@line 433 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15luaK_exp2anyregP9FuncStateP7expdesc["X"]=1;

function __Z12luaK_exp2valP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2; //@line 437 "lcode.c"
      var $4=(($3+12)|0); //@line 437 "lcode.c"
      var $5=HEAP32[(($4)>>2)]; //@line 437 "lcode.c"
      var $6=$2; //@line 437 "lcode.c"
      var $7=(($6+16)|0); //@line 437 "lcode.c"
      var $8=HEAP32[(($7)>>2)]; //@line 437 "lcode.c"
      var $9=(($5)|0)!=(($8)|0); //@line 437 "lcode.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 437 "lcode.c"
    case 3: 
      var $11=$1; //@line 438 "lcode.c"
      var $12=$2; //@line 438 "lcode.c"
      var $13=__Z15luaK_exp2anyregP9FuncStateP7expdesc($11, $12); //@line 438 "lcode.c"
      __label__ = 5; break; //@line 438 "lcode.c"
    case 4: 
      var $15=$1; //@line 440 "lcode.c"
      var $16=$2; //@line 440 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($15, $16); //@line 440 "lcode.c"
      __label__ = 5; break; //@line 440 "lcode.c"
    case 5: 
      ;
      return; //@line 441 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaK_exp2RKP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$fs;
      $3=$e;
      var $4=$2; //@line 445 "lcode.c"
      var $5=$3; //@line 445 "lcode.c"
      __Z12luaK_exp2valP9FuncStateP7expdesc($4, $5); //@line 445 "lcode.c"
      var $6=$3; //@line 446 "lcode.c"
      var $7=(($6)|0); //@line 446 "lcode.c"
      var $8=HEAP32[(($7)>>2)]; //@line 446 "lcode.c"
      if ((($8)|0) == 5 || (($8)|0) == 2 || (($8)|0) == 3 || (($8)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 4) {
        __label__ = 12; break;
      }
      else {
      __label__ = 15; break;
      }
      
    case 3: 
      var $10=$2; //@line 451 "lcode.c"
      var $11=(($10+40)|0); //@line 451 "lcode.c"
      var $12=HEAP32[(($11)>>2)]; //@line 451 "lcode.c"
      var $13=(($12)|0) <= 255; //@line 451 "lcode.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 11; break; } //@line 451 "lcode.c"
    case 4: 
      var $15=$3; //@line 452 "lcode.c"
      var $16=(($15)|0); //@line 452 "lcode.c"
      var $17=HEAP32[(($16)>>2)]; //@line 452 "lcode.c"
      var $18=(($17)|0)==1; //@line 452 "lcode.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 452 "lcode.c"
    case 5: 
      var $20=$2; //@line 452 "lcode.c"
      var $21=__Z4nilKP9FuncState($20); //@line 452 "lcode.c"
      var $45 = $21;__label__ = 10; break; //@line 452 "lcode.c"
    case 6: 
      var $23=$3; //@line 452 "lcode.c"
      var $24=(($23)|0); //@line 452 "lcode.c"
      var $25=HEAP32[(($24)>>2)]; //@line 452 "lcode.c"
      var $26=(($25)|0)==5; //@line 452 "lcode.c"
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 452 "lcode.c"
    case 7: 
      var $28=$2; //@line 453 "lcode.c"
      var $29=$3; //@line 453 "lcode.c"
      var $30=(($29+4)|0); //@line 453 "lcode.c"
      var $31=$30; //@line 453 "lcode.c"
      var $32=(tempDoubleI32[0]=HEAP32[(($31)>>2)],tempDoubleI32[1]=HEAP32[((($31)+(4))>>2)],tempDoubleF64[0]); //@line 453 "lcode.c"
      var $33=__Z12luaK_numberKP9FuncStated($28, $32); //@line 453 "lcode.c"
      var $43 = $33;__label__ = 9; break; //@line 453 "lcode.c"
    case 8: 
      var $35=$2; //@line 454 "lcode.c"
      var $36=$3; //@line 454 "lcode.c"
      var $37=(($36)|0); //@line 454 "lcode.c"
      var $38=HEAP32[(($37)>>2)]; //@line 454 "lcode.c"
      var $39=(($38)|0)==2; //@line 454 "lcode.c"
      var $40=(($39)&1); //@line 454 "lcode.c"
      var $41=__Z5boolKP9FuncStatei($35, $40); //@line 454 "lcode.c"
      var $43 = $41;__label__ = 9; break; //@line 454 "lcode.c"
    case 9: 
      var $43; //@line 454 "lcode.c"
      var $45 = $43;__label__ = 10; break; //@line 454 "lcode.c"
    case 10: 
      var $45; //@line 454 "lcode.c"
      var $46=$3; //@line 454 "lcode.c"
      var $47=(($46+4)|0); //@line 454 "lcode.c"
      var $48=$47; //@line 454 "lcode.c"
      var $49=(($48)|0); //@line 454 "lcode.c"
      HEAP32[(($49)>>2)]=$45; //@line 454 "lcode.c"
      var $50=$3; //@line 455 "lcode.c"
      var $51=(($50)|0); //@line 455 "lcode.c"
      HEAP32[(($51)>>2)]=4; //@line 455 "lcode.c"
      var $52=$3; //@line 456 "lcode.c"
      var $53=(($52+4)|0); //@line 456 "lcode.c"
      var $54=$53; //@line 456 "lcode.c"
      var $55=(($54)|0); //@line 456 "lcode.c"
      var $56=HEAP32[(($55)>>2)]; //@line 456 "lcode.c"
      var $57=$56 | 256; //@line 456 "lcode.c"
      $1=$57; //@line 456 "lcode.c"
      __label__ = 17; break; //@line 456 "lcode.c"
    case 11: 
      __label__ = 16; break; //@line 458 "lcode.c"
    case 12: 
      var $60=$3; //@line 461 "lcode.c"
      var $61=(($60+4)|0); //@line 461 "lcode.c"
      var $62=$61; //@line 461 "lcode.c"
      var $63=(($62)|0); //@line 461 "lcode.c"
      var $64=HEAP32[(($63)>>2)]; //@line 461 "lcode.c"
      var $65=(($64)|0) <= 255; //@line 461 "lcode.c"
      if ($65) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 461 "lcode.c"
    case 13: 
      var $67=$3; //@line 462 "lcode.c"
      var $68=(($67+4)|0); //@line 462 "lcode.c"
      var $69=$68; //@line 462 "lcode.c"
      var $70=(($69)|0); //@line 462 "lcode.c"
      var $71=HEAP32[(($70)>>2)]; //@line 462 "lcode.c"
      var $72=$71 | 256; //@line 462 "lcode.c"
      $1=$72; //@line 462 "lcode.c"
      __label__ = 17; break; //@line 462 "lcode.c"
    case 14: 
      __label__ = 16; break; //@line 463 "lcode.c"
    case 15: 
      __label__ = 16; break; //@line 465 "lcode.c"
    case 16: 
      var $76=$2; //@line 468 "lcode.c"
      var $77=$3; //@line 468 "lcode.c"
      var $78=__Z15luaK_exp2anyregP9FuncStateP7expdesc($76, $77); //@line 468 "lcode.c"
      $1=$78; //@line 468 "lcode.c"
      __label__ = 17; break; //@line 468 "lcode.c"
    case 17: 
      var $80=$1; //@line 469 "lcode.c"
      ;
      return $80; //@line 469 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaK_exp2RKP9FuncStateP7expdesc["X"]=1;

function __Z4nilKP9FuncState($fs) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
  var __label__;

  var $1;
  var $k=__stackBase__;
  var $v=(__stackBase__)+(12);
  var $i_o;
  $1=$fs;
  var $2=(($v+8)|0); //@line 273 "lcode.c"
  HEAP32[(($2)>>2)]=0; //@line 273 "lcode.c"
  $i_o=$k; //@line 275 "lcode.c"
  var $3=$1; //@line 275 "lcode.c"
  var $4=(($3+4)|0); //@line 275 "lcode.c"
  var $5=HEAP32[(($4)>>2)]; //@line 275 "lcode.c"
  var $6=$5; //@line 275 "lcode.c"
  var $7=$i_o; //@line 275 "lcode.c"
  var $8=(($7)|0); //@line 275 "lcode.c"
  var $9=$8; //@line 275 "lcode.c"
  HEAP32[(($9)>>2)]=$6; //@line 275 "lcode.c"
  var $10=$i_o; //@line 275 "lcode.c"
  var $11=(($10+8)|0); //@line 275 "lcode.c"
  HEAP32[(($11)>>2)]=5; //@line 275 "lcode.c"
  var $12=$1; //@line 276 "lcode.c"
  var $13=__Z4addkP9FuncStateP10lua_TValueS2_($12, $k, $v); //@line 276 "lcode.c"
  STACKTOP = __stackBase__;
  return $13; //@line 276 "lcode.c"
}


function __Z5boolKP9FuncStatei($fs, $b) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $2;
  var $o=__stackBase__;
  var $i_o;
  $1=$fs;
  $2=$b;
  $i_o=$o; //@line 266 "lcode.c"
  var $3=$2; //@line 266 "lcode.c"
  var $4=$i_o; //@line 266 "lcode.c"
  var $5=(($4)|0); //@line 266 "lcode.c"
  var $6=$5; //@line 266 "lcode.c"
  HEAP32[(($6)>>2)]=$3; //@line 266 "lcode.c"
  var $7=$i_o; //@line 266 "lcode.c"
  var $8=(($7+8)|0); //@line 266 "lcode.c"
  HEAP32[(($8)>>2)]=1; //@line 266 "lcode.c"
  var $9=$1; //@line 267 "lcode.c"
  var $10=__Z4addkP9FuncStateP10lua_TValueS2_($9, $o, $o); //@line 267 "lcode.c"
  STACKTOP = __stackBase__;
  return $10; //@line 267 "lcode.c"
}


function __Z13luaK_storevarP9FuncStateP7expdescS2_($fs, $var, $ex) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e;
      var $e1;
      var $e2;
      $1=$fs;
      $2=$var;
      $3=$ex;
      var $4=$2; //@line 473 "lcode.c"
      var $5=(($4)|0); //@line 473 "lcode.c"
      var $6=HEAP32[(($5)>>2)]; //@line 473 "lcode.c"
      if ((($6)|0) == 6) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 8) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == 9) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $8=$1; //@line 475 "lcode.c"
      var $9=$3; //@line 475 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($8, $9); //@line 475 "lcode.c"
      var $10=$1; //@line 476 "lcode.c"
      var $11=$3; //@line 476 "lcode.c"
      var $12=$2; //@line 476 "lcode.c"
      var $13=(($12+4)|0); //@line 476 "lcode.c"
      var $14=$13; //@line 476 "lcode.c"
      var $15=(($14)|0); //@line 476 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 476 "lcode.c"
      __Z7exp2regP9FuncStateP7expdesci($10, $11, $16); //@line 476 "lcode.c"
      __label__ = 9; break; //@line 477 "lcode.c"
    case 4: 
      var $18=$1; //@line 480 "lcode.c"
      var $19=$3; //@line 480 "lcode.c"
      var $20=__Z15luaK_exp2anyregP9FuncStateP7expdesc($18, $19); //@line 480 "lcode.c"
      $e=$20; //@line 480 "lcode.c"
      var $21=$1; //@line 481 "lcode.c"
      var $22=$e; //@line 481 "lcode.c"
      var $23=$2; //@line 481 "lcode.c"
      var $24=(($23+4)|0); //@line 481 "lcode.c"
      var $25=$24; //@line 481 "lcode.c"
      var $26=(($25)|0); //@line 481 "lcode.c"
      var $27=HEAP32[(($26)>>2)]; //@line 481 "lcode.c"
      var $28=__Z12luaK_codeABCP9FuncState6OpCodeiii($21, 8, $22, $27, 0); //@line 481 "lcode.c"
      __label__ = 8; break; //@line 482 "lcode.c"
    case 5: 
      var $30=$1; //@line 485 "lcode.c"
      var $31=$3; //@line 485 "lcode.c"
      var $32=__Z15luaK_exp2anyregP9FuncStateP7expdesc($30, $31); //@line 485 "lcode.c"
      $e1=$32; //@line 485 "lcode.c"
      var $33=$1; //@line 486 "lcode.c"
      var $34=$e1; //@line 486 "lcode.c"
      var $35=$2; //@line 486 "lcode.c"
      var $36=(($35+4)|0); //@line 486 "lcode.c"
      var $37=$36; //@line 486 "lcode.c"
      var $38=(($37)|0); //@line 486 "lcode.c"
      var $39=HEAP32[(($38)>>2)]; //@line 486 "lcode.c"
      var $40=__Z12luaK_codeABxP9FuncState6OpCodeij($33, 7, $34, $39); //@line 486 "lcode.c"
      __label__ = 8; break; //@line 487 "lcode.c"
    case 6: 
      var $42=$1; //@line 490 "lcode.c"
      var $43=$3; //@line 490 "lcode.c"
      var $44=__Z11luaK_exp2RKP9FuncStateP7expdesc($42, $43); //@line 490 "lcode.c"
      $e2=$44; //@line 490 "lcode.c"
      var $45=$1; //@line 491 "lcode.c"
      var $46=$2; //@line 491 "lcode.c"
      var $47=(($46+4)|0); //@line 491 "lcode.c"
      var $48=$47; //@line 491 "lcode.c"
      var $49=(($48)|0); //@line 491 "lcode.c"
      var $50=HEAP32[(($49)>>2)]; //@line 491 "lcode.c"
      var $51=$2; //@line 491 "lcode.c"
      var $52=(($51+4)|0); //@line 491 "lcode.c"
      var $53=$52; //@line 491 "lcode.c"
      var $54=(($53+4)|0); //@line 491 "lcode.c"
      var $55=HEAP32[(($54)>>2)]; //@line 491 "lcode.c"
      var $56=$e2; //@line 491 "lcode.c"
      var $57=__Z12luaK_codeABCP9FuncState6OpCodeiii($45, 9, $50, $55, $56); //@line 491 "lcode.c"
      __label__ = 8; break; //@line 492 "lcode.c"
    case 7: 
      __label__ = 8; break; //@line 496 "lcode.c"
    case 8: 
      var $60=$1; //@line 499 "lcode.c"
      var $61=$3; //@line 499 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($60, $61); //@line 499 "lcode.c"
      __label__ = 9; break; //@line 500 "lcode.c"
    case 9: 
      ;
      return; //@line 500 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaK_storevarP9FuncStateP7expdescS2_["X"]=1;

function __Z9luaK_selfP9FuncStateP7expdescS2_($fs, $e, $key) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $func;
  $1=$fs;
  $2=$e;
  $3=$key;
  var $4=$1; //@line 505 "lcode.c"
  var $5=$2; //@line 505 "lcode.c"
  var $6=__Z15luaK_exp2anyregP9FuncStateP7expdesc($4, $5); //@line 505 "lcode.c"
  var $7=$1; //@line 506 "lcode.c"
  var $8=$2; //@line 506 "lcode.c"
  __Z7freeexpP9FuncStateP7expdesc($7, $8); //@line 506 "lcode.c"
  var $9=$1; //@line 507 "lcode.c"
  var $10=(($9+36)|0); //@line 507 "lcode.c"
  var $11=HEAP32[(($10)>>2)]; //@line 507 "lcode.c"
  $func=$11; //@line 507 "lcode.c"
  var $12=$1; //@line 508 "lcode.c"
  __Z16luaK_reserveregsP9FuncStatei($12, 2); //@line 508 "lcode.c"
  var $13=$1; //@line 509 "lcode.c"
  var $14=$func; //@line 509 "lcode.c"
  var $15=$2; //@line 509 "lcode.c"
  var $16=(($15+4)|0); //@line 509 "lcode.c"
  var $17=$16; //@line 509 "lcode.c"
  var $18=(($17)|0); //@line 509 "lcode.c"
  var $19=HEAP32[(($18)>>2)]; //@line 509 "lcode.c"
  var $20=$1; //@line 509 "lcode.c"
  var $21=$3; //@line 509 "lcode.c"
  var $22=__Z11luaK_exp2RKP9FuncStateP7expdesc($20, $21); //@line 509 "lcode.c"
  var $23=__Z12luaK_codeABCP9FuncState6OpCodeiii($13, 11, $14, $19, $22); //@line 509 "lcode.c"
  var $24=$1; //@line 510 "lcode.c"
  var $25=$3; //@line 510 "lcode.c"
  __Z7freeexpP9FuncStateP7expdesc($24, $25); //@line 510 "lcode.c"
  var $26=$func; //@line 511 "lcode.c"
  var $27=$2; //@line 511 "lcode.c"
  var $28=(($27+4)|0); //@line 511 "lcode.c"
  var $29=$28; //@line 511 "lcode.c"
  var $30=(($29)|0); //@line 511 "lcode.c"
  HEAP32[(($30)>>2)]=$26; //@line 511 "lcode.c"
  var $31=$2; //@line 512 "lcode.c"
  var $32=(($31)|0); //@line 512 "lcode.c"
  HEAP32[(($32)>>2)]=12; //@line 512 "lcode.c"
  ;
  return; //@line 513 "lcode.c"
}


function __Z13luaK_goiftrueP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $pc;
      $1=$fs;
      $2=$e;
      var $3=$1; //@line 541 "lcode.c"
      var $4=$2; //@line 541 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($3, $4); //@line 541 "lcode.c"
      var $5=$2; //@line 542 "lcode.c"
      var $6=(($5)|0); //@line 542 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 542 "lcode.c"
      if ((($7)|0) == 4 || (($7)|0) == 5 || (($7)|0) == 2) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      $pc=-1; //@line 544 "lcode.c"
      __label__ = 6; break; //@line 545 "lcode.c"
    case 4: 
      var $10=$1; //@line 548 "lcode.c"
      var $11=$2; //@line 548 "lcode.c"
      __Z10invertjumpP9FuncStateP7expdesc($10, $11); //@line 548 "lcode.c"
      var $12=$2; //@line 549 "lcode.c"
      var $13=(($12+4)|0); //@line 549 "lcode.c"
      var $14=$13; //@line 549 "lcode.c"
      var $15=(($14)|0); //@line 549 "lcode.c"
      var $16=HEAP32[(($15)>>2)]; //@line 549 "lcode.c"
      $pc=$16; //@line 549 "lcode.c"
      __label__ = 6; break; //@line 550 "lcode.c"
    case 5: 
      var $18=$1; //@line 553 "lcode.c"
      var $19=$2; //@line 553 "lcode.c"
      var $20=__Z10jumponcondP9FuncStateP7expdesci($18, $19, 0); //@line 553 "lcode.c"
      $pc=$20; //@line 553 "lcode.c"
      __label__ = 6; break; //@line 554 "lcode.c"
    case 6: 
      var $22=$1; //@line 557 "lcode.c"
      var $23=$2; //@line 557 "lcode.c"
      var $24=(($23+16)|0); //@line 557 "lcode.c"
      var $25=$pc; //@line 557 "lcode.c"
      __Z11luaK_concatP9FuncStatePii($22, $24, $25); //@line 557 "lcode.c"
      var $26=$1; //@line 558 "lcode.c"
      var $27=$2; //@line 558 "lcode.c"
      var $28=(($27+12)|0); //@line 558 "lcode.c"
      var $29=HEAP32[(($28)>>2)]; //@line 558 "lcode.c"
      __Z16luaK_patchtohereP9FuncStatei($26, $29); //@line 558 "lcode.c"
      var $30=$2; //@line 559 "lcode.c"
      var $31=(($30+12)|0); //@line 559 "lcode.c"
      HEAP32[(($31)>>2)]=-1; //@line 559 "lcode.c"
      ;
      return; //@line 560 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10invertjumpP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  var $pc;
  $1=$fs;
  $2=$e;
  var $3=$1; //@line 517 "lcode.c"
  var $4=$2; //@line 517 "lcode.c"
  var $5=(($4+4)|0); //@line 517 "lcode.c"
  var $6=$5; //@line 517 "lcode.c"
  var $7=(($6)|0); //@line 517 "lcode.c"
  var $8=HEAP32[(($7)>>2)]; //@line 517 "lcode.c"
  var $9=__Z14getjumpcontrolP9FuncStatei($3, $8); //@line 517 "lcode.c"
  $pc=$9; //@line 517 "lcode.c"
  var $10=$pc; //@line 520 "lcode.c"
  var $11=HEAP32[(($10)>>2)]; //@line 520 "lcode.c"
  var $12=$11 & -16321; //@line 520 "lcode.c"
  var $13=$pc; //@line 520 "lcode.c"
  var $14=HEAPU32[(($13)>>2)]; //@line 520 "lcode.c"
  var $15=$14 >>> 6; //@line 520 "lcode.c"
  var $16=$15 & 255; //@line 520 "lcode.c"
  var $17=(($16)|0)!=0; //@line 520 "lcode.c"
  var $18=$17 ^ 1; //@line 520 "lcode.c"
  var $19=(($18)&1); //@line 520 "lcode.c"
  var $20=$19 << 6; //@line 520 "lcode.c"
  var $21=$20 & 16320; //@line 520 "lcode.c"
  var $22=$12 | $21; //@line 520 "lcode.c"
  var $23=$pc; //@line 520 "lcode.c"
  HEAP32[(($23)>>2)]=$22; //@line 520 "lcode.c"
  ;
  return; //@line 521 "lcode.c"
}


function __Z10jumponcondP9FuncStateP7expdesci($fs, $e, $cond) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ie;
      $2=$fs;
      $3=$e;
      $4=$cond;
      var $5=$3; //@line 525 "lcode.c"
      var $6=(($5)|0); //@line 525 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 525 "lcode.c"
      var $8=(($7)|0)==11; //@line 525 "lcode.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 525 "lcode.c"
    case 3: 
      var $10=$3; //@line 526 "lcode.c"
      var $11=(($10+4)|0); //@line 526 "lcode.c"
      var $12=$11; //@line 526 "lcode.c"
      var $13=(($12)|0); //@line 526 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 526 "lcode.c"
      var $15=$2; //@line 526 "lcode.c"
      var $16=(($15)|0); //@line 526 "lcode.c"
      var $17=HEAP32[(($16)>>2)]; //@line 526 "lcode.c"
      var $18=(($17+12)|0); //@line 526 "lcode.c"
      var $19=HEAP32[(($18)>>2)]; //@line 526 "lcode.c"
      var $20=(($19+($14<<2))|0); //@line 526 "lcode.c"
      var $21=HEAP32[(($20)>>2)]; //@line 526 "lcode.c"
      $ie=$21; //@line 526 "lcode.c"
      var $22=$ie; //@line 527 "lcode.c"
      var $23=$22 >>> 0; //@line 527 "lcode.c"
      var $24=$23 & 63; //@line 527 "lcode.c"
      var $25=(($24)|0)==19; //@line 527 "lcode.c"
      if ($25) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 527 "lcode.c"
    case 4: 
      var $27=$2; //@line 528 "lcode.c"
      var $28=(($27+24)|0); //@line 528 "lcode.c"
      var $29=HEAP32[(($28)>>2)]; //@line 528 "lcode.c"
      var $30=((($29)-(1))|0); //@line 528 "lcode.c"
      HEAP32[(($28)>>2)]=$30; //@line 528 "lcode.c"
      var $31=$2; //@line 529 "lcode.c"
      var $32=$ie; //@line 529 "lcode.c"
      var $33=$32 >>> 23; //@line 529 "lcode.c"
      var $34=$33 & 511; //@line 529 "lcode.c"
      var $35=$4; //@line 529 "lcode.c"
      var $36=(($35)|0)!=0; //@line 529 "lcode.c"
      var $37=$36 ^ 1; //@line 529 "lcode.c"
      var $38=(($37)&1); //@line 529 "lcode.c"
      var $39=__Z8condjumpP9FuncState6OpCodeiii($31, 26, $34, 0, $38); //@line 529 "lcode.c"
      $1=$39; //@line 529 "lcode.c"
      __label__ = 7; break; //@line 529 "lcode.c"
    case 5: 
      __label__ = 6; break; //@line 532 "lcode.c"
    case 6: 
      var $42=$2; //@line 533 "lcode.c"
      var $43=$3; //@line 533 "lcode.c"
      __Z16discharge2anyregP9FuncStateP7expdesc($42, $43); //@line 533 "lcode.c"
      var $44=$2; //@line 534 "lcode.c"
      var $45=$3; //@line 534 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($44, $45); //@line 534 "lcode.c"
      var $46=$2; //@line 535 "lcode.c"
      var $47=$3; //@line 535 "lcode.c"
      var $48=(($47+4)|0); //@line 535 "lcode.c"
      var $49=$48; //@line 535 "lcode.c"
      var $50=(($49)|0); //@line 535 "lcode.c"
      var $51=HEAP32[(($50)>>2)]; //@line 535 "lcode.c"
      var $52=$4; //@line 535 "lcode.c"
      var $53=__Z8condjumpP9FuncState6OpCodeiii($46, 27, 255, $51, $52); //@line 535 "lcode.c"
      $1=$53; //@line 535 "lcode.c"
      __label__ = 7; break; //@line 535 "lcode.c"
    case 7: 
      var $55=$1; //@line 536 "lcode.c"
      ;
      return $55; //@line 536 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10jumponcondP9FuncStateP7expdesci["X"]=1;

function __Z12luaK_indexedP9FuncStateP7expdescS2_($fs, $t, $k) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$fs;
  $2=$t;
  $3=$k;
  var $4=$1; //@line 622 "lcode.c"
  var $5=$3; //@line 622 "lcode.c"
  var $6=__Z11luaK_exp2RKP9FuncStateP7expdesc($4, $5); //@line 622 "lcode.c"
  var $7=$2; //@line 622 "lcode.c"
  var $8=(($7+4)|0); //@line 622 "lcode.c"
  var $9=$8; //@line 622 "lcode.c"
  var $10=(($9+4)|0); //@line 622 "lcode.c"
  HEAP32[(($10)>>2)]=$6; //@line 622 "lcode.c"
  var $11=$2; //@line 623 "lcode.c"
  var $12=(($11)|0); //@line 623 "lcode.c"
  HEAP32[(($12)>>2)]=9; //@line 623 "lcode.c"
  ;
  return; //@line 624 "lcode.c"
}


function __Z11luaK_prefixP9FuncState5UnOprP7expdesc($fs, $op, $e) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e2=__stackBase__;
      $1=$fs;
      $2=$op;
      $3=$e;
      var $4=(($e2+16)|0); //@line 691 "lcode.c"
      HEAP32[(($4)>>2)]=-1; //@line 691 "lcode.c"
      var $5=(($e2+12)|0); //@line 691 "lcode.c"
      HEAP32[(($5)>>2)]=-1; //@line 691 "lcode.c"
      var $6=(($e2)|0); //@line 691 "lcode.c"
      HEAP32[(($6)>>2)]=5; //@line 691 "lcode.c"
      var $7=(($e2+4)|0); //@line 691 "lcode.c"
      var $8=$7; //@line 691 "lcode.c"
      (tempDoubleF64[0]=0,HEAP32[(($8)>>2)]=tempDoubleI32[0],HEAP32[((($8)+(4))>>2)]=tempDoubleI32[1]); //@line 691 "lcode.c"
      var $9=$2; //@line 692 "lcode.c"
      if ((($9)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      var $11=$3; //@line 694 "lcode.c"
      var $12=__Z9isnumeralP7expdesc($11); //@line 694 "lcode.c"
      var $13=(($12)|0)!=0; //@line 694 "lcode.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 694 "lcode.c"
    case 4: 
      var $15=$1; //@line 695 "lcode.c"
      var $16=$3; //@line 695 "lcode.c"
      var $17=__Z15luaK_exp2anyregP9FuncStateP7expdesc($15, $16); //@line 695 "lcode.c"
      __label__ = 5; break; //@line 695 "lcode.c"
    case 5: 
      var $19=$1; //@line 696 "lcode.c"
      var $20=$3; //@line 696 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($19, 18, $20, $e2); //@line 696 "lcode.c"
      __label__ = 9; break; //@line 697 "lcode.c"
    case 6: 
      var $22=$1; //@line 699 "lcode.c"
      var $23=$3; //@line 699 "lcode.c"
      __Z7codenotP9FuncStateP7expdesc($22, $23); //@line 699 "lcode.c"
      __label__ = 9; break; //@line 699 "lcode.c"
    case 7: 
      var $25=$1; //@line 701 "lcode.c"
      var $26=$3; //@line 701 "lcode.c"
      var $27=__Z15luaK_exp2anyregP9FuncStateP7expdesc($25, $26); //@line 701 "lcode.c"
      var $28=$1; //@line 702 "lcode.c"
      var $29=$3; //@line 702 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($28, 20, $29, $e2); //@line 702 "lcode.c"
      __label__ = 9; break; //@line 703 "lcode.c"
    case 8: 
      __label__ = 9; break; //@line 706 "lcode.c"
    case 9: 
      STACKTOP = __stackBase__;
      return; //@line 707 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12luaK_fixlineP9FuncStatei($fs, $line) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$fs;
  $2=$line;
  var $3=$2; //@line 785 "lcode.c"
  var $4=$1; //@line 785 "lcode.c"
  var $5=(($4+24)|0); //@line 785 "lcode.c"
  var $6=HEAP32[(($5)>>2)]; //@line 785 "lcode.c"
  var $7=((($6)-(1))|0); //@line 785 "lcode.c"
  var $8=$1; //@line 785 "lcode.c"
  var $9=(($8)|0); //@line 785 "lcode.c"
  var $10=HEAP32[(($9)>>2)]; //@line 785 "lcode.c"
  var $11=(($10+20)|0); //@line 785 "lcode.c"
  var $12=HEAP32[(($11)>>2)]; //@line 785 "lcode.c"
  var $13=(($12+($7<<2))|0); //@line 785 "lcode.c"
  HEAP32[(($13)>>2)]=$3; //@line 785 "lcode.c"
  ;
  return; //@line 786 "lcode.c"
}


function __Z9codearithP9FuncState6OpCodeP7expdescS3_($fs, $op, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o2;
      var $o1;
      $1=$fs;
      $2=$op;
      $3=$e1;
      $4=$e2;
      var $5=$2; //@line 654 "lcode.c"
      var $6=$3; //@line 654 "lcode.c"
      var $7=$4; //@line 654 "lcode.c"
      var $8=__Z12constfolding6OpCodeP7expdescS1_($5, $6, $7); //@line 654 "lcode.c"
      var $9=(($8)|0)!=0; //@line 654 "lcode.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 654 "lcode.c"
    case 3: 
      __label__ = 12; break; //@line 655 "lcode.c"
    case 4: 
      var $12=$2; //@line 657 "lcode.c"
      var $13=(($12)|0)!=18; //@line 657 "lcode.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 657 "lcode.c"
    case 5: 
      var $15=$2; //@line 657 "lcode.c"
      var $16=(($15)|0)!=20; //@line 657 "lcode.c"
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 657 "lcode.c"
    case 6: 
      var $18=$1; //@line 657 "lcode.c"
      var $19=$4; //@line 657 "lcode.c"
      var $20=__Z11luaK_exp2RKP9FuncStateP7expdesc($18, $19); //@line 657 "lcode.c"
      var $23 = $20;__label__ = 8; break; //@line 657 "lcode.c"
    case 7: 
      var $23 = 0;__label__ = 8; break; //@line 657 "lcode.c"
    case 8: 
      var $23; //@line 657 "lcode.c"
      $o2=$23; //@line 657 "lcode.c"
      var $24=$1; //@line 658 "lcode.c"
      var $25=$3; //@line 658 "lcode.c"
      var $26=__Z11luaK_exp2RKP9FuncStateP7expdesc($24, $25); //@line 658 "lcode.c"
      $o1=$26; //@line 658 "lcode.c"
      var $27=$o1; //@line 659 "lcode.c"
      var $28=$o2; //@line 659 "lcode.c"
      var $29=(($27)|0) > (($28)|0); //@line 659 "lcode.c"
      if ($29) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 659 "lcode.c"
    case 9: 
      var $31=$1; //@line 660 "lcode.c"
      var $32=$3; //@line 660 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($31, $32); //@line 660 "lcode.c"
      var $33=$1; //@line 661 "lcode.c"
      var $34=$4; //@line 661 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($33, $34); //@line 661 "lcode.c"
      __label__ = 11; break; //@line 662 "lcode.c"
    case 10: 
      var $36=$1; //@line 664 "lcode.c"
      var $37=$4; //@line 664 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($36, $37); //@line 664 "lcode.c"
      var $38=$1; //@line 665 "lcode.c"
      var $39=$3; //@line 665 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($38, $39); //@line 665 "lcode.c"
      __label__ = 11; break; //@line 666 "lcode.c"
    case 11: 
      var $41=$1; //@line 667 "lcode.c"
      var $42=$2; //@line 667 "lcode.c"
      var $43=$o1; //@line 667 "lcode.c"
      var $44=$o2; //@line 667 "lcode.c"
      var $45=__Z12luaK_codeABCP9FuncState6OpCodeiii($41, $42, 0, $43, $44); //@line 667 "lcode.c"
      var $46=$3; //@line 667 "lcode.c"
      var $47=(($46+4)|0); //@line 667 "lcode.c"
      var $48=$47; //@line 667 "lcode.c"
      var $49=(($48)|0); //@line 667 "lcode.c"
      HEAP32[(($49)>>2)]=$45; //@line 667 "lcode.c"
      var $50=$3; //@line 668 "lcode.c"
      var $51=(($50)|0); //@line 668 "lcode.c"
      HEAP32[(($51)>>2)]=11; //@line 668 "lcode.c"
      __label__ = 12; break; //@line 669 "lcode.c"
    case 12: 
      ;
      return; //@line 670 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9codearithP9FuncState6OpCodeP7expdescS3_["X"]=1;

function __Z7codenotP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $temp;
      $1=$fs;
      $2=$e;
      var $3=$1; //@line 587 "lcode.c"
      var $4=$2; //@line 587 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($3, $4); //@line 587 "lcode.c"
      var $5=$2; //@line 588 "lcode.c"
      var $6=(($5)|0); //@line 588 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 588 "lcode.c"
      if ((($7)|0) == 1 || (($7)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 4 || (($7)|0) == 5 || (($7)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 11 || (($7)|0) == 12) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $9=$2; //@line 590 "lcode.c"
      var $10=(($9)|0); //@line 590 "lcode.c"
      HEAP32[(($10)>>2)]=2; //@line 590 "lcode.c"
      __label__ = 8; break; //@line 591 "lcode.c"
    case 4: 
      var $12=$2; //@line 594 "lcode.c"
      var $13=(($12)|0); //@line 594 "lcode.c"
      HEAP32[(($13)>>2)]=3; //@line 594 "lcode.c"
      __label__ = 8; break; //@line 595 "lcode.c"
    case 5: 
      var $15=$1; //@line 598 "lcode.c"
      var $16=$2; //@line 598 "lcode.c"
      __Z10invertjumpP9FuncStateP7expdesc($15, $16); //@line 598 "lcode.c"
      __label__ = 8; break; //@line 599 "lcode.c"
    case 6: 
      var $18=$1; //@line 603 "lcode.c"
      var $19=$2; //@line 603 "lcode.c"
      __Z16discharge2anyregP9FuncStateP7expdesc($18, $19); //@line 603 "lcode.c"
      var $20=$1; //@line 604 "lcode.c"
      var $21=$2; //@line 604 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($20, $21); //@line 604 "lcode.c"
      var $22=$1; //@line 605 "lcode.c"
      var $23=$2; //@line 605 "lcode.c"
      var $24=(($23+4)|0); //@line 605 "lcode.c"
      var $25=$24; //@line 605 "lcode.c"
      var $26=(($25)|0); //@line 605 "lcode.c"
      var $27=HEAP32[(($26)>>2)]; //@line 605 "lcode.c"
      var $28=__Z12luaK_codeABCP9FuncState6OpCodeiii($22, 19, 0, $27, 0); //@line 605 "lcode.c"
      var $29=$2; //@line 605 "lcode.c"
      var $30=(($29+4)|0); //@line 605 "lcode.c"
      var $31=$30; //@line 605 "lcode.c"
      var $32=(($31)|0); //@line 605 "lcode.c"
      HEAP32[(($32)>>2)]=$28; //@line 605 "lcode.c"
      var $33=$2; //@line 606 "lcode.c"
      var $34=(($33)|0); //@line 606 "lcode.c"
      HEAP32[(($34)>>2)]=11; //@line 606 "lcode.c"
      __label__ = 8; break; //@line 607 "lcode.c"
    case 7: 
      __label__ = 8; break; //@line 611 "lcode.c"
    case 8: 
      var $37=$2; //@line 615 "lcode.c"
      var $38=(($37+16)|0); //@line 615 "lcode.c"
      var $39=HEAP32[(($38)>>2)]; //@line 615 "lcode.c"
      $temp=$39; //@line 615 "lcode.c"
      var $40=$2; //@line 615 "lcode.c"
      var $41=(($40+12)|0); //@line 615 "lcode.c"
      var $42=HEAP32[(($41)>>2)]; //@line 615 "lcode.c"
      var $43=$2; //@line 615 "lcode.c"
      var $44=(($43+16)|0); //@line 615 "lcode.c"
      HEAP32[(($44)>>2)]=$42; //@line 615 "lcode.c"
      var $45=$temp; //@line 615 "lcode.c"
      var $46=$2; //@line 615 "lcode.c"
      var $47=(($46+12)|0); //@line 615 "lcode.c"
      HEAP32[(($47)>>2)]=$45; //@line 615 "lcode.c"
      var $48=$1; //@line 616 "lcode.c"
      var $49=$2; //@line 616 "lcode.c"
      var $50=(($49+16)|0); //@line 616 "lcode.c"
      var $51=HEAP32[(($50)>>2)]; //@line 616 "lcode.c"
      __Z12removevaluesP9FuncStatei($48, $51); //@line 616 "lcode.c"
      var $52=$1; //@line 617 "lcode.c"
      var $53=$2; //@line 617 "lcode.c"
      var $54=(($53+12)|0); //@line 617 "lcode.c"
      var $55=HEAP32[(($54)>>2)]; //@line 617 "lcode.c"
      __Z12removevaluesP9FuncStatei($52, $55); //@line 617 "lcode.c"
      ;
      return; //@line 618 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7codenotP9FuncStateP7expdesc["X"]=1;

function __Z10luaK_infixP9FuncState6BinOprP7expdesc($fs, $op, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$fs;
      $2=$op;
      $3=$v;
      var $4=$2; //@line 711 "lcode.c"
      if ((($4)|0) == 13) {
        __label__ = 3; break;
      }
      else if ((($4)|0) == 14) {
        __label__ = 4; break;
      }
      else if ((($4)|0) == 6) {
        __label__ = 5; break;
      }
      else if ((($4)|0) == 0 || (($4)|0) == 1 || (($4)|0) == 2 || (($4)|0) == 3 || (($4)|0) == 4 || (($4)|0) == 5) {
        __label__ = 6; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 3: 
      var $6=$1; //@line 713 "lcode.c"
      var $7=$3; //@line 713 "lcode.c"
      __Z13luaK_goiftrueP9FuncStateP7expdesc($6, $7); //@line 713 "lcode.c"
      __label__ = 10; break; //@line 714 "lcode.c"
    case 4: 
      var $9=$1; //@line 717 "lcode.c"
      var $10=$3; //@line 717 "lcode.c"
      __Z14luaK_goiffalseP9FuncStateP7expdesc($9, $10); //@line 717 "lcode.c"
      __label__ = 10; break; //@line 718 "lcode.c"
    case 5: 
      var $12=$1; //@line 721 "lcode.c"
      var $13=$3; //@line 721 "lcode.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($12, $13); //@line 721 "lcode.c"
      __label__ = 10; break; //@line 722 "lcode.c"
    case 6: 
      var $15=$3; //@line 726 "lcode.c"
      var $16=__Z9isnumeralP7expdesc($15); //@line 726 "lcode.c"
      var $17=(($16)|0)!=0; //@line 726 "lcode.c"
      if ($17) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 726 "lcode.c"
    case 7: 
      var $19=$1; //@line 726 "lcode.c"
      var $20=$3; //@line 726 "lcode.c"
      var $21=__Z11luaK_exp2RKP9FuncStateP7expdesc($19, $20); //@line 726 "lcode.c"
      __label__ = 8; break; //@line 726 "lcode.c"
    case 8: 
      __label__ = 10; break; //@line 727 "lcode.c"
    case 9: 
      var $24=$1; //@line 730 "lcode.c"
      var $25=$3; //@line 730 "lcode.c"
      var $26=__Z11luaK_exp2RKP9FuncStateP7expdesc($24, $25); //@line 730 "lcode.c"
      __label__ = 10; break; //@line 731 "lcode.c"
    case 10: 
      ;
      return; //@line 734 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaK_goiffalseP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $pc;
      $1=$fs;
      $2=$e;
      var $3=$1; //@line 565 "lcode.c"
      var $4=$2; //@line 565 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($3, $4); //@line 565 "lcode.c"
      var $5=$2; //@line 566 "lcode.c"
      var $6=(($5)|0); //@line 566 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 566 "lcode.c"
      if ((($7)|0) == 1 || (($7)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      $pc=-1; //@line 568 "lcode.c"
      __label__ = 6; break; //@line 569 "lcode.c"
    case 4: 
      var $10=$2; //@line 572 "lcode.c"
      var $11=(($10+4)|0); //@line 572 "lcode.c"
      var $12=$11; //@line 572 "lcode.c"
      var $13=(($12)|0); //@line 572 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 572 "lcode.c"
      $pc=$14; //@line 572 "lcode.c"
      __label__ = 6; break; //@line 573 "lcode.c"
    case 5: 
      var $16=$1; //@line 576 "lcode.c"
      var $17=$2; //@line 576 "lcode.c"
      var $18=__Z10jumponcondP9FuncStateP7expdesci($16, $17, 1); //@line 576 "lcode.c"
      $pc=$18; //@line 576 "lcode.c"
      __label__ = 6; break; //@line 577 "lcode.c"
    case 6: 
      var $20=$1; //@line 580 "lcode.c"
      var $21=$2; //@line 580 "lcode.c"
      var $22=(($21+12)|0); //@line 580 "lcode.c"
      var $23=$pc; //@line 580 "lcode.c"
      __Z11luaK_concatP9FuncStatePii($20, $22, $23); //@line 580 "lcode.c"
      var $24=$1; //@line 581 "lcode.c"
      var $25=$2; //@line 581 "lcode.c"
      var $26=(($25+16)|0); //@line 581 "lcode.c"
      var $27=HEAP32[(($26)>>2)]; //@line 581 "lcode.c"
      __Z16luaK_patchtohereP9FuncStatei($24, $27); //@line 581 "lcode.c"
      var $28=$2; //@line 582 "lcode.c"
      var $29=(($28+16)|0); //@line 582 "lcode.c"
      HEAP32[(($29)>>2)]=-1; //@line 582 "lcode.c"
      ;
      return; //@line 583 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaK_posfixP9FuncState6BinOprP7expdescS3_($fs, $op, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$fs;
      $2=$op;
      $3=$e1;
      $4=$e2;
      var $5=$2; //@line 738 "lcode.c"
      if ((($5)|0) == 13) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 14) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 6) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 0) {
        __label__ = 10; break;
      }
      else if ((($5)|0) == 1) {
        __label__ = 11; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 12; break;
      }
      else if ((($5)|0) == 3) {
        __label__ = 13; break;
      }
      else if ((($5)|0) == 4) {
        __label__ = 14; break;
      }
      else if ((($5)|0) == 5) {
        __label__ = 15; break;
      }
      else if ((($5)|0) == 8) {
        __label__ = 16; break;
      }
      else if ((($5)|0) == 7) {
        __label__ = 17; break;
      }
      else if ((($5)|0) == 9) {
        __label__ = 18; break;
      }
      else if ((($5)|0) == 10) {
        __label__ = 19; break;
      }
      else if ((($5)|0) == 11) {
        __label__ = 20; break;
      }
      else if ((($5)|0) == 12) {
        __label__ = 21; break;
      }
      else {
      __label__ = 22; break;
      }
      
    case 3: 
      var $7=$1; //@line 741 "lcode.c"
      var $8=$4; //@line 741 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($7, $8); //@line 741 "lcode.c"
      var $9=$1; //@line 742 "lcode.c"
      var $10=$4; //@line 742 "lcode.c"
      var $11=(($10+16)|0); //@line 742 "lcode.c"
      var $12=$3; //@line 742 "lcode.c"
      var $13=(($12+16)|0); //@line 742 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 742 "lcode.c"
      __Z11luaK_concatP9FuncStatePii($9, $11, $14); //@line 742 "lcode.c"
      var $15=$3; //@line 743 "lcode.c"
      var $16=$4; //@line 743 "lcode.c"
      var $17=$15; //@line 743 "lcode.c"
      var $18=$16; //@line 743 "lcode.c"
      HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];HEAP32[((($17)+(12))>>2)]=HEAP32[((($18)+(12))>>2)];HEAP32[((($17)+(16))>>2)]=HEAP32[((($18)+(16))>>2)]; //@line 743 "lcode.c"
      __label__ = 23; break; //@line 744 "lcode.c"
    case 4: 
      var $20=$1; //@line 748 "lcode.c"
      var $21=$4; //@line 748 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($20, $21); //@line 748 "lcode.c"
      var $22=$1; //@line 749 "lcode.c"
      var $23=$4; //@line 749 "lcode.c"
      var $24=(($23+12)|0); //@line 749 "lcode.c"
      var $25=$3; //@line 749 "lcode.c"
      var $26=(($25+12)|0); //@line 749 "lcode.c"
      var $27=HEAP32[(($26)>>2)]; //@line 749 "lcode.c"
      __Z11luaK_concatP9FuncStatePii($22, $24, $27); //@line 749 "lcode.c"
      var $28=$3; //@line 750 "lcode.c"
      var $29=$4; //@line 750 "lcode.c"
      var $30=$28; //@line 750 "lcode.c"
      var $31=$29; //@line 750 "lcode.c"
      HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($31)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($31)+(12))>>2)];HEAP32[((($30)+(16))>>2)]=HEAP32[((($31)+(16))>>2)]; //@line 750 "lcode.c"
      __label__ = 23; break; //@line 751 "lcode.c"
    case 5: 
      var $33=$1; //@line 754 "lcode.c"
      var $34=$4; //@line 754 "lcode.c"
      __Z12luaK_exp2valP9FuncStateP7expdesc($33, $34); //@line 754 "lcode.c"
      var $35=$4; //@line 755 "lcode.c"
      var $36=(($35)|0); //@line 755 "lcode.c"
      var $37=HEAP32[(($36)>>2)]; //@line 755 "lcode.c"
      var $38=(($37)|0)==11; //@line 755 "lcode.c"
      if ($38) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 755 "lcode.c"
    case 6: 
      var $40=$4; //@line 755 "lcode.c"
      var $41=(($40+4)|0); //@line 755 "lcode.c"
      var $42=$41; //@line 755 "lcode.c"
      var $43=(($42)|0); //@line 755 "lcode.c"
      var $44=HEAP32[(($43)>>2)]; //@line 755 "lcode.c"
      var $45=$1; //@line 755 "lcode.c"
      var $46=(($45)|0); //@line 755 "lcode.c"
      var $47=HEAP32[(($46)>>2)]; //@line 755 "lcode.c"
      var $48=(($47+12)|0); //@line 755 "lcode.c"
      var $49=HEAP32[(($48)>>2)]; //@line 755 "lcode.c"
      var $50=(($49+($44<<2))|0); //@line 755 "lcode.c"
      var $51=HEAPU32[(($50)>>2)]; //@line 755 "lcode.c"
      var $52=$51 >>> 0; //@line 755 "lcode.c"
      var $53=$52 & 63; //@line 755 "lcode.c"
      var $54=(($53)|0)==21; //@line 755 "lcode.c"
      if ($54) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 755 "lcode.c"
    case 7: 
      var $56=$1; //@line 757 "lcode.c"
      var $57=$3; //@line 757 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($56, $57); //@line 757 "lcode.c"
      var $58=$4; //@line 758 "lcode.c"
      var $59=(($58+4)|0); //@line 758 "lcode.c"
      var $60=$59; //@line 758 "lcode.c"
      var $61=(($60)|0); //@line 758 "lcode.c"
      var $62=HEAP32[(($61)>>2)]; //@line 758 "lcode.c"
      var $63=$1; //@line 758 "lcode.c"
      var $64=(($63)|0); //@line 758 "lcode.c"
      var $65=HEAP32[(($64)>>2)]; //@line 758 "lcode.c"
      var $66=(($65+12)|0); //@line 758 "lcode.c"
      var $67=HEAP32[(($66)>>2)]; //@line 758 "lcode.c"
      var $68=(($67+($62<<2))|0); //@line 758 "lcode.c"
      var $69=HEAP32[(($68)>>2)]; //@line 758 "lcode.c"
      var $70=$69 & 8388607; //@line 758 "lcode.c"
      var $71=$3; //@line 758 "lcode.c"
      var $72=(($71+4)|0); //@line 758 "lcode.c"
      var $73=$72; //@line 758 "lcode.c"
      var $74=(($73)|0); //@line 758 "lcode.c"
      var $75=HEAP32[(($74)>>2)]; //@line 758 "lcode.c"
      var $76=$75 << 23; //@line 758 "lcode.c"
      var $77=$76 & -8388608; //@line 758 "lcode.c"
      var $78=$70 | $77; //@line 758 "lcode.c"
      var $79=$4; //@line 758 "lcode.c"
      var $80=(($79+4)|0); //@line 758 "lcode.c"
      var $81=$80; //@line 758 "lcode.c"
      var $82=(($81)|0); //@line 758 "lcode.c"
      var $83=HEAP32[(($82)>>2)]; //@line 758 "lcode.c"
      var $84=$1; //@line 758 "lcode.c"
      var $85=(($84)|0); //@line 758 "lcode.c"
      var $86=HEAP32[(($85)>>2)]; //@line 758 "lcode.c"
      var $87=(($86+12)|0); //@line 758 "lcode.c"
      var $88=HEAP32[(($87)>>2)]; //@line 758 "lcode.c"
      var $89=(($88+($83<<2))|0); //@line 758 "lcode.c"
      HEAP32[(($89)>>2)]=$78; //@line 758 "lcode.c"
      var $90=$3; //@line 759 "lcode.c"
      var $91=(($90)|0); //@line 759 "lcode.c"
      HEAP32[(($91)>>2)]=11; //@line 759 "lcode.c"
      var $92=$4; //@line 759 "lcode.c"
      var $93=(($92+4)|0); //@line 759 "lcode.c"
      var $94=$93; //@line 759 "lcode.c"
      var $95=(($94)|0); //@line 759 "lcode.c"
      var $96=HEAP32[(($95)>>2)]; //@line 759 "lcode.c"
      var $97=$3; //@line 759 "lcode.c"
      var $98=(($97+4)|0); //@line 759 "lcode.c"
      var $99=$98; //@line 759 "lcode.c"
      var $100=(($99)|0); //@line 759 "lcode.c"
      HEAP32[(($100)>>2)]=$96; //@line 759 "lcode.c"
      __label__ = 9; break; //@line 760 "lcode.c"
    case 8: 
      var $102=$1; //@line 762 "lcode.c"
      var $103=$4; //@line 762 "lcode.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($102, $103); //@line 762 "lcode.c"
      var $104=$1; //@line 763 "lcode.c"
      var $105=$3; //@line 763 "lcode.c"
      var $106=$4; //@line 763 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($104, 21, $105, $106); //@line 763 "lcode.c"
      __label__ = 9; break; //@line 764 "lcode.c"
    case 9: 
      __label__ = 23; break; //@line 765 "lcode.c"
    case 10: 
      var $109=$1; //@line 767 "lcode.c"
      var $110=$3; //@line 767 "lcode.c"
      var $111=$4; //@line 767 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($109, 12, $110, $111); //@line 767 "lcode.c"
      __label__ = 23; break; //@line 767 "lcode.c"
    case 11: 
      var $113=$1; //@line 768 "lcode.c"
      var $114=$3; //@line 768 "lcode.c"
      var $115=$4; //@line 768 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($113, 13, $114, $115); //@line 768 "lcode.c"
      __label__ = 23; break; //@line 768 "lcode.c"
    case 12: 
      var $117=$1; //@line 769 "lcode.c"
      var $118=$3; //@line 769 "lcode.c"
      var $119=$4; //@line 769 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($117, 14, $118, $119); //@line 769 "lcode.c"
      __label__ = 23; break; //@line 769 "lcode.c"
    case 13: 
      var $121=$1; //@line 770 "lcode.c"
      var $122=$3; //@line 770 "lcode.c"
      var $123=$4; //@line 770 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($121, 15, $122, $123); //@line 770 "lcode.c"
      __label__ = 23; break; //@line 770 "lcode.c"
    case 14: 
      var $125=$1; //@line 771 "lcode.c"
      var $126=$3; //@line 771 "lcode.c"
      var $127=$4; //@line 771 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($125, 16, $126, $127); //@line 771 "lcode.c"
      __label__ = 23; break; //@line 771 "lcode.c"
    case 15: 
      var $129=$1; //@line 772 "lcode.c"
      var $130=$3; //@line 772 "lcode.c"
      var $131=$4; //@line 772 "lcode.c"
      __Z9codearithP9FuncState6OpCodeP7expdescS3_($129, 17, $130, $131); //@line 772 "lcode.c"
      __label__ = 23; break; //@line 772 "lcode.c"
    case 16: 
      var $133=$1; //@line 773 "lcode.c"
      var $134=$3; //@line 773 "lcode.c"
      var $135=$4; //@line 773 "lcode.c"
      __Z8codecompP9FuncState6OpCodeiP7expdescS3_($133, 23, 1, $134, $135); //@line 773 "lcode.c"
      __label__ = 23; break; //@line 773 "lcode.c"
    case 17: 
      var $137=$1; //@line 774 "lcode.c"
      var $138=$3; //@line 774 "lcode.c"
      var $139=$4; //@line 774 "lcode.c"
      __Z8codecompP9FuncState6OpCodeiP7expdescS3_($137, 23, 0, $138, $139); //@line 774 "lcode.c"
      __label__ = 23; break; //@line 774 "lcode.c"
    case 18: 
      var $141=$1; //@line 775 "lcode.c"
      var $142=$3; //@line 775 "lcode.c"
      var $143=$4; //@line 775 "lcode.c"
      __Z8codecompP9FuncState6OpCodeiP7expdescS3_($141, 24, 1, $142, $143); //@line 775 "lcode.c"
      __label__ = 23; break; //@line 775 "lcode.c"
    case 19: 
      var $145=$1; //@line 776 "lcode.c"
      var $146=$3; //@line 776 "lcode.c"
      var $147=$4; //@line 776 "lcode.c"
      __Z8codecompP9FuncState6OpCodeiP7expdescS3_($145, 25, 1, $146, $147); //@line 776 "lcode.c"
      __label__ = 23; break; //@line 776 "lcode.c"
    case 20: 
      var $149=$1; //@line 777 "lcode.c"
      var $150=$3; //@line 777 "lcode.c"
      var $151=$4; //@line 777 "lcode.c"
      __Z8codecompP9FuncState6OpCodeiP7expdescS3_($149, 24, 0, $150, $151); //@line 777 "lcode.c"
      __label__ = 23; break; //@line 777 "lcode.c"
    case 21: 
      var $153=$1; //@line 778 "lcode.c"
      var $154=$3; //@line 778 "lcode.c"
      var $155=$4; //@line 778 "lcode.c"
      __Z8codecompP9FuncState6OpCodeiP7expdescS3_($153, 25, 0, $154, $155); //@line 778 "lcode.c"
      __label__ = 23; break; //@line 778 "lcode.c"
    case 22: 
      __label__ = 23; break; //@line 780 "lcode.c"
    case 23: 
      ;
      return; //@line 781 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaK_posfixP9FuncState6BinOprP7expdescS3_["X"]=1;

function __Z8codecompP9FuncState6OpCodeiP7expdescS3_($fs, $op, $cond, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $o1;
      var $o2;
      var $temp;
      $1=$fs;
      $2=$op;
      $3=$cond;
      $4=$e1;
      $5=$e2;
      var $6=$1; //@line 675 "lcode.c"
      var $7=$4; //@line 675 "lcode.c"
      var $8=__Z11luaK_exp2RKP9FuncStateP7expdesc($6, $7); //@line 675 "lcode.c"
      $o1=$8; //@line 675 "lcode.c"
      var $9=$1; //@line 676 "lcode.c"
      var $10=$5; //@line 676 "lcode.c"
      var $11=__Z11luaK_exp2RKP9FuncStateP7expdesc($9, $10); //@line 676 "lcode.c"
      $o2=$11; //@line 676 "lcode.c"
      var $12=$1; //@line 677 "lcode.c"
      var $13=$5; //@line 677 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($12, $13); //@line 677 "lcode.c"
      var $14=$1; //@line 678 "lcode.c"
      var $15=$4; //@line 678 "lcode.c"
      __Z7freeexpP9FuncStateP7expdesc($14, $15); //@line 678 "lcode.c"
      var $16=$3; //@line 679 "lcode.c"
      var $17=(($16)|0)==0; //@line 679 "lcode.c"
      if ($17) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 679 "lcode.c"
    case 3: 
      var $19=$2; //@line 679 "lcode.c"
      var $20=(($19)|0)!=23; //@line 679 "lcode.c"
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 679 "lcode.c"
    case 4: 
      var $22=$o1; //@line 681 "lcode.c"
      $temp=$22; //@line 681 "lcode.c"
      var $23=$o2; //@line 681 "lcode.c"
      $o1=$23; //@line 681 "lcode.c"
      var $24=$temp; //@line 681 "lcode.c"
      $o2=$24; //@line 681 "lcode.c"
      $3=1; //@line 682 "lcode.c"
      __label__ = 5; break; //@line 683 "lcode.c"
    case 5: 
      var $26=$1; //@line 684 "lcode.c"
      var $27=$2; //@line 684 "lcode.c"
      var $28=$3; //@line 684 "lcode.c"
      var $29=$o1; //@line 684 "lcode.c"
      var $30=$o2; //@line 684 "lcode.c"
      var $31=__Z8condjumpP9FuncState6OpCodeiii($26, $27, $28, $29, $30); //@line 684 "lcode.c"
      var $32=$4; //@line 684 "lcode.c"
      var $33=(($32+4)|0); //@line 684 "lcode.c"
      var $34=$33; //@line 684 "lcode.c"
      var $35=(($34)|0); //@line 684 "lcode.c"
      HEAP32[(($35)>>2)]=$31; //@line 684 "lcode.c"
      var $36=$4; //@line 685 "lcode.c"
      var $37=(($36)|0); //@line 685 "lcode.c"
      HEAP32[(($37)>>2)]=10; //@line 685 "lcode.c"
      ;
      return; //@line 686 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8codecompP9FuncState6OpCodeiP7expdescS3_["X"]=1;

function __Z9luaK_codeP9FuncStateji($fs, $i, $line) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $f;
      $1=$fs;
      $2=$i;
      $3=$line;
      var $4=$1; //@line 790 "lcode.c"
      var $5=(($4)|0); //@line 790 "lcode.c"
      var $6=HEAP32[(($5)>>2)]; //@line 790 "lcode.c"
      $f=$6; //@line 790 "lcode.c"
      var $7=$1; //@line 791 "lcode.c"
      __Z12dischargejpcP9FuncState($7); //@line 791 "lcode.c"
      var $8=$1; //@line 793 "lcode.c"
      var $9=(($8+24)|0); //@line 793 "lcode.c"
      var $10=HEAP32[(($9)>>2)]; //@line 793 "lcode.c"
      var $11=((($10)+(1))|0); //@line 793 "lcode.c"
      var $12=$f; //@line 793 "lcode.c"
      var $13=(($12+44)|0); //@line 793 "lcode.c"
      var $14=HEAP32[(($13)>>2)]; //@line 793 "lcode.c"
      var $15=(($11)|0) > (($14)|0); //@line 793 "lcode.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 793 "lcode.c"
    case 3: 
      var $17=$1; //@line 793 "lcode.c"
      var $18=(($17+16)|0); //@line 793 "lcode.c"
      var $19=HEAP32[(($18)>>2)]; //@line 793 "lcode.c"
      var $20=$f; //@line 793 "lcode.c"
      var $21=(($20+12)|0); //@line 793 "lcode.c"
      var $22=HEAP32[(($21)>>2)]; //@line 793 "lcode.c"
      var $23=$22; //@line 793 "lcode.c"
      var $24=$f; //@line 793 "lcode.c"
      var $25=(($24+44)|0); //@line 793 "lcode.c"
      var $26=__Z13luaM_growaux_P9lua_StatePvPijiPKc($19, $23, $25, 4, 2147483645, ((STRING_TABLE.__str15)|0)); //@line 793 "lcode.c"
      var $27=$26; //@line 793 "lcode.c"
      var $28=$f; //@line 793 "lcode.c"
      var $29=(($28+12)|0); //@line 793 "lcode.c"
      HEAP32[(($29)>>2)]=$27; //@line 793 "lcode.c"
      __label__ = 4; break; //@line 793 "lcode.c"
    case 4: 
      var $31=$2; //@line 795 "lcode.c"
      var $32=$1; //@line 795 "lcode.c"
      var $33=(($32+24)|0); //@line 795 "lcode.c"
      var $34=HEAP32[(($33)>>2)]; //@line 795 "lcode.c"
      var $35=$f; //@line 795 "lcode.c"
      var $36=(($35+12)|0); //@line 795 "lcode.c"
      var $37=HEAP32[(($36)>>2)]; //@line 795 "lcode.c"
      var $38=(($37+($34<<2))|0); //@line 795 "lcode.c"
      HEAP32[(($38)>>2)]=$31; //@line 795 "lcode.c"
      var $39=$1; //@line 797 "lcode.c"
      var $40=(($39+24)|0); //@line 797 "lcode.c"
      var $41=HEAP32[(($40)>>2)]; //@line 797 "lcode.c"
      var $42=((($41)+(1))|0); //@line 797 "lcode.c"
      var $43=$f; //@line 797 "lcode.c"
      var $44=(($43+48)|0); //@line 797 "lcode.c"
      var $45=HEAP32[(($44)>>2)]; //@line 797 "lcode.c"
      var $46=(($42)|0) > (($45)|0); //@line 797 "lcode.c"
      if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 797 "lcode.c"
    case 5: 
      var $48=$1; //@line 797 "lcode.c"
      var $49=(($48+16)|0); //@line 797 "lcode.c"
      var $50=HEAP32[(($49)>>2)]; //@line 797 "lcode.c"
      var $51=$f; //@line 797 "lcode.c"
      var $52=(($51+20)|0); //@line 797 "lcode.c"
      var $53=HEAP32[(($52)>>2)]; //@line 797 "lcode.c"
      var $54=$53; //@line 797 "lcode.c"
      var $55=$f; //@line 797 "lcode.c"
      var $56=(($55+48)|0); //@line 797 "lcode.c"
      var $57=__Z13luaM_growaux_P9lua_StatePvPijiPKc($50, $54, $56, 4, 2147483645, ((STRING_TABLE.__str15)|0)); //@line 797 "lcode.c"
      var $58=$57; //@line 797 "lcode.c"
      var $59=$f; //@line 797 "lcode.c"
      var $60=(($59+20)|0); //@line 797 "lcode.c"
      HEAP32[(($60)>>2)]=$58; //@line 797 "lcode.c"
      __label__ = 6; break; //@line 797 "lcode.c"
    case 6: 
      var $62=$3; //@line 799 "lcode.c"
      var $63=$1; //@line 799 "lcode.c"
      var $64=(($63+24)|0); //@line 799 "lcode.c"
      var $65=HEAP32[(($64)>>2)]; //@line 799 "lcode.c"
      var $66=$f; //@line 799 "lcode.c"
      var $67=(($66+20)|0); //@line 799 "lcode.c"
      var $68=HEAP32[(($67)>>2)]; //@line 799 "lcode.c"
      var $69=(($68+($65<<2))|0); //@line 799 "lcode.c"
      HEAP32[(($69)>>2)]=$62; //@line 799 "lcode.c"
      var $70=$1; //@line 800 "lcode.c"
      var $71=(($70+24)|0); //@line 800 "lcode.c"
      var $72=HEAP32[(($71)>>2)]; //@line 800 "lcode.c"
      var $73=((($72)+(1))|0); //@line 800 "lcode.c"
      HEAP32[(($71)>>2)]=$73; //@line 800 "lcode.c"
      ;
      return $72; //@line 800 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9luaK_codeP9FuncStateji["X"]=1;

function __Z12luaK_setlistP9FuncStateiii($fs, $base, $nelems, $tostore) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      var $b;
      $1=$fs;
      $2=$base;
      $3=$nelems;
      $4=$tostore;
      var $5=$3; //@line 820 "lcode.c"
      var $6=((($5)-(1))|0); //@line 820 "lcode.c"
      var $7=((((($6)|0))/(50))&-1); //@line 820 "lcode.c"
      var $8=((($7)+(1))|0); //@line 820 "lcode.c"
      $c=$8; //@line 820 "lcode.c"
      var $9=$4; //@line 821 "lcode.c"
      var $10=(($9)|0)==-1; //@line 821 "lcode.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 821 "lcode.c"
    case 3: 
      var $15 = 0;__label__ = 5; break; //@line 821 "lcode.c"
    case 4: 
      var $13=$4; //@line 821 "lcode.c"
      var $15 = $13;__label__ = 5; break; //@line 821 "lcode.c"
    case 5: 
      var $15; //@line 821 "lcode.c"
      $b=$15; //@line 821 "lcode.c"
      var $16=$c; //@line 823 "lcode.c"
      var $17=(($16)|0) <= 511; //@line 823 "lcode.c"
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 823 "lcode.c"
    case 6: 
      var $19=$1; //@line 824 "lcode.c"
      var $20=$2; //@line 824 "lcode.c"
      var $21=$b; //@line 824 "lcode.c"
      var $22=$c; //@line 824 "lcode.c"
      var $23=__Z12luaK_codeABCP9FuncState6OpCodeiii($19, 34, $20, $21, $22); //@line 824 "lcode.c"
      __label__ = 8; break; //@line 824 "lcode.c"
    case 7: 
      var $25=$1; //@line 826 "lcode.c"
      var $26=$2; //@line 826 "lcode.c"
      var $27=$b; //@line 826 "lcode.c"
      var $28=__Z12luaK_codeABCP9FuncState6OpCodeiii($25, 34, $26, $27, 0); //@line 826 "lcode.c"
      var $29=$1; //@line 827 "lcode.c"
      var $30=$c; //@line 827 "lcode.c"
      var $31=$1; //@line 827 "lcode.c"
      var $32=(($31+12)|0); //@line 827 "lcode.c"
      var $33=HEAP32[(($32)>>2)]; //@line 827 "lcode.c"
      var $34=(($33+8)|0); //@line 827 "lcode.c"
      var $35=HEAP32[(($34)>>2)]; //@line 827 "lcode.c"
      var $36=__Z9luaK_codeP9FuncStateji($29, $30, $35); //@line 827 "lcode.c"
      __label__ = 8; break; //@line 828 "lcode.c"
    case 8: 
      var $38=$2; //@line 829 "lcode.c"
      var $39=((($38)+(1))|0); //@line 829 "lcode.c"
      var $40=$1; //@line 829 "lcode.c"
      var $41=(($40+36)|0); //@line 829 "lcode.c"
      HEAP32[(($41)>>2)]=$39; //@line 829 "lcode.c"
      ;
      return; //@line 830 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12luaK_setlistP9FuncStateiii["X"]=1;

function __Z12dischargejpcP9FuncState($fs) {
  ;
  var __label__;

  var $1;
  $1=$fs;
  var $2=$1; //@line 164 "lcode.c"
  var $3=$1; //@line 164 "lcode.c"
  var $4=(($3+32)|0); //@line 164 "lcode.c"
  var $5=HEAP32[(($4)>>2)]; //@line 164 "lcode.c"
  var $6=$1; //@line 164 "lcode.c"
  var $7=(($6+24)|0); //@line 164 "lcode.c"
  var $8=HEAP32[(($7)>>2)]; //@line 164 "lcode.c"
  var $9=$1; //@line 164 "lcode.c"
  var $10=(($9+24)|0); //@line 164 "lcode.c"
  var $11=HEAP32[(($10)>>2)]; //@line 164 "lcode.c"
  __Z12patchlistauxP9FuncStateiiii($2, $5, $8, 255, $11); //@line 164 "lcode.c"
  var $12=$1; //@line 165 "lcode.c"
  var $13=(($12+32)|0); //@line 165 "lcode.c"
  HEAP32[(($13)>>2)]=-1; //@line 165 "lcode.c"
  ;
  return; //@line 166 "lcode.c"
}


function __Z8condjumpP9FuncState6OpCodeiii($fs, $op, $A, $B, $C) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  $1=$fs;
  $2=$op;
  $3=$A;
  $4=$B;
  $5=$C;
  var $6=$1; //@line 75 "lcode.c"
  var $7=$2; //@line 75 "lcode.c"
  var $8=$3; //@line 75 "lcode.c"
  var $9=$4; //@line 75 "lcode.c"
  var $10=$5; //@line 75 "lcode.c"
  var $11=__Z12luaK_codeABCP9FuncState6OpCodeiii($6, $7, $8, $9, $10); //@line 75 "lcode.c"
  var $12=$1; //@line 76 "lcode.c"
  var $13=__Z9luaK_jumpP9FuncState($12); //@line 76 "lcode.c"
  ;
  return $13; //@line 76 "lcode.c"
}


function __Z16discharge2anyregP9FuncStateP7expdesc($fs, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$e;
      var $3=$2; //@line 383 "lcode.c"
      var $4=(($3)|0); //@line 383 "lcode.c"
      var $5=HEAP32[(($4)>>2)]; //@line 383 "lcode.c"
      var $6=(($5)|0)!=12; //@line 383 "lcode.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 383 "lcode.c"
    case 3: 
      var $8=$1; //@line 384 "lcode.c"
      __Z16luaK_reserveregsP9FuncStatei($8, 1); //@line 384 "lcode.c"
      var $9=$1; //@line 385 "lcode.c"
      var $10=$2; //@line 385 "lcode.c"
      var $11=$1; //@line 385 "lcode.c"
      var $12=(($11+36)|0); //@line 385 "lcode.c"
      var $13=HEAP32[(($12)>>2)]; //@line 385 "lcode.c"
      var $14=((($13)-(1))|0); //@line 385 "lcode.c"
      __Z13discharge2regP9FuncStateP7expdesci($9, $10, $14); //@line 385 "lcode.c"
      __label__ = 4; break; //@line 386 "lcode.c"
    case 4: 
      ;
      return; //@line 387 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12removevaluesP9FuncStatei($fs, $list) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$list;
      __label__ = 3; break; //@line 145 "lcode.c"
    case 3: 
      var $4=$2; //@line 145 "lcode.c"
      var $5=(($4)|0)!=-1; //@line 145 "lcode.c"
      if ($5) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 145 "lcode.c"
    case 4: 
      var $7=$1; //@line 146 "lcode.c"
      var $8=$2; //@line 146 "lcode.c"
      var $9=__Z12patchtestregP9FuncStateii($7, $8, 255); //@line 146 "lcode.c"
      __label__ = 5; break; //@line 146 "lcode.c"
    case 5: 
      var $11=$1; //@line 145 "lcode.c"
      var $12=$2; //@line 145 "lcode.c"
      var $13=__Z7getjumpP9FuncStatei($11, $12); //@line 145 "lcode.c"
      $2=$13; //@line 145 "lcode.c"
      __label__ = 3; break; //@line 145 "lcode.c"
    case 6: 
      ;
      return; //@line 147 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14getjumpcontrolP9FuncStatei($fs, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pi;
      $2=$fs;
      $3=$pc;
      var $4=$3; //@line 110 "lcode.c"
      var $5=$2; //@line 110 "lcode.c"
      var $6=(($5)|0); //@line 110 "lcode.c"
      var $7=HEAP32[(($6)>>2)]; //@line 110 "lcode.c"
      var $8=(($7+12)|0); //@line 110 "lcode.c"
      var $9=HEAP32[(($8)>>2)]; //@line 110 "lcode.c"
      var $10=(($9+($4<<2))|0); //@line 110 "lcode.c"
      $pi=$10; //@line 110 "lcode.c"
      var $11=$3; //@line 111 "lcode.c"
      var $12=(($11)|0) >= 1; //@line 111 "lcode.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 111 "lcode.c"
    case 3: 
      var $14=$pi; //@line 111 "lcode.c"
      var $15=((($14)-(4))|0); //@line 111 "lcode.c"
      var $16=HEAPU32[(($15)>>2)]; //@line 111 "lcode.c"
      var $17=$16 >>> 0; //@line 111 "lcode.c"
      var $18=$17 & 63; //@line 111 "lcode.c"
      var $19=((STRING_TABLE._luaP_opmodes+$18)|0); //@line 111 "lcode.c"
      var $20=HEAPU8[($19)]; //@line 111 "lcode.c"
      var $21=(($20)&255); //@line 111 "lcode.c"
      var $22=$21 & 128; //@line 111 "lcode.c"
      var $23=(($22)|0)!=0; //@line 111 "lcode.c"
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 111 "lcode.c"
    case 4: 
      var $25=$pi; //@line 112 "lcode.c"
      var $26=((($25)-(4))|0); //@line 112 "lcode.c"
      $1=$26; //@line 112 "lcode.c"
      __label__ = 6; break; //@line 112 "lcode.c"
    case 5: 
      var $28=$pi; //@line 114 "lcode.c"
      $1=$28; //@line 114 "lcode.c"
      __label__ = 6; break; //@line 114 "lcode.c"
    case 6: 
      var $30=$1; //@line 115 "lcode.c"
      ;
      return $30; //@line 115 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_sethook($L, $func, $mask, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$L;
      $2=$func;
      $3=$mask;
      $4=$count;
      var $5=$2; //@line 57 "ldebug.c"
      var $6=(($5)|0)==0; //@line 57 "ldebug.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 57 "ldebug.c"
    case 3: 
      var $8=$3; //@line 57 "ldebug.c"
      var $9=(($8)|0)==0; //@line 57 "ldebug.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 57 "ldebug.c"
    case 4: 
      $3=0; //@line 58 "ldebug.c"
      $2=0; //@line 59 "ldebug.c"
      __label__ = 5; break; //@line 60 "ldebug.c"
    case 5: 
      var $12=$2; //@line 61 "ldebug.c"
      var $13=$1; //@line 61 "ldebug.c"
      var $14=(($13+68)|0); //@line 61 "ldebug.c"
      HEAP32[(($14)>>2)]=$12; //@line 61 "ldebug.c"
      var $15=$4; //@line 62 "ldebug.c"
      var $16=$1; //@line 62 "ldebug.c"
      var $17=(($16+60)|0); //@line 62 "ldebug.c"
      HEAP32[(($17)>>2)]=$15; //@line 62 "ldebug.c"
      var $18=$1; //@line 63 "ldebug.c"
      var $19=(($18+60)|0); //@line 63 "ldebug.c"
      var $20=HEAP32[(($19)>>2)]; //@line 63 "ldebug.c"
      var $21=$1; //@line 63 "ldebug.c"
      var $22=(($21+64)|0); //@line 63 "ldebug.c"
      HEAP32[(($22)>>2)]=$20; //@line 63 "ldebug.c"
      var $23=$3; //@line 64 "ldebug.c"
      var $24=(($23) & 255); //@line 64 "ldebug.c"
      var $25=$1; //@line 64 "ldebug.c"
      var $26=(($25+56)|0); //@line 64 "ldebug.c"
      HEAP8[($26)]=$24; //@line 64 "ldebug.c"
      ;
      return 1; //@line 65 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_gethook($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 70 "ldebug.c"
  var $3=(($2+68)|0); //@line 70 "ldebug.c"
  var $4=HEAP32[(($3)>>2)]; //@line 70 "ldebug.c"
  ;
  return $4; //@line 70 "ldebug.c"
}


function _lua_gethookmask($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 75 "ldebug.c"
  var $3=(($2+56)|0); //@line 75 "ldebug.c"
  var $4=HEAPU8[($3)]; //@line 75 "ldebug.c"
  var $5=(($4)&255); //@line 75 "ldebug.c"
  ;
  return $5; //@line 75 "ldebug.c"
}


function _lua_gethookcount($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 80 "ldebug.c"
  var $3=(($2+60)|0); //@line 80 "ldebug.c"
  var $4=HEAP32[(($3)>>2)]; //@line 80 "ldebug.c"
  ;
  return $4; //@line 80 "ldebug.c"
}


function _lua_getstack($L, $level, $ar) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      var $ci;
      $1=$L;
      $2=$level;
      $3=$ar;
      var $4=$1; //@line 88 "ldebug.c"
      var $5=(($4+20)|0); //@line 88 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 88 "ldebug.c"
      $ci=$6; //@line 88 "ldebug.c"
      __label__ = 3; break; //@line 88 "ldebug.c"
    case 3: 
      var $8=$2; //@line 88 "ldebug.c"
      var $9=(($8)|0) > 0; //@line 88 "ldebug.c"
      if ($9) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; } //@line 88 "ldebug.c"
    case 4: 
      var $11=$ci; //@line 88 "ldebug.c"
      var $12=$1; //@line 88 "ldebug.c"
      var $13=(($12+40)|0); //@line 88 "ldebug.c"
      var $14=HEAPU32[(($13)>>2)]; //@line 88 "ldebug.c"
      var $15=(($11)>>>0) > (($14)>>>0); //@line 88 "ldebug.c"
      var $17 = $15;__label__ = 5; break; //@line 88 "ldebug.c"
    case 5: 
      var $17;
      if ($17) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 88 "ldebug.c"
    case 6: 
      var $19=$2; //@line 89 "ldebug.c"
      var $20=((($19)-(1))|0); //@line 89 "ldebug.c"
      $2=$20; //@line 89 "ldebug.c"
      var $21=$ci; //@line 90 "ldebug.c"
      var $22=(($21+4)|0); //@line 90 "ldebug.c"
      var $23=HEAP32[(($22)>>2)]; //@line 90 "ldebug.c"
      var $24=(($23)|0); //@line 90 "ldebug.c"
      var $25=$24; //@line 90 "ldebug.c"
      var $26=HEAP32[(($25)>>2)]; //@line 90 "ldebug.c"
      var $27=$26; //@line 90 "ldebug.c"
      var $28=$27; //@line 90 "ldebug.c"
      var $29=(($28+6)|0); //@line 90 "ldebug.c"
      var $30=HEAP8[($29)]; //@line 90 "ldebug.c"
      var $31=(($30 << 24) >> 24)!=0; //@line 90 "ldebug.c"
      if ($31) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 90 "ldebug.c"
    case 7: 
      var $33=$ci; //@line 91 "ldebug.c"
      var $34=(($33+20)|0); //@line 91 "ldebug.c"
      var $35=HEAP32[(($34)>>2)]; //@line 91 "ldebug.c"
      var $36=$2; //@line 91 "ldebug.c"
      var $37=((($36)-($35))|0); //@line 91 "ldebug.c"
      $2=$37; //@line 91 "ldebug.c"
      __label__ = 8; break; //@line 91 "ldebug.c"
    case 8: 
      __label__ = 9; break; //@line 92 "ldebug.c"
    case 9: 
      var $40=$ci; //@line 88 "ldebug.c"
      var $41=((($40)-(24))|0); //@line 88 "ldebug.c"
      $ci=$41; //@line 88 "ldebug.c"
      __label__ = 3; break; //@line 88 "ldebug.c"
    case 10: 
      var $43=$2; //@line 93 "ldebug.c"
      var $44=(($43)|0)==0; //@line 93 "ldebug.c"
      if ($44) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 93 "ldebug.c"
    case 11: 
      var $46=$ci; //@line 93 "ldebug.c"
      var $47=$1; //@line 93 "ldebug.c"
      var $48=(($47+40)|0); //@line 93 "ldebug.c"
      var $49=HEAPU32[(($48)>>2)]; //@line 93 "ldebug.c"
      var $50=(($46)>>>0) > (($49)>>>0); //@line 93 "ldebug.c"
      if ($50) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 93 "ldebug.c"
    case 12: 
      $status=1; //@line 94 "ldebug.c"
      var $52=$ci; //@line 95 "ldebug.c"
      var $53=$1; //@line 95 "ldebug.c"
      var $54=(($53+40)|0); //@line 95 "ldebug.c"
      var $55=HEAP32[(($54)>>2)]; //@line 95 "ldebug.c"
      var $56=$52; //@line 95 "ldebug.c"
      var $57=$55; //@line 95 "ldebug.c"
      var $58=((($56)-($57))|0); //@line 95 "ldebug.c"
      var $59=((((($58)|0))/(24))&-1); //@line 95 "ldebug.c"
      var $60=$3; //@line 95 "ldebug.c"
      var $61=(($60+96)|0); //@line 95 "ldebug.c"
      HEAP32[(($61)>>2)]=$59; //@line 95 "ldebug.c"
      __label__ = 17; break; //@line 96 "ldebug.c"
    case 13: 
      var $63=$2; //@line 97 "ldebug.c"
      var $64=(($63)|0) < 0; //@line 97 "ldebug.c"
      if ($64) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 97 "ldebug.c"
    case 14: 
      $status=1; //@line 98 "ldebug.c"
      var $66=$3; //@line 99 "ldebug.c"
      var $67=(($66+96)|0); //@line 99 "ldebug.c"
      HEAP32[(($67)>>2)]=0; //@line 99 "ldebug.c"
      __label__ = 16; break; //@line 100 "ldebug.c"
    case 15: 
      $status=0; //@line 101 "ldebug.c"
      __label__ = 16; break; //@line 101 "ldebug.c"
    case 16: 
      __label__ = 17; break; //@line 101 "ldebug.c"
    case 17: 
      var $71=$status; //@line 103 "ldebug.c"
      ;
      return $71; //@line 103 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getstack["X"]=1;

function __Z12patchtestregP9FuncStateii($fs, $node, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$fs;
      $3=$node;
      $4=$reg;
      var $5=$2; //@line 132 "lcode.c"
      var $6=$3; //@line 132 "lcode.c"
      var $7=__Z14getjumpcontrolP9FuncStatei($5, $6); //@line 132 "lcode.c"
      $i=$7; //@line 132 "lcode.c"
      var $8=$i; //@line 133 "lcode.c"
      var $9=HEAPU32[(($8)>>2)]; //@line 133 "lcode.c"
      var $10=$9 >>> 0; //@line 133 "lcode.c"
      var $11=$10 & 63; //@line 133 "lcode.c"
      var $12=(($11)|0)!=27; //@line 133 "lcode.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 133 "lcode.c"
    case 3: 
      $1=0; //@line 134 "lcode.c"
      __label__ = 9; break; //@line 134 "lcode.c"
    case 4: 
      var $15=$4; //@line 135 "lcode.c"
      var $16=(($15)|0)!=255; //@line 135 "lcode.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 135 "lcode.c"
    case 5: 
      var $18=$4; //@line 135 "lcode.c"
      var $19=$i; //@line 135 "lcode.c"
      var $20=HEAPU32[(($19)>>2)]; //@line 135 "lcode.c"
      var $21=$20 >>> 23; //@line 135 "lcode.c"
      var $22=$21 & 511; //@line 135 "lcode.c"
      var $23=(($18)|0)!=(($22)|0); //@line 135 "lcode.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 135 "lcode.c"
    case 6: 
      var $25=$i; //@line 136 "lcode.c"
      var $26=HEAP32[(($25)>>2)]; //@line 136 "lcode.c"
      var $27=$26 & -16321; //@line 136 "lcode.c"
      var $28=$4; //@line 136 "lcode.c"
      var $29=$28 << 6; //@line 136 "lcode.c"
      var $30=$29 & 16320; //@line 136 "lcode.c"
      var $31=$27 | $30; //@line 136 "lcode.c"
      var $32=$i; //@line 136 "lcode.c"
      HEAP32[(($32)>>2)]=$31; //@line 136 "lcode.c"
      __label__ = 8; break; //@line 136 "lcode.c"
    case 7: 
      var $34=$i; //@line 138 "lcode.c"
      var $35=HEAPU32[(($34)>>2)]; //@line 138 "lcode.c"
      var $36=$35 >>> 23; //@line 138 "lcode.c"
      var $37=$36 & 511; //@line 138 "lcode.c"
      var $38=$37 << 6; //@line 138 "lcode.c"
      var $39=26 | $38; //@line 138 "lcode.c"
      var $40=$i; //@line 138 "lcode.c"
      var $41=HEAPU32[(($40)>>2)]; //@line 138 "lcode.c"
      var $42=$41 >>> 14; //@line 138 "lcode.c"
      var $43=$42 & 511; //@line 138 "lcode.c"
      var $44=$43 << 14; //@line 138 "lcode.c"
      var $45=$39 | $44; //@line 138 "lcode.c"
      var $46=$i; //@line 138 "lcode.c"
      HEAP32[(($46)>>2)]=$45; //@line 138 "lcode.c"
      __label__ = 8; break; //@line 138 "lcode.c"
    case 8: 
      $1=1; //@line 140 "lcode.c"
      __label__ = 9; break; //@line 140 "lcode.c"
    case 9: 
      var $49=$1; //@line 141 "lcode.c"
      ;
      return $49; //@line 141 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12patchtestregP9FuncStateii["X"]=1;

function __Z13discharge2regP9FuncStateP7expdesci($fs, $e, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pc;
      $1=$fs;
      $2=$e;
      $3=$reg;
      var $4=$1; //@line 344 "lcode.c"
      var $5=$2; //@line 344 "lcode.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($4, $5); //@line 344 "lcode.c"
      var $6=$2; //@line 345 "lcode.c"
      var $7=(($6)|0); //@line 345 "lcode.c"
      var $8=HEAP32[(($7)>>2)]; //@line 345 "lcode.c"
      if ((($8)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 3 || (($8)|0) == 2) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 4) {
        __label__ = 5; break;
      }
      else if ((($8)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($8)|0) == 11) {
        __label__ = 7; break;
      }
      else if ((($8)|0) == 12) {
        __label__ = 8; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      var $10=$1; //@line 347 "lcode.c"
      var $11=$3; //@line 347 "lcode.c"
      __Z8luaK_nilP9FuncStateii($10, $11, 1); //@line 347 "lcode.c"
      __label__ = 12; break; //@line 348 "lcode.c"
    case 4: 
      var $13=$1; //@line 351 "lcode.c"
      var $14=$3; //@line 351 "lcode.c"
      var $15=$2; //@line 351 "lcode.c"
      var $16=(($15)|0); //@line 351 "lcode.c"
      var $17=HEAP32[(($16)>>2)]; //@line 351 "lcode.c"
      var $18=(($17)|0)==2; //@line 351 "lcode.c"
      var $19=(($18)&1); //@line 351 "lcode.c"
      var $20=__Z12luaK_codeABCP9FuncState6OpCodeiii($13, 2, $14, $19, 0); //@line 351 "lcode.c"
      __label__ = 12; break; //@line 352 "lcode.c"
    case 5: 
      var $22=$1; //@line 355 "lcode.c"
      var $23=$3; //@line 355 "lcode.c"
      var $24=$2; //@line 355 "lcode.c"
      var $25=(($24+4)|0); //@line 355 "lcode.c"
      var $26=$25; //@line 355 "lcode.c"
      var $27=(($26)|0); //@line 355 "lcode.c"
      var $28=HEAP32[(($27)>>2)]; //@line 355 "lcode.c"
      var $29=__Z12luaK_codeABxP9FuncState6OpCodeij($22, 1, $23, $28); //@line 355 "lcode.c"
      __label__ = 12; break; //@line 356 "lcode.c"
    case 6: 
      var $31=$1; //@line 359 "lcode.c"
      var $32=$3; //@line 359 "lcode.c"
      var $33=$1; //@line 359 "lcode.c"
      var $34=$2; //@line 359 "lcode.c"
      var $35=(($34+4)|0); //@line 359 "lcode.c"
      var $36=$35; //@line 359 "lcode.c"
      var $37=(tempDoubleI32[0]=HEAP32[(($36)>>2)],tempDoubleI32[1]=HEAP32[((($36)+(4))>>2)],tempDoubleF64[0]); //@line 359 "lcode.c"
      var $38=__Z12luaK_numberKP9FuncStated($33, $37); //@line 359 "lcode.c"
      var $39=__Z12luaK_codeABxP9FuncState6OpCodeij($31, 1, $32, $38); //@line 359 "lcode.c"
      __label__ = 12; break; //@line 360 "lcode.c"
    case 7: 
      var $41=$2; //@line 363 "lcode.c"
      var $42=(($41+4)|0); //@line 363 "lcode.c"
      var $43=$42; //@line 363 "lcode.c"
      var $44=(($43)|0); //@line 363 "lcode.c"
      var $45=HEAP32[(($44)>>2)]; //@line 363 "lcode.c"
      var $46=$1; //@line 363 "lcode.c"
      var $47=(($46)|0); //@line 363 "lcode.c"
      var $48=HEAP32[(($47)>>2)]; //@line 363 "lcode.c"
      var $49=(($48+12)|0); //@line 363 "lcode.c"
      var $50=HEAP32[(($49)>>2)]; //@line 363 "lcode.c"
      var $51=(($50+($45<<2))|0); //@line 363 "lcode.c"
      $pc=$51; //@line 363 "lcode.c"
      var $52=$pc; //@line 364 "lcode.c"
      var $53=HEAP32[(($52)>>2)]; //@line 364 "lcode.c"
      var $54=$53 & -16321; //@line 364 "lcode.c"
      var $55=$3; //@line 364 "lcode.c"
      var $56=$55 << 6; //@line 364 "lcode.c"
      var $57=$56 & 16320; //@line 364 "lcode.c"
      var $58=$54 | $57; //@line 364 "lcode.c"
      var $59=$pc; //@line 364 "lcode.c"
      HEAP32[(($59)>>2)]=$58; //@line 364 "lcode.c"
      __label__ = 12; break; //@line 365 "lcode.c"
    case 8: 
      var $61=$3; //@line 368 "lcode.c"
      var $62=$2; //@line 368 "lcode.c"
      var $63=(($62+4)|0); //@line 368 "lcode.c"
      var $64=$63; //@line 368 "lcode.c"
      var $65=(($64)|0); //@line 368 "lcode.c"
      var $66=HEAP32[(($65)>>2)]; //@line 368 "lcode.c"
      var $67=(($61)|0)!=(($66)|0); //@line 368 "lcode.c"
      if ($67) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 368 "lcode.c"
    case 9: 
      var $69=$1; //@line 369 "lcode.c"
      var $70=$3; //@line 369 "lcode.c"
      var $71=$2; //@line 369 "lcode.c"
      var $72=(($71+4)|0); //@line 369 "lcode.c"
      var $73=$72; //@line 369 "lcode.c"
      var $74=(($73)|0); //@line 369 "lcode.c"
      var $75=HEAP32[(($74)>>2)]; //@line 369 "lcode.c"
      var $76=__Z12luaK_codeABCP9FuncState6OpCodeiii($69, 0, $70, $75, 0); //@line 369 "lcode.c"
      __label__ = 10; break; //@line 369 "lcode.c"
    case 10: 
      __label__ = 12; break; //@line 370 "lcode.c"
    case 11: 
      __label__ = 13; break; //@line 374 "lcode.c"
    case 12: 
      var $80=$3; //@line 377 "lcode.c"
      var $81=$2; //@line 377 "lcode.c"
      var $82=(($81+4)|0); //@line 377 "lcode.c"
      var $83=$82; //@line 377 "lcode.c"
      var $84=(($83)|0); //@line 377 "lcode.c"
      HEAP32[(($84)>>2)]=$80; //@line 377 "lcode.c"
      var $85=$2; //@line 378 "lcode.c"
      var $86=(($85)|0); //@line 378 "lcode.c"
      HEAP32[(($86)>>2)]=12; //@line 378 "lcode.c"
      __label__ = 13; break; //@line 379 "lcode.c"
    case 13: 
      ;
      return; //@line 379 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13discharge2regP9FuncStateP7expdesci["X"]=1;

function __Z12constfolding6OpCodeP7expdescS1_($op, $e1, $e2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $v1;
      var $v2;
      var $r;
      $2=$op;
      $3=$e1;
      $4=$e2;
      var $5=$3; //@line 629 "lcode.c"
      var $6=__Z9isnumeralP7expdesc($5); //@line 629 "lcode.c"
      var $7=(($6)|0)!=0; //@line 629 "lcode.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 629 "lcode.c"
    case 3: 
      var $9=$4; //@line 629 "lcode.c"
      var $10=__Z9isnumeralP7expdesc($9); //@line 629 "lcode.c"
      var $11=(($10)|0)!=0; //@line 629 "lcode.c"
      if ($11) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 629 "lcode.c"
    case 4: 
      $1=0; //@line 629 "lcode.c"
      __label__ = 22; break; //@line 629 "lcode.c"
    case 5: 
      var $14=$3; //@line 630 "lcode.c"
      var $15=(($14+4)|0); //@line 630 "lcode.c"
      var $16=$15; //@line 630 "lcode.c"
      var $17=(tempDoubleI32[0]=HEAP32[(($16)>>2)],tempDoubleI32[1]=HEAP32[((($16)+(4))>>2)],tempDoubleF64[0]); //@line 630 "lcode.c"
      $v1=$17; //@line 630 "lcode.c"
      var $18=$4; //@line 631 "lcode.c"
      var $19=(($18+4)|0); //@line 631 "lcode.c"
      var $20=$19; //@line 631 "lcode.c"
      var $21=(tempDoubleI32[0]=HEAP32[(($20)>>2)],tempDoubleI32[1]=HEAP32[((($20)+(4))>>2)],tempDoubleF64[0]); //@line 631 "lcode.c"
      $v2=$21; //@line 631 "lcode.c"
      var $22=$2; //@line 632 "lcode.c"
      if ((($22)|0) == 12) {
        __label__ = 6; break;
      }
      else if ((($22)|0) == 13) {
        __label__ = 7; break;
      }
      else if ((($22)|0) == 14) {
        __label__ = 8; break;
      }
      else if ((($22)|0) == 15) {
        __label__ = 9; break;
      }
      else if ((($22)|0) == 16) {
        __label__ = 12; break;
      }
      else if ((($22)|0) == 17) {
        __label__ = 15; break;
      }
      else if ((($22)|0) == 18) {
        __label__ = 16; break;
      }
      else if ((($22)|0) == 20) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 6: 
      var $24=$v1; //@line 633 "lcode.c"
      var $25=$v2; //@line 633 "lcode.c"
      var $26=($24)+($25); //@line 633 "lcode.c"
      $r=$26; //@line 633 "lcode.c"
      __label__ = 19; break; //@line 633 "lcode.c"
    case 7: 
      var $28=$v1; //@line 634 "lcode.c"
      var $29=$v2; //@line 634 "lcode.c"
      var $30=($28)-($29); //@line 634 "lcode.c"
      $r=$30; //@line 634 "lcode.c"
      __label__ = 19; break; //@line 634 "lcode.c"
    case 8: 
      var $32=$v1; //@line 635 "lcode.c"
      var $33=$v2; //@line 635 "lcode.c"
      var $34=($32)*($33); //@line 635 "lcode.c"
      $r=$34; //@line 635 "lcode.c"
      __label__ = 19; break; //@line 635 "lcode.c"
    case 9: 
      var $36=$v2; //@line 637 "lcode.c"
      var $37=$36 == 0; //@line 637 "lcode.c"
      if ($37) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 637 "lcode.c"
    case 10: 
      $1=0; //@line 637 "lcode.c"
      __label__ = 22; break; //@line 637 "lcode.c"
    case 11: 
      var $40=$v1; //@line 638 "lcode.c"
      var $41=$v2; //@line 638 "lcode.c"
      var $42=($40)/($41); //@line 638 "lcode.c"
      $r=$42; //@line 638 "lcode.c"
      __label__ = 19; break; //@line 638 "lcode.c"
    case 12: 
      var $44=$v2; //@line 640 "lcode.c"
      var $45=$44 == 0; //@line 640 "lcode.c"
      if ($45) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 640 "lcode.c"
    case 13: 
      $1=0; //@line 640 "lcode.c"
      __label__ = 22; break; //@line 640 "lcode.c"
    case 14: 
      var $48=$v1; //@line 641 "lcode.c"
      var $49=$v1; //@line 641 "lcode.c"
      var $50=$v2; //@line 641 "lcode.c"
      var $51=($49)/($50); //@line 641 "lcode.c"
      var $52=_floor($51); //@line 641 "lcode.c"
      var $53=$v2; //@line 641 "lcode.c"
      var $54=($52)*($53); //@line 641 "lcode.c"
      var $55=($48)-($54); //@line 641 "lcode.c"
      $r=$55; //@line 641 "lcode.c"
      __label__ = 19; break; //@line 641 "lcode.c"
    case 15: 
      var $57=$v1; //@line 642 "lcode.c"
      var $58=$v2; //@line 642 "lcode.c"
      var $59=_llvm_pow_f64($57, $58); //@line 642 "lcode.c"
      $r=$59; //@line 642 "lcode.c"
      __label__ = 19; break; //@line 642 "lcode.c"
    case 16: 
      var $61=$v1; //@line 643 "lcode.c"
      var $62=(-$61); //@line 643 "lcode.c"
      $r=$62; //@line 643 "lcode.c"
      __label__ = 19; break; //@line 643 "lcode.c"
    case 17: 
      $1=0; //@line 644 "lcode.c"
      __label__ = 22; break; //@line 644 "lcode.c"
    case 18: 
      $r=0; //@line 645 "lcode.c"
      __label__ = 19; break; //@line 645 "lcode.c"
    case 19: 
      var $66=$r; //@line 647 "lcode.c"
      var $67=$r; //@line 647 "lcode.c"
      var $68=$66 == $67; //@line 647 "lcode.c"
      if ($68) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 647 "lcode.c"
    case 20: 
      $1=0; //@line 647 "lcode.c"
      __label__ = 22; break; //@line 647 "lcode.c"
    case 21: 
      var $71=$r; //@line 648 "lcode.c"
      var $72=$3; //@line 648 "lcode.c"
      var $73=(($72+4)|0); //@line 648 "lcode.c"
      var $74=$73; //@line 648 "lcode.c"
      (tempDoubleF64[0]=$71,HEAP32[(($74)>>2)]=tempDoubleI32[0],HEAP32[((($74)+(4))>>2)]=tempDoubleI32[1]); //@line 648 "lcode.c"
      $1=1; //@line 649 "lcode.c"
      __label__ = 22; break; //@line 649 "lcode.c"
    case 22: 
      var $76=$1; //@line 650 "lcode.c"
      ;
      return $76; //@line 650 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12constfolding6OpCodeP7expdescS1_["X"]=1;

function __Z10need_valueP9FuncStatei($fs, $list) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$fs;
      $3=$list;
      __label__ = 3; break; //@line 123 "lcode.c"
    case 3: 
      var $5=$3; //@line 123 "lcode.c"
      var $6=(($5)|0)!=-1; //@line 123 "lcode.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 123 "lcode.c"
    case 4: 
      var $8=$2; //@line 124 "lcode.c"
      var $9=$3; //@line 124 "lcode.c"
      var $10=__Z14getjumpcontrolP9FuncStatei($8, $9); //@line 124 "lcode.c"
      var $11=HEAP32[(($10)>>2)]; //@line 124 "lcode.c"
      $i=$11; //@line 124 "lcode.c"
      var $12=$i; //@line 125 "lcode.c"
      var $13=$12 >>> 0; //@line 125 "lcode.c"
      var $14=$13 & 63; //@line 125 "lcode.c"
      var $15=(($14)|0)!=27; //@line 125 "lcode.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 125 "lcode.c"
    case 5: 
      $1=1; //@line 125 "lcode.c"
      __label__ = 9; break; //@line 125 "lcode.c"
    case 6: 
      __label__ = 7; break; //@line 126 "lcode.c"
    case 7: 
      var $19=$2; //@line 123 "lcode.c"
      var $20=$3; //@line 123 "lcode.c"
      var $21=__Z7getjumpP9FuncStatei($19, $20); //@line 123 "lcode.c"
      $3=$21; //@line 123 "lcode.c"
      __label__ = 3; break; //@line 123 "lcode.c"
    case 8: 
      $1=0; //@line 127 "lcode.c"
      __label__ = 9; break; //@line 127 "lcode.c"
    case 9: 
      var $24=$1; //@line 128 "lcode.c"
      ;
      return $24; //@line 128 "lcode.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10code_labelP9FuncStateiii($fs, $A, $b, $jump) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$fs;
  $2=$A;
  $3=$b;
  $4=$jump;
  var $5=$1; //@line 338 "lcode.c"
  var $6=__Z13luaK_getlabelP9FuncState($5); //@line 338 "lcode.c"
  var $7=$1; //@line 339 "lcode.c"
  var $8=$2; //@line 339 "lcode.c"
  var $9=$3; //@line 339 "lcode.c"
  var $10=$4; //@line 339 "lcode.c"
  var $11=__Z12luaK_codeABCP9FuncState6OpCodeiii($7, 2, $8, $9, $10); //@line 339 "lcode.c"
  ;
  return $11; //@line 339 "lcode.c"
}


function _lua_getlocal($L, $ar, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ci;
      var $name;
      $1=$L;
      $2=$ar;
      $3=$n;
      var $4=$1; //@line 128 "ldebug.c"
      var $5=(($4+40)|0); //@line 128 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 128 "ldebug.c"
      var $7=$2; //@line 128 "ldebug.c"
      var $8=(($7+96)|0); //@line 128 "ldebug.c"
      var $9=HEAP32[(($8)>>2)]; //@line 128 "ldebug.c"
      var $10=(($6+($9)*(24))|0); //@line 128 "ldebug.c"
      $ci=$10; //@line 128 "ldebug.c"
      var $11=$1; //@line 129 "ldebug.c"
      var $12=$ci; //@line 129 "ldebug.c"
      var $13=$3; //@line 129 "ldebug.c"
      var $14=__Z9findlocalP9lua_StateP8CallInfoi($11, $12, $13); //@line 129 "ldebug.c"
      $name=$14; //@line 129 "ldebug.c"
      var $15=$name; //@line 131 "ldebug.c"
      var $16=(($15)|0)!=0; //@line 131 "ldebug.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 131 "ldebug.c"
    case 3: 
      var $18=$1; //@line 132 "ldebug.c"
      var $19=$ci; //@line 132 "ldebug.c"
      var $20=(($19)|0); //@line 132 "ldebug.c"
      var $21=HEAP32[(($20)>>2)]; //@line 132 "ldebug.c"
      var $22=$3; //@line 132 "ldebug.c"
      var $23=((($22)-(1))|0); //@line 132 "ldebug.c"
      var $24=(($21+($23)*(12))|0); //@line 132 "ldebug.c"
      __Z15luaA_pushobjectP9lua_StatePK10lua_TValue($18, $24); //@line 132 "ldebug.c"
      __label__ = 4; break; //@line 132 "ldebug.c"
    case 4: 
      var $26=$name; //@line 134 "ldebug.c"
      ;
      return $26; //@line 134 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9findlocalP9lua_StateP8CallInfoi($L, $ci, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $name;
      var $fp;
      var $limit;
      $2=$L;
      $3=$ci;
      $4=$n;
      var $5=$3; //@line 114 "ldebug.c"
      var $6=__Z11getluaprotoP8CallInfo($5); //@line 114 "ldebug.c"
      $fp=$6; //@line 114 "ldebug.c"
      var $7=$fp; //@line 115 "ldebug.c"
      var $8=(($7)|0)!=0; //@line 115 "ldebug.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 115 "ldebug.c"
    case 3: 
      var $10=$fp; //@line 115 "ldebug.c"
      var $11=$4; //@line 115 "ldebug.c"
      var $12=$2; //@line 115 "ldebug.c"
      var $13=$3; //@line 115 "ldebug.c"
      var $14=__Z9currentpcP9lua_StateP8CallInfo($12, $13); //@line 115 "ldebug.c"
      var $15=__Z17luaF_getlocalnamePK5Protoii($10, $11, $14); //@line 115 "ldebug.c"
      $name=$15; //@line 115 "ldebug.c"
      var $16=(($15)|0)!=0; //@line 115 "ldebug.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 115 "ldebug.c"
    case 4: 
      var $18=$name; //@line 116 "ldebug.c"
      $1=$18; //@line 116 "ldebug.c"
      __label__ = 12; break; //@line 116 "ldebug.c"
    case 5: 
      var $20=$3; //@line 118 "ldebug.c"
      var $21=$2; //@line 118 "ldebug.c"
      var $22=(($21+20)|0); //@line 118 "ldebug.c"
      var $23=HEAP32[(($22)>>2)]; //@line 118 "ldebug.c"
      var $24=(($20)|0)==(($23)|0); //@line 118 "ldebug.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 118 "ldebug.c"
    case 6: 
      var $26=$2; //@line 118 "ldebug.c"
      var $27=(($26+8)|0); //@line 118 "ldebug.c"
      var $28=HEAP32[(($27)>>2)]; //@line 118 "ldebug.c"
      var $35 = $28;__label__ = 8; break; //@line 118 "ldebug.c"
    case 7: 
      var $30=$3; //@line 118 "ldebug.c"
      var $31=(($30+24)|0); //@line 118 "ldebug.c"
      var $32=(($31+4)|0); //@line 118 "ldebug.c"
      var $33=HEAP32[(($32)>>2)]; //@line 118 "ldebug.c"
      var $35 = $33;__label__ = 8; break; //@line 118 "ldebug.c"
    case 8: 
      var $35; //@line 118 "ldebug.c"
      $limit=$35; //@line 118 "ldebug.c"
      var $36=$limit; //@line 119 "ldebug.c"
      var $37=$3; //@line 119 "ldebug.c"
      var $38=(($37)|0); //@line 119 "ldebug.c"
      var $39=HEAP32[(($38)>>2)]; //@line 119 "ldebug.c"
      var $40=$36; //@line 119 "ldebug.c"
      var $41=$39; //@line 119 "ldebug.c"
      var $42=((($40)-($41))|0); //@line 119 "ldebug.c"
      var $43=((((($42)|0))/(12))&-1); //@line 119 "ldebug.c"
      var $44=$4; //@line 119 "ldebug.c"
      var $45=(($43)|0) >= (($44)|0); //@line 119 "ldebug.c"
      if ($45) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 119 "ldebug.c"
    case 9: 
      var $47=$4; //@line 119 "ldebug.c"
      var $48=(($47)|0) > 0; //@line 119 "ldebug.c"
      if ($48) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 119 "ldebug.c"
    case 10: 
      $1=((STRING_TABLE.__str20)|0); //@line 120 "ldebug.c"
      __label__ = 12; break; //@line 120 "ldebug.c"
    case 11: 
      $1=0; //@line 122 "ldebug.c"
      __label__ = 12; break; //@line 122 "ldebug.c"
    case 12: 
      var $52=$1; //@line 124 "ldebug.c"
      ;
      return $52; //@line 124 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9findlocalP9lua_StateP8CallInfoi["X"]=1;

function _lua_setlocal($L, $ar, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ci;
      var $name;
      var $o2;
      var $o1;
      $1=$L;
      $2=$ar;
      $3=$n;
      var $4=$1; //@line 139 "ldebug.c"
      var $5=(($4+40)|0); //@line 139 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 139 "ldebug.c"
      var $7=$2; //@line 139 "ldebug.c"
      var $8=(($7+96)|0); //@line 139 "ldebug.c"
      var $9=HEAP32[(($8)>>2)]; //@line 139 "ldebug.c"
      var $10=(($6+($9)*(24))|0); //@line 139 "ldebug.c"
      $ci=$10; //@line 139 "ldebug.c"
      var $11=$1; //@line 140 "ldebug.c"
      var $12=$ci; //@line 140 "ldebug.c"
      var $13=$3; //@line 140 "ldebug.c"
      var $14=__Z9findlocalP9lua_StateP8CallInfoi($11, $12, $13); //@line 140 "ldebug.c"
      $name=$14; //@line 140 "ldebug.c"
      var $15=$name; //@line 142 "ldebug.c"
      var $16=(($15)|0)!=0; //@line 142 "ldebug.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 142 "ldebug.c"
    case 3: 
      var $18=$1; //@line 143 "ldebug.c"
      var $19=(($18+8)|0); //@line 143 "ldebug.c"
      var $20=HEAP32[(($19)>>2)]; //@line 143 "ldebug.c"
      var $21=((($20)-(12))|0); //@line 143 "ldebug.c"
      $o2=$21; //@line 143 "ldebug.c"
      var $22=$ci; //@line 143 "ldebug.c"
      var $23=(($22)|0); //@line 143 "ldebug.c"
      var $24=HEAP32[(($23)>>2)]; //@line 143 "ldebug.c"
      var $25=$3; //@line 143 "ldebug.c"
      var $26=((($25)-(1))|0); //@line 143 "ldebug.c"
      var $27=(($24+($26)*(12))|0); //@line 143 "ldebug.c"
      $o1=$27; //@line 143 "ldebug.c"
      var $28=$o1; //@line 143 "ldebug.c"
      var $29=(($28)|0); //@line 143 "ldebug.c"
      var $30=$o2; //@line 143 "ldebug.c"
      var $31=(($30)|0); //@line 143 "ldebug.c"
      var $32=$29; //@line 143 "ldebug.c"
      var $33=$31; //@line 143 "ldebug.c"
      HEAP32[(($32)>>2)]=HEAP32[(($33)>>2)];HEAP32[((($32)+(4))>>2)]=HEAP32[((($33)+(4))>>2)]; //@line 143 "ldebug.c"
      var $34=$o2; //@line 143 "ldebug.c"
      var $35=(($34+8)|0); //@line 143 "ldebug.c"
      var $36=HEAP32[(($35)>>2)]; //@line 143 "ldebug.c"
      var $37=$o1; //@line 143 "ldebug.c"
      var $38=(($37+8)|0); //@line 143 "ldebug.c"
      HEAP32[(($38)>>2)]=$36; //@line 143 "ldebug.c"
      __label__ = 4; break; //@line 143 "ldebug.c"
    case 4: 
      var $40=$1; //@line 144 "ldebug.c"
      var $41=(($40+8)|0); //@line 144 "ldebug.c"
      var $42=HEAP32[(($41)>>2)]; //@line 144 "ldebug.c"
      var $43=((($42)-(12))|0); //@line 144 "ldebug.c"
      HEAP32[(($41)>>2)]=$43; //@line 144 "ldebug.c"
      var $44=$name; //@line 146 "ldebug.c"
      ;
      return $44; //@line 146 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_setlocal["X"]=1;

function __Z16luaG_checkopenopj($i) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$i;
      var $3=$2; //@line 291 "ldebug.c"
      var $4=$3 >>> 0; //@line 291 "ldebug.c"
      var $5=$4 & 63; //@line 291 "ldebug.c"
      if ((($5)|0) == 28 || (($5)|0) == 29 || (($5)|0) == 30 || (($5)|0) == 34) {
        __label__ = 3; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $7=$2; //@line 296 "ldebug.c"
      var $8=$7 >>> 23; //@line 296 "ldebug.c"
      var $9=$8 & 511; //@line 296 "ldebug.c"
      var $10=(($9)|0)==0; //@line 296 "ldebug.c"
      if ($10) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 296 "ldebug.c"
    case 4: 
      $1=0; //@line 296 "ldebug.c"
      __label__ = 7; break; //@line 296 "ldebug.c"
    case 5: 
      $1=1; //@line 297 "ldebug.c"
      __label__ = 7; break; //@line 297 "ldebug.c"
    case 6: 
      $1=0; //@line 299 "ldebug.c"
      __label__ = 7; break; //@line 299 "ldebug.c"
    case 7: 
      var $15=$1; //@line 301 "ldebug.c"
      ;
      return $15; //@line 301 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _lua_getinfo($L, $what, $ar) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      var $f;
      var $ci;
      var $func;
      var $i_o;
      $1=$L;
      $2=$what;
      $3=$ar;
      $f=0; //@line 234 "ldebug.c"
      $ci=0; //@line 235 "ldebug.c"
      var $4=$2; //@line 237 "ldebug.c"
      var $5=HEAP8[($4)]; //@line 237 "ldebug.c"
      var $6=(($5 << 24) >> 24); //@line 237 "ldebug.c"
      var $7=(($6)|0)==62; //@line 237 "ldebug.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 237 "ldebug.c"
    case 3: 
      var $9=$1; //@line 238 "ldebug.c"
      var $10=(($9+8)|0); //@line 238 "ldebug.c"
      var $11=HEAP32[(($10)>>2)]; //@line 238 "ldebug.c"
      var $12=((($11)-(12))|0); //@line 238 "ldebug.c"
      $func=$12; //@line 238 "ldebug.c"
      var $13=$2; //@line 240 "ldebug.c"
      var $14=(($13+1)|0); //@line 240 "ldebug.c"
      $2=$14; //@line 240 "ldebug.c"
      var $15=$func; //@line 241 "ldebug.c"
      var $16=(($15)|0); //@line 241 "ldebug.c"
      var $17=$16; //@line 241 "ldebug.c"
      var $18=HEAP32[(($17)>>2)]; //@line 241 "ldebug.c"
      var $19=$18; //@line 241 "ldebug.c"
      $f=$19; //@line 241 "ldebug.c"
      var $20=$1; //@line 242 "ldebug.c"
      var $21=(($20+8)|0); //@line 242 "ldebug.c"
      var $22=HEAP32[(($21)>>2)]; //@line 242 "ldebug.c"
      var $23=((($22)-(12))|0); //@line 242 "ldebug.c"
      HEAP32[(($21)>>2)]=$23; //@line 242 "ldebug.c"
      __label__ = 7; break; //@line 243 "ldebug.c"
    case 4: 
      var $25=$3; //@line 244 "ldebug.c"
      var $26=(($25+96)|0); //@line 244 "ldebug.c"
      var $27=HEAP32[(($26)>>2)]; //@line 244 "ldebug.c"
      var $28=(($27)|0)!=0; //@line 244 "ldebug.c"
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 244 "ldebug.c"
    case 5: 
      var $30=$1; //@line 245 "ldebug.c"
      var $31=(($30+40)|0); //@line 245 "ldebug.c"
      var $32=HEAP32[(($31)>>2)]; //@line 245 "ldebug.c"
      var $33=$3; //@line 245 "ldebug.c"
      var $34=(($33+96)|0); //@line 245 "ldebug.c"
      var $35=HEAP32[(($34)>>2)]; //@line 245 "ldebug.c"
      var $36=(($32+($35)*(24))|0); //@line 245 "ldebug.c"
      $ci=$36; //@line 245 "ldebug.c"
      var $37=$ci; //@line 247 "ldebug.c"
      var $38=(($37+4)|0); //@line 247 "ldebug.c"
      var $39=HEAP32[(($38)>>2)]; //@line 247 "ldebug.c"
      var $40=(($39)|0); //@line 247 "ldebug.c"
      var $41=$40; //@line 247 "ldebug.c"
      var $42=HEAP32[(($41)>>2)]; //@line 247 "ldebug.c"
      var $43=$42; //@line 247 "ldebug.c"
      $f=$43; //@line 247 "ldebug.c"
      __label__ = 6; break; //@line 248 "ldebug.c"
    case 6: 
      __label__ = 7; break; //@line 248 "ldebug.c"
    case 7: 
      var $46=$1; //@line 249 "ldebug.c"
      var $47=$2; //@line 249 "ldebug.c"
      var $48=$3; //@line 249 "ldebug.c"
      var $49=$f; //@line 249 "ldebug.c"
      var $50=$ci; //@line 249 "ldebug.c"
      var $51=__Z10auxgetinfoP9lua_StatePKcP9lua_DebugP7ClosureP8CallInfo($46, $47, $48, $49, $50); //@line 249 "ldebug.c"
      $status=$51; //@line 249 "ldebug.c"
      var $52=$2; //@line 250 "ldebug.c"
      var $53=_strchr($52, 102); //@line 250 "ldebug.c"
      var $54=(($53)|0)!=0; //@line 250 "ldebug.c"
      if ($54) { __label__ = 8; break; } else { __label__ = 15; break; } //@line 250 "ldebug.c"
    case 8: 
      var $56=$f; //@line 251 "ldebug.c"
      var $57=(($56)|0)==0; //@line 251 "ldebug.c"
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 251 "ldebug.c"
    case 9: 
      var $59=$1; //@line 251 "ldebug.c"
      var $60=(($59+8)|0); //@line 251 "ldebug.c"
      var $61=HEAP32[(($60)>>2)]; //@line 251 "ldebug.c"
      var $62=(($61+8)|0); //@line 251 "ldebug.c"
      HEAP32[(($62)>>2)]=0; //@line 251 "ldebug.c"
      __label__ = 11; break; //@line 251 "ldebug.c"
    case 10: 
      var $64=$1; //@line 252 "ldebug.c"
      var $65=(($64+8)|0); //@line 252 "ldebug.c"
      var $66=HEAP32[(($65)>>2)]; //@line 252 "ldebug.c"
      $i_o=$66; //@line 252 "ldebug.c"
      var $67=$f; //@line 252 "ldebug.c"
      var $68=$67; //@line 252 "ldebug.c"
      var $69=$i_o; //@line 252 "ldebug.c"
      var $70=(($69)|0); //@line 252 "ldebug.c"
      var $71=$70; //@line 252 "ldebug.c"
      HEAP32[(($71)>>2)]=$68; //@line 252 "ldebug.c"
      var $72=$i_o; //@line 252 "ldebug.c"
      var $73=(($72+8)|0); //@line 252 "ldebug.c"
      HEAP32[(($73)>>2)]=6; //@line 252 "ldebug.c"
      __label__ = 11; break; //@line 252 "ldebug.c"
    case 11: 
      var $75=$1; //@line 253 "ldebug.c"
      var $76=(($75+28)|0); //@line 253 "ldebug.c"
      var $77=HEAP32[(($76)>>2)]; //@line 253 "ldebug.c"
      var $78=$77; //@line 253 "ldebug.c"
      var $79=$1; //@line 253 "ldebug.c"
      var $80=(($79+8)|0); //@line 253 "ldebug.c"
      var $81=HEAP32[(($80)>>2)]; //@line 253 "ldebug.c"
      var $82=$81; //@line 253 "ldebug.c"
      var $83=$78; //@line 253 "ldebug.c"
      var $84=$82; //@line 253 "ldebug.c"
      var $85=((($83)-($84))|0); //@line 253 "ldebug.c"
      var $86=(($85)|0) <= 12; //@line 253 "ldebug.c"
      if ($86) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 253 "ldebug.c"
    case 12: 
      var $88=$1; //@line 253 "ldebug.c"
      __Z14luaD_growstackP9lua_Statei($88, 1); //@line 253 "ldebug.c"
      __label__ = 14; break; //@line 253 "ldebug.c"
    case 13: 
      __label__ = 14; break; //@line 253 "ldebug.c"
    case 14: 
      var $91=$1; //@line 253 "ldebug.c"
      var $92=(($91+8)|0); //@line 253 "ldebug.c"
      var $93=HEAP32[(($92)>>2)]; //@line 253 "ldebug.c"
      var $94=(($93+12)|0); //@line 253 "ldebug.c"
      HEAP32[(($92)>>2)]=$94; //@line 253 "ldebug.c"
      __label__ = 15; break; //@line 254 "ldebug.c"
    case 15: 
      var $96=$2; //@line 255 "ldebug.c"
      var $97=_strchr($96, 76); //@line 255 "ldebug.c"
      var $98=(($97)|0)!=0; //@line 255 "ldebug.c"
      if ($98) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 255 "ldebug.c"
    case 16: 
      var $100=$1; //@line 256 "ldebug.c"
      var $101=$f; //@line 256 "ldebug.c"
      __Z17collectvalidlinesP9lua_StateP7Closure($100, $101); //@line 256 "ldebug.c"
      __label__ = 17; break; //@line 256 "ldebug.c"
    case 17: 
      var $103=$status; //@line 258 "ldebug.c"
      ;
      return $103; //@line 258 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_getinfo["X"]=1;

function __Z10auxgetinfoP9lua_StatePKcP9lua_DebugP7ClosureP8CallInfo($L, $what, $ar, $f, $ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $status;
      $2=$L;
      $3=$what;
      $4=$ar;
      $5=$f;
      $6=$ci;
      $status=1; //@line 195 "ldebug.c"
      var $7=$5; //@line 196 "ldebug.c"
      var $8=(($7)|0)==0; //@line 196 "ldebug.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 196 "ldebug.c"
    case 3: 
      var $10=$4; //@line 197 "ldebug.c"
      __Z13info_tailcallP9lua_Debug($10); //@line 197 "ldebug.c"
      var $11=$status; //@line 198 "ldebug.c"
      $1=$11; //@line 198 "ldebug.c"
      __label__ = 24; break; //@line 198 "ldebug.c"
    case 4: 
      __label__ = 5; break; //@line 200 "ldebug.c"
    case 5: 
      var $14=$3; //@line 200 "ldebug.c"
      var $15=HEAP8[($14)]; //@line 200 "ldebug.c"
      var $16=(($15 << 24) >> 24)!=0; //@line 200 "ldebug.c"
      if ($16) { __label__ = 6; break; } else { __label__ = 23; break; } //@line 200 "ldebug.c"
    case 6: 
      var $18=$3; //@line 201 "ldebug.c"
      var $19=HEAP8[($18)]; //@line 201 "ldebug.c"
      var $20=(($19 << 24) >> 24); //@line 201 "ldebug.c"
      if ((($20)|0) == 83) {
        __label__ = 7; break;
      }
      else if ((($20)|0) == 108) {
        __label__ = 8; break;
      }
      else if ((($20)|0) == 117) {
        __label__ = 12; break;
      }
      else if ((($20)|0) == 110) {
        __label__ = 13; break;
      }
      else if ((($20)|0) == 76 || (($20)|0) == 102) {
        __label__ = 19; break;
      }
      else {
      __label__ = 20; break;
      }
      
    case 7: 
      var $22=$4; //@line 203 "ldebug.c"
      var $23=$5; //@line 203 "ldebug.c"
      __Z8funcinfoP9lua_DebugP7Closure($22, $23); //@line 203 "ldebug.c"
      __label__ = 21; break; //@line 204 "ldebug.c"
    case 8: 
      var $25=$6; //@line 207 "ldebug.c"
      var $26=(($25)|0)!=0; //@line 207 "ldebug.c"
      if ($26) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 207 "ldebug.c"
    case 9: 
      var $28=$2; //@line 207 "ldebug.c"
      var $29=$6; //@line 207 "ldebug.c"
      var $30=__Z11currentlineP9lua_StateP8CallInfo($28, $29); //@line 207 "ldebug.c"
      var $33 = $30;__label__ = 11; break; //@line 207 "ldebug.c"
    case 10: 
      var $33 = -1;__label__ = 11; break; //@line 207 "ldebug.c"
    case 11: 
      var $33; //@line 207 "ldebug.c"
      var $34=$4; //@line 207 "ldebug.c"
      var $35=(($34+20)|0); //@line 207 "ldebug.c"
      HEAP32[(($35)>>2)]=$33; //@line 207 "ldebug.c"
      __label__ = 21; break; //@line 208 "ldebug.c"
    case 12: 
      var $37=$5; //@line 211 "ldebug.c"
      var $38=$37; //@line 211 "ldebug.c"
      var $39=(($38+7)|0); //@line 211 "ldebug.c"
      var $40=HEAPU8[($39)]; //@line 211 "ldebug.c"
      var $41=(($40)&255); //@line 211 "ldebug.c"
      var $42=$4; //@line 211 "ldebug.c"
      var $43=(($42+24)|0); //@line 211 "ldebug.c"
      HEAP32[(($43)>>2)]=$41; //@line 211 "ldebug.c"
      __label__ = 21; break; //@line 212 "ldebug.c"
    case 13: 
      var $45=$6; //@line 215 "ldebug.c"
      var $46=(($45)|0)!=0; //@line 215 "ldebug.c"
      if ($46) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 215 "ldebug.c"
    case 14: 
      var $48=$2; //@line 215 "ldebug.c"
      var $49=$6; //@line 215 "ldebug.c"
      var $50=$4; //@line 215 "ldebug.c"
      var $51=(($50+4)|0); //@line 215 "ldebug.c"
      var $52=__Z11getfuncnameP9lua_StateP8CallInfoPPKc($48, $49, $51); //@line 215 "ldebug.c"
      var $55 = $52;__label__ = 16; break; //@line 215 "ldebug.c"
    case 15: 
      var $55 = 0;__label__ = 16; break; //@line 215 "ldebug.c"
    case 16: 
      var $55; //@line 215 "ldebug.c"
      var $56=$4; //@line 215 "ldebug.c"
      var $57=(($56+8)|0); //@line 215 "ldebug.c"
      HEAP32[(($57)>>2)]=$55; //@line 215 "ldebug.c"
      var $58=$4; //@line 216 "ldebug.c"
      var $59=(($58+8)|0); //@line 216 "ldebug.c"
      var $60=HEAP32[(($59)>>2)]; //@line 216 "ldebug.c"
      var $61=(($60)|0)==0; //@line 216 "ldebug.c"
      if ($61) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 216 "ldebug.c"
    case 17: 
      var $63=$4; //@line 217 "ldebug.c"
      var $64=(($63+8)|0); //@line 217 "ldebug.c"
      HEAP32[(($64)>>2)]=((__str13)|0); //@line 217 "ldebug.c"
      var $65=$4; //@line 218 "ldebug.c"
      var $66=(($65+4)|0); //@line 218 "ldebug.c"
      HEAP32[(($66)>>2)]=0; //@line 218 "ldebug.c"
      __label__ = 18; break; //@line 219 "ldebug.c"
    case 18: 
      __label__ = 21; break; //@line 220 "ldebug.c"
    case 19: 
      __label__ = 21; break; //@line 224 "ldebug.c"
    case 20: 
      $status=0; //@line 225 "ldebug.c"
      __label__ = 21; break; //@line 226 "ldebug.c"
    case 21: 
      __label__ = 22; break; //@line 227 "ldebug.c"
    case 22: 
      var $72=$3; //@line 200 "ldebug.c"
      var $73=(($72+1)|0); //@line 200 "ldebug.c"
      $3=$73; //@line 200 "ldebug.c"
      __label__ = 5; break; //@line 200 "ldebug.c"
    case 23: 
      var $75=$status; //@line 228 "ldebug.c"
      $1=$75; //@line 228 "ldebug.c"
      __label__ = 24; break; //@line 228 "ldebug.c"
    case 24: 
      var $77=$1; //@line 229 "ldebug.c"
      ;
      return $77; //@line 229 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10auxgetinfoP9lua_StatePKcP9lua_DebugP7ClosureP8CallInfo["X"]=1;

function __Z17collectvalidlinesP9lua_StateP7Closure($L, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $lineinfo;
      var $i;
      var $i_o;
      var $i_o1;
      $1=$L;
      $2=$f;
      var $3=$2; //@line 178 "ldebug.c"
      var $4=(($3)|0)==0; //@line 178 "ldebug.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 178 "ldebug.c"
    case 3: 
      var $6=$2; //@line 178 "ldebug.c"
      var $7=$6; //@line 178 "ldebug.c"
      var $8=(($7+6)|0); //@line 178 "ldebug.c"
      var $9=HEAP8[($8)]; //@line 178 "ldebug.c"
      var $10=(($9 << 24) >> 24)!=0; //@line 178 "ldebug.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 178 "ldebug.c"
    case 4: 
      var $12=$1; //@line 179 "ldebug.c"
      var $13=(($12+8)|0); //@line 179 "ldebug.c"
      var $14=HEAP32[(($13)>>2)]; //@line 179 "ldebug.c"
      var $15=(($14+8)|0); //@line 179 "ldebug.c"
      HEAP32[(($15)>>2)]=0; //@line 179 "ldebug.c"
      __label__ = 10; break; //@line 180 "ldebug.c"
    case 5: 
      var $17=$1; //@line 182 "ldebug.c"
      var $18=__Z8luaH_newP9lua_Stateii($17, 0, 0); //@line 182 "ldebug.c"
      $t=$18; //@line 182 "ldebug.c"
      var $19=$2; //@line 183 "ldebug.c"
      var $20=$19; //@line 183 "ldebug.c"
      var $21=(($20+16)|0); //@line 183 "ldebug.c"
      var $22=HEAP32[(($21)>>2)]; //@line 183 "ldebug.c"
      var $23=(($22+20)|0); //@line 183 "ldebug.c"
      var $24=HEAP32[(($23)>>2)]; //@line 183 "ldebug.c"
      $lineinfo=$24; //@line 183 "ldebug.c"
      $i=0; //@line 185 "ldebug.c"
      __label__ = 6; break; //@line 185 "ldebug.c"
    case 6: 
      var $26=$i; //@line 185 "ldebug.c"
      var $27=$2; //@line 185 "ldebug.c"
      var $28=$27; //@line 185 "ldebug.c"
      var $29=(($28+16)|0); //@line 185 "ldebug.c"
      var $30=HEAP32[(($29)>>2)]; //@line 185 "ldebug.c"
      var $31=(($30+48)|0); //@line 185 "ldebug.c"
      var $32=HEAP32[(($31)>>2)]; //@line 185 "ldebug.c"
      var $33=(($26)|0) < (($32)|0); //@line 185 "ldebug.c"
      if ($33) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 185 "ldebug.c"
    case 7: 
      var $35=$1; //@line 186 "ldebug.c"
      var $36=$t; //@line 186 "ldebug.c"
      var $37=$i; //@line 186 "ldebug.c"
      var $38=$lineinfo; //@line 186 "ldebug.c"
      var $39=(($38+($37<<2))|0); //@line 186 "ldebug.c"
      var $40=HEAP32[(($39)>>2)]; //@line 186 "ldebug.c"
      var $41=__Z11luaH_setnumP9lua_StateP5Tablei($35, $36, $40); //@line 186 "ldebug.c"
      $i_o=$41; //@line 186 "ldebug.c"
      var $42=$i_o; //@line 186 "ldebug.c"
      var $43=(($42)|0); //@line 186 "ldebug.c"
      var $44=$43; //@line 186 "ldebug.c"
      HEAP32[(($44)>>2)]=1; //@line 186 "ldebug.c"
      var $45=$i_o; //@line 186 "ldebug.c"
      var $46=(($45+8)|0); //@line 186 "ldebug.c"
      HEAP32[(($46)>>2)]=1; //@line 186 "ldebug.c"
      __label__ = 8; break; //@line 186 "ldebug.c"
    case 8: 
      var $48=$i; //@line 185 "ldebug.c"
      var $49=((($48)+(1))|0); //@line 185 "ldebug.c"
      $i=$49; //@line 185 "ldebug.c"
      __label__ = 6; break; //@line 185 "ldebug.c"
    case 9: 
      var $51=$1; //@line 187 "ldebug.c"
      var $52=(($51+8)|0); //@line 187 "ldebug.c"
      var $53=HEAP32[(($52)>>2)]; //@line 187 "ldebug.c"
      $i_o1=$53; //@line 187 "ldebug.c"
      var $54=$t; //@line 187 "ldebug.c"
      var $55=$54; //@line 187 "ldebug.c"
      var $56=$i_o1; //@line 187 "ldebug.c"
      var $57=(($56)|0); //@line 187 "ldebug.c"
      var $58=$57; //@line 187 "ldebug.c"
      HEAP32[(($58)>>2)]=$55; //@line 187 "ldebug.c"
      var $59=$i_o1; //@line 187 "ldebug.c"
      var $60=(($59+8)|0); //@line 187 "ldebug.c"
      HEAP32[(($60)>>2)]=5; //@line 187 "ldebug.c"
      __label__ = 10; break; //@line 188 "ldebug.c"
    case 10: 
      var $62=$1; //@line 189 "ldebug.c"
      var $63=(($62+28)|0); //@line 189 "ldebug.c"
      var $64=HEAP32[(($63)>>2)]; //@line 189 "ldebug.c"
      var $65=$64; //@line 189 "ldebug.c"
      var $66=$1; //@line 189 "ldebug.c"
      var $67=(($66+8)|0); //@line 189 "ldebug.c"
      var $68=HEAP32[(($67)>>2)]; //@line 189 "ldebug.c"
      var $69=$68; //@line 189 "ldebug.c"
      var $70=$65; //@line 189 "ldebug.c"
      var $71=$69; //@line 189 "ldebug.c"
      var $72=((($70)-($71))|0); //@line 189 "ldebug.c"
      var $73=(($72)|0) <= 12; //@line 189 "ldebug.c"
      if ($73) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 189 "ldebug.c"
    case 11: 
      var $75=$1; //@line 189 "ldebug.c"
      __Z14luaD_growstackP9lua_Statei($75, 1); //@line 189 "ldebug.c"
      __label__ = 13; break; //@line 189 "ldebug.c"
    case 12: 
      __label__ = 13; break; //@line 189 "ldebug.c"
    case 13: 
      var $78=$1; //@line 189 "ldebug.c"
      var $79=(($78+8)|0); //@line 189 "ldebug.c"
      var $80=HEAP32[(($79)>>2)]; //@line 189 "ldebug.c"
      var $81=(($80+12)|0); //@line 189 "ldebug.c"
      HEAP32[(($79)>>2)]=$81; //@line 189 "ldebug.c"
      ;
      return; //@line 190 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z17collectvalidlinesP9lua_StateP7Closure["X"]=1;

function __Z14luaG_checkcodePK5Proto($pt) {
  ;
  var __label__;

  var $1;
  $1=$pt;
  var $2=$1; //@line 485 "ldebug.c"
  var $3=$1; //@line 485 "ldebug.c"
  var $4=(($3+44)|0); //@line 485 "ldebug.c"
  var $5=HEAP32[(($4)>>2)]; //@line 485 "ldebug.c"
  var $6=__Z8symbexecPK5Protoii($2, $5, 255); //@line 485 "ldebug.c"
  var $7=(($6)|0)!=0; //@line 485 "ldebug.c"
  var $8=(($7)&1); //@line 485 "ldebug.c"
  ;
  return $8; //@line 485 "ldebug.c"
}


function __Z8symbexecPK5Protoii($pt, $lastpc, $reg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $pc;
      var $last;
      var $i;
      var $op;
      var $a;
      var $b;
      var $c;
      var $dest;
      var $j;
      var $d;
      var $dest1;
      var $nup;
      var $j2;
      var $op1;
      $2=$pt;
      $3=$lastpc;
      $4=$reg;
      var $5=$2; //@line 320 "ldebug.c"
      var $6=(($5+44)|0); //@line 320 "ldebug.c"
      var $7=HEAP32[(($6)>>2)]; //@line 320 "ldebug.c"
      var $8=((($7)-(1))|0); //@line 320 "ldebug.c"
      $last=$8; //@line 320 "ldebug.c"
      var $9=$2; //@line 321 "ldebug.c"
      var $10=__Z8precheckPK5Proto($9); //@line 321 "ldebug.c"
      var $11=(($10)|0)!=0; //@line 321 "ldebug.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 321 "ldebug.c"
    case 3: 
      $1=0; //@line 321 "ldebug.c"
      __label__ = 148; break; //@line 321 "ldebug.c"
    case 4: 
      $pc=0; //@line 322 "ldebug.c"
      __label__ = 5; break; //@line 322 "ldebug.c"
    case 5: 
      var $15=$pc; //@line 322 "ldebug.c"
      var $16=$3; //@line 322 "ldebug.c"
      var $17=(($15)|0) < (($16)|0); //@line 322 "ldebug.c"
      if ($17) { __label__ = 6; break; } else { __label__ = 147; break; } //@line 322 "ldebug.c"
    case 6: 
      var $19=$pc; //@line 323 "ldebug.c"
      var $20=$2; //@line 323 "ldebug.c"
      var $21=(($20+12)|0); //@line 323 "ldebug.c"
      var $22=HEAP32[(($21)>>2)]; //@line 323 "ldebug.c"
      var $23=(($22+($19<<2))|0); //@line 323 "ldebug.c"
      var $24=HEAP32[(($23)>>2)]; //@line 323 "ldebug.c"
      $i=$24; //@line 323 "ldebug.c"
      var $25=$i; //@line 324 "ldebug.c"
      var $26=$25 >>> 0; //@line 324 "ldebug.c"
      var $27=$26 & 63; //@line 324 "ldebug.c"
      $op=$27; //@line 324 "ldebug.c"
      var $28=$i; //@line 325 "ldebug.c"
      var $29=$28 >>> 6; //@line 325 "ldebug.c"
      var $30=$29 & 255; //@line 325 "ldebug.c"
      $a=$30; //@line 325 "ldebug.c"
      $b=0; //@line 326 "ldebug.c"
      $c=0; //@line 327 "ldebug.c"
      var $31=$op; //@line 328 "ldebug.c"
      var $32=(($31)|0) < 38; //@line 328 "ldebug.c"
      if ($32) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 328 "ldebug.c"
    case 7: 
      $1=0; //@line 328 "ldebug.c"
      __label__ = 148; break; //@line 328 "ldebug.c"
    case 8: 
      var $35=$a; //@line 329 "ldebug.c"
      var $36=$2; //@line 329 "ldebug.c"
      var $37=(($36+75)|0); //@line 329 "ldebug.c"
      var $38=HEAPU8[($37)]; //@line 329 "ldebug.c"
      var $39=(($38)&255); //@line 329 "ldebug.c"
      var $40=(($35)|0) < (($39)|0); //@line 329 "ldebug.c"
      if ($40) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 329 "ldebug.c"
    case 9: 
      $1=0; //@line 329 "ldebug.c"
      __label__ = 148; break; //@line 329 "ldebug.c"
    case 10: 
      var $43=$op; //@line 330 "ldebug.c"
      var $44=((STRING_TABLE._luaP_opmodes+$43)|0); //@line 330 "ldebug.c"
      var $45=HEAPU8[($44)]; //@line 330 "ldebug.c"
      var $46=(($45)&255); //@line 330 "ldebug.c"
      var $47=$46 & 3; //@line 330 "ldebug.c"
      if ((($47)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($47)|0) == 1) {
        __label__ = 16; break;
      }
      else if ((($47)|0) == 2) {
        __label__ = 21; break;
      }
      else {
      __label__ = 38; break;
      }
      
    case 11: 
      var $49=$i; //@line 332 "ldebug.c"
      var $50=$49 >>> 23; //@line 332 "ldebug.c"
      var $51=$50 & 511; //@line 332 "ldebug.c"
      $b=$51; //@line 332 "ldebug.c"
      var $52=$i; //@line 333 "ldebug.c"
      var $53=$52 >>> 14; //@line 333 "ldebug.c"
      var $54=$53 & 511; //@line 333 "ldebug.c"
      $c=$54; //@line 333 "ldebug.c"
      var $55=$2; //@line 334 "ldebug.c"
      var $56=$b; //@line 334 "ldebug.c"
      var $57=$op; //@line 334 "ldebug.c"
      var $58=((STRING_TABLE._luaP_opmodes+$57)|0); //@line 334 "ldebug.c"
      var $59=HEAPU8[($58)]; //@line 334 "ldebug.c"
      var $60=(($59)&255); //@line 334 "ldebug.c"
      var $61=$60 >> 4; //@line 334 "ldebug.c"
      var $62=$61 & 3; //@line 334 "ldebug.c"
      var $63=__Z12checkArgModePK5Protoi9OpArgMask($55, $56, $62); //@line 334 "ldebug.c"
      var $64=(($63)|0)!=0; //@line 334 "ldebug.c"
      if ($64) { __label__ = 13; break; } else { __label__ = 12; break; } //@line 334 "ldebug.c"
    case 12: 
      $1=0; //@line 334 "ldebug.c"
      __label__ = 148; break; //@line 334 "ldebug.c"
    case 13: 
      var $67=$2; //@line 335 "ldebug.c"
      var $68=$c; //@line 335 "ldebug.c"
      var $69=$op; //@line 335 "ldebug.c"
      var $70=((STRING_TABLE._luaP_opmodes+$69)|0); //@line 335 "ldebug.c"
      var $71=HEAPU8[($70)]; //@line 335 "ldebug.c"
      var $72=(($71)&255); //@line 335 "ldebug.c"
      var $73=$72 >> 2; //@line 335 "ldebug.c"
      var $74=$73 & 3; //@line 335 "ldebug.c"
      var $75=__Z12checkArgModePK5Protoi9OpArgMask($67, $68, $74); //@line 335 "ldebug.c"
      var $76=(($75)|0)!=0; //@line 335 "ldebug.c"
      if ($76) { __label__ = 15; break; } else { __label__ = 14; break; } //@line 335 "ldebug.c"
    case 14: 
      $1=0; //@line 335 "ldebug.c"
      __label__ = 148; break; //@line 335 "ldebug.c"
    case 15: 
      __label__ = 38; break; //@line 336 "ldebug.c"
    case 16: 
      var $80=$i; //@line 339 "ldebug.c"
      var $81=$80 >>> 14; //@line 339 "ldebug.c"
      var $82=$81 & 262143; //@line 339 "ldebug.c"
      $b=$82; //@line 339 "ldebug.c"
      var $83=$op; //@line 340 "ldebug.c"
      var $84=((STRING_TABLE._luaP_opmodes+$83)|0); //@line 340 "ldebug.c"
      var $85=HEAPU8[($84)]; //@line 340 "ldebug.c"
      var $86=(($85)&255); //@line 340 "ldebug.c"
      var $87=$86 >> 4; //@line 340 "ldebug.c"
      var $88=$87 & 3; //@line 340 "ldebug.c"
      var $89=(($88)|0)==3; //@line 340 "ldebug.c"
      if ($89) { __label__ = 17; break; } else { __label__ = 20; break; } //@line 340 "ldebug.c"
    case 17: 
      var $91=$b; //@line 340 "ldebug.c"
      var $92=$2; //@line 340 "ldebug.c"
      var $93=(($92+40)|0); //@line 340 "ldebug.c"
      var $94=HEAP32[(($93)>>2)]; //@line 340 "ldebug.c"
      var $95=(($91)|0) < (($94)|0); //@line 340 "ldebug.c"
      if ($95) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 340 "ldebug.c"
    case 18: 
      $1=0; //@line 340 "ldebug.c"
      __label__ = 148; break; //@line 340 "ldebug.c"
    case 19: 
      __label__ = 20; break; //@line 340 "ldebug.c"
    case 20: 
      __label__ = 38; break; //@line 341 "ldebug.c"
    case 21: 
      var $100=$i; //@line 344 "ldebug.c"
      var $101=$100 >>> 14; //@line 344 "ldebug.c"
      var $102=$101 & 262143; //@line 344 "ldebug.c"
      var $103=((($102)-(131071))|0); //@line 344 "ldebug.c"
      $b=$103; //@line 344 "ldebug.c"
      var $104=$op; //@line 345 "ldebug.c"
      var $105=((STRING_TABLE._luaP_opmodes+$104)|0); //@line 345 "ldebug.c"
      var $106=HEAPU8[($105)]; //@line 345 "ldebug.c"
      var $107=(($106)&255); //@line 345 "ldebug.c"
      var $108=$107 >> 4; //@line 345 "ldebug.c"
      var $109=$108 & 3; //@line 345 "ldebug.c"
      var $110=(($109)|0)==2; //@line 345 "ldebug.c"
      if ($110) { __label__ = 22; break; } else { __label__ = 37; break; } //@line 345 "ldebug.c"
    case 22: 
      var $112=$pc; //@line 346 "ldebug.c"
      var $113=((($112)+(1))|0); //@line 346 "ldebug.c"
      var $114=$b; //@line 346 "ldebug.c"
      var $115=((($113)+($114))|0); //@line 346 "ldebug.c"
      $dest=$115; //@line 346 "ldebug.c"
      var $116=$dest; //@line 347 "ldebug.c"
      var $117=0 <= (($116)|0); //@line 347 "ldebug.c"
      if ($117) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 347 "ldebug.c"
    case 23: 
      var $119=$dest; //@line 347 "ldebug.c"
      var $120=$2; //@line 347 "ldebug.c"
      var $121=(($120+44)|0); //@line 347 "ldebug.c"
      var $122=HEAP32[(($121)>>2)]; //@line 347 "ldebug.c"
      var $123=(($119)|0) < (($122)|0); //@line 347 "ldebug.c"
      if ($123) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 347 "ldebug.c"
    case 24: 
      $1=0; //@line 347 "ldebug.c"
      __label__ = 148; break; //@line 347 "ldebug.c"
    case 25: 
      var $126=$dest; //@line 348 "ldebug.c"
      var $127=(($126)|0) > 0; //@line 348 "ldebug.c"
      if ($127) { __label__ = 26; break; } else { __label__ = 36; break; } //@line 348 "ldebug.c"
    case 26: 
      $j=0; //@line 354 "ldebug.c"
      __label__ = 27; break; //@line 354 "ldebug.c"
    case 27: 
      var $130=$j; //@line 354 "ldebug.c"
      var $131=$dest; //@line 354 "ldebug.c"
      var $132=(($130)|0) < (($131)|0); //@line 354 "ldebug.c"
      if ($132) { __label__ = 28; break; } else { __label__ = 33; break; } //@line 354 "ldebug.c"
    case 28: 
      var $134=$dest; //@line 355 "ldebug.c"
      var $135=((($134)-(1))|0); //@line 355 "ldebug.c"
      var $136=$j; //@line 355 "ldebug.c"
      var $137=((($135)-($136))|0); //@line 355 "ldebug.c"
      var $138=$2; //@line 355 "ldebug.c"
      var $139=(($138+12)|0); //@line 355 "ldebug.c"
      var $140=HEAP32[(($139)>>2)]; //@line 355 "ldebug.c"
      var $141=(($140+($137<<2))|0); //@line 355 "ldebug.c"
      var $142=HEAP32[(($141)>>2)]; //@line 355 "ldebug.c"
      $d=$142; //@line 355 "ldebug.c"
      var $143=$d; //@line 356 "ldebug.c"
      var $144=$143 >>> 0; //@line 356 "ldebug.c"
      var $145=$144 & 63; //@line 356 "ldebug.c"
      var $146=(($145)|0)==34; //@line 356 "ldebug.c"
      if ($146) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 356 "ldebug.c"
    case 29: 
      var $148=$d; //@line 356 "ldebug.c"
      var $149=$148 >>> 14; //@line 356 "ldebug.c"
      var $150=$149 & 511; //@line 356 "ldebug.c"
      var $151=(($150)|0)==0; //@line 356 "ldebug.c"
      if ($151) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 356 "ldebug.c"
    case 30: 
      __label__ = 33; break; //@line 356 "ldebug.c"
    case 31: 
      __label__ = 32; break; //@line 357 "ldebug.c"
    case 32: 
      var $155=$j; //@line 354 "ldebug.c"
      var $156=((($155)+(1))|0); //@line 354 "ldebug.c"
      $j=$156; //@line 354 "ldebug.c"
      __label__ = 27; break; //@line 354 "ldebug.c"
    case 33: 
      var $158=$j; //@line 360 "ldebug.c"
      var $159=$158 & 1; //@line 360 "ldebug.c"
      var $160=(($159)|0)==0; //@line 360 "ldebug.c"
      if ($160) { __label__ = 35; break; } else { __label__ = 34; break; } //@line 360 "ldebug.c"
    case 34: 
      $1=0; //@line 360 "ldebug.c"
      __label__ = 148; break; //@line 360 "ldebug.c"
    case 35: 
      __label__ = 36; break; //@line 361 "ldebug.c"
    case 36: 
      __label__ = 37; break; //@line 362 "ldebug.c"
    case 37: 
      __label__ = 38; break; //@line 363 "ldebug.c"
    case 38: 
      var $166=$op; //@line 366 "ldebug.c"
      var $167=((STRING_TABLE._luaP_opmodes+$166)|0); //@line 366 "ldebug.c"
      var $168=HEAPU8[($167)]; //@line 366 "ldebug.c"
      var $169=(($168)&255); //@line 366 "ldebug.c"
      var $170=$169 & 64; //@line 366 "ldebug.c"
      var $171=(($170)|0)!=0; //@line 366 "ldebug.c"
      if ($171) { __label__ = 39; break; } else { __label__ = 42; break; } //@line 366 "ldebug.c"
    case 39: 
      var $173=$a; //@line 367 "ldebug.c"
      var $174=$4; //@line 367 "ldebug.c"
      var $175=(($173)|0)==(($174)|0); //@line 367 "ldebug.c"
      if ($175) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 367 "ldebug.c"
    case 40: 
      var $177=$pc; //@line 367 "ldebug.c"
      $last=$177; //@line 367 "ldebug.c"
      __label__ = 41; break; //@line 367 "ldebug.c"
    case 41: 
      __label__ = 42; break; //@line 368 "ldebug.c"
    case 42: 
      var $180=$op; //@line 369 "ldebug.c"
      var $181=((STRING_TABLE._luaP_opmodes+$180)|0); //@line 369 "ldebug.c"
      var $182=HEAPU8[($181)]; //@line 369 "ldebug.c"
      var $183=(($182)&255); //@line 369 "ldebug.c"
      var $184=$183 & 128; //@line 369 "ldebug.c"
      var $185=(($184)|0)!=0; //@line 369 "ldebug.c"
      if ($185) { __label__ = 43; break; } else { __label__ = 48; break; } //@line 369 "ldebug.c"
    case 43: 
      var $187=$pc; //@line 370 "ldebug.c"
      var $188=((($187)+(2))|0); //@line 370 "ldebug.c"
      var $189=$2; //@line 370 "ldebug.c"
      var $190=(($189+44)|0); //@line 370 "ldebug.c"
      var $191=HEAP32[(($190)>>2)]; //@line 370 "ldebug.c"
      var $192=(($188)|0) < (($191)|0); //@line 370 "ldebug.c"
      if ($192) { __label__ = 45; break; } else { __label__ = 44; break; } //@line 370 "ldebug.c"
    case 44: 
      $1=0; //@line 370 "ldebug.c"
      __label__ = 148; break; //@line 370 "ldebug.c"
    case 45: 
      var $195=$pc; //@line 371 "ldebug.c"
      var $196=((($195)+(1))|0); //@line 371 "ldebug.c"
      var $197=$2; //@line 371 "ldebug.c"
      var $198=(($197+12)|0); //@line 371 "ldebug.c"
      var $199=HEAP32[(($198)>>2)]; //@line 371 "ldebug.c"
      var $200=(($199+($196<<2))|0); //@line 371 "ldebug.c"
      var $201=HEAPU32[(($200)>>2)]; //@line 371 "ldebug.c"
      var $202=$201 >>> 0; //@line 371 "ldebug.c"
      var $203=$202 & 63; //@line 371 "ldebug.c"
      var $204=(($203)|0)==22; //@line 371 "ldebug.c"
      if ($204) { __label__ = 47; break; } else { __label__ = 46; break; } //@line 371 "ldebug.c"
    case 46: 
      $1=0; //@line 371 "ldebug.c"
      __label__ = 148; break; //@line 371 "ldebug.c"
    case 47: 
      __label__ = 48; break; //@line 372 "ldebug.c"
    case 48: 
      var $208=$op; //@line 373 "ldebug.c"
      if ((($208)|0) == 2) {
        __label__ = 49; break;
      }
      else if ((($208)|0) == 3) {
        __label__ = 57; break;
      }
      else if ((($208)|0) == 4 || (($208)|0) == 8) {
        __label__ = 61; break;
      }
      else if ((($208)|0) == 5 || (($208)|0) == 7) {
        __label__ = 64; break;
      }
      else if ((($208)|0) == 11) {
        __label__ = 67; break;
      }
      else if ((($208)|0) == 21) {
        __label__ = 72; break;
      }
      else if ((($208)|0) == 33) {
        __label__ = 75; break;
      }
      else if ((($208)|0) == 31 || (($208)|0) == 32) {
        __label__ = 82; break;
      }
      else if ((($208)|0) == 22) {
        __label__ = 85; break;
      }
      else if ((($208)|0) == 28 || (($208)|0) == 29) {
        __label__ = 90; break;
      }
      else if ((($208)|0) == 30) {
        __label__ = 106; break;
      }
      else if ((($208)|0) == 34) {
        __label__ = 111; break;
      }
      else if ((($208)|0) == 36) {
        __label__ = 120; break;
      }
      else if ((($208)|0) == 37) {
        __label__ = 134; break;
      }
      else {
      __label__ = 144; break;
      }
      
    case 49: 
      var $210=$c; //@line 375 "ldebug.c"
      var $211=(($210)|0)==1; //@line 375 "ldebug.c"
      if ($211) { __label__ = 50; break; } else { __label__ = 56; break; } //@line 375 "ldebug.c"
    case 50: 
      var $213=$pc; //@line 376 "ldebug.c"
      var $214=((($213)+(2))|0); //@line 376 "ldebug.c"
      var $215=$2; //@line 376 "ldebug.c"
      var $216=(($215+44)|0); //@line 376 "ldebug.c"
      var $217=HEAP32[(($216)>>2)]; //@line 376 "ldebug.c"
      var $218=(($214)|0) < (($217)|0); //@line 376 "ldebug.c"
      if ($218) { __label__ = 52; break; } else { __label__ = 51; break; } //@line 376 "ldebug.c"
    case 51: 
      $1=0; //@line 376 "ldebug.c"
      __label__ = 148; break; //@line 376 "ldebug.c"
    case 52: 
      var $221=$pc; //@line 377 "ldebug.c"
      var $222=((($221)+(1))|0); //@line 377 "ldebug.c"
      var $223=$2; //@line 377 "ldebug.c"
      var $224=(($223+12)|0); //@line 377 "ldebug.c"
      var $225=HEAP32[(($224)>>2)]; //@line 377 "ldebug.c"
      var $226=(($225+($222<<2))|0); //@line 377 "ldebug.c"
      var $227=HEAPU32[(($226)>>2)]; //@line 377 "ldebug.c"
      var $228=$227 >>> 0; //@line 377 "ldebug.c"
      var $229=$228 & 63; //@line 377 "ldebug.c"
      var $230=(($229)|0)!=34; //@line 377 "ldebug.c"
      if ($230) { __label__ = 55; break; } else { __label__ = 53; break; } //@line 377 "ldebug.c"
    case 53: 
      var $232=$pc; //@line 377 "ldebug.c"
      var $233=((($232)+(1))|0); //@line 377 "ldebug.c"
      var $234=$2; //@line 377 "ldebug.c"
      var $235=(($234+12)|0); //@line 377 "ldebug.c"
      var $236=HEAP32[(($235)>>2)]; //@line 377 "ldebug.c"
      var $237=(($236+($233<<2))|0); //@line 377 "ldebug.c"
      var $238=HEAPU32[(($237)>>2)]; //@line 377 "ldebug.c"
      var $239=$238 >>> 14; //@line 377 "ldebug.c"
      var $240=$239 & 511; //@line 377 "ldebug.c"
      var $241=(($240)|0)!=0; //@line 377 "ldebug.c"
      if ($241) { __label__ = 55; break; } else { __label__ = 54; break; } //@line 377 "ldebug.c"
    case 54: 
      $1=0; //@line 377 "ldebug.c"
      __label__ = 148; break; //@line 377 "ldebug.c"
    case 55: 
      __label__ = 56; break; //@line 379 "ldebug.c"
    case 56: 
      __label__ = 145; break; //@line 380 "ldebug.c"
    case 57: 
      var $246=$a; //@line 383 "ldebug.c"
      var $247=$4; //@line 383 "ldebug.c"
      var $248=(($246)|0) <= (($247)|0); //@line 383 "ldebug.c"
      if ($248) { __label__ = 58; break; } else { __label__ = 60; break; } //@line 383 "ldebug.c"
    case 58: 
      var $250=$4; //@line 383 "ldebug.c"
      var $251=$b; //@line 383 "ldebug.c"
      var $252=(($250)|0) <= (($251)|0); //@line 383 "ldebug.c"
      if ($252) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 383 "ldebug.c"
    case 59: 
      var $254=$pc; //@line 384 "ldebug.c"
      $last=$254; //@line 384 "ldebug.c"
      __label__ = 60; break; //@line 384 "ldebug.c"
    case 60: 
      __label__ = 145; break; //@line 385 "ldebug.c"
    case 61: 
      var $257=$b; //@line 389 "ldebug.c"
      var $258=$2; //@line 389 "ldebug.c"
      var $259=(($258+72)|0); //@line 389 "ldebug.c"
      var $260=HEAPU8[($259)]; //@line 389 "ldebug.c"
      var $261=(($260)&255); //@line 389 "ldebug.c"
      var $262=(($257)|0) < (($261)|0); //@line 389 "ldebug.c"
      if ($262) { __label__ = 63; break; } else { __label__ = 62; break; } //@line 389 "ldebug.c"
    case 62: 
      $1=0; //@line 389 "ldebug.c"
      __label__ = 148; break; //@line 389 "ldebug.c"
    case 63: 
      __label__ = 145; break; //@line 390 "ldebug.c"
    case 64: 
      var $266=$b; //@line 394 "ldebug.c"
      var $267=$2; //@line 394 "ldebug.c"
      var $268=(($267+8)|0); //@line 394 "ldebug.c"
      var $269=HEAP32[(($268)>>2)]; //@line 394 "ldebug.c"
      var $270=(($269+($266)*(12))|0); //@line 394 "ldebug.c"
      var $271=(($270+8)|0); //@line 394 "ldebug.c"
      var $272=HEAP32[(($271)>>2)]; //@line 394 "ldebug.c"
      var $273=(($272)|0)==4; //@line 394 "ldebug.c"
      if ($273) { __label__ = 66; break; } else { __label__ = 65; break; } //@line 394 "ldebug.c"
    case 65: 
      $1=0; //@line 394 "ldebug.c"
      __label__ = 148; break; //@line 394 "ldebug.c"
    case 66: 
      __label__ = 145; break; //@line 395 "ldebug.c"
    case 67: 
      var $277=$a; //@line 398 "ldebug.c"
      var $278=((($277)+(1))|0); //@line 398 "ldebug.c"
      var $279=$2; //@line 398 "ldebug.c"
      var $280=(($279+75)|0); //@line 398 "ldebug.c"
      var $281=HEAPU8[($280)]; //@line 398 "ldebug.c"
      var $282=(($281)&255); //@line 398 "ldebug.c"
      var $283=(($278)|0) < (($282)|0); //@line 398 "ldebug.c"
      if ($283) { __label__ = 69; break; } else { __label__ = 68; break; } //@line 398 "ldebug.c"
    case 68: 
      $1=0; //@line 398 "ldebug.c"
      __label__ = 148; break; //@line 398 "ldebug.c"
    case 69: 
      var $286=$4; //@line 399 "ldebug.c"
      var $287=$a; //@line 399 "ldebug.c"
      var $288=((($287)+(1))|0); //@line 399 "ldebug.c"
      var $289=(($286)|0)==(($288)|0); //@line 399 "ldebug.c"
      if ($289) { __label__ = 70; break; } else { __label__ = 71; break; } //@line 399 "ldebug.c"
    case 70: 
      var $291=$pc; //@line 399 "ldebug.c"
      $last=$291; //@line 399 "ldebug.c"
      __label__ = 71; break; //@line 399 "ldebug.c"
    case 71: 
      __label__ = 145; break; //@line 400 "ldebug.c"
    case 72: 
      var $294=$b; //@line 403 "ldebug.c"
      var $295=$c; //@line 403 "ldebug.c"
      var $296=(($294)|0) < (($295)|0); //@line 403 "ldebug.c"
      if ($296) { __label__ = 74; break; } else { __label__ = 73; break; } //@line 403 "ldebug.c"
    case 73: 
      $1=0; //@line 403 "ldebug.c"
      __label__ = 148; break; //@line 403 "ldebug.c"
    case 74: 
      __label__ = 145; break; //@line 404 "ldebug.c"
    case 75: 
      var $300=$c; //@line 407 "ldebug.c"
      var $301=(($300)|0) >= 1; //@line 407 "ldebug.c"
      if ($301) { __label__ = 77; break; } else { __label__ = 76; break; } //@line 407 "ldebug.c"
    case 76: 
      $1=0; //@line 407 "ldebug.c"
      __label__ = 148; break; //@line 407 "ldebug.c"
    case 77: 
      var $304=$a; //@line 408 "ldebug.c"
      var $305=((($304)+(2))|0); //@line 408 "ldebug.c"
      var $306=$c; //@line 408 "ldebug.c"
      var $307=((($305)+($306))|0); //@line 408 "ldebug.c"
      var $308=$2; //@line 408 "ldebug.c"
      var $309=(($308+75)|0); //@line 408 "ldebug.c"
      var $310=HEAPU8[($309)]; //@line 408 "ldebug.c"
      var $311=(($310)&255); //@line 408 "ldebug.c"
      var $312=(($307)|0) < (($311)|0); //@line 408 "ldebug.c"
      if ($312) { __label__ = 79; break; } else { __label__ = 78; break; } //@line 408 "ldebug.c"
    case 78: 
      $1=0; //@line 408 "ldebug.c"
      __label__ = 148; break; //@line 408 "ldebug.c"
    case 79: 
      var $315=$4; //@line 409 "ldebug.c"
      var $316=$a; //@line 409 "ldebug.c"
      var $317=((($316)+(2))|0); //@line 409 "ldebug.c"
      var $318=(($315)|0) >= (($317)|0); //@line 409 "ldebug.c"
      if ($318) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 409 "ldebug.c"
    case 80: 
      var $320=$pc; //@line 409 "ldebug.c"
      $last=$320; //@line 409 "ldebug.c"
      __label__ = 81; break; //@line 409 "ldebug.c"
    case 81: 
      __label__ = 145; break; //@line 410 "ldebug.c"
    case 82: 
      var $323=$a; //@line 414 "ldebug.c"
      var $324=((($323)+(3))|0); //@line 414 "ldebug.c"
      var $325=$2; //@line 414 "ldebug.c"
      var $326=(($325+75)|0); //@line 414 "ldebug.c"
      var $327=HEAPU8[($326)]; //@line 414 "ldebug.c"
      var $328=(($327)&255); //@line 414 "ldebug.c"
      var $329=(($324)|0) < (($328)|0); //@line 414 "ldebug.c"
      if ($329) { __label__ = 84; break; } else { __label__ = 83; break; } //@line 414 "ldebug.c"
    case 83: 
      $1=0; //@line 414 "ldebug.c"
      __label__ = 148; break; //@line 414 "ldebug.c"
    case 84: 
      __label__ = 85; break; //@line 414 "ldebug.c"
    case 85: 
      var $333=$pc; //@line 417 "ldebug.c"
      var $334=((($333)+(1))|0); //@line 417 "ldebug.c"
      var $335=$b; //@line 417 "ldebug.c"
      var $336=((($334)+($335))|0); //@line 417 "ldebug.c"
      $dest1=$336; //@line 417 "ldebug.c"
      var $337=$4; //@line 419 "ldebug.c"
      var $338=(($337)|0)!=255; //@line 419 "ldebug.c"
      if ($338) { __label__ = 86; break; } else { __label__ = 89; break; } //@line 419 "ldebug.c"
    case 86: 
      var $340=$pc; //@line 419 "ldebug.c"
      var $341=$dest1; //@line 419 "ldebug.c"
      var $342=(($340)|0) < (($341)|0); //@line 419 "ldebug.c"
      if ($342) { __label__ = 87; break; } else { __label__ = 89; break; } //@line 419 "ldebug.c"
    case 87: 
      var $344=$dest1; //@line 419 "ldebug.c"
      var $345=$3; //@line 419 "ldebug.c"
      var $346=(($344)|0) <= (($345)|0); //@line 419 "ldebug.c"
      if ($346) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 419 "ldebug.c"
    case 88: 
      var $348=$b; //@line 420 "ldebug.c"
      var $349=$pc; //@line 420 "ldebug.c"
      var $350=((($349)+($348))|0); //@line 420 "ldebug.c"
      $pc=$350; //@line 420 "ldebug.c"
      __label__ = 89; break; //@line 420 "ldebug.c"
    case 89: 
      __label__ = 145; break; //@line 421 "ldebug.c"
    case 90: 
      var $353=$b; //@line 425 "ldebug.c"
      var $354=(($353)|0)!=0; //@line 425 "ldebug.c"
      if ($354) { __label__ = 91; break; } else { __label__ = 94; break; } //@line 425 "ldebug.c"
    case 91: 
      var $356=$a; //@line 426 "ldebug.c"
      var $357=$b; //@line 426 "ldebug.c"
      var $358=((($356)+($357))|0); //@line 426 "ldebug.c"
      var $359=((($358)-(1))|0); //@line 426 "ldebug.c"
      var $360=$2; //@line 426 "ldebug.c"
      var $361=(($360+75)|0); //@line 426 "ldebug.c"
      var $362=HEAPU8[($361)]; //@line 426 "ldebug.c"
      var $363=(($362)&255); //@line 426 "ldebug.c"
      var $364=(($359)|0) < (($363)|0); //@line 426 "ldebug.c"
      if ($364) { __label__ = 93; break; } else { __label__ = 92; break; } //@line 426 "ldebug.c"
    case 92: 
      $1=0; //@line 426 "ldebug.c"
      __label__ = 148; break; //@line 426 "ldebug.c"
    case 93: 
      __label__ = 94; break; //@line 427 "ldebug.c"
    case 94: 
      var $368=$c; //@line 428 "ldebug.c"
      var $369=((($368)-(1))|0); //@line 428 "ldebug.c"
      $c=$369; //@line 428 "ldebug.c"
      var $370=$c; //@line 429 "ldebug.c"
      var $371=(($370)|0)==-1; //@line 429 "ldebug.c"
      if ($371) { __label__ = 95; break; } else { __label__ = 98; break; } //@line 429 "ldebug.c"
    case 95: 
      var $373=$pc; //@line 430 "ldebug.c"
      var $374=((($373)+(1))|0); //@line 430 "ldebug.c"
      var $375=$2; //@line 430 "ldebug.c"
      var $376=(($375+12)|0); //@line 430 "ldebug.c"
      var $377=HEAP32[(($376)>>2)]; //@line 430 "ldebug.c"
      var $378=(($377+($374<<2))|0); //@line 430 "ldebug.c"
      var $379=HEAP32[(($378)>>2)]; //@line 430 "ldebug.c"
      var $380=__Z16luaG_checkopenopj($379); //@line 430 "ldebug.c"
      var $381=(($380)|0)!=0; //@line 430 "ldebug.c"
      if ($381) { __label__ = 97; break; } else { __label__ = 96; break; } //@line 430 "ldebug.c"
    case 96: 
      $1=0; //@line 430 "ldebug.c"
      __label__ = 148; break; //@line 430 "ldebug.c"
    case 97: 
      __label__ = 103; break; //@line 431 "ldebug.c"
    case 98: 
      var $385=$c; //@line 432 "ldebug.c"
      var $386=(($385)|0)!=0; //@line 432 "ldebug.c"
      if ($386) { __label__ = 99; break; } else { __label__ = 102; break; } //@line 432 "ldebug.c"
    case 99: 
      var $388=$a; //@line 433 "ldebug.c"
      var $389=$c; //@line 433 "ldebug.c"
      var $390=((($388)+($389))|0); //@line 433 "ldebug.c"
      var $391=((($390)-(1))|0); //@line 433 "ldebug.c"
      var $392=$2; //@line 433 "ldebug.c"
      var $393=(($392+75)|0); //@line 433 "ldebug.c"
      var $394=HEAPU8[($393)]; //@line 433 "ldebug.c"
      var $395=(($394)&255); //@line 433 "ldebug.c"
      var $396=(($391)|0) < (($395)|0); //@line 433 "ldebug.c"
      if ($396) { __label__ = 101; break; } else { __label__ = 100; break; } //@line 433 "ldebug.c"
    case 100: 
      $1=0; //@line 433 "ldebug.c"
      __label__ = 148; break; //@line 433 "ldebug.c"
    case 101: 
      __label__ = 102; break; //@line 433 "ldebug.c"
    case 102: 
      __label__ = 103; break; //@line 433 "ldebug.c"
    case 103: 
      var $401=$4; //@line 434 "ldebug.c"
      var $402=$a; //@line 434 "ldebug.c"
      var $403=(($401)|0) >= (($402)|0); //@line 434 "ldebug.c"
      if ($403) { __label__ = 104; break; } else { __label__ = 105; break; } //@line 434 "ldebug.c"
    case 104: 
      var $405=$pc; //@line 434 "ldebug.c"
      $last=$405; //@line 434 "ldebug.c"
      __label__ = 105; break; //@line 434 "ldebug.c"
    case 105: 
      __label__ = 145; break; //@line 435 "ldebug.c"
    case 106: 
      var $408=$b; //@line 438 "ldebug.c"
      var $409=((($408)-(1))|0); //@line 438 "ldebug.c"
      $b=$409; //@line 438 "ldebug.c"
      var $410=$b; //@line 439 "ldebug.c"
      var $411=(($410)|0) > 0; //@line 439 "ldebug.c"
      if ($411) { __label__ = 107; break; } else { __label__ = 110; break; } //@line 439 "ldebug.c"
    case 107: 
      var $413=$a; //@line 439 "ldebug.c"
      var $414=$b; //@line 439 "ldebug.c"
      var $415=((($413)+($414))|0); //@line 439 "ldebug.c"
      var $416=((($415)-(1))|0); //@line 439 "ldebug.c"
      var $417=$2; //@line 439 "ldebug.c"
      var $418=(($417+75)|0); //@line 439 "ldebug.c"
      var $419=HEAPU8[($418)]; //@line 439 "ldebug.c"
      var $420=(($419)&255); //@line 439 "ldebug.c"
      var $421=(($416)|0) < (($420)|0); //@line 439 "ldebug.c"
      if ($421) { __label__ = 109; break; } else { __label__ = 108; break; } //@line 439 "ldebug.c"
    case 108: 
      $1=0; //@line 439 "ldebug.c"
      __label__ = 148; break; //@line 439 "ldebug.c"
    case 109: 
      __label__ = 110; break; //@line 439 "ldebug.c"
    case 110: 
      __label__ = 145; break; //@line 440 "ldebug.c"
    case 111: 
      var $426=$b; //@line 443 "ldebug.c"
      var $427=(($426)|0) > 0; //@line 443 "ldebug.c"
      if ($427) { __label__ = 112; break; } else { __label__ = 115; break; } //@line 443 "ldebug.c"
    case 112: 
      var $429=$a; //@line 443 "ldebug.c"
      var $430=$b; //@line 443 "ldebug.c"
      var $431=((($429)+($430))|0); //@line 443 "ldebug.c"
      var $432=$2; //@line 443 "ldebug.c"
      var $433=(($432+75)|0); //@line 443 "ldebug.c"
      var $434=HEAPU8[($433)]; //@line 443 "ldebug.c"
      var $435=(($434)&255); //@line 443 "ldebug.c"
      var $436=(($431)|0) < (($435)|0); //@line 443 "ldebug.c"
      if ($436) { __label__ = 114; break; } else { __label__ = 113; break; } //@line 443 "ldebug.c"
    case 113: 
      $1=0; //@line 443 "ldebug.c"
      __label__ = 148; break; //@line 443 "ldebug.c"
    case 114: 
      __label__ = 115; break; //@line 443 "ldebug.c"
    case 115: 
      var $440=$c; //@line 444 "ldebug.c"
      var $441=(($440)|0)==0; //@line 444 "ldebug.c"
      if ($441) { __label__ = 116; break; } else { __label__ = 119; break; } //@line 444 "ldebug.c"
    case 116: 
      var $443=$pc; //@line 445 "ldebug.c"
      var $444=((($443)+(1))|0); //@line 445 "ldebug.c"
      $pc=$444; //@line 445 "ldebug.c"
      var $445=$pc; //@line 446 "ldebug.c"
      var $446=$2; //@line 446 "ldebug.c"
      var $447=(($446+44)|0); //@line 446 "ldebug.c"
      var $448=HEAP32[(($447)>>2)]; //@line 446 "ldebug.c"
      var $449=((($448)-(1))|0); //@line 446 "ldebug.c"
      var $450=(($445)|0) < (($449)|0); //@line 446 "ldebug.c"
      if ($450) { __label__ = 118; break; } else { __label__ = 117; break; } //@line 446 "ldebug.c"
    case 117: 
      $1=0; //@line 446 "ldebug.c"
      __label__ = 148; break; //@line 446 "ldebug.c"
    case 118: 
      __label__ = 119; break; //@line 447 "ldebug.c"
    case 119: 
      __label__ = 145; break; //@line 448 "ldebug.c"
    case 120: 
      var $455=$b; //@line 452 "ldebug.c"
      var $456=$2; //@line 452 "ldebug.c"
      var $457=(($456+52)|0); //@line 452 "ldebug.c"
      var $458=HEAP32[(($457)>>2)]; //@line 452 "ldebug.c"
      var $459=(($455)|0) < (($458)|0); //@line 452 "ldebug.c"
      if ($459) { __label__ = 122; break; } else { __label__ = 121; break; } //@line 452 "ldebug.c"
    case 121: 
      $1=0; //@line 452 "ldebug.c"
      __label__ = 148; break; //@line 452 "ldebug.c"
    case 122: 
      var $462=$b; //@line 453 "ldebug.c"
      var $463=$2; //@line 453 "ldebug.c"
      var $464=(($463+16)|0); //@line 453 "ldebug.c"
      var $465=HEAP32[(($464)>>2)]; //@line 453 "ldebug.c"
      var $466=(($465+($462<<2))|0); //@line 453 "ldebug.c"
      var $467=HEAP32[(($466)>>2)]; //@line 453 "ldebug.c"
      var $468=(($467+72)|0); //@line 453 "ldebug.c"
      var $469=HEAPU8[($468)]; //@line 453 "ldebug.c"
      var $470=(($469)&255); //@line 453 "ldebug.c"
      $nup=$470; //@line 453 "ldebug.c"
      var $471=$pc; //@line 454 "ldebug.c"
      var $472=$nup; //@line 454 "ldebug.c"
      var $473=((($471)+($472))|0); //@line 454 "ldebug.c"
      var $474=$2; //@line 454 "ldebug.c"
      var $475=(($474+44)|0); //@line 454 "ldebug.c"
      var $476=HEAP32[(($475)>>2)]; //@line 454 "ldebug.c"
      var $477=(($473)|0) < (($476)|0); //@line 454 "ldebug.c"
      if ($477) { __label__ = 124; break; } else { __label__ = 123; break; } //@line 454 "ldebug.c"
    case 123: 
      $1=0; //@line 454 "ldebug.c"
      __label__ = 148; break; //@line 454 "ldebug.c"
    case 124: 
      $j2=1; //@line 455 "ldebug.c"
      __label__ = 125; break; //@line 455 "ldebug.c"
    case 125: 
      var $481=$j2; //@line 455 "ldebug.c"
      var $482=$nup; //@line 455 "ldebug.c"
      var $483=(($481)|0) <= (($482)|0); //@line 455 "ldebug.c"
      if ($483) { __label__ = 126; break; } else { __label__ = 131; break; } //@line 455 "ldebug.c"
    case 126: 
      var $485=$pc; //@line 456 "ldebug.c"
      var $486=$j2; //@line 456 "ldebug.c"
      var $487=((($485)+($486))|0); //@line 456 "ldebug.c"
      var $488=$2; //@line 456 "ldebug.c"
      var $489=(($488+12)|0); //@line 456 "ldebug.c"
      var $490=HEAP32[(($489)>>2)]; //@line 456 "ldebug.c"
      var $491=(($490+($487<<2))|0); //@line 456 "ldebug.c"
      var $492=HEAPU32[(($491)>>2)]; //@line 456 "ldebug.c"
      var $493=$492 >>> 0; //@line 456 "ldebug.c"
      var $494=$493 & 63; //@line 456 "ldebug.c"
      $op1=$494; //@line 456 "ldebug.c"
      var $495=$op1; //@line 457 "ldebug.c"
      var $496=(($495)|0)==4; //@line 457 "ldebug.c"
      if ($496) { __label__ = 129; break; } else { __label__ = 127; break; } //@line 457 "ldebug.c"
    case 127: 
      var $498=$op1; //@line 457 "ldebug.c"
      var $499=(($498)|0)==0; //@line 457 "ldebug.c"
      if ($499) { __label__ = 129; break; } else { __label__ = 128; break; } //@line 457 "ldebug.c"
    case 128: 
      $1=0; //@line 457 "ldebug.c"
      __label__ = 148; break; //@line 457 "ldebug.c"
    case 129: 
      __label__ = 130; break; //@line 458 "ldebug.c"
    case 130: 
      var $503=$j2; //@line 455 "ldebug.c"
      var $504=((($503)+(1))|0); //@line 455 "ldebug.c"
      $j2=$504; //@line 455 "ldebug.c"
      __label__ = 125; break; //@line 455 "ldebug.c"
    case 131: 
      var $506=$4; //@line 459 "ldebug.c"
      var $507=(($506)|0)!=255; //@line 459 "ldebug.c"
      if ($507) { __label__ = 132; break; } else { __label__ = 133; break; } //@line 459 "ldebug.c"
    case 132: 
      var $509=$nup; //@line 460 "ldebug.c"
      var $510=$pc; //@line 460 "ldebug.c"
      var $511=((($510)+($509))|0); //@line 460 "ldebug.c"
      $pc=$511; //@line 460 "ldebug.c"
      __label__ = 133; break; //@line 460 "ldebug.c"
    case 133: 
      __label__ = 145; break; //@line 461 "ldebug.c"
    case 134: 
      var $514=$2; //@line 464 "ldebug.c"
      var $515=(($514+74)|0); //@line 464 "ldebug.c"
      var $516=HEAPU8[($515)]; //@line 464 "ldebug.c"
      var $517=(($516)&255); //@line 464 "ldebug.c"
      var $518=$517 & 2; //@line 464 "ldebug.c"
      var $519=(($518)|0)!=0; //@line 464 "ldebug.c"
      if ($519) { __label__ = 135; break; } else { __label__ = 136; break; } //@line 464 "ldebug.c"
    case 135: 
      var $521=$2; //@line 464 "ldebug.c"
      var $522=(($521+74)|0); //@line 464 "ldebug.c"
      var $523=HEAPU8[($522)]; //@line 464 "ldebug.c"
      var $524=(($523)&255); //@line 464 "ldebug.c"
      var $525=$524 & 4; //@line 464 "ldebug.c"
      var $526=(($525)|0)!=0; //@line 464 "ldebug.c"
      if ($526) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 464 "ldebug.c"
    case 136: 
      $1=0; //@line 464 "ldebug.c"
      __label__ = 148; break; //@line 464 "ldebug.c"
    case 137: 
      var $529=$b; //@line 466 "ldebug.c"
      var $530=((($529)-(1))|0); //@line 466 "ldebug.c"
      $b=$530; //@line 466 "ldebug.c"
      var $531=$b; //@line 467 "ldebug.c"
      var $532=(($531)|0)==-1; //@line 467 "ldebug.c"
      if ($532) { __label__ = 138; break; } else { __label__ = 141; break; } //@line 467 "ldebug.c"
    case 138: 
      var $534=$pc; //@line 467 "ldebug.c"
      var $535=((($534)+(1))|0); //@line 467 "ldebug.c"
      var $536=$2; //@line 467 "ldebug.c"
      var $537=(($536+12)|0); //@line 467 "ldebug.c"
      var $538=HEAP32[(($537)>>2)]; //@line 467 "ldebug.c"
      var $539=(($538+($535<<2))|0); //@line 467 "ldebug.c"
      var $540=HEAP32[(($539)>>2)]; //@line 467 "ldebug.c"
      var $541=__Z16luaG_checkopenopj($540); //@line 467 "ldebug.c"
      var $542=(($541)|0)!=0; //@line 467 "ldebug.c"
      if ($542) { __label__ = 140; break; } else { __label__ = 139; break; } //@line 467 "ldebug.c"
    case 139: 
      $1=0; //@line 467 "ldebug.c"
      __label__ = 148; break; //@line 467 "ldebug.c"
    case 140: 
      __label__ = 141; break; //@line 467 "ldebug.c"
    case 141: 
      var $546=$a; //@line 468 "ldebug.c"
      var $547=$b; //@line 468 "ldebug.c"
      var $548=((($546)+($547))|0); //@line 468 "ldebug.c"
      var $549=((($548)-(1))|0); //@line 468 "ldebug.c"
      var $550=$2; //@line 468 "ldebug.c"
      var $551=(($550+75)|0); //@line 468 "ldebug.c"
      var $552=HEAPU8[($551)]; //@line 468 "ldebug.c"
      var $553=(($552)&255); //@line 468 "ldebug.c"
      var $554=(($549)|0) < (($553)|0); //@line 468 "ldebug.c"
      if ($554) { __label__ = 143; break; } else { __label__ = 142; break; } //@line 468 "ldebug.c"
    case 142: 
      $1=0; //@line 468 "ldebug.c"
      __label__ = 148; break; //@line 468 "ldebug.c"
    case 143: 
      __label__ = 145; break; //@line 469 "ldebug.c"
    case 144: 
      __label__ = 145; break; //@line 471 "ldebug.c"
    case 145: 
      __label__ = 146; break; //@line 473 "ldebug.c"
    case 146: 
      var $560=$pc; //@line 322 "ldebug.c"
      var $561=((($560)+(1))|0); //@line 322 "ldebug.c"
      $pc=$561; //@line 322 "ldebug.c"
      __label__ = 5; break; //@line 322 "ldebug.c"
    case 147: 
      var $563=$last; //@line 474 "ldebug.c"
      var $564=$2; //@line 474 "ldebug.c"
      var $565=(($564+12)|0); //@line 474 "ldebug.c"
      var $566=HEAP32[(($565)>>2)]; //@line 474 "ldebug.c"
      var $567=(($566+($563<<2))|0); //@line 474 "ldebug.c"
      var $568=HEAP32[(($567)>>2)]; //@line 474 "ldebug.c"
      $1=$568; //@line 474 "ldebug.c"
      __label__ = 148; break; //@line 474 "ldebug.c"
    case 148: 
      var $570=$1; //@line 475 "ldebug.c"
      ;
      return $570; //@line 475 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8symbexecPK5Protoii["X"]=1;

function __Z9isinstackP8CallInfoPK10lua_TValue($ci, $o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      $2=$ci;
      $3=$o;
      var $4=$2; //@line 561 "ldebug.c"
      var $5=(($4)|0); //@line 561 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 561 "ldebug.c"
      $p=$6; //@line 561 "ldebug.c"
      __label__ = 3; break; //@line 561 "ldebug.c"
    case 3: 
      var $8=$p; //@line 561 "ldebug.c"
      var $9=$2; //@line 561 "ldebug.c"
      var $10=(($9+8)|0); //@line 561 "ldebug.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 561 "ldebug.c"
      var $12=(($8)>>>0) < (($11)>>>0); //@line 561 "ldebug.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 561 "ldebug.c"
    case 4: 
      var $14=$3; //@line 562 "ldebug.c"
      var $15=$p; //@line 562 "ldebug.c"
      var $16=(($14)|0)==(($15)|0); //@line 562 "ldebug.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 562 "ldebug.c"
    case 5: 
      $1=1; //@line 562 "ldebug.c"
      __label__ = 9; break; //@line 562 "ldebug.c"
    case 6: 
      __label__ = 7; break; //@line 562 "ldebug.c"
    case 7: 
      var $20=$p; //@line 561 "ldebug.c"
      var $21=(($20+12)|0); //@line 561 "ldebug.c"
      $p=$21; //@line 561 "ldebug.c"
      __label__ = 3; break; //@line 561 "ldebug.c"
    case 8: 
      $1=0; //@line 563 "ldebug.c"
      __label__ = 9; break; //@line 563 "ldebug.c"
    case 9: 
      var $24=$1; //@line 564 "ldebug.c"
      ;
      return $24; //@line 564 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11getluaprotoP8CallInfo($ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ci;
      var $2=$1; //@line 108 "ldebug.c"
      var $3=(($2+4)|0); //@line 108 "ldebug.c"
      var $4=HEAP32[(($3)>>2)]; //@line 108 "ldebug.c"
      var $5=(($4+8)|0); //@line 108 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 108 "ldebug.c"
      var $7=(($6)|0)==6; //@line 108 "ldebug.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 108 "ldebug.c"
    case 3: 
      var $9=$1; //@line 108 "ldebug.c"
      var $10=(($9+4)|0); //@line 108 "ldebug.c"
      var $11=HEAP32[(($10)>>2)]; //@line 108 "ldebug.c"
      var $12=(($11)|0); //@line 108 "ldebug.c"
      var $13=$12; //@line 108 "ldebug.c"
      var $14=HEAP32[(($13)>>2)]; //@line 108 "ldebug.c"
      var $15=$14; //@line 108 "ldebug.c"
      var $16=$15; //@line 108 "ldebug.c"
      var $17=(($16+6)|0); //@line 108 "ldebug.c"
      var $18=HEAP8[($17)]; //@line 108 "ldebug.c"
      var $19=(($18 << 24) >> 24)!=0; //@line 108 "ldebug.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 108 "ldebug.c"
    case 4: 
      var $21=$1; //@line 108 "ldebug.c"
      var $22=(($21+4)|0); //@line 108 "ldebug.c"
      var $23=HEAP32[(($22)>>2)]; //@line 108 "ldebug.c"
      var $24=(($23)|0); //@line 108 "ldebug.c"
      var $25=$24; //@line 108 "ldebug.c"
      var $26=HEAP32[(($25)>>2)]; //@line 108 "ldebug.c"
      var $27=$26; //@line 108 "ldebug.c"
      var $28=$27; //@line 108 "ldebug.c"
      var $29=(($28+16)|0); //@line 108 "ldebug.c"
      var $30=HEAP32[(($29)>>2)]; //@line 108 "ldebug.c"
      var $33 = $30;__label__ = 6; break; //@line 108 "ldebug.c"
    case 5: 
      var $33 = 0;__label__ = 6; break; //@line 108 "ldebug.c"
    case 6: 
      var $33; //@line 108 "ldebug.c"
      ;
      return $33; //@line 108 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9currentpcP9lua_StateP8CallInfo($L, $ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$ci;
      var $4=$3; //@line 37 "ldebug.c"
      var $5=(($4+4)|0); //@line 37 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 37 "ldebug.c"
      var $7=(($6+8)|0); //@line 37 "ldebug.c"
      var $8=HEAP32[(($7)>>2)]; //@line 37 "ldebug.c"
      var $9=(($8)|0)==6; //@line 37 "ldebug.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 37 "ldebug.c"
    case 3: 
      var $11=$3; //@line 37 "ldebug.c"
      var $12=(($11+4)|0); //@line 37 "ldebug.c"
      var $13=HEAP32[(($12)>>2)]; //@line 37 "ldebug.c"
      var $14=(($13)|0); //@line 37 "ldebug.c"
      var $15=$14; //@line 37 "ldebug.c"
      var $16=HEAP32[(($15)>>2)]; //@line 37 "ldebug.c"
      var $17=$16; //@line 37 "ldebug.c"
      var $18=$17; //@line 37 "ldebug.c"
      var $19=(($18+6)|0); //@line 37 "ldebug.c"
      var $20=HEAP8[($19)]; //@line 37 "ldebug.c"
      var $21=(($20 << 24) >> 24)!=0; //@line 37 "ldebug.c"
      if ($21) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 37 "ldebug.c"
    case 4: 
      $1=-1; //@line 37 "ldebug.c"
      __label__ = 8; break; //@line 37 "ldebug.c"
    case 5: 
      var $24=$3; //@line 38 "ldebug.c"
      var $25=$2; //@line 38 "ldebug.c"
      var $26=(($25+20)|0); //@line 38 "ldebug.c"
      var $27=HEAP32[(($26)>>2)]; //@line 38 "ldebug.c"
      var $28=(($24)|0)==(($27)|0); //@line 38 "ldebug.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 38 "ldebug.c"
    case 6: 
      var $30=$2; //@line 39 "ldebug.c"
      var $31=(($30+24)|0); //@line 39 "ldebug.c"
      var $32=HEAP32[(($31)>>2)]; //@line 39 "ldebug.c"
      var $33=$3; //@line 39 "ldebug.c"
      var $34=(($33+12)|0); //@line 39 "ldebug.c"
      HEAP32[(($34)>>2)]=$32; //@line 39 "ldebug.c"
      __label__ = 7; break; //@line 39 "ldebug.c"
    case 7: 
      var $36=$3; //@line 40 "ldebug.c"
      var $37=(($36+12)|0); //@line 40 "ldebug.c"
      var $38=HEAP32[(($37)>>2)]; //@line 40 "ldebug.c"
      var $39=$3; //@line 40 "ldebug.c"
      var $40=(($39+4)|0); //@line 40 "ldebug.c"
      var $41=HEAP32[(($40)>>2)]; //@line 40 "ldebug.c"
      var $42=(($41)|0); //@line 40 "ldebug.c"
      var $43=$42; //@line 40 "ldebug.c"
      var $44=HEAP32[(($43)>>2)]; //@line 40 "ldebug.c"
      var $45=$44; //@line 40 "ldebug.c"
      var $46=$45; //@line 40 "ldebug.c"
      var $47=(($46+16)|0); //@line 40 "ldebug.c"
      var $48=HEAP32[(($47)>>2)]; //@line 40 "ldebug.c"
      var $49=(($48+12)|0); //@line 40 "ldebug.c"
      var $50=HEAP32[(($49)>>2)]; //@line 40 "ldebug.c"
      var $51=$38; //@line 40 "ldebug.c"
      var $52=$50; //@line 40 "ldebug.c"
      var $53=((($51)-($52))|0); //@line 40 "ldebug.c"
      var $54=((((($53)|0))/(4))&-1); //@line 40 "ldebug.c"
      var $55=((($54)-(1))|0); //@line 40 "ldebug.c"
      $1=$55; //@line 40 "ldebug.c"
      __label__ = 8; break; //@line 40 "ldebug.c"
    case 8: 
      var $57=$1; //@line 41 "ldebug.c"
      ;
      return $57; //@line 41 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9currentpcP9lua_StateP8CallInfo["X"]=1;

function __Z5knameP5Protoi($p, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$p;
      $3=$c;
      var $4=$3; //@line 490 "ldebug.c"
      var $5=$4 & 256; //@line 490 "ldebug.c"
      var $6=(($5)|0)!=0; //@line 490 "ldebug.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 490 "ldebug.c"
    case 3: 
      var $8=$3; //@line 490 "ldebug.c"
      var $9=$8 & -257; //@line 490 "ldebug.c"
      var $10=$2; //@line 490 "ldebug.c"
      var $11=(($10+8)|0); //@line 490 "ldebug.c"
      var $12=HEAP32[(($11)>>2)]; //@line 490 "ldebug.c"
      var $13=(($12+($9)*(12))|0); //@line 490 "ldebug.c"
      var $14=(($13+8)|0); //@line 490 "ldebug.c"
      var $15=HEAP32[(($14)>>2)]; //@line 490 "ldebug.c"
      var $16=(($15)|0)==4; //@line 490 "ldebug.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 490 "ldebug.c"
    case 4: 
      var $18=$3; //@line 491 "ldebug.c"
      var $19=$18 & -257; //@line 491 "ldebug.c"
      var $20=$2; //@line 491 "ldebug.c"
      var $21=(($20+8)|0); //@line 491 "ldebug.c"
      var $22=HEAP32[(($21)>>2)]; //@line 491 "ldebug.c"
      var $23=(($22+($19)*(12))|0); //@line 491 "ldebug.c"
      var $24=(($23)|0); //@line 491 "ldebug.c"
      var $25=$24; //@line 491 "ldebug.c"
      var $26=HEAP32[(($25)>>2)]; //@line 491 "ldebug.c"
      var $27=$26; //@line 491 "ldebug.c"
      var $28=(($27+16)|0); //@line 491 "ldebug.c"
      var $29=$28; //@line 491 "ldebug.c"
      $1=$29; //@line 491 "ldebug.c"
      __label__ = 6; break; //@line 491 "ldebug.c"
    case 5: 
      $1=((STRING_TABLE.__str10)|0); //@line 493 "ldebug.c"
      __label__ = 6; break; //@line 493 "ldebug.c"
    case 6: 
      var $32=$1; //@line 494 "ldebug.c"
      ;
      return $32; //@line 494 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($L, $o, $op) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $name=__stackBase__;
      var $t;
      var $kind;
      $1=$L;
      $2=$o;
      $3=$op;
      HEAP32[(($name)>>2)]=0; //@line 568 "ldebug.c"
      var $4=$2; //@line 569 "ldebug.c"
      var $5=(($4+8)|0); //@line 569 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 569 "ldebug.c"
      var $7=((_luaT_typenames+($6<<2))|0); //@line 569 "ldebug.c"
      var $8=HEAP32[(($7)>>2)]; //@line 569 "ldebug.c"
      $t=$8; //@line 569 "ldebug.c"
      var $9=$1; //@line 570 "ldebug.c"
      var $10=(($9+20)|0); //@line 570 "ldebug.c"
      var $11=HEAP32[(($10)>>2)]; //@line 570 "ldebug.c"
      var $12=$2; //@line 570 "ldebug.c"
      var $13=__Z9isinstackP8CallInfoPK10lua_TValue($11, $12); //@line 570 "ldebug.c"
      var $14=(($13)|0)!=0; //@line 570 "ldebug.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 570 "ldebug.c"
    case 3: 
      var $16=$1; //@line 571 "ldebug.c"
      var $17=$1; //@line 571 "ldebug.c"
      var $18=(($17+20)|0); //@line 571 "ldebug.c"
      var $19=HEAP32[(($18)>>2)]; //@line 571 "ldebug.c"
      var $20=$2; //@line 571 "ldebug.c"
      var $21=$1; //@line 571 "ldebug.c"
      var $22=(($21+12)|0); //@line 571 "ldebug.c"
      var $23=HEAP32[(($22)>>2)]; //@line 571 "ldebug.c"
      var $24=$20; //@line 571 "ldebug.c"
      var $25=$23; //@line 571 "ldebug.c"
      var $26=((($24)-($25))|0); //@line 571 "ldebug.c"
      var $27=((((($26)|0))/(12))&-1); //@line 571 "ldebug.c"
      var $28=__Z10getobjnameP9lua_StateP8CallInfoiPPKc($16, $19, $27, $name); //@line 571 "ldebug.c"
      var $31 = $28;__label__ = 5; break; //@line 571 "ldebug.c"
    case 4: 
      var $31 = 0;__label__ = 5; break; //@line 571 "ldebug.c"
    case 5: 
      var $31; //@line 571 "ldebug.c"
      $kind=$31; //@line 571 "ldebug.c"
      var $32=$kind; //@line 573 "ldebug.c"
      var $33=(($32)|0)!=0; //@line 573 "ldebug.c"
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 573 "ldebug.c"
    case 6: 
      var $35=$1; //@line 574 "ldebug.c"
      var $36=$3; //@line 574 "ldebug.c"
      var $37=$kind; //@line 574 "ldebug.c"
      var $38=HEAP32[(($name)>>2)]; //@line 574 "ldebug.c"
      var $39=$t; //@line 574 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($35, ((STRING_TABLE.__str8)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 16),STACKTOP += 16,HEAP32[((tempInt)>>2)]=$36,HEAP32[(((tempInt)+(4))>>2)]=$37,HEAP32[(((tempInt)+(8))>>2)]=$38,HEAP32[(((tempInt)+(12))>>2)]=$39,tempInt)); //@line 574 "ldebug.c"
      __label__ = 8; break; //@line 574 "ldebug.c"
    case 7: 
      var $41=$1; //@line 577 "ldebug.c"
      var $42=$3; //@line 577 "ldebug.c"
      var $43=$t; //@line 577 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($41, ((STRING_TABLE.__str19)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$42,HEAP32[(((tempInt)+(4))>>2)]=$43,tempInt)); //@line 577 "ldebug.c"
      __label__ = 8; break; //@line 577 "ldebug.c"
    case 8: 
      STACKTOP = __stackBase__;
      return; //@line 578 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc["X"]=1;

function __Z10getobjnameP9lua_StateP8CallInfoiPPKc($L, $ci, $stackpos, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $p;
      var $pc;
      var $i;
      var $g;
      var $a;
      var $b;
      var $k;
      var $u;
      var $k1;
      $2=$L;
      $3=$ci;
      $4=$stackpos;
      $5=$name;
      var $6=$3; //@line 499 "ldebug.c"
      var $7=(($6+4)|0); //@line 499 "ldebug.c"
      var $8=HEAP32[(($7)>>2)]; //@line 499 "ldebug.c"
      var $9=(($8+8)|0); //@line 499 "ldebug.c"
      var $10=HEAP32[(($9)>>2)]; //@line 499 "ldebug.c"
      var $11=(($10)|0)==6; //@line 499 "ldebug.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 19; break; } //@line 499 "ldebug.c"
    case 3: 
      var $13=$3; //@line 499 "ldebug.c"
      var $14=(($13+4)|0); //@line 499 "ldebug.c"
      var $15=HEAP32[(($14)>>2)]; //@line 499 "ldebug.c"
      var $16=(($15)|0); //@line 499 "ldebug.c"
      var $17=$16; //@line 499 "ldebug.c"
      var $18=HEAP32[(($17)>>2)]; //@line 499 "ldebug.c"
      var $19=$18; //@line 499 "ldebug.c"
      var $20=$19; //@line 499 "ldebug.c"
      var $21=(($20+6)|0); //@line 499 "ldebug.c"
      var $22=HEAP8[($21)]; //@line 499 "ldebug.c"
      var $23=(($22 << 24) >> 24)!=0; //@line 499 "ldebug.c"
      if ($23) { __label__ = 19; break; } else { __label__ = 4; break; } //@line 499 "ldebug.c"
    case 4: 
      var $25=$3; //@line 500 "ldebug.c"
      var $26=(($25+4)|0); //@line 500 "ldebug.c"
      var $27=HEAP32[(($26)>>2)]; //@line 500 "ldebug.c"
      var $28=(($27)|0); //@line 500 "ldebug.c"
      var $29=$28; //@line 500 "ldebug.c"
      var $30=HEAP32[(($29)>>2)]; //@line 500 "ldebug.c"
      var $31=$30; //@line 500 "ldebug.c"
      var $32=$31; //@line 500 "ldebug.c"
      var $33=(($32+16)|0); //@line 500 "ldebug.c"
      var $34=HEAP32[(($33)>>2)]; //@line 500 "ldebug.c"
      $p=$34; //@line 500 "ldebug.c"
      var $35=$2; //@line 501 "ldebug.c"
      var $36=$3; //@line 501 "ldebug.c"
      var $37=__Z9currentpcP9lua_StateP8CallInfo($35, $36); //@line 501 "ldebug.c"
      $pc=$37; //@line 501 "ldebug.c"
      var $38=$p; //@line 503 "ldebug.c"
      var $39=$4; //@line 503 "ldebug.c"
      var $40=((($39)+(1))|0); //@line 503 "ldebug.c"
      var $41=$pc; //@line 503 "ldebug.c"
      var $42=__Z17luaF_getlocalnamePK5Protoii($38, $40, $41); //@line 503 "ldebug.c"
      var $43=$5; //@line 503 "ldebug.c"
      HEAP32[(($43)>>2)]=$42; //@line 503 "ldebug.c"
      var $44=$5; //@line 504 "ldebug.c"
      var $45=HEAP32[(($44)>>2)]; //@line 504 "ldebug.c"
      var $46=(($45)|0)!=0; //@line 504 "ldebug.c"
      if ($46) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 504 "ldebug.c"
    case 5: 
      $1=((STRING_TABLE.__str7)|0); //@line 505 "ldebug.c"
      __label__ = 20; break; //@line 505 "ldebug.c"
    case 6: 
      var $49=$p; //@line 506 "ldebug.c"
      var $50=$pc; //@line 506 "ldebug.c"
      var $51=$4; //@line 506 "ldebug.c"
      var $52=__Z8symbexecPK5Protoii($49, $50, $51); //@line 506 "ldebug.c"
      $i=$52; //@line 506 "ldebug.c"
      var $53=$i; //@line 508 "ldebug.c"
      var $54=$53 >>> 0; //@line 508 "ldebug.c"
      var $55=$54 & 63; //@line 508 "ldebug.c"
      if ((($55)|0) == 5) {
        __label__ = 7; break;
      }
      else if ((($55)|0) == 0) {
        __label__ = 8; break;
      }
      else if ((($55)|0) == 6) {
        __label__ = 11; break;
      }
      else if ((($55)|0) == 4) {
        __label__ = 12; break;
      }
      else if ((($55)|0) == 11) {
        __label__ = 16; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 7: 
      var $57=$i; //@line 510 "ldebug.c"
      var $58=$57 >>> 14; //@line 510 "ldebug.c"
      var $59=$58 & 262143; //@line 510 "ldebug.c"
      $g=$59; //@line 510 "ldebug.c"
      var $60=$g; //@line 512 "ldebug.c"
      var $61=$p; //@line 512 "ldebug.c"
      var $62=(($61+8)|0); //@line 512 "ldebug.c"
      var $63=HEAP32[(($62)>>2)]; //@line 512 "ldebug.c"
      var $64=(($63+($60)*(12))|0); //@line 512 "ldebug.c"
      var $65=(($64)|0); //@line 512 "ldebug.c"
      var $66=$65; //@line 512 "ldebug.c"
      var $67=HEAP32[(($66)>>2)]; //@line 512 "ldebug.c"
      var $68=$67; //@line 512 "ldebug.c"
      var $69=(($68+16)|0); //@line 512 "ldebug.c"
      var $70=$69; //@line 512 "ldebug.c"
      var $71=$5; //@line 512 "ldebug.c"
      HEAP32[(($71)>>2)]=$70; //@line 512 "ldebug.c"
      $1=((STRING_TABLE.__str813)|0); //@line 513 "ldebug.c"
      __label__ = 20; break; //@line 513 "ldebug.c"
    case 8: 
      var $73=$i; //@line 516 "ldebug.c"
      var $74=$73 >>> 6; //@line 516 "ldebug.c"
      var $75=$74 & 255; //@line 516 "ldebug.c"
      $a=$75; //@line 516 "ldebug.c"
      var $76=$i; //@line 517 "ldebug.c"
      var $77=$76 >>> 23; //@line 517 "ldebug.c"
      var $78=$77 & 511; //@line 517 "ldebug.c"
      $b=$78; //@line 517 "ldebug.c"
      var $79=$b; //@line 518 "ldebug.c"
      var $80=$a; //@line 518 "ldebug.c"
      var $81=(($79)|0) < (($80)|0); //@line 518 "ldebug.c"
      if ($81) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 518 "ldebug.c"
    case 9: 
      var $83=$2; //@line 519 "ldebug.c"
      var $84=$3; //@line 519 "ldebug.c"
      var $85=$b; //@line 519 "ldebug.c"
      var $86=$5; //@line 519 "ldebug.c"
      var $87=__Z10getobjnameP9lua_StateP8CallInfoiPPKc($83, $84, $85, $86); //@line 519 "ldebug.c"
      $1=$87; //@line 519 "ldebug.c"
      __label__ = 20; break; //@line 519 "ldebug.c"
    case 10: 
      __label__ = 18; break; //@line 520 "ldebug.c"
    case 11: 
      var $90=$i; //@line 523 "ldebug.c"
      var $91=$90 >>> 14; //@line 523 "ldebug.c"
      var $92=$91 & 511; //@line 523 "ldebug.c"
      $k=$92; //@line 523 "ldebug.c"
      var $93=$p; //@line 524 "ldebug.c"
      var $94=$k; //@line 524 "ldebug.c"
      var $95=__Z5knameP5Protoi($93, $94); //@line 524 "ldebug.c"
      var $96=$5; //@line 524 "ldebug.c"
      HEAP32[(($96)>>2)]=$95; //@line 524 "ldebug.c"
      $1=((STRING_TABLE.__str9)|0); //@line 525 "ldebug.c"
      __label__ = 20; break; //@line 525 "ldebug.c"
    case 12: 
      var $98=$i; //@line 528 "ldebug.c"
      var $99=$98 >>> 23; //@line 528 "ldebug.c"
      var $100=$99 & 511; //@line 528 "ldebug.c"
      $u=$100; //@line 528 "ldebug.c"
      var $101=$p; //@line 529 "ldebug.c"
      var $102=(($101+28)|0); //@line 529 "ldebug.c"
      var $103=HEAP32[(($102)>>2)]; //@line 529 "ldebug.c"
      var $104=(($103)|0)!=0; //@line 529 "ldebug.c"
      if ($104) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 529 "ldebug.c"
    case 13: 
      var $106=$u; //@line 529 "ldebug.c"
      var $107=$p; //@line 529 "ldebug.c"
      var $108=(($107+28)|0); //@line 529 "ldebug.c"
      var $109=HEAP32[(($108)>>2)]; //@line 529 "ldebug.c"
      var $110=(($109+($106<<2))|0); //@line 529 "ldebug.c"
      var $111=HEAP32[(($110)>>2)]; //@line 529 "ldebug.c"
      var $112=(($111+16)|0); //@line 529 "ldebug.c"
      var $113=$112; //@line 529 "ldebug.c"
      var $116 = $113;__label__ = 15; break; //@line 529 "ldebug.c"
    case 14: 
      var $116 = ((STRING_TABLE.__str10)|0);__label__ = 15; break; //@line 529 "ldebug.c"
    case 15: 
      var $116; //@line 529 "ldebug.c"
      var $117=$5; //@line 529 "ldebug.c"
      HEAP32[(($117)>>2)]=$116; //@line 529 "ldebug.c"
      $1=((STRING_TABLE.__str11)|0); //@line 530 "ldebug.c"
      __label__ = 20; break; //@line 530 "ldebug.c"
    case 16: 
      var $119=$i; //@line 533 "ldebug.c"
      var $120=$119 >>> 14; //@line 533 "ldebug.c"
      var $121=$120 & 511; //@line 533 "ldebug.c"
      $k1=$121; //@line 533 "ldebug.c"
      var $122=$p; //@line 534 "ldebug.c"
      var $123=$k1; //@line 534 "ldebug.c"
      var $124=__Z5knameP5Protoi($122, $123); //@line 534 "ldebug.c"
      var $125=$5; //@line 534 "ldebug.c"
      HEAP32[(($125)>>2)]=$124; //@line 534 "ldebug.c"
      $1=((STRING_TABLE.__str12)|0); //@line 535 "ldebug.c"
      __label__ = 20; break; //@line 535 "ldebug.c"
    case 17: 
      __label__ = 18; break; //@line 537 "ldebug.c"
    case 18: 
      __label__ = 19; break; //@line 539 "ldebug.c"
    case 19: 
      $1=0; //@line 540 "ldebug.c"
      __label__ = 20; break; //@line 540 "ldebug.c"
    case 20: 
      var $130=$1; //@line 541 "ldebug.c"
      ;
      return $130; //@line 541 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10getobjnameP9lua_StateP8CallInfoiPPKc["X"]=1;

function __Z13luaG_runerrorP9lua_StatePKcz($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $2;
  var $argp=__stackBase__;
  $1=$L;
  $2=$fmt;
  var $3=$argp; //@line 633 "ldebug.c"
  HEAP32[(($3)>>2)]=arguments[__Z13luaG_runerrorP9lua_StatePKcz.length]; //@line 633 "ldebug.c"
  var $4=$1; //@line 634 "ldebug.c"
  var $5=$1; //@line 634 "ldebug.c"
  var $6=$2; //@line 634 "ldebug.c"
  var $7=HEAP32[(($argp)>>2)]; //@line 634 "ldebug.c"
  var $8=__Z17luaO_pushvfstringP9lua_StatePKcPc($5, $6, $7); //@line 634 "ldebug.c"
  __Z7addinfoP9lua_StatePKc($4, $8); //@line 634 "ldebug.c"
  var $9=$argp; //@line 635 "ldebug.c"
  ; //@line 635 "ldebug.c"
  var $10=$1; //@line 636 "ldebug.c"
  __Z13luaG_errormsgP9lua_State($10); //@line 636 "ldebug.c"
  STACKTOP = __stackBase__;
  return; //@line 637 "ldebug.c"
}


function __Z16luaG_concaterrorP9lua_StateP10lua_TValueS2_($L, $p1, $p2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$p1;
      $3=$p2;
      var $4=$2; //@line 582 "ldebug.c"
      var $5=(($4+8)|0); //@line 582 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 582 "ldebug.c"
      var $7=(($6)|0)==4; //@line 582 "ldebug.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 582 "ldebug.c"
    case 3: 
      var $9=$2; //@line 582 "ldebug.c"
      var $10=(($9+8)|0); //@line 582 "ldebug.c"
      var $11=HEAP32[(($10)>>2)]; //@line 582 "ldebug.c"
      var $12=(($11)|0)==3; //@line 582 "ldebug.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 582 "ldebug.c"
    case 4: 
      var $14=$3; //@line 582 "ldebug.c"
      $2=$14; //@line 582 "ldebug.c"
      __label__ = 5; break; //@line 582 "ldebug.c"
    case 5: 
      var $16=$1; //@line 584 "ldebug.c"
      var $17=$2; //@line 584 "ldebug.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($16, $17, ((STRING_TABLE.__str210)|0)); //@line 584 "ldebug.c"
      ;
      return; //@line 585 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15luaG_aritherrorP9lua_StatePK10lua_TValueS3_($L, $p1, $p2) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $temp=__stackBase__;
      $1=$L;
      $2=$p1;
      $3=$p2;
      var $4=$2; //@line 590 "ldebug.c"
      var $5=__Z13luaV_tonumberPK10lua_TValuePS_($4, $temp); //@line 590 "ldebug.c"
      var $6=(($5)|0)==0; //@line 590 "ldebug.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 590 "ldebug.c"
    case 3: 
      var $8=$2; //@line 591 "ldebug.c"
      $3=$8; //@line 591 "ldebug.c"
      __label__ = 4; break; //@line 591 "ldebug.c"
    case 4: 
      var $10=$1; //@line 592 "ldebug.c"
      var $11=$3; //@line 592 "ldebug.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($10, $11, ((STRING_TABLE.__str311)|0)); //@line 592 "ldebug.c"
      STACKTOP = __stackBase__;
      return; //@line 593 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($L, $p1, $p2) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $t1;
      var $t2;
      $1=$L;
      $2=$p1;
      $3=$p2;
      var $4=$2; //@line 597 "ldebug.c"
      var $5=(($4+8)|0); //@line 597 "ldebug.c"
      var $6=HEAP32[(($5)>>2)]; //@line 597 "ldebug.c"
      var $7=((_luaT_typenames+($6<<2))|0); //@line 597 "ldebug.c"
      var $8=HEAP32[(($7)>>2)]; //@line 597 "ldebug.c"
      $t1=$8; //@line 597 "ldebug.c"
      var $9=$3; //@line 598 "ldebug.c"
      var $10=(($9+8)|0); //@line 598 "ldebug.c"
      var $11=HEAP32[(($10)>>2)]; //@line 598 "ldebug.c"
      var $12=((_luaT_typenames+($11<<2))|0); //@line 598 "ldebug.c"
      var $13=HEAP32[(($12)>>2)]; //@line 598 "ldebug.c"
      $t2=$13; //@line 598 "ldebug.c"
      var $14=$t1; //@line 599 "ldebug.c"
      var $15=(($14+2)|0); //@line 599 "ldebug.c"
      var $16=HEAP8[($15)]; //@line 599 "ldebug.c"
      var $17=(($16 << 24) >> 24); //@line 599 "ldebug.c"
      var $18=$t2; //@line 599 "ldebug.c"
      var $19=(($18+2)|0); //@line 599 "ldebug.c"
      var $20=HEAP8[($19)]; //@line 599 "ldebug.c"
      var $21=(($20 << 24) >> 24); //@line 599 "ldebug.c"
      var $22=(($17)|0)==(($21)|0); //@line 599 "ldebug.c"
      if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 599 "ldebug.c"
    case 3: 
      var $24=$1; //@line 600 "ldebug.c"
      var $25=$t1; //@line 600 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($24, ((STRING_TABLE.__str412)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$25,tempInt)); //@line 600 "ldebug.c"
      __label__ = 5; break; //@line 600 "ldebug.c"
    case 4: 
      var $27=$1; //@line 602 "ldebug.c"
      var $28=$t1; //@line 602 "ldebug.c"
      var $29=$t2; //@line 602 "ldebug.c"
      __Z13luaG_runerrorP9lua_StatePKcz($27, ((STRING_TABLE.__str5)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$28,HEAP32[(((tempInt)+(4))>>2)]=$29,tempInt)); //@line 602 "ldebug.c"
      __label__ = 5; break; //@line 602 "ldebug.c"
    case 5: 
      STACKTOP = __stackBase__;
      return 0; //@line 603 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaG_errormsgP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $errfunc;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      var $2=$1; //@line 619 "ldebug.c"
      var $3=(($2+108)|0); //@line 619 "ldebug.c"
      var $4=HEAP32[(($3)>>2)]; //@line 619 "ldebug.c"
      var $5=(($4)|0)!=0; //@line 619 "ldebug.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 619 "ldebug.c"
    case 3: 
      var $7=$1; //@line 620 "ldebug.c"
      var $8=(($7+32)|0); //@line 620 "ldebug.c"
      var $9=HEAP32[(($8)>>2)]; //@line 620 "ldebug.c"
      var $10=$9; //@line 620 "ldebug.c"
      var $11=$1; //@line 620 "ldebug.c"
      var $12=(($11+108)|0); //@line 620 "ldebug.c"
      var $13=HEAP32[(($12)>>2)]; //@line 620 "ldebug.c"
      var $14=(($10+$13)|0); //@line 620 "ldebug.c"
      var $15=$14; //@line 620 "ldebug.c"
      $errfunc=$15; //@line 620 "ldebug.c"
      var $16=$errfunc; //@line 621 "ldebug.c"
      var $17=(($16+8)|0); //@line 621 "ldebug.c"
      var $18=HEAP32[(($17)>>2)]; //@line 621 "ldebug.c"
      var $19=(($18)|0)==6; //@line 621 "ldebug.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 621 "ldebug.c"
    case 4: 
      var $21=$1; //@line 621 "ldebug.c"
      __Z10luaD_throwP9lua_Statei($21, 5); //@line 621 "ldebug.c"
      __label__ = 5; break; //@line 621 "ldebug.c"
    case 5: 
      var $23=$1; //@line 622 "ldebug.c"
      var $24=(($23+8)|0); //@line 622 "ldebug.c"
      var $25=HEAP32[(($24)>>2)]; //@line 622 "ldebug.c"
      var $26=((($25)-(12))|0); //@line 622 "ldebug.c"
      $o2=$26; //@line 622 "ldebug.c"
      var $27=$1; //@line 622 "ldebug.c"
      var $28=(($27+8)|0); //@line 622 "ldebug.c"
      var $29=HEAP32[(($28)>>2)]; //@line 622 "ldebug.c"
      $o1=$29; //@line 622 "ldebug.c"
      var $30=$o1; //@line 622 "ldebug.c"
      var $31=(($30)|0); //@line 622 "ldebug.c"
      var $32=$o2; //@line 622 "ldebug.c"
      var $33=(($32)|0); //@line 622 "ldebug.c"
      var $34=$31; //@line 622 "ldebug.c"
      var $35=$33; //@line 622 "ldebug.c"
      HEAP32[(($34)>>2)]=HEAP32[(($35)>>2)];HEAP32[((($34)+(4))>>2)]=HEAP32[((($35)+(4))>>2)]; //@line 622 "ldebug.c"
      var $36=$o2; //@line 622 "ldebug.c"
      var $37=(($36+8)|0); //@line 622 "ldebug.c"
      var $38=HEAP32[(($37)>>2)]; //@line 622 "ldebug.c"
      var $39=$o1; //@line 622 "ldebug.c"
      var $40=(($39+8)|0); //@line 622 "ldebug.c"
      HEAP32[(($40)>>2)]=$38; //@line 622 "ldebug.c"
      var $41=$errfunc; //@line 623 "ldebug.c"
      $o21=$41; //@line 623 "ldebug.c"
      var $42=$1; //@line 623 "ldebug.c"
      var $43=(($42+8)|0); //@line 623 "ldebug.c"
      var $44=HEAP32[(($43)>>2)]; //@line 623 "ldebug.c"
      var $45=((($44)-(12))|0); //@line 623 "ldebug.c"
      $o12=$45; //@line 623 "ldebug.c"
      var $46=$o12; //@line 623 "ldebug.c"
      var $47=(($46)|0); //@line 623 "ldebug.c"
      var $48=$o21; //@line 623 "ldebug.c"
      var $49=(($48)|0); //@line 623 "ldebug.c"
      var $50=$47; //@line 623 "ldebug.c"
      var $51=$49; //@line 623 "ldebug.c"
      HEAP32[(($50)>>2)]=HEAP32[(($51)>>2)];HEAP32[((($50)+(4))>>2)]=HEAP32[((($51)+(4))>>2)]; //@line 623 "ldebug.c"
      var $52=$o21; //@line 623 "ldebug.c"
      var $53=(($52+8)|0); //@line 623 "ldebug.c"
      var $54=HEAP32[(($53)>>2)]; //@line 623 "ldebug.c"
      var $55=$o12; //@line 623 "ldebug.c"
      var $56=(($55+8)|0); //@line 623 "ldebug.c"
      HEAP32[(($56)>>2)]=$54; //@line 623 "ldebug.c"
      var $57=$1; //@line 624 "ldebug.c"
      var $58=(($57+28)|0); //@line 624 "ldebug.c"
      var $59=HEAP32[(($58)>>2)]; //@line 624 "ldebug.c"
      var $60=$59; //@line 624 "ldebug.c"
      var $61=$1; //@line 624 "ldebug.c"
      var $62=(($61+8)|0); //@line 624 "ldebug.c"
      var $63=HEAP32[(($62)>>2)]; //@line 624 "ldebug.c"
      var $64=$63; //@line 624 "ldebug.c"
      var $65=$60; //@line 624 "ldebug.c"
      var $66=$64; //@line 624 "ldebug.c"
      var $67=((($65)-($66))|0); //@line 624 "ldebug.c"
      var $68=(($67)|0) <= 12; //@line 624 "ldebug.c"
      if ($68) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 624 "ldebug.c"
    case 6: 
      var $70=$1; //@line 624 "ldebug.c"
      __Z14luaD_growstackP9lua_Statei($70, 1); //@line 624 "ldebug.c"
      __label__ = 8; break; //@line 624 "ldebug.c"
    case 7: 
      __label__ = 8; break; //@line 624 "ldebug.c"
    case 8: 
      var $73=$1; //@line 624 "ldebug.c"
      var $74=(($73+8)|0); //@line 624 "ldebug.c"
      var $75=HEAP32[(($74)>>2)]; //@line 624 "ldebug.c"
      var $76=(($75+12)|0); //@line 624 "ldebug.c"
      HEAP32[(($74)>>2)]=$76; //@line 624 "ldebug.c"
      var $77=$1; //@line 625 "ldebug.c"
      var $78=$1; //@line 625 "ldebug.c"
      var $79=(($78+8)|0); //@line 625 "ldebug.c"
      var $80=HEAP32[(($79)>>2)]; //@line 625 "ldebug.c"
      var $81=((($80)-(24))|0); //@line 625 "ldebug.c"
      __Z9luaD_callP9lua_StateP10lua_TValuei($77, $81, 1); //@line 625 "ldebug.c"
      __label__ = 9; break; //@line 626 "ldebug.c"
    case 9: 
      var $83=$1; //@line 627 "ldebug.c"
      __Z10luaD_throwP9lua_Statei($83, 2); //@line 627 "ldebug.c"
      ;
      return; //@line 628 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaG_errormsgP9lua_State["X"]=1;

function __Z7addinfoP9lua_StatePKc($L, $msg) {
  var __stackBase__  = STACKTOP; STACKTOP += 60; _memset(__stackBase__, 0, 60);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ci;
      var $buff=__stackBase__;
      var $line;
      $1=$L;
      $2=$msg;
      var $3=$1; //@line 608 "ldebug.c"
      var $4=(($3+20)|0); //@line 608 "ldebug.c"
      var $5=HEAP32[(($4)>>2)]; //@line 608 "ldebug.c"
      $ci=$5; //@line 608 "ldebug.c"
      var $6=$ci; //@line 609 "ldebug.c"
      var $7=(($6+4)|0); //@line 609 "ldebug.c"
      var $8=HEAP32[(($7)>>2)]; //@line 609 "ldebug.c"
      var $9=(($8+8)|0); //@line 609 "ldebug.c"
      var $10=HEAP32[(($9)>>2)]; //@line 609 "ldebug.c"
      var $11=(($10)|0)==6; //@line 609 "ldebug.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 609 "ldebug.c"
    case 3: 
      var $13=$ci; //@line 609 "ldebug.c"
      var $14=(($13+4)|0); //@line 609 "ldebug.c"
      var $15=HEAP32[(($14)>>2)]; //@line 609 "ldebug.c"
      var $16=(($15)|0); //@line 609 "ldebug.c"
      var $17=$16; //@line 609 "ldebug.c"
      var $18=HEAP32[(($17)>>2)]; //@line 609 "ldebug.c"
      var $19=$18; //@line 609 "ldebug.c"
      var $20=$19; //@line 609 "ldebug.c"
      var $21=(($20+6)|0); //@line 609 "ldebug.c"
      var $22=HEAP8[($21)]; //@line 609 "ldebug.c"
      var $23=(($22 << 24) >> 24)!=0; //@line 609 "ldebug.c"
      if ($23) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 609 "ldebug.c"
    case 4: 
      var $25=$1; //@line 611 "ldebug.c"
      var $26=$ci; //@line 611 "ldebug.c"
      var $27=__Z11currentlineP9lua_StateP8CallInfo($25, $26); //@line 611 "ldebug.c"
      $line=$27; //@line 611 "ldebug.c"
      var $28=(($buff)|0); //@line 612 "ldebug.c"
      var $29=$ci; //@line 612 "ldebug.c"
      var $30=__Z11getluaprotoP8CallInfo($29); //@line 612 "ldebug.c"
      var $31=(($30+32)|0); //@line 612 "ldebug.c"
      var $32=HEAP32[(($31)>>2)]; //@line 612 "ldebug.c"
      var $33=(($32+16)|0); //@line 612 "ldebug.c"
      var $34=$33; //@line 612 "ldebug.c"
      __Z12luaO_chunkidPcPKcj($28, $34, 60); //@line 612 "ldebug.c"
      var $35=$1; //@line 613 "ldebug.c"
      var $36=(($buff)|0); //@line 613 "ldebug.c"
      var $37=$line; //@line 613 "ldebug.c"
      var $38=$2; //@line 613 "ldebug.c"
      var $39=__Z16luaO_pushfstringP9lua_StatePKcz($35, ((STRING_TABLE.__str6)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$36,HEAP32[(((tempInt)+(4))>>2)]=$37,HEAP32[(((tempInt)+(8))>>2)]=$38,tempInt)); //@line 613 "ldebug.c"
      __label__ = 5; break; //@line 614 "ldebug.c"
    case 5: 
      STACKTOP = __stackBase__;
      return; //@line 615 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11currentlineP9lua_StateP8CallInfo($L, $ci) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $pc;
      $2=$L;
      $3=$ci;
      var $4=$2; //@line 45 "ldebug.c"
      var $5=$3; //@line 45 "ldebug.c"
      var $6=__Z9currentpcP9lua_StateP8CallInfo($4, $5); //@line 45 "ldebug.c"
      $pc=$6; //@line 45 "ldebug.c"
      var $7=$pc; //@line 46 "ldebug.c"
      var $8=(($7)|0) < 0; //@line 46 "ldebug.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 46 "ldebug.c"
    case 3: 
      $1=-1; //@line 47 "ldebug.c"
      __label__ = 8; break; //@line 47 "ldebug.c"
    case 4: 
      var $11=$3; //@line 49 "ldebug.c"
      var $12=(($11+4)|0); //@line 49 "ldebug.c"
      var $13=HEAP32[(($12)>>2)]; //@line 49 "ldebug.c"
      var $14=(($13)|0); //@line 49 "ldebug.c"
      var $15=$14; //@line 49 "ldebug.c"
      var $16=HEAP32[(($15)>>2)]; //@line 49 "ldebug.c"
      var $17=$16; //@line 49 "ldebug.c"
      var $18=$17; //@line 49 "ldebug.c"
      var $19=(($18+16)|0); //@line 49 "ldebug.c"
      var $20=HEAP32[(($19)>>2)]; //@line 49 "ldebug.c"
      var $21=(($20+20)|0); //@line 49 "ldebug.c"
      var $22=HEAP32[(($21)>>2)]; //@line 49 "ldebug.c"
      var $23=(($22)|0)!=0; //@line 49 "ldebug.c"
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 49 "ldebug.c"
    case 5: 
      var $25=$pc; //@line 49 "ldebug.c"
      var $26=$3; //@line 49 "ldebug.c"
      var $27=(($26+4)|0); //@line 49 "ldebug.c"
      var $28=HEAP32[(($27)>>2)]; //@line 49 "ldebug.c"
      var $29=(($28)|0); //@line 49 "ldebug.c"
      var $30=$29; //@line 49 "ldebug.c"
      var $31=HEAP32[(($30)>>2)]; //@line 49 "ldebug.c"
      var $32=$31; //@line 49 "ldebug.c"
      var $33=$32; //@line 49 "ldebug.c"
      var $34=(($33+16)|0); //@line 49 "ldebug.c"
      var $35=HEAP32[(($34)>>2)]; //@line 49 "ldebug.c"
      var $36=(($35+20)|0); //@line 49 "ldebug.c"
      var $37=HEAP32[(($36)>>2)]; //@line 49 "ldebug.c"
      var $38=(($37+($25<<2))|0); //@line 49 "ldebug.c"
      var $39=HEAP32[(($38)>>2)]; //@line 49 "ldebug.c"
      var $42 = $39;__label__ = 7; break; //@line 49 "ldebug.c"
    case 6: 
      var $42 = 0;__label__ = 7; break; //@line 49 "ldebug.c"
    case 7: 
      var $42; //@line 49 "ldebug.c"
      $1=$42; //@line 49 "ldebug.c"
      __label__ = 8; break; //@line 49 "ldebug.c"
    case 8: 
      var $44=$1; //@line 50 "ldebug.c"
      ;
      return $44; //@line 50 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11currentlineP9lua_StateP8CallInfo["X"]=1;

function __Z8precheckPK5Proto($pt) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$pt;
      var $3=$2; //@line 277 "ldebug.c"
      var $4=(($3+75)|0); //@line 277 "ldebug.c"
      var $5=HEAPU8[($4)]; //@line 277 "ldebug.c"
      var $6=(($5)&255); //@line 277 "ldebug.c"
      var $7=(($6)|0) <= 250; //@line 277 "ldebug.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 277 "ldebug.c"
    case 3: 
      $1=0; //@line 277 "ldebug.c"
      __label__ = 18; break; //@line 277 "ldebug.c"
    case 4: 
      var $10=$2; //@line 278 "ldebug.c"
      var $11=(($10+73)|0); //@line 278 "ldebug.c"
      var $12=HEAPU8[($11)]; //@line 278 "ldebug.c"
      var $13=(($12)&255); //@line 278 "ldebug.c"
      var $14=$2; //@line 278 "ldebug.c"
      var $15=(($14+74)|0); //@line 278 "ldebug.c"
      var $16=HEAPU8[($15)]; //@line 278 "ldebug.c"
      var $17=(($16)&255); //@line 278 "ldebug.c"
      var $18=$17 & 1; //@line 278 "ldebug.c"
      var $19=((($13)+($18))|0); //@line 278 "ldebug.c"
      var $20=$2; //@line 278 "ldebug.c"
      var $21=(($20+75)|0); //@line 278 "ldebug.c"
      var $22=HEAPU8[($21)]; //@line 278 "ldebug.c"
      var $23=(($22)&255); //@line 278 "ldebug.c"
      var $24=(($19)|0) <= (($23)|0); //@line 278 "ldebug.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 278 "ldebug.c"
    case 5: 
      $1=0; //@line 278 "ldebug.c"
      __label__ = 18; break; //@line 278 "ldebug.c"
    case 6: 
      var $27=$2; //@line 279 "ldebug.c"
      var $28=(($27+74)|0); //@line 279 "ldebug.c"
      var $29=HEAPU8[($28)]; //@line 279 "ldebug.c"
      var $30=(($29)&255); //@line 279 "ldebug.c"
      var $31=$30 & 4; //@line 279 "ldebug.c"
      var $32=(($31)|0)!=0; //@line 279 "ldebug.c"
      if ($32) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 279 "ldebug.c"
    case 7: 
      var $34=$2; //@line 279 "ldebug.c"
      var $35=(($34+74)|0); //@line 279 "ldebug.c"
      var $36=HEAPU8[($35)]; //@line 279 "ldebug.c"
      var $37=(($36)&255); //@line 279 "ldebug.c"
      var $38=$37 & 1; //@line 279 "ldebug.c"
      var $39=(($38)|0)!=0; //@line 279 "ldebug.c"
      if ($39) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 279 "ldebug.c"
    case 8: 
      $1=0; //@line 279 "ldebug.c"
      __label__ = 18; break; //@line 279 "ldebug.c"
    case 9: 
      var $42=$2; //@line 281 "ldebug.c"
      var $43=(($42+36)|0); //@line 281 "ldebug.c"
      var $44=HEAP32[(($43)>>2)]; //@line 281 "ldebug.c"
      var $45=$2; //@line 281 "ldebug.c"
      var $46=(($45+72)|0); //@line 281 "ldebug.c"
      var $47=HEAPU8[($46)]; //@line 281 "ldebug.c"
      var $48=(($47)&255); //@line 281 "ldebug.c"
      var $49=(($44)|0) <= (($48)|0); //@line 281 "ldebug.c"
      if ($49) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 281 "ldebug.c"
    case 10: 
      $1=0; //@line 281 "ldebug.c"
      __label__ = 18; break; //@line 281 "ldebug.c"
    case 11: 
      var $52=$2; //@line 282 "ldebug.c"
      var $53=(($52+48)|0); //@line 282 "ldebug.c"
      var $54=HEAP32[(($53)>>2)]; //@line 282 "ldebug.c"
      var $55=$2; //@line 282 "ldebug.c"
      var $56=(($55+44)|0); //@line 282 "ldebug.c"
      var $57=HEAP32[(($56)>>2)]; //@line 282 "ldebug.c"
      var $58=(($54)|0)==(($57)|0); //@line 282 "ldebug.c"
      if ($58) { __label__ = 14; break; } else { __label__ = 12; break; } //@line 282 "ldebug.c"
    case 12: 
      var $60=$2; //@line 282 "ldebug.c"
      var $61=(($60+48)|0); //@line 282 "ldebug.c"
      var $62=HEAP32[(($61)>>2)]; //@line 282 "ldebug.c"
      var $63=(($62)|0)==0; //@line 282 "ldebug.c"
      if ($63) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 282 "ldebug.c"
    case 13: 
      $1=0; //@line 282 "ldebug.c"
      __label__ = 18; break; //@line 282 "ldebug.c"
    case 14: 
      var $66=$2; //@line 283 "ldebug.c"
      var $67=(($66+44)|0); //@line 283 "ldebug.c"
      var $68=HEAP32[(($67)>>2)]; //@line 283 "ldebug.c"
      var $69=(($68)|0) > 0; //@line 283 "ldebug.c"
      if ($69) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 283 "ldebug.c"
    case 15: 
      var $71=$2; //@line 283 "ldebug.c"
      var $72=(($71+44)|0); //@line 283 "ldebug.c"
      var $73=HEAP32[(($72)>>2)]; //@line 283 "ldebug.c"
      var $74=((($73)-(1))|0); //@line 283 "ldebug.c"
      var $75=$2; //@line 283 "ldebug.c"
      var $76=(($75+12)|0); //@line 283 "ldebug.c"
      var $77=HEAP32[(($76)>>2)]; //@line 283 "ldebug.c"
      var $78=(($77+($74<<2))|0); //@line 283 "ldebug.c"
      var $79=HEAPU32[(($78)>>2)]; //@line 283 "ldebug.c"
      var $80=$79 >>> 0; //@line 283 "ldebug.c"
      var $81=$80 & 63; //@line 283 "ldebug.c"
      var $82=(($81)|0)==30; //@line 283 "ldebug.c"
      if ($82) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 283 "ldebug.c"
    case 16: 
      $1=0; //@line 283 "ldebug.c"
      __label__ = 18; break; //@line 283 "ldebug.c"
    case 17: 
      $1=1; //@line 284 "ldebug.c"
      __label__ = 18; break; //@line 284 "ldebug.c"
    case 18: 
      var $86=$1; //@line 285 "ldebug.c"
      ;
      return $86; //@line 285 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8precheckPK5Proto["X"]=1;

function __Z12checkArgModePK5Protoi9OpArgMask($pt, $r, $mode) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$pt;
      $3=$r;
      $4=$mode;
      var $5=$4; //@line 305 "ldebug.c"
      if ((($5)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 7; break;
      }
      else if ((($5)|0) == 3) {
        __label__ = 10; break;
      }
      else {
      __label__ = 15; break;
      }
      
    case 3: 
      var $7=$3; //@line 306 "ldebug.c"
      var $8=(($7)|0)==0; //@line 306 "ldebug.c"
      if ($8) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 306 "ldebug.c"
    case 4: 
      $1=0; //@line 306 "ldebug.c"
      __label__ = 16; break; //@line 306 "ldebug.c"
    case 5: 
      __label__ = 15; break; //@line 306 "ldebug.c"
    case 6: 
      __label__ = 15; break; //@line 307 "ldebug.c"
    case 7: 
      var $13=$3; //@line 308 "ldebug.c"
      var $14=$2; //@line 308 "ldebug.c"
      var $15=(($14+75)|0); //@line 308 "ldebug.c"
      var $16=HEAPU8[($15)]; //@line 308 "ldebug.c"
      var $17=(($16)&255); //@line 308 "ldebug.c"
      var $18=(($13)|0) < (($17)|0); //@line 308 "ldebug.c"
      if ($18) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 308 "ldebug.c"
    case 8: 
      $1=0; //@line 308 "ldebug.c"
      __label__ = 16; break; //@line 308 "ldebug.c"
    case 9: 
      __label__ = 15; break; //@line 308 "ldebug.c"
    case 10: 
      var $22=$3; //@line 310 "ldebug.c"
      var $23=$22 & 256; //@line 310 "ldebug.c"
      var $24=(($23)|0)!=0; //@line 310 "ldebug.c"
      if ($24) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 310 "ldebug.c"
    case 11: 
      var $26=$3; //@line 310 "ldebug.c"
      var $27=$26 & -257; //@line 310 "ldebug.c"
      var $28=$2; //@line 310 "ldebug.c"
      var $29=(($28+40)|0); //@line 310 "ldebug.c"
      var $30=HEAP32[(($29)>>2)]; //@line 310 "ldebug.c"
      var $31=(($27)|0) < (($30)|0); //@line 310 "ldebug.c"
      if ($31) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 310 "ldebug.c"
    case 12: 
      var $33=$3; //@line 310 "ldebug.c"
      var $34=$2; //@line 310 "ldebug.c"
      var $35=(($34+75)|0); //@line 310 "ldebug.c"
      var $36=HEAPU8[($35)]; //@line 310 "ldebug.c"
      var $37=(($36)&255); //@line 310 "ldebug.c"
      var $38=(($33)|0) < (($37)|0); //@line 310 "ldebug.c"
      if ($38) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 310 "ldebug.c"
    case 13: 
      $1=0; //@line 310 "ldebug.c"
      __label__ = 16; break; //@line 310 "ldebug.c"
    case 14: 
      __label__ = 15; break; //@line 311 "ldebug.c"
    case 15: 
      $1=1; //@line 313 "ldebug.c"
      __label__ = 16; break; //@line 313 "ldebug.c"
    case 16: 
      var $43=$1; //@line 314 "ldebug.c"
      ;
      return $43; //@line 314 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12checkArgModePK5Protoi9OpArgMask["X"]=1;

function __Z12correctstackP9lua_StateP10lua_TValue($L, $oldstack) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ci;
      var $up;
      $1=$L;
      $2=$oldstack;
      var $3=$1; //@line 129 "ldo.c"
      var $4=(($3+8)|0); //@line 129 "ldo.c"
      var $5=HEAP32[(($4)>>2)]; //@line 129 "ldo.c"
      var $6=$2; //@line 129 "ldo.c"
      var $7=$5; //@line 129 "ldo.c"
      var $8=$6; //@line 129 "ldo.c"
      var $9=((($7)-($8))|0); //@line 129 "ldo.c"
      var $10=((((($9)|0))/(12))&-1); //@line 129 "ldo.c"
      var $11=$1; //@line 129 "ldo.c"
      var $12=(($11+32)|0); //@line 129 "ldo.c"
      var $13=HEAP32[(($12)>>2)]; //@line 129 "ldo.c"
      var $14=(($13+($10)*(12))|0); //@line 129 "ldo.c"
      var $15=$1; //@line 129 "ldo.c"
      var $16=(($15+8)|0); //@line 129 "ldo.c"
      HEAP32[(($16)>>2)]=$14; //@line 129 "ldo.c"
      var $17=$1; //@line 130 "ldo.c"
      var $18=(($17+96)|0); //@line 130 "ldo.c"
      var $19=HEAP32[(($18)>>2)]; //@line 130 "ldo.c"
      $up=$19; //@line 130 "ldo.c"
      __label__ = 3; break; //@line 130 "ldo.c"
    case 3: 
      var $21=$up; //@line 130 "ldo.c"
      var $22=(($21)|0)!=0; //@line 130 "ldo.c"
      if ($22) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 130 "ldo.c"
    case 4: 
      var $24=$up; //@line 131 "ldo.c"
      var $25=$24; //@line 131 "ldo.c"
      var $26=(($25+8)|0); //@line 131 "ldo.c"
      var $27=HEAP32[(($26)>>2)]; //@line 131 "ldo.c"
      var $28=$2; //@line 131 "ldo.c"
      var $29=$27; //@line 131 "ldo.c"
      var $30=$28; //@line 131 "ldo.c"
      var $31=((($29)-($30))|0); //@line 131 "ldo.c"
      var $32=((((($31)|0))/(12))&-1); //@line 131 "ldo.c"
      var $33=$1; //@line 131 "ldo.c"
      var $34=(($33+32)|0); //@line 131 "ldo.c"
      var $35=HEAP32[(($34)>>2)]; //@line 131 "ldo.c"
      var $36=(($35+($32)*(12))|0); //@line 131 "ldo.c"
      var $37=$up; //@line 131 "ldo.c"
      var $38=$37; //@line 131 "ldo.c"
      var $39=(($38+8)|0); //@line 131 "ldo.c"
      HEAP32[(($39)>>2)]=$36; //@line 131 "ldo.c"
      __label__ = 5; break; //@line 131 "ldo.c"
    case 5: 
      var $41=$up; //@line 130 "ldo.c"
      var $42=$41; //@line 130 "ldo.c"
      var $43=(($42)|0); //@line 130 "ldo.c"
      var $44=HEAP32[(($43)>>2)]; //@line 130 "ldo.c"
      $up=$44; //@line 130 "ldo.c"
      __label__ = 3; break; //@line 130 "ldo.c"
    case 6: 
      var $46=$1; //@line 132 "ldo.c"
      var $47=(($46+40)|0); //@line 132 "ldo.c"
      var $48=HEAP32[(($47)>>2)]; //@line 132 "ldo.c"
      $ci=$48; //@line 132 "ldo.c"
      __label__ = 7; break; //@line 132 "ldo.c"
    case 7: 
      var $50=$ci; //@line 132 "ldo.c"
      var $51=$1; //@line 132 "ldo.c"
      var $52=(($51+20)|0); //@line 132 "ldo.c"
      var $53=HEAPU32[(($52)>>2)]; //@line 132 "ldo.c"
      var $54=(($50)>>>0) <= (($53)>>>0); //@line 132 "ldo.c"
      if ($54) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 132 "ldo.c"
    case 8: 
      var $56=$ci; //@line 133 "ldo.c"
      var $57=(($56+8)|0); //@line 133 "ldo.c"
      var $58=HEAP32[(($57)>>2)]; //@line 133 "ldo.c"
      var $59=$2; //@line 133 "ldo.c"
      var $60=$58; //@line 133 "ldo.c"
      var $61=$59; //@line 133 "ldo.c"
      var $62=((($60)-($61))|0); //@line 133 "ldo.c"
      var $63=((((($62)|0))/(12))&-1); //@line 133 "ldo.c"
      var $64=$1; //@line 133 "ldo.c"
      var $65=(($64+32)|0); //@line 133 "ldo.c"
      var $66=HEAP32[(($65)>>2)]; //@line 133 "ldo.c"
      var $67=(($66+($63)*(12))|0); //@line 133 "ldo.c"
      var $68=$ci; //@line 133 "ldo.c"
      var $69=(($68+8)|0); //@line 133 "ldo.c"
      HEAP32[(($69)>>2)]=$67; //@line 133 "ldo.c"
      var $70=$ci; //@line 134 "ldo.c"
      var $71=(($70)|0); //@line 134 "ldo.c"
      var $72=HEAP32[(($71)>>2)]; //@line 134 "ldo.c"
      var $73=$2; //@line 134 "ldo.c"
      var $74=$72; //@line 134 "ldo.c"
      var $75=$73; //@line 134 "ldo.c"
      var $76=((($74)-($75))|0); //@line 134 "ldo.c"
      var $77=((((($76)|0))/(12))&-1); //@line 134 "ldo.c"
      var $78=$1; //@line 134 "ldo.c"
      var $79=(($78+32)|0); //@line 134 "ldo.c"
      var $80=HEAP32[(($79)>>2)]; //@line 134 "ldo.c"
      var $81=(($80+($77)*(12))|0); //@line 134 "ldo.c"
      var $82=$ci; //@line 134 "ldo.c"
      var $83=(($82)|0); //@line 134 "ldo.c"
      HEAP32[(($83)>>2)]=$81; //@line 134 "ldo.c"
      var $84=$ci; //@line 135 "ldo.c"
      var $85=(($84+4)|0); //@line 135 "ldo.c"
      var $86=HEAP32[(($85)>>2)]; //@line 135 "ldo.c"
      var $87=$2; //@line 135 "ldo.c"
      var $88=$86; //@line 135 "ldo.c"
      var $89=$87; //@line 135 "ldo.c"
      var $90=((($88)-($89))|0); //@line 135 "ldo.c"
      var $91=((((($90)|0))/(12))&-1); //@line 135 "ldo.c"
      var $92=$1; //@line 135 "ldo.c"
      var $93=(($92+32)|0); //@line 135 "ldo.c"
      var $94=HEAP32[(($93)>>2)]; //@line 135 "ldo.c"
      var $95=(($94+($91)*(12))|0); //@line 135 "ldo.c"
      var $96=$ci; //@line 135 "ldo.c"
      var $97=(($96+4)|0); //@line 135 "ldo.c"
      HEAP32[(($97)>>2)]=$95; //@line 135 "ldo.c"
      __label__ = 9; break; //@line 136 "ldo.c"
    case 9: 
      var $99=$ci; //@line 132 "ldo.c"
      var $100=(($99+24)|0); //@line 132 "ldo.c"
      $ci=$100; //@line 132 "ldo.c"
      __label__ = 7; break; //@line 132 "ldo.c"
    case 10: 
      var $102=$1; //@line 137 "ldo.c"
      var $103=(($102+12)|0); //@line 137 "ldo.c"
      var $104=HEAP32[(($103)>>2)]; //@line 137 "ldo.c"
      var $105=$2; //@line 137 "ldo.c"
      var $106=$104; //@line 137 "ldo.c"
      var $107=$105; //@line 137 "ldo.c"
      var $108=((($106)-($107))|0); //@line 137 "ldo.c"
      var $109=((((($108)|0))/(12))&-1); //@line 137 "ldo.c"
      var $110=$1; //@line 137 "ldo.c"
      var $111=(($110+32)|0); //@line 137 "ldo.c"
      var $112=HEAP32[(($111)>>2)]; //@line 137 "ldo.c"
      var $113=(($112+($109)*(12))|0); //@line 137 "ldo.c"
      var $114=$1; //@line 137 "ldo.c"
      var $115=(($114+12)|0); //@line 137 "ldo.c"
      HEAP32[(($115)>>2)]=$113; //@line 137 "ldo.c"
      ;
      return; //@line 138 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12correctstackP9lua_StateP10lua_TValue["X"]=1;

function __Z13info_tailcallP9lua_Debug($ar) {
  ;
  var __label__;

  var $1;
  $1=$ar;
  var $2=$1; //@line 168 "ldebug.c"
  var $3=(($2+8)|0); //@line 168 "ldebug.c"
  HEAP32[(($3)>>2)]=((__str13)|0); //@line 168 "ldebug.c"
  var $4=$1; //@line 168 "ldebug.c"
  var $5=(($4+4)|0); //@line 168 "ldebug.c"
  HEAP32[(($5)>>2)]=((__str13)|0); //@line 168 "ldebug.c"
  var $6=$1; //@line 169 "ldebug.c"
  var $7=(($6+12)|0); //@line 169 "ldebug.c"
  HEAP32[(($7)>>2)]=((STRING_TABLE.__str18)|0); //@line 169 "ldebug.c"
  var $8=$1; //@line 170 "ldebug.c"
  var $9=(($8+20)|0); //@line 170 "ldebug.c"
  HEAP32[(($9)>>2)]=-1; //@line 170 "ldebug.c"
  var $10=$1; //@line 170 "ldebug.c"
  var $11=(($10+28)|0); //@line 170 "ldebug.c"
  HEAP32[(($11)>>2)]=-1; //@line 170 "ldebug.c"
  var $12=$1; //@line 170 "ldebug.c"
  var $13=(($12+32)|0); //@line 170 "ldebug.c"
  HEAP32[(($13)>>2)]=-1; //@line 170 "ldebug.c"
  var $14=$1; //@line 171 "ldebug.c"
  var $15=(($14+16)|0); //@line 171 "ldebug.c"
  HEAP32[(($15)>>2)]=((STRING_TABLE.__str1915)|0); //@line 171 "ldebug.c"
  var $16=$1; //@line 172 "ldebug.c"
  var $17=(($16+36)|0); //@line 172 "ldebug.c"
  var $18=(($17)|0); //@line 172 "ldebug.c"
  var $19=$1; //@line 172 "ldebug.c"
  var $20=(($19+16)|0); //@line 172 "ldebug.c"
  var $21=HEAP32[(($20)>>2)]; //@line 172 "ldebug.c"
  __Z12luaO_chunkidPcPKcj($18, $21, 60); //@line 172 "ldebug.c"
  var $22=$1; //@line 173 "ldebug.c"
  var $23=(($22+24)|0); //@line 173 "ldebug.c"
  HEAP32[(($23)>>2)]=0; //@line 173 "ldebug.c"
  ;
  return; //@line 174 "ldebug.c"
}


function __Z8funcinfoP9lua_DebugP7Closure($ar, $cl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ar;
      $2=$cl;
      var $3=$2; //@line 151 "ldebug.c"
      var $4=$3; //@line 151 "ldebug.c"
      var $5=(($4+6)|0); //@line 151 "ldebug.c"
      var $6=HEAP8[($5)]; //@line 151 "ldebug.c"
      var $7=(($6 << 24) >> 24)!=0; //@line 151 "ldebug.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 151 "ldebug.c"
    case 3: 
      var $9=$1; //@line 152 "ldebug.c"
      var $10=(($9+16)|0); //@line 152 "ldebug.c"
      HEAP32[(($10)>>2)]=((STRING_TABLE.__str14)|0); //@line 152 "ldebug.c"
      var $11=$1; //@line 153 "ldebug.c"
      var $12=(($11+28)|0); //@line 153 "ldebug.c"
      HEAP32[(($12)>>2)]=-1; //@line 153 "ldebug.c"
      var $13=$1; //@line 154 "ldebug.c"
      var $14=(($13+32)|0); //@line 154 "ldebug.c"
      HEAP32[(($14)>>2)]=-1; //@line 154 "ldebug.c"
      var $15=$1; //@line 155 "ldebug.c"
      var $16=(($15+12)|0); //@line 155 "ldebug.c"
      HEAP32[(($16)>>2)]=((STRING_TABLE.__str1514)|0); //@line 155 "ldebug.c"
      __label__ = 8; break; //@line 156 "ldebug.c"
    case 4: 
      var $18=$2; //@line 158 "ldebug.c"
      var $19=$18; //@line 158 "ldebug.c"
      var $20=(($19+16)|0); //@line 158 "ldebug.c"
      var $21=HEAP32[(($20)>>2)]; //@line 158 "ldebug.c"
      var $22=(($21+32)|0); //@line 158 "ldebug.c"
      var $23=HEAP32[(($22)>>2)]; //@line 158 "ldebug.c"
      var $24=(($23+16)|0); //@line 158 "ldebug.c"
      var $25=$24; //@line 158 "ldebug.c"
      var $26=$1; //@line 158 "ldebug.c"
      var $27=(($26+16)|0); //@line 158 "ldebug.c"
      HEAP32[(($27)>>2)]=$25; //@line 158 "ldebug.c"
      var $28=$2; //@line 159 "ldebug.c"
      var $29=$28; //@line 159 "ldebug.c"
      var $30=(($29+16)|0); //@line 159 "ldebug.c"
      var $31=HEAP32[(($30)>>2)]; //@line 159 "ldebug.c"
      var $32=(($31+60)|0); //@line 159 "ldebug.c"
      var $33=HEAP32[(($32)>>2)]; //@line 159 "ldebug.c"
      var $34=$1; //@line 159 "ldebug.c"
      var $35=(($34+28)|0); //@line 159 "ldebug.c"
      HEAP32[(($35)>>2)]=$33; //@line 159 "ldebug.c"
      var $36=$2; //@line 160 "ldebug.c"
      var $37=$36; //@line 160 "ldebug.c"
      var $38=(($37+16)|0); //@line 160 "ldebug.c"
      var $39=HEAP32[(($38)>>2)]; //@line 160 "ldebug.c"
      var $40=(($39+64)|0); //@line 160 "ldebug.c"
      var $41=HEAP32[(($40)>>2)]; //@line 160 "ldebug.c"
      var $42=$1; //@line 160 "ldebug.c"
      var $43=(($42+32)|0); //@line 160 "ldebug.c"
      HEAP32[(($43)>>2)]=$41; //@line 160 "ldebug.c"
      var $44=$1; //@line 161 "ldebug.c"
      var $45=(($44+28)|0); //@line 161 "ldebug.c"
      var $46=HEAP32[(($45)>>2)]; //@line 161 "ldebug.c"
      var $47=(($46)|0)==0; //@line 161 "ldebug.c"
      if ($47) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 161 "ldebug.c"
    case 5: 
      var $51 = ((STRING_TABLE.__str16)|0);__label__ = 7; break; //@line 161 "ldebug.c"
    case 6: 
      var $51 = ((STRING_TABLE.__str17)|0);__label__ = 7; break; //@line 161 "ldebug.c"
    case 7: 
      var $51; //@line 161 "ldebug.c"
      var $52=$1; //@line 161 "ldebug.c"
      var $53=(($52+12)|0); //@line 161 "ldebug.c"
      HEAP32[(($53)>>2)]=$51; //@line 161 "ldebug.c"
      __label__ = 8; break; //@line 162 "ldebug.c"
    case 8: 
      var $55=$1; //@line 163 "ldebug.c"
      var $56=(($55+36)|0); //@line 163 "ldebug.c"
      var $57=(($56)|0); //@line 163 "ldebug.c"
      var $58=$1; //@line 163 "ldebug.c"
      var $59=(($58+16)|0); //@line 163 "ldebug.c"
      var $60=HEAP32[(($59)>>2)]; //@line 163 "ldebug.c"
      __Z12luaO_chunkidPcPKcj($57, $60, 60); //@line 163 "ldebug.c"
      ;
      return; //@line 164 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8funcinfoP9lua_DebugP7Closure["X"]=1;

function __Z11getfuncnameP9lua_StateP8CallInfoPPKc($L, $ci, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$L;
      $3=$ci;
      $4=$name;
      var $5=$3; //@line 546 "ldebug.c"
      var $6=(($5+4)|0); //@line 546 "ldebug.c"
      var $7=HEAP32[(($6)>>2)]; //@line 546 "ldebug.c"
      var $8=(($7+8)|0); //@line 546 "ldebug.c"
      var $9=HEAP32[(($8)>>2)]; //@line 546 "ldebug.c"
      var $10=(($9)|0)==6; //@line 546 "ldebug.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 546 "ldebug.c"
    case 3: 
      var $12=$3; //@line 546 "ldebug.c"
      var $13=(($12+4)|0); //@line 546 "ldebug.c"
      var $14=HEAP32[(($13)>>2)]; //@line 546 "ldebug.c"
      var $15=(($14)|0); //@line 546 "ldebug.c"
      var $16=$15; //@line 546 "ldebug.c"
      var $17=HEAP32[(($16)>>2)]; //@line 546 "ldebug.c"
      var $18=$17; //@line 546 "ldebug.c"
      var $19=$18; //@line 546 "ldebug.c"
      var $20=(($19+6)|0); //@line 546 "ldebug.c"
      var $21=HEAP8[($20)]; //@line 546 "ldebug.c"
      var $22=(($21 << 24) >> 24)!=0; //@line 546 "ldebug.c"
      if ($22) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 546 "ldebug.c"
    case 4: 
      var $24=$3; //@line 546 "ldebug.c"
      var $25=(($24+20)|0); //@line 546 "ldebug.c"
      var $26=HEAP32[(($25)>>2)]; //@line 546 "ldebug.c"
      var $27=(($26)|0) > 0; //@line 546 "ldebug.c"
      if ($27) { __label__ = 7; break; } else { __label__ = 5; break; } //@line 546 "ldebug.c"
    case 5: 
      var $29=$3; //@line 546 "ldebug.c"
      var $30=((($29)-(24))|0); //@line 546 "ldebug.c"
      var $31=(($30+4)|0); //@line 546 "ldebug.c"
      var $32=HEAP32[(($31)>>2)]; //@line 546 "ldebug.c"
      var $33=(($32+8)|0); //@line 546 "ldebug.c"
      var $34=HEAP32[(($33)>>2)]; //@line 546 "ldebug.c"
      var $35=(($34)|0)==6; //@line 546 "ldebug.c"
      if ($35) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 546 "ldebug.c"
    case 6: 
      var $37=$3; //@line 546 "ldebug.c"
      var $38=((($37)-(24))|0); //@line 546 "ldebug.c"
      var $39=(($38+4)|0); //@line 546 "ldebug.c"
      var $40=HEAP32[(($39)>>2)]; //@line 546 "ldebug.c"
      var $41=(($40)|0); //@line 546 "ldebug.c"
      var $42=$41; //@line 546 "ldebug.c"
      var $43=HEAP32[(($42)>>2)]; //@line 546 "ldebug.c"
      var $44=$43; //@line 546 "ldebug.c"
      var $45=$44; //@line 546 "ldebug.c"
      var $46=(($45+6)|0); //@line 546 "ldebug.c"
      var $47=HEAP8[($46)]; //@line 546 "ldebug.c"
      var $48=(($47 << 24) >> 24)!=0; //@line 546 "ldebug.c"
      if ($48) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 546 "ldebug.c"
    case 7: 
      $1=0; //@line 547 "ldebug.c"
      __label__ = 13; break; //@line 547 "ldebug.c"
    case 8: 
      var $51=$3; //@line 548 "ldebug.c"
      var $52=((($51)-(24))|0); //@line 548 "ldebug.c"
      $3=$52; //@line 548 "ldebug.c"
      var $53=$2; //@line 549 "ldebug.c"
      var $54=$3; //@line 549 "ldebug.c"
      var $55=__Z9currentpcP9lua_StateP8CallInfo($53, $54); //@line 549 "ldebug.c"
      var $56=$3; //@line 549 "ldebug.c"
      var $57=(($56+4)|0); //@line 549 "ldebug.c"
      var $58=HEAP32[(($57)>>2)]; //@line 549 "ldebug.c"
      var $59=(($58)|0); //@line 549 "ldebug.c"
      var $60=$59; //@line 549 "ldebug.c"
      var $61=HEAP32[(($60)>>2)]; //@line 549 "ldebug.c"
      var $62=$61; //@line 549 "ldebug.c"
      var $63=$62; //@line 549 "ldebug.c"
      var $64=(($63+16)|0); //@line 549 "ldebug.c"
      var $65=HEAP32[(($64)>>2)]; //@line 549 "ldebug.c"
      var $66=(($65+12)|0); //@line 549 "ldebug.c"
      var $67=HEAP32[(($66)>>2)]; //@line 549 "ldebug.c"
      var $68=(($67+($55<<2))|0); //@line 549 "ldebug.c"
      var $69=HEAP32[(($68)>>2)]; //@line 549 "ldebug.c"
      $i=$69; //@line 549 "ldebug.c"
      var $70=$i; //@line 550 "ldebug.c"
      var $71=$70 >>> 0; //@line 550 "ldebug.c"
      var $72=$71 & 63; //@line 550 "ldebug.c"
      var $73=(($72)|0)==28; //@line 550 "ldebug.c"
      if ($73) { __label__ = 11; break; } else { __label__ = 9; break; } //@line 550 "ldebug.c"
    case 9: 
      var $75=$i; //@line 550 "ldebug.c"
      var $76=$75 >>> 0; //@line 550 "ldebug.c"
      var $77=$76 & 63; //@line 550 "ldebug.c"
      var $78=(($77)|0)==29; //@line 550 "ldebug.c"
      if ($78) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 550 "ldebug.c"
    case 10: 
      var $80=$i; //@line 550 "ldebug.c"
      var $81=$80 >>> 0; //@line 550 "ldebug.c"
      var $82=$81 & 63; //@line 550 "ldebug.c"
      var $83=(($82)|0)==33; //@line 550 "ldebug.c"
      if ($83) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 550 "ldebug.c"
    case 11: 
      var $85=$2; //@line 552 "ldebug.c"
      var $86=$3; //@line 552 "ldebug.c"
      var $87=$i; //@line 552 "ldebug.c"
      var $88=$87 >>> 6; //@line 552 "ldebug.c"
      var $89=$88 & 255; //@line 552 "ldebug.c"
      var $90=$4; //@line 552 "ldebug.c"
      var $91=__Z10getobjnameP9lua_StateP8CallInfoiPPKc($85, $86, $89, $90); //@line 552 "ldebug.c"
      $1=$91; //@line 552 "ldebug.c"
      __label__ = 13; break; //@line 552 "ldebug.c"
    case 12: 
      $1=0; //@line 554 "ldebug.c"
      __label__ = 13; break; //@line 554 "ldebug.c"
    case 13: 
      var $94=$1; //@line 555 "ldebug.c"
      ;
      return $94; //@line 555 "ldebug.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11getfuncnameP9lua_StateP8CallInfoPPKc["X"]=1;

function __Z16luaD_seterrorobjP9lua_StateiP10lua_TValue($L, $errcode, $oldtop) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i_o;
      var $i_o1;
      var $o2;
      var $o1;
      $1=$L;
      $2=$errcode;
      $3=$oldtop;
      var $4=$2; //@line 52 "ldo.c"
      if ((($4)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($4)|0) == 5) {
        __label__ = 4; break;
      }
      else if ((($4)|0) == 3 || (($4)|0) == 2) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $6=$3; //@line 54 "ldo.c"
      $i_o=$6; //@line 54 "ldo.c"
      var $7=$1; //@line 54 "ldo.c"
      var $8=__Z12luaS_newlstrP9lua_StatePKcj($7, ((STRING_TABLE.__str21)|0), 17); //@line 54 "ldo.c"
      var $9=$8; //@line 54 "ldo.c"
      var $10=$i_o; //@line 54 "ldo.c"
      var $11=(($10)|0); //@line 54 "ldo.c"
      var $12=$11; //@line 54 "ldo.c"
      HEAP32[(($12)>>2)]=$9; //@line 54 "ldo.c"
      var $13=$i_o; //@line 54 "ldo.c"
      var $14=(($13+8)|0); //@line 54 "ldo.c"
      HEAP32[(($14)>>2)]=4; //@line 54 "ldo.c"
      __label__ = 6; break; //@line 55 "ldo.c"
    case 4: 
      var $16=$3; //@line 58 "ldo.c"
      $i_o1=$16; //@line 58 "ldo.c"
      var $17=$1; //@line 58 "ldo.c"
      var $18=__Z12luaS_newlstrP9lua_StatePKcj($17, ((STRING_TABLE.__str122)|0), 23); //@line 58 "ldo.c"
      var $19=$18; //@line 58 "ldo.c"
      var $20=$i_o1; //@line 58 "ldo.c"
      var $21=(($20)|0); //@line 58 "ldo.c"
      var $22=$21; //@line 58 "ldo.c"
      HEAP32[(($22)>>2)]=$19; //@line 58 "ldo.c"
      var $23=$i_o1; //@line 58 "ldo.c"
      var $24=(($23+8)|0); //@line 58 "ldo.c"
      HEAP32[(($24)>>2)]=4; //@line 58 "ldo.c"
      __label__ = 6; break; //@line 59 "ldo.c"
    case 5: 
      var $26=$1; //@line 63 "ldo.c"
      var $27=(($26+8)|0); //@line 63 "ldo.c"
      var $28=HEAP32[(($27)>>2)]; //@line 63 "ldo.c"
      var $29=((($28)-(12))|0); //@line 63 "ldo.c"
      $o2=$29; //@line 63 "ldo.c"
      var $30=$3; //@line 63 "ldo.c"
      $o1=$30; //@line 63 "ldo.c"
      var $31=$o1; //@line 63 "ldo.c"
      var $32=(($31)|0); //@line 63 "ldo.c"
      var $33=$o2; //@line 63 "ldo.c"
      var $34=(($33)|0); //@line 63 "ldo.c"
      var $35=$32; //@line 63 "ldo.c"
      var $36=$34; //@line 63 "ldo.c"
      HEAP32[(($35)>>2)]=HEAP32[(($36)>>2)];HEAP32[((($35)+(4))>>2)]=HEAP32[((($36)+(4))>>2)]; //@line 63 "ldo.c"
      var $37=$o2; //@line 63 "ldo.c"
      var $38=(($37+8)|0); //@line 63 "ldo.c"
      var $39=HEAP32[(($38)>>2)]; //@line 63 "ldo.c"
      var $40=$o1; //@line 63 "ldo.c"
      var $41=(($40+8)|0); //@line 63 "ldo.c"
      HEAP32[(($41)>>2)]=$39; //@line 63 "ldo.c"
      __label__ = 6; break; //@line 64 "ldo.c"
    case 6: 
      var $43=$3; //@line 67 "ldo.c"
      var $44=(($43+12)|0); //@line 67 "ldo.c"
      var $45=$1; //@line 67 "ldo.c"
      var $46=(($45+8)|0); //@line 67 "ldo.c"
      HEAP32[(($46)>>2)]=$44; //@line 67 "ldo.c"
      ;
      return; //@line 68 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z16luaD_seterrorobjP9lua_StateiP10lua_TValue["X"]=1;

function __Z10resetstackP9lua_Statei($L, $status) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$status;
  var $3=$1; //@line 82 "ldo.c"
  var $4=(($3+40)|0); //@line 82 "ldo.c"
  var $5=HEAP32[(($4)>>2)]; //@line 82 "ldo.c"
  var $6=$1; //@line 82 "ldo.c"
  var $7=(($6+20)|0); //@line 82 "ldo.c"
  HEAP32[(($7)>>2)]=$5; //@line 82 "ldo.c"
  var $8=$1; //@line 83 "ldo.c"
  var $9=(($8+20)|0); //@line 83 "ldo.c"
  var $10=HEAP32[(($9)>>2)]; //@line 83 "ldo.c"
  var $11=(($10)|0); //@line 83 "ldo.c"
  var $12=HEAP32[(($11)>>2)]; //@line 83 "ldo.c"
  var $13=$1; //@line 83 "ldo.c"
  var $14=(($13+12)|0); //@line 83 "ldo.c"
  HEAP32[(($14)>>2)]=$12; //@line 83 "ldo.c"
  var $15=$1; //@line 84 "ldo.c"
  var $16=$1; //@line 84 "ldo.c"
  var $17=(($16+12)|0); //@line 84 "ldo.c"
  var $18=HEAP32[(($17)>>2)]; //@line 84 "ldo.c"
  __Z10luaF_closeP9lua_StateP10lua_TValue($15, $18); //@line 84 "ldo.c"
  var $19=$1; //@line 85 "ldo.c"
  var $20=$2; //@line 85 "ldo.c"
  var $21=$1; //@line 85 "ldo.c"
  var $22=(($21+12)|0); //@line 85 "ldo.c"
  var $23=HEAP32[(($22)>>2)]; //@line 85 "ldo.c"
  __Z16luaD_seterrorobjP9lua_StateiP10lua_TValue($19, $20, $23); //@line 85 "ldo.c"
  var $24=$1; //@line 86 "ldo.c"
  var $25=(($24+54)|0); //@line 86 "ldo.c"
  var $26=HEAP16[(($25)>>1)]; //@line 86 "ldo.c"
  var $27=$1; //@line 86 "ldo.c"
  var $28=(($27+52)|0); //@line 86 "ldo.c"
  HEAP16[(($28)>>1)]=$26; //@line 86 "ldo.c"
  var $29=$1; //@line 87 "ldo.c"
  var $30=(($29+57)|0); //@line 87 "ldo.c"
  HEAP8[($30)]=1; //@line 87 "ldo.c"
  var $31=$1; //@line 88 "ldo.c"
  __Z19restore_stack_limitP9lua_State($31); //@line 88 "ldo.c"
  var $32=$1; //@line 89 "ldo.c"
  var $33=(($32+108)|0); //@line 89 "ldo.c"
  HEAP32[(($33)>>2)]=0; //@line 89 "ldo.c"
  var $34=$1; //@line 90 "ldo.c"
  var $35=(($34+104)|0); //@line 90 "ldo.c"
  HEAP32[(($35)>>2)]=0; //@line 90 "ldo.c"
  ;
  return; //@line 91 "ldo.c"
}


function __Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($L, $f, $ud) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lj=__stackBase__;
      var $4;
      $1=$L;
      $2=$f;
      $3=$ud;
      var $5=(($lj+8)|0); //@line 113 "ldo.c"
      HEAP32[(($5)>>2)]=0; //@line 113 "ldo.c"
      var $6=$1; //@line 114 "ldo.c"
      var $7=(($6+104)|0); //@line 114 "ldo.c"
      var $8=HEAP32[(($7)>>2)]; //@line 114 "ldo.c"
      var $9=(($lj)|0); //@line 114 "ldo.c"
      HEAP32[(($9)>>2)]=$8; //@line 114 "ldo.c"
      var $10=$1; //@line 115 "ldo.c"
      var $11=(($10+104)|0); //@line 115 "ldo.c"
      HEAP32[(($11)>>2)]=$lj; //@line 115 "ldo.c"
      var $12=$2; //@line 116 "ldo.c"
      var $13=$1; //@line 116 "ldo.c"
      var $14=$3; //@line 116 "ldo.c"
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[$12]($13, $14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      __label__ = 8; break; //@line 116 "ldo.c"
    case 4: 
      var $17=$4; //@line 116 "ldo.c"
      var $18=___cxa_begin_catch($17); //@line 116 "ldo.c"
      var $19=(($lj+8)|0); //@line 116 "ldo.c"
      var $20=HEAP32[(($19)>>2)]; //@line 116 "ldo.c"
      var $21=(($20)|0)==0; //@line 116 "ldo.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 116 "ldo.c"
    case 5: 
      var $23=(($lj+8)|0); //@line 116 "ldo.c"
      HEAP32[(($23)>>2)]=-1; //@line 116 "ldo.c"
      __label__ = 7; break; //@line 116 "ldo.c"
    case 6: 
      var $25=_llvm_eh_exception(); //@line 116 "ldo.c"
      $4=$25; //@line 116 "ldo.c"
      var $26=_llvm_eh_selector($25, 6, 0); //@line 116 "ldo.c"
      __label__ = 4; break; //@line 116 "ldo.c"
    case 7: 
      ___cxa_end_catch(); //@line 116 "ldo.c"
      __label__ = 8; break; //@line 116 "ldo.c"
    case 8: 
      var $29=(($lj)|0); //@line 119 "ldo.c"
      var $30=HEAP32[(($29)>>2)]; //@line 119 "ldo.c"
      var $31=$1; //@line 119 "ldo.c"
      var $32=(($31+104)|0); //@line 119 "ldo.c"
      HEAP32[(($32)>>2)]=$30; //@line 119 "ldo.c"
      var $33=(($lj+8)|0); //@line 120 "ldo.c"
      var $34=HEAP32[(($33)>>2)]; //@line 120 "ldo.c"
      STACKTOP = __stackBase__;
      return $34; //@line 120 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z17luaD_reallocstackP9lua_Statei($L, $newsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $oldstack;
      var $realsize;
      $1=$L;
      $2=$newsize;
      var $3=$1; //@line 142 "ldo.c"
      var $4=(($3+32)|0); //@line 142 "ldo.c"
      var $5=HEAP32[(($4)>>2)]; //@line 142 "ldo.c"
      $oldstack=$5; //@line 142 "ldo.c"
      var $6=$2; //@line 143 "ldo.c"
      var $7=((($6)+(1))|0); //@line 143 "ldo.c"
      var $8=((($7)+(5))|0); //@line 143 "ldo.c"
      $realsize=$8; //@line 143 "ldo.c"
      var $9=$realsize; //@line 145 "ldo.c"
      var $10=((($9)+(1))|0); //@line 145 "ldo.c"
      var $11=(($10)>>>0) <= 357913941; //@line 145 "ldo.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 145 "ldo.c"
    case 3: 
      var $13=$1; //@line 145 "ldo.c"
      var $14=$1; //@line 145 "ldo.c"
      var $15=(($14+32)|0); //@line 145 "ldo.c"
      var $16=HEAP32[(($15)>>2)]; //@line 145 "ldo.c"
      var $17=$16; //@line 145 "ldo.c"
      var $18=$1; //@line 145 "ldo.c"
      var $19=(($18+44)|0); //@line 145 "ldo.c"
      var $20=HEAP32[(($19)>>2)]; //@line 145 "ldo.c"
      var $21=((($20)*(12))|0); //@line 145 "ldo.c"
      var $22=$realsize; //@line 145 "ldo.c"
      var $23=((($22)*(12))|0); //@line 145 "ldo.c"
      var $24=__Z13luaM_realloc_P9lua_StatePvjj($13, $17, $21, $23); //@line 145 "ldo.c"
      var $29 = $24;__label__ = 5; break; //@line 145 "ldo.c"
    case 4: 
      var $26=$1; //@line 145 "ldo.c"
      var $27=__Z11luaM_toobigP9lua_State($26); //@line 145 "ldo.c"
      var $29 = $27;__label__ = 5; break; //@line 145 "ldo.c"
    case 5: 
      var $29; //@line 145 "ldo.c"
      var $30=$29; //@line 145 "ldo.c"
      var $31=$1; //@line 145 "ldo.c"
      var $32=(($31+32)|0); //@line 145 "ldo.c"
      HEAP32[(($32)>>2)]=$30; //@line 145 "ldo.c"
      var $33=$realsize; //@line 146 "ldo.c"
      var $34=$1; //@line 146 "ldo.c"
      var $35=(($34+44)|0); //@line 146 "ldo.c"
      HEAP32[(($35)>>2)]=$33; //@line 146 "ldo.c"
      var $36=$1; //@line 147 "ldo.c"
      var $37=(($36+32)|0); //@line 147 "ldo.c"
      var $38=HEAP32[(($37)>>2)]; //@line 147 "ldo.c"
      var $39=$2; //@line 147 "ldo.c"
      var $40=(($38+($39)*(12))|0); //@line 147 "ldo.c"
      var $41=$1; //@line 147 "ldo.c"
      var $42=(($41+28)|0); //@line 147 "ldo.c"
      HEAP32[(($42)>>2)]=$40; //@line 147 "ldo.c"
      var $43=$1; //@line 148 "ldo.c"
      var $44=$oldstack; //@line 148 "ldo.c"
      __Z12correctstackP9lua_StateP10lua_TValue($43, $44); //@line 148 "ldo.c"
      ;
      return; //@line 149 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z17luaD_reallocstackP9lua_Statei["X"]=1;

function __Z10luaD_throwP9lua_Statei($L, $errcode) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$errcode;
      var $3=$1; //@line 95 "ldo.c"
      var $4=(($3+104)|0); //@line 95 "ldo.c"
      var $5=HEAP32[(($4)>>2)]; //@line 95 "ldo.c"
      var $6=(($5)|0)!=0; //@line 95 "ldo.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 95 "ldo.c"
    case 3: 
      var $8=$2; //@line 96 "ldo.c"
      var $9=$1; //@line 96 "ldo.c"
      var $10=(($9+104)|0); //@line 96 "ldo.c"
      var $11=HEAP32[(($10)>>2)]; //@line 96 "ldo.c"
      var $12=(($11+8)|0); //@line 96 "ldo.c"
      HEAP32[(($12)>>2)]=$8; //@line 96 "ldo.c"
      var $13=___cxa_allocate_exception(4); //@line 97 "ldo.c"
      var $14=$13; //@line 97 "ldo.c"
      var $15=$1; //@line 97 "ldo.c"
      var $16=(($15+104)|0); //@line 97 "ldo.c"
      var $17=HEAP32[(($16)>>2)]; //@line 97 "ldo.c"
      HEAP32[(($14)>>2)]=$17; //@line 97 "ldo.c"
      ___cxa_throw($13, __ZTIP11lua_longjmp, 0); //@line 97 "ldo.c"
      throw "Reached an unreachable!" //@line 97 "ldo.c"
    case 4: 
      var $19=$2; //@line 100 "ldo.c"
      var $20=(($19) & 255); //@line 100 "ldo.c"
      var $21=$1; //@line 100 "ldo.c"
      var $22=(($21+6)|0); //@line 100 "ldo.c"
      HEAP8[($22)]=$20; //@line 100 "ldo.c"
      var $23=$1; //@line 101 "ldo.c"
      var $24=(($23+16)|0); //@line 101 "ldo.c"
      var $25=HEAP32[(($24)>>2)]; //@line 101 "ldo.c"
      var $26=(($25+88)|0); //@line 101 "ldo.c"
      var $27=HEAP32[(($26)>>2)]; //@line 101 "ldo.c"
      var $28=(($27)|0)!=0; //@line 101 "ldo.c"
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 101 "ldo.c"
    case 5: 
      var $30=$1; //@line 102 "ldo.c"
      var $31=$2; //@line 102 "ldo.c"
      __Z10resetstackP9lua_Statei($30, $31); //@line 102 "ldo.c"
      var $32=$1; //@line 104 "ldo.c"
      var $33=(($32+16)|0); //@line 104 "ldo.c"
      var $34=HEAP32[(($33)>>2)]; //@line 104 "ldo.c"
      var $35=(($34+88)|0); //@line 104 "ldo.c"
      var $36=HEAP32[(($35)>>2)]; //@line 104 "ldo.c"
      var $37=$1; //@line 104 "ldo.c"
      var $38=FUNCTION_TABLE[$36]($37); //@line 104 "ldo.c"
      __label__ = 6; break; //@line 105 "ldo.c"
    case 6: 
      _exit(1); //@line 106 "ldo.c"
      throw "Reached an unreachable!" //@line 106 "ldo.c"
      ;
      return; //@line 108 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaD_reallocCIP9lua_Statei($L, $newsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $oldci;
      $1=$L;
      $2=$newsize;
      var $3=$1; //@line 153 "ldo.c"
      var $4=(($3+40)|0); //@line 153 "ldo.c"
      var $5=HEAP32[(($4)>>2)]; //@line 153 "ldo.c"
      $oldci=$5; //@line 153 "ldo.c"
      var $6=$2; //@line 154 "ldo.c"
      var $7=((($6)+(1))|0); //@line 154 "ldo.c"
      var $8=(($7)>>>0) <= 178956970; //@line 154 "ldo.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 154 "ldo.c"
    case 3: 
      var $10=$1; //@line 154 "ldo.c"
      var $11=$1; //@line 154 "ldo.c"
      var $12=(($11+40)|0); //@line 154 "ldo.c"
      var $13=HEAP32[(($12)>>2)]; //@line 154 "ldo.c"
      var $14=$13; //@line 154 "ldo.c"
      var $15=$1; //@line 154 "ldo.c"
      var $16=(($15+48)|0); //@line 154 "ldo.c"
      var $17=HEAP32[(($16)>>2)]; //@line 154 "ldo.c"
      var $18=((($17)*(24))|0); //@line 154 "ldo.c"
      var $19=$2; //@line 154 "ldo.c"
      var $20=((($19)*(24))|0); //@line 154 "ldo.c"
      var $21=__Z13luaM_realloc_P9lua_StatePvjj($10, $14, $18, $20); //@line 154 "ldo.c"
      var $26 = $21;__label__ = 5; break; //@line 154 "ldo.c"
    case 4: 
      var $23=$1; //@line 154 "ldo.c"
      var $24=__Z11luaM_toobigP9lua_State($23); //@line 154 "ldo.c"
      var $26 = $24;__label__ = 5; break; //@line 154 "ldo.c"
    case 5: 
      var $26; //@line 154 "ldo.c"
      var $27=$26; //@line 154 "ldo.c"
      var $28=$1; //@line 154 "ldo.c"
      var $29=(($28+40)|0); //@line 154 "ldo.c"
      HEAP32[(($29)>>2)]=$27; //@line 154 "ldo.c"
      var $30=$2; //@line 155 "ldo.c"
      var $31=$1; //@line 155 "ldo.c"
      var $32=(($31+48)|0); //@line 155 "ldo.c"
      HEAP32[(($32)>>2)]=$30; //@line 155 "ldo.c"
      var $33=$1; //@line 156 "ldo.c"
      var $34=(($33+20)|0); //@line 156 "ldo.c"
      var $35=HEAP32[(($34)>>2)]; //@line 156 "ldo.c"
      var $36=$oldci; //@line 156 "ldo.c"
      var $37=$35; //@line 156 "ldo.c"
      var $38=$36; //@line 156 "ldo.c"
      var $39=((($37)-($38))|0); //@line 156 "ldo.c"
      var $40=((((($39)|0))/(24))&-1); //@line 156 "ldo.c"
      var $41=$1; //@line 156 "ldo.c"
      var $42=(($41+40)|0); //@line 156 "ldo.c"
      var $43=HEAP32[(($42)>>2)]; //@line 156 "ldo.c"
      var $44=(($43+($40)*(24))|0); //@line 156 "ldo.c"
      var $45=$1; //@line 156 "ldo.c"
      var $46=(($45+20)|0); //@line 156 "ldo.c"
      HEAP32[(($46)>>2)]=$44; //@line 156 "ldo.c"
      var $47=$1; //@line 157 "ldo.c"
      var $48=(($47+40)|0); //@line 157 "ldo.c"
      var $49=HEAP32[(($48)>>2)]; //@line 157 "ldo.c"
      var $50=$1; //@line 157 "ldo.c"
      var $51=(($50+48)|0); //@line 157 "ldo.c"
      var $52=HEAP32[(($51)>>2)]; //@line 157 "ldo.c"
      var $53=(($49+($52)*(24))|0); //@line 157 "ldo.c"
      var $54=((($53)-(24))|0); //@line 157 "ldo.c"
      var $55=$1; //@line 157 "ldo.c"
      var $56=(($55+36)|0); //@line 157 "ldo.c"
      HEAP32[(($56)>>2)]=$54; //@line 157 "ldo.c"
      ;
      return; //@line 158 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14luaD_reallocCIP9lua_Statei["X"]=1;

function __Z14luaD_growstackP9lua_Statei($L, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$n;
      var $3=$2; //@line 162 "ldo.c"
      var $4=$1; //@line 162 "ldo.c"
      var $5=(($4+44)|0); //@line 162 "ldo.c"
      var $6=HEAP32[(($5)>>2)]; //@line 162 "ldo.c"
      var $7=(($3)|0) <= (($6)|0); //@line 162 "ldo.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 162 "ldo.c"
    case 3: 
      var $9=$1; //@line 163 "ldo.c"
      var $10=$1; //@line 163 "ldo.c"
      var $11=(($10+44)|0); //@line 163 "ldo.c"
      var $12=HEAP32[(($11)>>2)]; //@line 163 "ldo.c"
      var $13=((($12<<1))|0); //@line 163 "ldo.c"
      __Z17luaD_reallocstackP9lua_Statei($9, $13); //@line 163 "ldo.c"
      __label__ = 5; break; //@line 163 "ldo.c"
    case 4: 
      var $15=$1; //@line 165 "ldo.c"
      var $16=$1; //@line 165 "ldo.c"
      var $17=(($16+44)|0); //@line 165 "ldo.c"
      var $18=HEAP32[(($17)>>2)]; //@line 165 "ldo.c"
      var $19=$2; //@line 165 "ldo.c"
      var $20=((($18)+($19))|0); //@line 165 "ldo.c"
      __Z17luaD_reallocstackP9lua_Statei($15, $20); //@line 165 "ldo.c"
      __label__ = 5; break; //@line 165 "ldo.c"
    case 5: 
      ;
      return; //@line 166 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaD_callhookP9lua_Stateii($L, $event, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; _memset(__stackBase__, 0, 100);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $hook;
      var $top;
      var $ci_top;
      var $ar=__stackBase__;
      $1=$L;
      $2=$event;
      $3=$line;
      var $4=$1; //@line 182 "ldo.c"
      var $5=(($4+68)|0); //@line 182 "ldo.c"
      var $6=HEAP32[(($5)>>2)]; //@line 182 "ldo.c"
      $hook=$6; //@line 182 "ldo.c"
      var $7=$hook; //@line 183 "ldo.c"
      var $8=(($7)|0)!=0; //@line 183 "ldo.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 183 "ldo.c"
    case 3: 
      var $10=$1; //@line 183 "ldo.c"
      var $11=(($10+57)|0); //@line 183 "ldo.c"
      var $12=HEAP8[($11)]; //@line 183 "ldo.c"
      var $13=(($12 << 24) >> 24)!=0; //@line 183 "ldo.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 11; break; } //@line 183 "ldo.c"
    case 4: 
      var $15=$1; //@line 184 "ldo.c"
      var $16=(($15+8)|0); //@line 184 "ldo.c"
      var $17=HEAP32[(($16)>>2)]; //@line 184 "ldo.c"
      var $18=$17; //@line 184 "ldo.c"
      var $19=$1; //@line 184 "ldo.c"
      var $20=(($19+32)|0); //@line 184 "ldo.c"
      var $21=HEAP32[(($20)>>2)]; //@line 184 "ldo.c"
      var $22=$21; //@line 184 "ldo.c"
      var $23=$18; //@line 184 "ldo.c"
      var $24=$22; //@line 184 "ldo.c"
      var $25=((($23)-($24))|0); //@line 184 "ldo.c"
      $top=$25; //@line 184 "ldo.c"
      var $26=$1; //@line 185 "ldo.c"
      var $27=(($26+20)|0); //@line 185 "ldo.c"
      var $28=HEAP32[(($27)>>2)]; //@line 185 "ldo.c"
      var $29=(($28+8)|0); //@line 185 "ldo.c"
      var $30=HEAP32[(($29)>>2)]; //@line 185 "ldo.c"
      var $31=$30; //@line 185 "ldo.c"
      var $32=$1; //@line 185 "ldo.c"
      var $33=(($32+32)|0); //@line 185 "ldo.c"
      var $34=HEAP32[(($33)>>2)]; //@line 185 "ldo.c"
      var $35=$34; //@line 185 "ldo.c"
      var $36=$31; //@line 185 "ldo.c"
      var $37=$35; //@line 185 "ldo.c"
      var $38=((($36)-($37))|0); //@line 185 "ldo.c"
      $ci_top=$38; //@line 185 "ldo.c"
      var $39=$2; //@line 187 "ldo.c"
      var $40=(($ar)|0); //@line 187 "ldo.c"
      HEAP32[(($40)>>2)]=$39; //@line 187 "ldo.c"
      var $41=$3; //@line 188 "ldo.c"
      var $42=(($ar+20)|0); //@line 188 "ldo.c"
      HEAP32[(($42)>>2)]=$41; //@line 188 "ldo.c"
      var $43=$2; //@line 189 "ldo.c"
      var $44=(($43)|0)==4; //@line 189 "ldo.c"
      if ($44) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 189 "ldo.c"
    case 5: 
      var $46=(($ar+96)|0); //@line 190 "ldo.c"
      HEAP32[(($46)>>2)]=0; //@line 190 "ldo.c"
      __label__ = 7; break; //@line 190 "ldo.c"
    case 6: 
      var $48=$1; //@line 192 "ldo.c"
      var $49=(($48+20)|0); //@line 192 "ldo.c"
      var $50=HEAP32[(($49)>>2)]; //@line 192 "ldo.c"
      var $51=$1; //@line 192 "ldo.c"
      var $52=(($51+40)|0); //@line 192 "ldo.c"
      var $53=HEAP32[(($52)>>2)]; //@line 192 "ldo.c"
      var $54=$50; //@line 192 "ldo.c"
      var $55=$53; //@line 192 "ldo.c"
      var $56=((($54)-($55))|0); //@line 192 "ldo.c"
      var $57=((((($56)|0))/(24))&-1); //@line 192 "ldo.c"
      var $58=(($ar+96)|0); //@line 192 "ldo.c"
      HEAP32[(($58)>>2)]=$57; //@line 192 "ldo.c"
      __label__ = 7; break; //@line 192 "ldo.c"
    case 7: 
      var $60=$1; //@line 193 "ldo.c"
      var $61=(($60+28)|0); //@line 193 "ldo.c"
      var $62=HEAP32[(($61)>>2)]; //@line 193 "ldo.c"
      var $63=$62; //@line 193 "ldo.c"
      var $64=$1; //@line 193 "ldo.c"
      var $65=(($64+8)|0); //@line 193 "ldo.c"
      var $66=HEAP32[(($65)>>2)]; //@line 193 "ldo.c"
      var $67=$66; //@line 193 "ldo.c"
      var $68=$63; //@line 193 "ldo.c"
      var $69=$67; //@line 193 "ldo.c"
      var $70=((($68)-($69))|0); //@line 193 "ldo.c"
      var $71=(($70)|0) <= 240; //@line 193 "ldo.c"
      if ($71) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 193 "ldo.c"
    case 8: 
      var $73=$1; //@line 193 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($73, 20); //@line 193 "ldo.c"
      __label__ = 10; break; //@line 193 "ldo.c"
    case 9: 
      __label__ = 10; break; //@line 193 "ldo.c"
    case 10: 
      var $76=$1; //@line 194 "ldo.c"
      var $77=(($76+8)|0); //@line 194 "ldo.c"
      var $78=HEAP32[(($77)>>2)]; //@line 194 "ldo.c"
      var $79=(($78+240)|0); //@line 194 "ldo.c"
      var $80=$1; //@line 194 "ldo.c"
      var $81=(($80+20)|0); //@line 194 "ldo.c"
      var $82=HEAP32[(($81)>>2)]; //@line 194 "ldo.c"
      var $83=(($82+8)|0); //@line 194 "ldo.c"
      HEAP32[(($83)>>2)]=$79; //@line 194 "ldo.c"
      var $84=$1; //@line 196 "ldo.c"
      var $85=(($84+57)|0); //@line 196 "ldo.c"
      HEAP8[($85)]=0; //@line 196 "ldo.c"
      var $86=$hook; //@line 198 "ldo.c"
      var $87=$1; //@line 198 "ldo.c"
      FUNCTION_TABLE[$86]($87, $ar); //@line 198 "ldo.c"
      var $88=$1; //@line 201 "ldo.c"
      var $89=(($88+57)|0); //@line 201 "ldo.c"
      HEAP8[($89)]=1; //@line 201 "ldo.c"
      var $90=$1; //@line 202 "ldo.c"
      var $91=(($90+32)|0); //@line 202 "ldo.c"
      var $92=HEAP32[(($91)>>2)]; //@line 202 "ldo.c"
      var $93=$92; //@line 202 "ldo.c"
      var $94=$ci_top; //@line 202 "ldo.c"
      var $95=(($93+$94)|0); //@line 202 "ldo.c"
      var $96=$95; //@line 202 "ldo.c"
      var $97=$1; //@line 202 "ldo.c"
      var $98=(($97+20)|0); //@line 202 "ldo.c"
      var $99=HEAP32[(($98)>>2)]; //@line 202 "ldo.c"
      var $100=(($99+8)|0); //@line 202 "ldo.c"
      HEAP32[(($100)>>2)]=$96; //@line 202 "ldo.c"
      var $101=$1; //@line 203 "ldo.c"
      var $102=(($101+32)|0); //@line 203 "ldo.c"
      var $103=HEAP32[(($102)>>2)]; //@line 203 "ldo.c"
      var $104=$103; //@line 203 "ldo.c"
      var $105=$top; //@line 203 "ldo.c"
      var $106=(($104+$105)|0); //@line 203 "ldo.c"
      var $107=$106; //@line 203 "ldo.c"
      var $108=$1; //@line 203 "ldo.c"
      var $109=(($108+8)|0); //@line 203 "ldo.c"
      HEAP32[(($109)>>2)]=$107; //@line 203 "ldo.c"
      __label__ = 11; break; //@line 204 "ldo.c"
    case 11: 
      STACKTOP = __stackBase__;
      return; //@line 205 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaD_callhookP9lua_Stateii["X"]=1;

function __Z12luaD_precallP9lua_StateP10lua_TValuei($L, $func, $nresults) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cl;
      var $funcr;
      var $ci;
      var $st;
      var $base;
      var $p;
      var $nargs;
      var $ci1;
      var $n;
      $2=$L;
      $3=$func;
      $4=$nresults;
      var $5=$3; //@line 267 "ldo.c"
      var $6=(($5+8)|0); //@line 267 "ldo.c"
      var $7=HEAP32[(($6)>>2)]; //@line 267 "ldo.c"
      var $8=(($7)|0)==6; //@line 267 "ldo.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 267 "ldo.c"
    case 3: 
      var $10=$2; //@line 268 "ldo.c"
      var $11=$3; //@line 268 "ldo.c"
      var $12=__Z9tryfuncTMP9lua_StateP10lua_TValue($10, $11); //@line 268 "ldo.c"
      $3=$12; //@line 268 "ldo.c"
      __label__ = 4; break; //@line 268 "ldo.c"
    case 4: 
      var $14=$3; //@line 269 "ldo.c"
      var $15=$14; //@line 269 "ldo.c"
      var $16=$2; //@line 269 "ldo.c"
      var $17=(($16+32)|0); //@line 269 "ldo.c"
      var $18=HEAP32[(($17)>>2)]; //@line 269 "ldo.c"
      var $19=$18; //@line 269 "ldo.c"
      var $20=$15; //@line 269 "ldo.c"
      var $21=$19; //@line 269 "ldo.c"
      var $22=((($20)-($21))|0); //@line 269 "ldo.c"
      $funcr=$22; //@line 269 "ldo.c"
      var $23=$3; //@line 270 "ldo.c"
      var $24=(($23)|0); //@line 270 "ldo.c"
      var $25=$24; //@line 270 "ldo.c"
      var $26=HEAP32[(($25)>>2)]; //@line 270 "ldo.c"
      var $27=$26; //@line 270 "ldo.c"
      var $28=$27; //@line 270 "ldo.c"
      $cl=$28; //@line 270 "ldo.c"
      var $29=$2; //@line 271 "ldo.c"
      var $30=(($29+24)|0); //@line 271 "ldo.c"
      var $31=HEAP32[(($30)>>2)]; //@line 271 "ldo.c"
      var $32=$2; //@line 271 "ldo.c"
      var $33=(($32+20)|0); //@line 271 "ldo.c"
      var $34=HEAP32[(($33)>>2)]; //@line 271 "ldo.c"
      var $35=(($34+12)|0); //@line 271 "ldo.c"
      HEAP32[(($35)>>2)]=$31; //@line 271 "ldo.c"
      var $36=$cl; //@line 272 "ldo.c"
      var $37=(($36+6)|0); //@line 272 "ldo.c"
      var $38=HEAP8[($37)]; //@line 272 "ldo.c"
      var $39=(($38 << 24) >> 24)!=0; //@line 272 "ldo.c"
      if ($39) { __label__ = 23; break; } else { __label__ = 5; break; } //@line 272 "ldo.c"
    case 5: 
      var $41=$cl; //@line 275 "ldo.c"
      var $42=(($41+16)|0); //@line 275 "ldo.c"
      var $43=HEAP32[(($42)>>2)]; //@line 275 "ldo.c"
      $p=$43; //@line 275 "ldo.c"
      var $44=$2; //@line 276 "ldo.c"
      var $45=(($44+28)|0); //@line 276 "ldo.c"
      var $46=HEAP32[(($45)>>2)]; //@line 276 "ldo.c"
      var $47=$46; //@line 276 "ldo.c"
      var $48=$2; //@line 276 "ldo.c"
      var $49=(($48+8)|0); //@line 276 "ldo.c"
      var $50=HEAP32[(($49)>>2)]; //@line 276 "ldo.c"
      var $51=$50; //@line 276 "ldo.c"
      var $52=$47; //@line 276 "ldo.c"
      var $53=$51; //@line 276 "ldo.c"
      var $54=((($52)-($53))|0); //@line 276 "ldo.c"
      var $55=$p; //@line 276 "ldo.c"
      var $56=(($55+75)|0); //@line 276 "ldo.c"
      var $57=HEAPU8[($56)]; //@line 276 "ldo.c"
      var $58=(($57)&255); //@line 276 "ldo.c"
      var $59=((($58)*(12))|0); //@line 276 "ldo.c"
      var $60=(($54)|0) <= (($59)|0); //@line 276 "ldo.c"
      if ($60) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 276 "ldo.c"
    case 6: 
      var $62=$2; //@line 276 "ldo.c"
      var $63=$p; //@line 276 "ldo.c"
      var $64=(($63+75)|0); //@line 276 "ldo.c"
      var $65=HEAPU8[($64)]; //@line 276 "ldo.c"
      var $66=(($65)&255); //@line 276 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($62, $66); //@line 276 "ldo.c"
      __label__ = 8; break; //@line 276 "ldo.c"
    case 7: 
      __label__ = 8; break; //@line 276 "ldo.c"
    case 8: 
      var $69=$2; //@line 277 "ldo.c"
      var $70=(($69+32)|0); //@line 277 "ldo.c"
      var $71=HEAP32[(($70)>>2)]; //@line 277 "ldo.c"
      var $72=$71; //@line 277 "ldo.c"
      var $73=$funcr; //@line 277 "ldo.c"
      var $74=(($72+$73)|0); //@line 277 "ldo.c"
      var $75=$74; //@line 277 "ldo.c"
      $3=$75; //@line 277 "ldo.c"
      var $76=$p; //@line 278 "ldo.c"
      var $77=(($76+74)|0); //@line 278 "ldo.c"
      var $78=HEAP8[($77)]; //@line 278 "ldo.c"
      var $79=(($78 << 24) >> 24)!=0; //@line 278 "ldo.c"
      if ($79) { __label__ = 12; break; } else { __label__ = 9; break; } //@line 278 "ldo.c"
    case 9: 
      var $81=$3; //@line 279 "ldo.c"
      var $82=(($81+12)|0); //@line 279 "ldo.c"
      $base=$82; //@line 279 "ldo.c"
      var $83=$2; //@line 280 "ldo.c"
      var $84=(($83+8)|0); //@line 280 "ldo.c"
      var $85=HEAPU32[(($84)>>2)]; //@line 280 "ldo.c"
      var $86=$base; //@line 280 "ldo.c"
      var $87=$p; //@line 280 "ldo.c"
      var $88=(($87+73)|0); //@line 280 "ldo.c"
      var $89=HEAPU8[($88)]; //@line 280 "ldo.c"
      var $90=(($89)&255); //@line 280 "ldo.c"
      var $91=(($86+($90)*(12))|0); //@line 280 "ldo.c"
      var $92=(($85)>>>0) > (($91)>>>0); //@line 280 "ldo.c"
      if ($92) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 280 "ldo.c"
    case 10: 
      var $94=$base; //@line 281 "ldo.c"
      var $95=$p; //@line 281 "ldo.c"
      var $96=(($95+73)|0); //@line 281 "ldo.c"
      var $97=HEAPU8[($96)]; //@line 281 "ldo.c"
      var $98=(($97)&255); //@line 281 "ldo.c"
      var $99=(($94+($98)*(12))|0); //@line 281 "ldo.c"
      var $100=$2; //@line 281 "ldo.c"
      var $101=(($100+8)|0); //@line 281 "ldo.c"
      HEAP32[(($101)>>2)]=$99; //@line 281 "ldo.c"
      __label__ = 11; break; //@line 281 "ldo.c"
    case 11: 
      __label__ = 13; break; //@line 282 "ldo.c"
    case 12: 
      var $104=$2; //@line 284 "ldo.c"
      var $105=(($104+8)|0); //@line 284 "ldo.c"
      var $106=HEAP32[(($105)>>2)]; //@line 284 "ldo.c"
      var $107=$3; //@line 284 "ldo.c"
      var $108=$106; //@line 284 "ldo.c"
      var $109=$107; //@line 284 "ldo.c"
      var $110=((($108)-($109))|0); //@line 284 "ldo.c"
      var $111=((((($110)|0))/(12))&-1); //@line 284 "ldo.c"
      var $112=((($111)-(1))|0); //@line 284 "ldo.c"
      $nargs=$112; //@line 284 "ldo.c"
      var $113=$2; //@line 285 "ldo.c"
      var $114=$p; //@line 285 "ldo.c"
      var $115=$nargs; //@line 285 "ldo.c"
      var $116=__Z14adjust_varargsP9lua_StateP5Protoi($113, $114, $115); //@line 285 "ldo.c"
      $base=$116; //@line 285 "ldo.c"
      var $117=$2; //@line 286 "ldo.c"
      var $118=(($117+32)|0); //@line 286 "ldo.c"
      var $119=HEAP32[(($118)>>2)]; //@line 286 "ldo.c"
      var $120=$119; //@line 286 "ldo.c"
      var $121=$funcr; //@line 286 "ldo.c"
      var $122=(($120+$121)|0); //@line 286 "ldo.c"
      var $123=$122; //@line 286 "ldo.c"
      $3=$123; //@line 286 "ldo.c"
      __label__ = 13; break; //@line 287 "ldo.c"
    case 13: 
      var $125=$2; //@line 288 "ldo.c"
      var $126=(($125+20)|0); //@line 288 "ldo.c"
      var $127=HEAP32[(($126)>>2)]; //@line 288 "ldo.c"
      var $128=$2; //@line 288 "ldo.c"
      var $129=(($128+36)|0); //@line 288 "ldo.c"
      var $130=HEAP32[(($129)>>2)]; //@line 288 "ldo.c"
      var $131=(($127)|0)==(($130)|0); //@line 288 "ldo.c"
      if ($131) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 288 "ldo.c"
    case 14: 
      var $133=$2; //@line 288 "ldo.c"
      var $134=__Z6growCIP9lua_State($133); //@line 288 "ldo.c"
      var $141 = $134;__label__ = 16; break; //@line 288 "ldo.c"
    case 15: 
      var $136=$2; //@line 288 "ldo.c"
      var $137=(($136+20)|0); //@line 288 "ldo.c"
      var $138=HEAP32[(($137)>>2)]; //@line 288 "ldo.c"
      var $139=(($138+24)|0); //@line 288 "ldo.c"
      HEAP32[(($137)>>2)]=$139; //@line 288 "ldo.c"
      var $141 = $139;__label__ = 16; break; //@line 288 "ldo.c"
    case 16: 
      var $141; //@line 288 "ldo.c"
      $ci=$141; //@line 288 "ldo.c"
      var $142=$3; //@line 289 "ldo.c"
      var $143=$ci; //@line 289 "ldo.c"
      var $144=(($143+4)|0); //@line 289 "ldo.c"
      HEAP32[(($144)>>2)]=$142; //@line 289 "ldo.c"
      var $145=$base; //@line 290 "ldo.c"
      var $146=$ci; //@line 290 "ldo.c"
      var $147=(($146)|0); //@line 290 "ldo.c"
      HEAP32[(($147)>>2)]=$145; //@line 290 "ldo.c"
      var $148=$2; //@line 290 "ldo.c"
      var $149=(($148+12)|0); //@line 290 "ldo.c"
      HEAP32[(($149)>>2)]=$145; //@line 290 "ldo.c"
      var $150=$2; //@line 291 "ldo.c"
      var $151=(($150+12)|0); //@line 291 "ldo.c"
      var $152=HEAP32[(($151)>>2)]; //@line 291 "ldo.c"
      var $153=$p; //@line 291 "ldo.c"
      var $154=(($153+75)|0); //@line 291 "ldo.c"
      var $155=HEAPU8[($154)]; //@line 291 "ldo.c"
      var $156=(($155)&255); //@line 291 "ldo.c"
      var $157=(($152+($156)*(12))|0); //@line 291 "ldo.c"
      var $158=$ci; //@line 291 "ldo.c"
      var $159=(($158+8)|0); //@line 291 "ldo.c"
      HEAP32[(($159)>>2)]=$157; //@line 291 "ldo.c"
      var $160=$p; //@line 293 "ldo.c"
      var $161=(($160+12)|0); //@line 293 "ldo.c"
      var $162=HEAP32[(($161)>>2)]; //@line 293 "ldo.c"
      var $163=$2; //@line 293 "ldo.c"
      var $164=(($163+24)|0); //@line 293 "ldo.c"
      HEAP32[(($164)>>2)]=$162; //@line 293 "ldo.c"
      var $165=$ci; //@line 294 "ldo.c"
      var $166=(($165+20)|0); //@line 294 "ldo.c"
      HEAP32[(($166)>>2)]=0; //@line 294 "ldo.c"
      var $167=$4; //@line 295 "ldo.c"
      var $168=$ci; //@line 295 "ldo.c"
      var $169=(($168+16)|0); //@line 295 "ldo.c"
      HEAP32[(($169)>>2)]=$167; //@line 295 "ldo.c"
      var $170=$2; //@line 296 "ldo.c"
      var $171=(($170+8)|0); //@line 296 "ldo.c"
      var $172=HEAP32[(($171)>>2)]; //@line 296 "ldo.c"
      $st=$172; //@line 296 "ldo.c"
      __label__ = 17; break; //@line 296 "ldo.c"
    case 17: 
      var $174=$st; //@line 296 "ldo.c"
      var $175=$ci; //@line 296 "ldo.c"
      var $176=(($175+8)|0); //@line 296 "ldo.c"
      var $177=HEAPU32[(($176)>>2)]; //@line 296 "ldo.c"
      var $178=(($174)>>>0) < (($177)>>>0); //@line 296 "ldo.c"
      if ($178) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 296 "ldo.c"
    case 18: 
      var $180=$st; //@line 297 "ldo.c"
      var $181=(($180+8)|0); //@line 297 "ldo.c"
      HEAP32[(($181)>>2)]=0; //@line 297 "ldo.c"
      __label__ = 19; break; //@line 297 "ldo.c"
    case 19: 
      var $183=$st; //@line 296 "ldo.c"
      var $184=(($183+12)|0); //@line 296 "ldo.c"
      $st=$184; //@line 296 "ldo.c"
      __label__ = 17; break; //@line 296 "ldo.c"
    case 20: 
      var $186=$ci; //@line 298 "ldo.c"
      var $187=(($186+8)|0); //@line 298 "ldo.c"
      var $188=HEAP32[(($187)>>2)]; //@line 298 "ldo.c"
      var $189=$2; //@line 298 "ldo.c"
      var $190=(($189+8)|0); //@line 298 "ldo.c"
      HEAP32[(($190)>>2)]=$188; //@line 298 "ldo.c"
      var $191=$2; //@line 299 "ldo.c"
      var $192=(($191+56)|0); //@line 299 "ldo.c"
      var $193=HEAPU8[($192)]; //@line 299 "ldo.c"
      var $194=(($193)&255); //@line 299 "ldo.c"
      var $195=$194 & 1; //@line 299 "ldo.c"
      var $196=(($195)|0)!=0; //@line 299 "ldo.c"
      if ($196) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 299 "ldo.c"
    case 21: 
      var $198=$2; //@line 300 "ldo.c"
      var $199=(($198+24)|0); //@line 300 "ldo.c"
      var $200=HEAP32[(($199)>>2)]; //@line 300 "ldo.c"
      var $201=(($200+4)|0); //@line 300 "ldo.c"
      HEAP32[(($199)>>2)]=$201; //@line 300 "ldo.c"
      var $202=$2; //@line 301 "ldo.c"
      __Z13luaD_callhookP9lua_Stateii($202, 0, -1); //@line 301 "ldo.c"
      var $203=$2; //@line 302 "ldo.c"
      var $204=(($203+24)|0); //@line 302 "ldo.c"
      var $205=HEAP32[(($204)>>2)]; //@line 302 "ldo.c"
      var $206=((($205)-(4))|0); //@line 302 "ldo.c"
      HEAP32[(($204)>>2)]=$206; //@line 302 "ldo.c"
      __label__ = 22; break; //@line 303 "ldo.c"
    case 22: 
      $1=0; //@line 304 "ldo.c"
      __label__ = 34; break; //@line 304 "ldo.c"
    case 23: 
      var $209=$2; //@line 309 "ldo.c"
      var $210=(($209+28)|0); //@line 309 "ldo.c"
      var $211=HEAP32[(($210)>>2)]; //@line 309 "ldo.c"
      var $212=$211; //@line 309 "ldo.c"
      var $213=$2; //@line 309 "ldo.c"
      var $214=(($213+8)|0); //@line 309 "ldo.c"
      var $215=HEAP32[(($214)>>2)]; //@line 309 "ldo.c"
      var $216=$215; //@line 309 "ldo.c"
      var $217=$212; //@line 309 "ldo.c"
      var $218=$216; //@line 309 "ldo.c"
      var $219=((($217)-($218))|0); //@line 309 "ldo.c"
      var $220=(($219)|0) <= 240; //@line 309 "ldo.c"
      if ($220) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 309 "ldo.c"
    case 24: 
      var $222=$2; //@line 309 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($222, 20); //@line 309 "ldo.c"
      __label__ = 26; break; //@line 309 "ldo.c"
    case 25: 
      __label__ = 26; break; //@line 309 "ldo.c"
    case 26: 
      var $225=$2; //@line 310 "ldo.c"
      var $226=(($225+20)|0); //@line 310 "ldo.c"
      var $227=HEAP32[(($226)>>2)]; //@line 310 "ldo.c"
      var $228=$2; //@line 310 "ldo.c"
      var $229=(($228+36)|0); //@line 310 "ldo.c"
      var $230=HEAP32[(($229)>>2)]; //@line 310 "ldo.c"
      var $231=(($227)|0)==(($230)|0); //@line 310 "ldo.c"
      if ($231) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 310 "ldo.c"
    case 27: 
      var $233=$2; //@line 310 "ldo.c"
      var $234=__Z6growCIP9lua_State($233); //@line 310 "ldo.c"
      var $241 = $234;__label__ = 29; break; //@line 310 "ldo.c"
    case 28: 
      var $236=$2; //@line 310 "ldo.c"
      var $237=(($236+20)|0); //@line 310 "ldo.c"
      var $238=HEAP32[(($237)>>2)]; //@line 310 "ldo.c"
      var $239=(($238+24)|0); //@line 310 "ldo.c"
      HEAP32[(($237)>>2)]=$239; //@line 310 "ldo.c"
      var $241 = $239;__label__ = 29; break; //@line 310 "ldo.c"
    case 29: 
      var $241; //@line 310 "ldo.c"
      $ci1=$241; //@line 310 "ldo.c"
      var $242=$2; //@line 311 "ldo.c"
      var $243=(($242+32)|0); //@line 311 "ldo.c"
      var $244=HEAP32[(($243)>>2)]; //@line 311 "ldo.c"
      var $245=$244; //@line 311 "ldo.c"
      var $246=$funcr; //@line 311 "ldo.c"
      var $247=(($245+$246)|0); //@line 311 "ldo.c"
      var $248=$247; //@line 311 "ldo.c"
      var $249=$ci1; //@line 311 "ldo.c"
      var $250=(($249+4)|0); //@line 311 "ldo.c"
      HEAP32[(($250)>>2)]=$248; //@line 311 "ldo.c"
      var $251=$ci1; //@line 312 "ldo.c"
      var $252=(($251+4)|0); //@line 312 "ldo.c"
      var $253=HEAP32[(($252)>>2)]; //@line 312 "ldo.c"
      var $254=(($253+12)|0); //@line 312 "ldo.c"
      var $255=$ci1; //@line 312 "ldo.c"
      var $256=(($255)|0); //@line 312 "ldo.c"
      HEAP32[(($256)>>2)]=$254; //@line 312 "ldo.c"
      var $257=$2; //@line 312 "ldo.c"
      var $258=(($257+12)|0); //@line 312 "ldo.c"
      HEAP32[(($258)>>2)]=$254; //@line 312 "ldo.c"
      var $259=$2; //@line 313 "ldo.c"
      var $260=(($259+8)|0); //@line 313 "ldo.c"
      var $261=HEAP32[(($260)>>2)]; //@line 313 "ldo.c"
      var $262=(($261+240)|0); //@line 313 "ldo.c"
      var $263=$ci1; //@line 313 "ldo.c"
      var $264=(($263+8)|0); //@line 313 "ldo.c"
      HEAP32[(($264)>>2)]=$262; //@line 313 "ldo.c"
      var $265=$4; //@line 315 "ldo.c"
      var $266=$ci1; //@line 315 "ldo.c"
      var $267=(($266+16)|0); //@line 315 "ldo.c"
      HEAP32[(($267)>>2)]=$265; //@line 315 "ldo.c"
      var $268=$2; //@line 316 "ldo.c"
      var $269=(($268+56)|0); //@line 316 "ldo.c"
      var $270=HEAPU8[($269)]; //@line 316 "ldo.c"
      var $271=(($270)&255); //@line 316 "ldo.c"
      var $272=$271 & 1; //@line 316 "ldo.c"
      var $273=(($272)|0)!=0; //@line 316 "ldo.c"
      if ($273) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 316 "ldo.c"
    case 30: 
      var $275=$2; //@line 317 "ldo.c"
      __Z13luaD_callhookP9lua_Stateii($275, 0, -1); //@line 317 "ldo.c"
      __label__ = 31; break; //@line 317 "ldo.c"
    case 31: 
      var $277=$2; //@line 319 "ldo.c"
      var $278=(($277+20)|0); //@line 319 "ldo.c"
      var $279=HEAP32[(($278)>>2)]; //@line 319 "ldo.c"
      var $280=(($279+4)|0); //@line 319 "ldo.c"
      var $281=HEAP32[(($280)>>2)]; //@line 319 "ldo.c"
      var $282=(($281)|0); //@line 319 "ldo.c"
      var $283=$282; //@line 319 "ldo.c"
      var $284=HEAP32[(($283)>>2)]; //@line 319 "ldo.c"
      var $285=$284; //@line 319 "ldo.c"
      var $286=$285; //@line 319 "ldo.c"
      var $287=(($286+16)|0); //@line 319 "ldo.c"
      var $288=HEAP32[(($287)>>2)]; //@line 319 "ldo.c"
      var $289=$2; //@line 319 "ldo.c"
      var $290=FUNCTION_TABLE[$288]($289); //@line 319 "ldo.c"
      $n=$290; //@line 319 "ldo.c"
      var $291=$n; //@line 321 "ldo.c"
      var $292=(($291)|0) < 0; //@line 321 "ldo.c"
      if ($292) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 321 "ldo.c"
    case 32: 
      $1=2; //@line 322 "ldo.c"
      __label__ = 34; break; //@line 322 "ldo.c"
    case 33: 
      var $295=$2; //@line 324 "ldo.c"
      var $296=$2; //@line 324 "ldo.c"
      var $297=(($296+8)|0); //@line 324 "ldo.c"
      var $298=HEAP32[(($297)>>2)]; //@line 324 "ldo.c"
      var $299=$n; //@line 324 "ldo.c"
      var $300=(((-$299))|0); //@line 324 "ldo.c"
      var $301=(($298+($300)*(12))|0); //@line 324 "ldo.c"
      var $302=__Z12luaD_poscallP9lua_StateP10lua_TValue($295, $301); //@line 324 "ldo.c"
      $1=1; //@line 325 "ldo.c"
      __label__ = 34; break; //@line 325 "ldo.c"
    case 34: 
      var $304=$1; //@line 328 "ldo.c"
      ;
      return $304; //@line 328 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12luaD_precallP9lua_StateP10lua_TValuei["X"]=1;

function __Z9tryfuncTMP9lua_StateP10lua_TValue($L, $func) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $tm;
      var $p;
      var $funcr;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      $2=$func;
      var $3=$1; //@line 244 "ldo.c"
      var $4=$2; //@line 244 "ldo.c"
      var $5=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($3, $4, 16); //@line 244 "ldo.c"
      $tm=$5; //@line 244 "ldo.c"
      var $6=$2; //@line 246 "ldo.c"
      var $7=$6; //@line 246 "ldo.c"
      var $8=$1; //@line 246 "ldo.c"
      var $9=(($8+32)|0); //@line 246 "ldo.c"
      var $10=HEAP32[(($9)>>2)]; //@line 246 "ldo.c"
      var $11=$10; //@line 246 "ldo.c"
      var $12=$7; //@line 246 "ldo.c"
      var $13=$11; //@line 246 "ldo.c"
      var $14=((($12)-($13))|0); //@line 246 "ldo.c"
      $funcr=$14; //@line 246 "ldo.c"
      var $15=$tm; //@line 247 "ldo.c"
      var $16=(($15+8)|0); //@line 247 "ldo.c"
      var $17=HEAP32[(($16)>>2)]; //@line 247 "ldo.c"
      var $18=(($17)|0)==6; //@line 247 "ldo.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 247 "ldo.c"
    case 3: 
      var $20=$1; //@line 248 "ldo.c"
      var $21=$2; //@line 248 "ldo.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($20, $21, ((STRING_TABLE.__str829)|0)); //@line 248 "ldo.c"
      __label__ = 4; break; //@line 248 "ldo.c"
    case 4: 
      var $23=$1; //@line 250 "ldo.c"
      var $24=(($23+8)|0); //@line 250 "ldo.c"
      var $25=HEAP32[(($24)>>2)]; //@line 250 "ldo.c"
      $p=$25; //@line 250 "ldo.c"
      __label__ = 5; break; //@line 250 "ldo.c"
    case 5: 
      var $27=$p; //@line 250 "ldo.c"
      var $28=$2; //@line 250 "ldo.c"
      var $29=(($27)>>>0) > (($28)>>>0); //@line 250 "ldo.c"
      if ($29) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 250 "ldo.c"
    case 6: 
      var $31=$p; //@line 250 "ldo.c"
      var $32=((($31)-(12))|0); //@line 250 "ldo.c"
      $o2=$32; //@line 250 "ldo.c"
      var $33=$p; //@line 250 "ldo.c"
      $o1=$33; //@line 250 "ldo.c"
      var $34=$o1; //@line 250 "ldo.c"
      var $35=(($34)|0); //@line 250 "ldo.c"
      var $36=$o2; //@line 250 "ldo.c"
      var $37=(($36)|0); //@line 250 "ldo.c"
      var $38=$35; //@line 250 "ldo.c"
      var $39=$37; //@line 250 "ldo.c"
      HEAP32[(($38)>>2)]=HEAP32[(($39)>>2)];HEAP32[((($38)+(4))>>2)]=HEAP32[((($39)+(4))>>2)]; //@line 250 "ldo.c"
      var $40=$o2; //@line 250 "ldo.c"
      var $41=(($40+8)|0); //@line 250 "ldo.c"
      var $42=HEAP32[(($41)>>2)]; //@line 250 "ldo.c"
      var $43=$o1; //@line 250 "ldo.c"
      var $44=(($43+8)|0); //@line 250 "ldo.c"
      HEAP32[(($44)>>2)]=$42; //@line 250 "ldo.c"
      __label__ = 7; break; //@line 250 "ldo.c"
    case 7: 
      var $46=$p; //@line 250 "ldo.c"
      var $47=((($46)-(12))|0); //@line 250 "ldo.c"
      $p=$47; //@line 250 "ldo.c"
      __label__ = 5; break; //@line 250 "ldo.c"
    case 8: 
      var $49=$1; //@line 251 "ldo.c"
      var $50=(($49+28)|0); //@line 251 "ldo.c"
      var $51=HEAP32[(($50)>>2)]; //@line 251 "ldo.c"
      var $52=$51; //@line 251 "ldo.c"
      var $53=$1; //@line 251 "ldo.c"
      var $54=(($53+8)|0); //@line 251 "ldo.c"
      var $55=HEAP32[(($54)>>2)]; //@line 251 "ldo.c"
      var $56=$55; //@line 251 "ldo.c"
      var $57=$52; //@line 251 "ldo.c"
      var $58=$56; //@line 251 "ldo.c"
      var $59=((($57)-($58))|0); //@line 251 "ldo.c"
      var $60=(($59)|0) <= 12; //@line 251 "ldo.c"
      if ($60) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 251 "ldo.c"
    case 9: 
      var $62=$1; //@line 251 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($62, 1); //@line 251 "ldo.c"
      __label__ = 11; break; //@line 251 "ldo.c"
    case 10: 
      __label__ = 11; break; //@line 251 "ldo.c"
    case 11: 
      var $65=$1; //@line 251 "ldo.c"
      var $66=(($65+8)|0); //@line 251 "ldo.c"
      var $67=HEAP32[(($66)>>2)]; //@line 251 "ldo.c"
      var $68=(($67+12)|0); //@line 251 "ldo.c"
      HEAP32[(($66)>>2)]=$68; //@line 251 "ldo.c"
      var $69=$1; //@line 252 "ldo.c"
      var $70=(($69+32)|0); //@line 252 "ldo.c"
      var $71=HEAP32[(($70)>>2)]; //@line 252 "ldo.c"
      var $72=$71; //@line 252 "ldo.c"
      var $73=$funcr; //@line 252 "ldo.c"
      var $74=(($72+$73)|0); //@line 252 "ldo.c"
      var $75=$74; //@line 252 "ldo.c"
      $2=$75; //@line 252 "ldo.c"
      var $76=$tm; //@line 253 "ldo.c"
      $o21=$76; //@line 253 "ldo.c"
      var $77=$2; //@line 253 "ldo.c"
      $o12=$77; //@line 253 "ldo.c"
      var $78=$o12; //@line 253 "ldo.c"
      var $79=(($78)|0); //@line 253 "ldo.c"
      var $80=$o21; //@line 253 "ldo.c"
      var $81=(($80)|0); //@line 253 "ldo.c"
      var $82=$79; //@line 253 "ldo.c"
      var $83=$81; //@line 253 "ldo.c"
      HEAP32[(($82)>>2)]=HEAP32[(($83)>>2)];HEAP32[((($82)+(4))>>2)]=HEAP32[((($83)+(4))>>2)]; //@line 253 "ldo.c"
      var $84=$o21; //@line 253 "ldo.c"
      var $85=(($84+8)|0); //@line 253 "ldo.c"
      var $86=HEAP32[(($85)>>2)]; //@line 253 "ldo.c"
      var $87=$o12; //@line 253 "ldo.c"
      var $88=(($87+8)|0); //@line 253 "ldo.c"
      HEAP32[(($88)>>2)]=$86; //@line 253 "ldo.c"
      var $89=$2; //@line 254 "ldo.c"
      ;
      return $89; //@line 254 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9tryfuncTMP9lua_StateP10lua_TValue["X"]=1;

function __Z14adjust_varargsP9lua_StateP5Protoi($L, $p, $actual) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $nfixargs;
      var $htab;
      var $base;
      var $fixed;
      var $nvar;
      var $o2;
      var $o1;
      var $i_o;
      var $o21;
      var $o12;
      var $i_o3;
      $1=$L;
      $2=$p;
      $3=$actual;
      var $4=$2; //@line 210 "ldo.c"
      var $5=(($4+73)|0); //@line 210 "ldo.c"
      var $6=HEAPU8[($5)]; //@line 210 "ldo.c"
      var $7=(($6)&255); //@line 210 "ldo.c"
      $nfixargs=$7; //@line 210 "ldo.c"
      $htab=0; //@line 211 "ldo.c"
      __label__ = 3; break; //@line 213 "ldo.c"
    case 3: 
      var $9=$3; //@line 213 "ldo.c"
      var $10=$nfixargs; //@line 213 "ldo.c"
      var $11=(($9)|0) < (($10)|0); //@line 213 "ldo.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 213 "ldo.c"
    case 4: 
      var $13=$1; //@line 214 "ldo.c"
      var $14=(($13+8)|0); //@line 214 "ldo.c"
      var $15=HEAP32[(($14)>>2)]; //@line 214 "ldo.c"
      var $16=(($15+12)|0); //@line 214 "ldo.c"
      HEAP32[(($14)>>2)]=$16; //@line 214 "ldo.c"
      var $17=(($15+8)|0); //@line 214 "ldo.c"
      HEAP32[(($17)>>2)]=0; //@line 214 "ldo.c"
      __label__ = 5; break; //@line 214 "ldo.c"
    case 5: 
      var $19=$3; //@line 213 "ldo.c"
      var $20=((($19)+(1))|0); //@line 213 "ldo.c"
      $3=$20; //@line 213 "ldo.c"
      __label__ = 3; break; //@line 213 "ldo.c"
    case 6: 
      var $22=$2; //@line 216 "ldo.c"
      var $23=(($22+74)|0); //@line 216 "ldo.c"
      var $24=HEAPU8[($23)]; //@line 216 "ldo.c"
      var $25=(($24)&255); //@line 216 "ldo.c"
      var $26=$25 & 4; //@line 216 "ldo.c"
      var $27=(($26)|0)!=0; //@line 216 "ldo.c"
      if ($27) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 216 "ldo.c"
    case 7: 
      var $29=$3; //@line 217 "ldo.c"
      var $30=$nfixargs; //@line 217 "ldo.c"
      var $31=((($29)-($30))|0); //@line 217 "ldo.c"
      $nvar=$31; //@line 217 "ldo.c"
      var $32=$1; //@line 219 "ldo.c"
      var $33=(($32+16)|0); //@line 219 "ldo.c"
      var $34=HEAP32[(($33)>>2)]; //@line 219 "ldo.c"
      var $35=(($34+68)|0); //@line 219 "ldo.c"
      var $36=HEAPU32[(($35)>>2)]; //@line 219 "ldo.c"
      var $37=$1; //@line 219 "ldo.c"
      var $38=(($37+16)|0); //@line 219 "ldo.c"
      var $39=HEAP32[(($38)>>2)]; //@line 219 "ldo.c"
      var $40=(($39+64)|0); //@line 219 "ldo.c"
      var $41=HEAPU32[(($40)>>2)]; //@line 219 "ldo.c"
      var $42=(($36)>>>0) >= (($41)>>>0); //@line 219 "ldo.c"
      if ($42) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 219 "ldo.c"
    case 8: 
      var $44=$1; //@line 219 "ldo.c"
      __Z9luaC_stepP9lua_State($44); //@line 219 "ldo.c"
      __label__ = 9; break; //@line 219 "ldo.c"
    case 9: 
      var $46=$1; //@line 220 "ldo.c"
      var $47=$nvar; //@line 220 "ldo.c"
      var $48=__Z8luaH_newP9lua_Stateii($46, $47, 1); //@line 220 "ldo.c"
      $htab=$48; //@line 220 "ldo.c"
      $i=0; //@line 221 "ldo.c"
      __label__ = 10; break; //@line 221 "ldo.c"
    case 10: 
      var $50=$i; //@line 221 "ldo.c"
      var $51=$nvar; //@line 221 "ldo.c"
      var $52=(($50)|0) < (($51)|0); //@line 221 "ldo.c"
      if ($52) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 221 "ldo.c"
    case 11: 
      var $54=$1; //@line 222 "ldo.c"
      var $55=(($54+8)|0); //@line 222 "ldo.c"
      var $56=HEAP32[(($55)>>2)]; //@line 222 "ldo.c"
      var $57=$nvar; //@line 222 "ldo.c"
      var $58=(((-$57))|0); //@line 222 "ldo.c"
      var $59=(($56+($58)*(12))|0); //@line 222 "ldo.c"
      var $60=$i; //@line 222 "ldo.c"
      var $61=(($59+($60)*(12))|0); //@line 222 "ldo.c"
      $o2=$61; //@line 222 "ldo.c"
      var $62=$1; //@line 222 "ldo.c"
      var $63=$htab; //@line 222 "ldo.c"
      var $64=$i; //@line 222 "ldo.c"
      var $65=((($64)+(1))|0); //@line 222 "ldo.c"
      var $66=__Z11luaH_setnumP9lua_StateP5Tablei($62, $63, $65); //@line 222 "ldo.c"
      $o1=$66; //@line 222 "ldo.c"
      var $67=$o1; //@line 222 "ldo.c"
      var $68=(($67)|0); //@line 222 "ldo.c"
      var $69=$o2; //@line 222 "ldo.c"
      var $70=(($69)|0); //@line 222 "ldo.c"
      var $71=$68; //@line 222 "ldo.c"
      var $72=$70; //@line 222 "ldo.c"
      HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)]; //@line 222 "ldo.c"
      var $73=$o2; //@line 222 "ldo.c"
      var $74=(($73+8)|0); //@line 222 "ldo.c"
      var $75=HEAP32[(($74)>>2)]; //@line 222 "ldo.c"
      var $76=$o1; //@line 222 "ldo.c"
      var $77=(($76+8)|0); //@line 222 "ldo.c"
      HEAP32[(($77)>>2)]=$75; //@line 222 "ldo.c"
      __label__ = 12; break; //@line 222 "ldo.c"
    case 12: 
      var $79=$i; //@line 221 "ldo.c"
      var $80=((($79)+(1))|0); //@line 221 "ldo.c"
      $i=$80; //@line 221 "ldo.c"
      __label__ = 10; break; //@line 221 "ldo.c"
    case 13: 
      var $82=$1; //@line 224 "ldo.c"
      var $83=$htab; //@line 224 "ldo.c"
      var $84=$1; //@line 224 "ldo.c"
      var $85=__Z12luaS_newlstrP9lua_StatePKcj($84, ((STRING_TABLE.__str728)|0), 1); //@line 224 "ldo.c"
      var $86=__Z11luaH_setstrP9lua_StateP5TableP7TString($82, $83, $85); //@line 224 "ldo.c"
      $i_o=$86; //@line 224 "ldo.c"
      var $87=$nvar; //@line 224 "ldo.c"
      var $88=(($87)|0); //@line 224 "ldo.c"
      var $89=$i_o; //@line 224 "ldo.c"
      var $90=(($89)|0); //@line 224 "ldo.c"
      var $91=$90; //@line 224 "ldo.c"
      (tempDoubleF64[0]=$88,HEAP32[(($91)>>2)]=tempDoubleI32[0],HEAP32[((($91)+(4))>>2)]=tempDoubleI32[1]); //@line 224 "ldo.c"
      var $92=$i_o; //@line 224 "ldo.c"
      var $93=(($92+8)|0); //@line 224 "ldo.c"
      HEAP32[(($93)>>2)]=3; //@line 224 "ldo.c"
      __label__ = 14; break; //@line 225 "ldo.c"
    case 14: 
      var $95=$1; //@line 228 "ldo.c"
      var $96=(($95+8)|0); //@line 228 "ldo.c"
      var $97=HEAP32[(($96)>>2)]; //@line 228 "ldo.c"
      var $98=$3; //@line 228 "ldo.c"
      var $99=(((-$98))|0); //@line 228 "ldo.c"
      var $100=(($97+($99)*(12))|0); //@line 228 "ldo.c"
      $fixed=$100; //@line 228 "ldo.c"
      var $101=$1; //@line 229 "ldo.c"
      var $102=(($101+8)|0); //@line 229 "ldo.c"
      var $103=HEAP32[(($102)>>2)]; //@line 229 "ldo.c"
      $base=$103; //@line 229 "ldo.c"
      $i=0; //@line 230 "ldo.c"
      __label__ = 15; break; //@line 230 "ldo.c"
    case 15: 
      var $105=$i; //@line 230 "ldo.c"
      var $106=$nfixargs; //@line 230 "ldo.c"
      var $107=(($105)|0) < (($106)|0); //@line 230 "ldo.c"
      if ($107) { __label__ = 16; break; } else { __label__ = 18; break; } //@line 230 "ldo.c"
    case 16: 
      var $109=$fixed; //@line 231 "ldo.c"
      var $110=$i; //@line 231 "ldo.c"
      var $111=(($109+($110)*(12))|0); //@line 231 "ldo.c"
      $o21=$111; //@line 231 "ldo.c"
      var $112=$1; //@line 231 "ldo.c"
      var $113=(($112+8)|0); //@line 231 "ldo.c"
      var $114=HEAP32[(($113)>>2)]; //@line 231 "ldo.c"
      var $115=(($114+12)|0); //@line 231 "ldo.c"
      HEAP32[(($113)>>2)]=$115; //@line 231 "ldo.c"
      $o12=$114; //@line 231 "ldo.c"
      var $116=$o12; //@line 231 "ldo.c"
      var $117=(($116)|0); //@line 231 "ldo.c"
      var $118=$o21; //@line 231 "ldo.c"
      var $119=(($118)|0); //@line 231 "ldo.c"
      var $120=$117; //@line 231 "ldo.c"
      var $121=$119; //@line 231 "ldo.c"
      HEAP32[(($120)>>2)]=HEAP32[(($121)>>2)];HEAP32[((($120)+(4))>>2)]=HEAP32[((($121)+(4))>>2)]; //@line 231 "ldo.c"
      var $122=$o21; //@line 231 "ldo.c"
      var $123=(($122+8)|0); //@line 231 "ldo.c"
      var $124=HEAP32[(($123)>>2)]; //@line 231 "ldo.c"
      var $125=$o12; //@line 231 "ldo.c"
      var $126=(($125+8)|0); //@line 231 "ldo.c"
      HEAP32[(($126)>>2)]=$124; //@line 231 "ldo.c"
      var $127=$fixed; //@line 232 "ldo.c"
      var $128=$i; //@line 232 "ldo.c"
      var $129=(($127+($128)*(12))|0); //@line 232 "ldo.c"
      var $130=(($129+8)|0); //@line 232 "ldo.c"
      HEAP32[(($130)>>2)]=0; //@line 232 "ldo.c"
      __label__ = 17; break; //@line 233 "ldo.c"
    case 17: 
      var $132=$i; //@line 230 "ldo.c"
      var $133=((($132)+(1))|0); //@line 230 "ldo.c"
      $i=$133; //@line 230 "ldo.c"
      __label__ = 15; break; //@line 230 "ldo.c"
    case 18: 
      var $135=$htab; //@line 235 "ldo.c"
      var $136=(($135)|0)!=0; //@line 235 "ldo.c"
      if ($136) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 235 "ldo.c"
    case 19: 
      var $138=$1; //@line 236 "ldo.c"
      var $139=(($138+8)|0); //@line 236 "ldo.c"
      var $140=HEAP32[(($139)>>2)]; //@line 236 "ldo.c"
      var $141=(($140+12)|0); //@line 236 "ldo.c"
      HEAP32[(($139)>>2)]=$141; //@line 236 "ldo.c"
      $i_o3=$140; //@line 236 "ldo.c"
      var $142=$htab; //@line 236 "ldo.c"
      var $143=$142; //@line 236 "ldo.c"
      var $144=$i_o3; //@line 236 "ldo.c"
      var $145=(($144)|0); //@line 236 "ldo.c"
      var $146=$145; //@line 236 "ldo.c"
      HEAP32[(($146)>>2)]=$143; //@line 236 "ldo.c"
      var $147=$i_o3; //@line 236 "ldo.c"
      var $148=(($147+8)|0); //@line 236 "ldo.c"
      HEAP32[(($148)>>2)]=5; //@line 236 "ldo.c"
      __label__ = 20; break; //@line 238 "ldo.c"
    case 20: 
      var $150=$base; //@line 239 "ldo.c"
      ;
      return $150; //@line 239 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14adjust_varargsP9lua_StateP5Protoi["X"]=1;

function __Z6growCIP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 170 "ldo.c"
      var $3=(($2+48)|0); //@line 170 "ldo.c"
      var $4=HEAP32[(($3)>>2)]; //@line 170 "ldo.c"
      var $5=(($4)|0) > 20000; //@line 170 "ldo.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 170 "ldo.c"
    case 3: 
      var $7=$1; //@line 171 "ldo.c"
      __Z10luaD_throwP9lua_Statei($7, 5); //@line 171 "ldo.c"
      __label__ = 7; break; //@line 171 "ldo.c"
    case 4: 
      var $9=$1; //@line 173 "ldo.c"
      var $10=$1; //@line 173 "ldo.c"
      var $11=(($10+48)|0); //@line 173 "ldo.c"
      var $12=HEAP32[(($11)>>2)]; //@line 173 "ldo.c"
      var $13=((($12<<1))|0); //@line 173 "ldo.c"
      __Z14luaD_reallocCIP9lua_Statei($9, $13); //@line 173 "ldo.c"
      var $14=$1; //@line 174 "ldo.c"
      var $15=(($14+48)|0); //@line 174 "ldo.c"
      var $16=HEAP32[(($15)>>2)]; //@line 174 "ldo.c"
      var $17=(($16)|0) > 20000; //@line 174 "ldo.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 174 "ldo.c"
    case 5: 
      var $19=$1; //@line 175 "ldo.c"
      __Z13luaG_runerrorP9lua_StatePKcz($19, ((STRING_TABLE.__str627)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 175 "ldo.c"
      __label__ = 6; break; //@line 175 "ldo.c"
    case 6: 
      __label__ = 7; break; //@line 176 "ldo.c"
    case 7: 
      var $22=$1; //@line 177 "ldo.c"
      var $23=(($22+20)|0); //@line 177 "ldo.c"
      var $24=HEAP32[(($23)>>2)]; //@line 177 "ldo.c"
      var $25=(($24+24)|0); //@line 177 "ldo.c"
      HEAP32[(($23)>>2)]=$25; //@line 177 "ldo.c"
      STACKTOP = __stackBase__;
      return $25; //@line 177 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12luaD_poscallP9lua_StateP10lua_TValue($L, $firstResult) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $res;
      var $wanted;
      var $i;
      var $ci;
      var $o2;
      var $o1;
      $1=$L;
      $2=$firstResult;
      var $3=$1; //@line 346 "ldo.c"
      var $4=(($3+56)|0); //@line 346 "ldo.c"
      var $5=HEAPU8[($4)]; //@line 346 "ldo.c"
      var $6=(($5)&255); //@line 346 "ldo.c"
      var $7=$6 & 2; //@line 346 "ldo.c"
      var $8=(($7)|0)!=0; //@line 346 "ldo.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 346 "ldo.c"
    case 3: 
      var $10=$1; //@line 347 "ldo.c"
      var $11=$2; //@line 347 "ldo.c"
      var $12=__Z12callrethooksP9lua_StateP10lua_TValue($10, $11); //@line 347 "ldo.c"
      $2=$12; //@line 347 "ldo.c"
      __label__ = 4; break; //@line 347 "ldo.c"
    case 4: 
      var $14=$1; //@line 348 "ldo.c"
      var $15=(($14+20)|0); //@line 348 "ldo.c"
      var $16=HEAP32[(($15)>>2)]; //@line 348 "ldo.c"
      var $17=((($16)-(24))|0); //@line 348 "ldo.c"
      HEAP32[(($15)>>2)]=$17; //@line 348 "ldo.c"
      $ci=$16; //@line 348 "ldo.c"
      var $18=$ci; //@line 349 "ldo.c"
      var $19=(($18+4)|0); //@line 349 "ldo.c"
      var $20=HEAP32[(($19)>>2)]; //@line 349 "ldo.c"
      $res=$20; //@line 349 "ldo.c"
      var $21=$ci; //@line 350 "ldo.c"
      var $22=(($21+16)|0); //@line 350 "ldo.c"
      var $23=HEAP32[(($22)>>2)]; //@line 350 "ldo.c"
      $wanted=$23; //@line 350 "ldo.c"
      var $24=$ci; //@line 351 "ldo.c"
      var $25=((($24)-(24))|0); //@line 351 "ldo.c"
      var $26=(($25)|0); //@line 351 "ldo.c"
      var $27=HEAP32[(($26)>>2)]; //@line 351 "ldo.c"
      var $28=$1; //@line 351 "ldo.c"
      var $29=(($28+12)|0); //@line 351 "ldo.c"
      HEAP32[(($29)>>2)]=$27; //@line 351 "ldo.c"
      var $30=$ci; //@line 352 "ldo.c"
      var $31=((($30)-(24))|0); //@line 352 "ldo.c"
      var $32=(($31+12)|0); //@line 352 "ldo.c"
      var $33=HEAP32[(($32)>>2)]; //@line 352 "ldo.c"
      var $34=$1; //@line 352 "ldo.c"
      var $35=(($34+24)|0); //@line 352 "ldo.c"
      HEAP32[(($35)>>2)]=$33; //@line 352 "ldo.c"
      var $36=$wanted; //@line 354 "ldo.c"
      $i=$36; //@line 354 "ldo.c"
      __label__ = 5; break; //@line 354 "ldo.c"
    case 5: 
      var $38=$i; //@line 354 "ldo.c"
      var $39=(($38)|0)!=0; //@line 354 "ldo.c"
      if ($39) { __label__ = 6; break; } else { var $47 = 0;__label__ = 7; break; } //@line 354 "ldo.c"
    case 6: 
      var $41=$2; //@line 354 "ldo.c"
      var $42=$1; //@line 354 "ldo.c"
      var $43=(($42+8)|0); //@line 354 "ldo.c"
      var $44=HEAPU32[(($43)>>2)]; //@line 354 "ldo.c"
      var $45=(($41)>>>0) < (($44)>>>0); //@line 354 "ldo.c"
      var $47 = $45;__label__ = 7; break; //@line 354 "ldo.c"
    case 7: 
      var $47;
      if ($47) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 354 "ldo.c"
    case 8: 
      var $49=$2; //@line 355 "ldo.c"
      var $50=(($49+12)|0); //@line 355 "ldo.c"
      $2=$50; //@line 355 "ldo.c"
      $o2=$49; //@line 355 "ldo.c"
      var $51=$res; //@line 355 "ldo.c"
      var $52=(($51+12)|0); //@line 355 "ldo.c"
      $res=$52; //@line 355 "ldo.c"
      $o1=$51; //@line 355 "ldo.c"
      var $53=$o1; //@line 355 "ldo.c"
      var $54=(($53)|0); //@line 355 "ldo.c"
      var $55=$o2; //@line 355 "ldo.c"
      var $56=(($55)|0); //@line 355 "ldo.c"
      var $57=$54; //@line 355 "ldo.c"
      var $58=$56; //@line 355 "ldo.c"
      HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)]; //@line 355 "ldo.c"
      var $59=$o2; //@line 355 "ldo.c"
      var $60=(($59+8)|0); //@line 355 "ldo.c"
      var $61=HEAP32[(($60)>>2)]; //@line 355 "ldo.c"
      var $62=$o1; //@line 355 "ldo.c"
      var $63=(($62+8)|0); //@line 355 "ldo.c"
      HEAP32[(($63)>>2)]=$61; //@line 355 "ldo.c"
      __label__ = 9; break; //@line 355 "ldo.c"
    case 9: 
      var $65=$i; //@line 354 "ldo.c"
      var $66=((($65)-(1))|0); //@line 354 "ldo.c"
      $i=$66; //@line 354 "ldo.c"
      __label__ = 5; break; //@line 354 "ldo.c"
    case 10: 
      __label__ = 11; break; //@line 356 "ldo.c"
    case 11: 
      var $69=$i; //@line 356 "ldo.c"
      var $70=((($69)-(1))|0); //@line 356 "ldo.c"
      $i=$70; //@line 356 "ldo.c"
      var $71=(($69)|0) > 0; //@line 356 "ldo.c"
      if ($71) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 356 "ldo.c"
    case 12: 
      var $73=$res; //@line 357 "ldo.c"
      var $74=(($73+12)|0); //@line 357 "ldo.c"
      $res=$74; //@line 357 "ldo.c"
      var $75=(($73+8)|0); //@line 357 "ldo.c"
      HEAP32[(($75)>>2)]=0; //@line 357 "ldo.c"
      __label__ = 11; break; //@line 357 "ldo.c"
    case 13: 
      var $77=$res; //@line 358 "ldo.c"
      var $78=$1; //@line 358 "ldo.c"
      var $79=(($78+8)|0); //@line 358 "ldo.c"
      HEAP32[(($79)>>2)]=$77; //@line 358 "ldo.c"
      var $80=$wanted; //@line 359 "ldo.c"
      var $81=((($80)+(1))|0); //@line 359 "ldo.c"
      ;
      return $81; //@line 359 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12luaD_poscallP9lua_StateP10lua_TValue["X"]=1;

function __Z12callrethooksP9lua_StateP10lua_TValue($L, $firstResult) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fr;
      $1=$L;
      $2=$firstResult;
      var $3=$2; //@line 332 "ldo.c"
      var $4=$3; //@line 332 "ldo.c"
      var $5=$1; //@line 332 "ldo.c"
      var $6=(($5+32)|0); //@line 332 "ldo.c"
      var $7=HEAP32[(($6)>>2)]; //@line 332 "ldo.c"
      var $8=$7; //@line 332 "ldo.c"
      var $9=$4; //@line 332 "ldo.c"
      var $10=$8; //@line 332 "ldo.c"
      var $11=((($9)-($10))|0); //@line 332 "ldo.c"
      $fr=$11; //@line 332 "ldo.c"
      var $12=$1; //@line 333 "ldo.c"
      __Z13luaD_callhookP9lua_Stateii($12, 1, -1); //@line 333 "ldo.c"
      var $13=$1; //@line 334 "ldo.c"
      var $14=(($13+20)|0); //@line 334 "ldo.c"
      var $15=HEAP32[(($14)>>2)]; //@line 334 "ldo.c"
      var $16=(($15+4)|0); //@line 334 "ldo.c"
      var $17=HEAP32[(($16)>>2)]; //@line 334 "ldo.c"
      var $18=(($17)|0); //@line 334 "ldo.c"
      var $19=$18; //@line 334 "ldo.c"
      var $20=HEAP32[(($19)>>2)]; //@line 334 "ldo.c"
      var $21=$20; //@line 334 "ldo.c"
      var $22=$21; //@line 334 "ldo.c"
      var $23=(($22+6)|0); //@line 334 "ldo.c"
      var $24=HEAP8[($23)]; //@line 334 "ldo.c"
      var $25=(($24 << 24) >> 24)!=0; //@line 334 "ldo.c"
      if ($25) { __label__ = 9; break; } else { __label__ = 3; break; } //@line 334 "ldo.c"
    case 3: 
      __label__ = 4; break; //@line 335 "ldo.c"
    case 4: 
      var $28=$1; //@line 335 "ldo.c"
      var $29=(($28+56)|0); //@line 335 "ldo.c"
      var $30=HEAPU8[($29)]; //@line 335 "ldo.c"
      var $31=(($30)&255); //@line 335 "ldo.c"
      var $32=$31 & 2; //@line 335 "ldo.c"
      var $33=(($32)|0)!=0; //@line 335 "ldo.c"
      if ($33) { __label__ = 5; break; } else { var $43 = 0;__label__ = 6; break; } //@line 335 "ldo.c"
    case 5: 
      var $35=$1; //@line 335 "ldo.c"
      var $36=(($35+20)|0); //@line 335 "ldo.c"
      var $37=HEAP32[(($36)>>2)]; //@line 335 "ldo.c"
      var $38=(($37+20)|0); //@line 335 "ldo.c"
      var $39=HEAP32[(($38)>>2)]; //@line 335 "ldo.c"
      var $40=((($39)-(1))|0); //@line 335 "ldo.c"
      HEAP32[(($38)>>2)]=$40; //@line 335 "ldo.c"
      var $41=(($39)|0)!=0; //@line 335 "ldo.c"
      var $43 = $41;__label__ = 6; break; //@line 335 "ldo.c"
    case 6: 
      var $43;
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 335 "ldo.c"
    case 7: 
      var $45=$1; //@line 336 "ldo.c"
      __Z13luaD_callhookP9lua_Stateii($45, 4, -1); //@line 336 "ldo.c"
      __label__ = 4; break; //@line 336 "ldo.c"
    case 8: 
      __label__ = 9; break; //@line 337 "ldo.c"
    case 9: 
      var $48=$1; //@line 338 "ldo.c"
      var $49=(($48+32)|0); //@line 338 "ldo.c"
      var $50=HEAP32[(($49)>>2)]; //@line 338 "ldo.c"
      var $51=$50; //@line 338 "ldo.c"
      var $52=$fr; //@line 338 "ldo.c"
      var $53=(($51+$52)|0); //@line 338 "ldo.c"
      var $54=$53; //@line 338 "ldo.c"
      ;
      return $54; //@line 338 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12callrethooksP9lua_StateP10lua_TValue["X"]=1;

function __Z9luaD_callP9lua_StateP10lua_TValuei($L, $func, $nResults) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$func;
      $3=$nResults;
      var $4=$1; //@line 370 "ldo.c"
      var $5=(($4+52)|0); //@line 370 "ldo.c"
      var $6=HEAP16[(($5)>>1)]; //@line 370 "ldo.c"
      var $7=((($6)+(1))&65535); //@line 370 "ldo.c"
      HEAP16[(($5)>>1)]=$7; //@line 370 "ldo.c"
      var $8=(($7)&65535); //@line 370 "ldo.c"
      var $9=(($8)|0) >= 200; //@line 370 "ldo.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 370 "ldo.c"
    case 3: 
      var $11=$1; //@line 371 "ldo.c"
      var $12=(($11+52)|0); //@line 371 "ldo.c"
      var $13=HEAPU16[(($12)>>1)]; //@line 371 "ldo.c"
      var $14=(($13)&65535); //@line 371 "ldo.c"
      var $15=(($14)|0)==200; //@line 371 "ldo.c"
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 371 "ldo.c"
    case 4: 
      var $17=$1; //@line 372 "ldo.c"
      __Z13luaG_runerrorP9lua_StatePKcz($17, ((STRING_TABLE.__str223)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 372 "ldo.c"
      __label__ = 8; break; //@line 372 "ldo.c"
    case 5: 
      var $19=$1; //@line 373 "ldo.c"
      var $20=(($19+52)|0); //@line 373 "ldo.c"
      var $21=HEAPU16[(($20)>>1)]; //@line 373 "ldo.c"
      var $22=(($21)&65535); //@line 373 "ldo.c"
      var $23=(($22)|0) >= 225; //@line 373 "ldo.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 373 "ldo.c"
    case 6: 
      var $25=$1; //@line 374 "ldo.c"
      __Z10luaD_throwP9lua_Statei($25, 5); //@line 374 "ldo.c"
      __label__ = 7; break; //@line 374 "ldo.c"
    case 7: 
      __label__ = 8; break; //@line 374 "ldo.c"
    case 8: 
      __label__ = 9; break; //@line 375 "ldo.c"
    case 9: 
      var $29=$1; //@line 376 "ldo.c"
      var $30=$2; //@line 376 "ldo.c"
      var $31=$3; //@line 376 "ldo.c"
      var $32=__Z12luaD_precallP9lua_StateP10lua_TValuei($29, $30, $31); //@line 376 "ldo.c"
      var $33=(($32)|0)==0; //@line 376 "ldo.c"
      if ($33) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 376 "ldo.c"
    case 10: 
      var $35=$1; //@line 377 "ldo.c"
      __Z12luaV_executeP9lua_Statei($35, 1); //@line 377 "ldo.c"
      __label__ = 11; break; //@line 377 "ldo.c"
    case 11: 
      var $37=$1; //@line 378 "ldo.c"
      var $38=(($37+52)|0); //@line 378 "ldo.c"
      var $39=HEAP16[(($38)>>1)]; //@line 378 "ldo.c"
      var $40=((($39)-(1))&65535); //@line 378 "ldo.c"
      HEAP16[(($38)>>1)]=$40; //@line 378 "ldo.c"
      var $41=$1; //@line 379 "ldo.c"
      var $42=(($41+16)|0); //@line 379 "ldo.c"
      var $43=HEAP32[(($42)>>2)]; //@line 379 "ldo.c"
      var $44=(($43+68)|0); //@line 379 "ldo.c"
      var $45=HEAPU32[(($44)>>2)]; //@line 379 "ldo.c"
      var $46=$1; //@line 379 "ldo.c"
      var $47=(($46+16)|0); //@line 379 "ldo.c"
      var $48=HEAP32[(($47)>>2)]; //@line 379 "ldo.c"
      var $49=(($48+64)|0); //@line 379 "ldo.c"
      var $50=HEAPU32[(($49)>>2)]; //@line 379 "ldo.c"
      var $51=(($45)>>>0) >= (($50)>>>0); //@line 379 "ldo.c"
      if ($51) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 379 "ldo.c"
    case 12: 
      var $53=$1; //@line 379 "ldo.c"
      __Z9luaC_stepP9lua_State($53); //@line 379 "ldo.c"
      __label__ = 13; break; //@line 379 "ldo.c"
    case 13: 
      STACKTOP = __stackBase__;
      return; //@line 380 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9luaD_callP9lua_StateP10lua_TValuei["X"]=1;

function _lua_resume($L, $nargs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $status;
      $2=$L;
      $3=$nargs;
      var $4=$2; //@line 420 "ldo.c"
      var $5=(($4+6)|0); //@line 420 "ldo.c"
      var $6=HEAPU8[($5)]; //@line 420 "ldo.c"
      var $7=(($6)&255); //@line 420 "ldo.c"
      var $8=(($7)|0)!=1; //@line 420 "ldo.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 420 "ldo.c"
    case 3: 
      var $10=$2; //@line 420 "ldo.c"
      var $11=(($10+6)|0); //@line 420 "ldo.c"
      var $12=HEAPU8[($11)]; //@line 420 "ldo.c"
      var $13=(($12)&255); //@line 420 "ldo.c"
      var $14=(($13)|0)!=0; //@line 420 "ldo.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 420 "ldo.c"
    case 4: 
      var $16=$2; //@line 420 "ldo.c"
      var $17=(($16+20)|0); //@line 420 "ldo.c"
      var $18=HEAP32[(($17)>>2)]; //@line 420 "ldo.c"
      var $19=$2; //@line 420 "ldo.c"
      var $20=(($19+40)|0); //@line 420 "ldo.c"
      var $21=HEAP32[(($20)>>2)]; //@line 420 "ldo.c"
      var $22=(($18)|0)!=(($21)|0); //@line 420 "ldo.c"
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 420 "ldo.c"
    case 5: 
      var $24=$2; //@line 421 "ldo.c"
      var $25=__Z12resume_errorP9lua_StatePKc($24, ((STRING_TABLE.__str324)|0)); //@line 421 "ldo.c"
      $1=$25; //@line 421 "ldo.c"
      __label__ = 12; break; //@line 421 "ldo.c"
    case 6: 
      var $27=$2; //@line 422 "ldo.c"
      var $28=(($27+52)|0); //@line 422 "ldo.c"
      var $29=HEAPU16[(($28)>>1)]; //@line 422 "ldo.c"
      var $30=(($29)&65535); //@line 422 "ldo.c"
      var $31=(($30)|0) >= 200; //@line 422 "ldo.c"
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 422 "ldo.c"
    case 7: 
      var $33=$2; //@line 423 "ldo.c"
      var $34=__Z12resume_errorP9lua_StatePKc($33, ((STRING_TABLE.__str223)|0)); //@line 423 "ldo.c"
      $1=$34; //@line 423 "ldo.c"
      __label__ = 12; break; //@line 423 "ldo.c"
    case 8: 
      var $36=$2; //@line 426 "ldo.c"
      var $37=(($36+52)|0); //@line 426 "ldo.c"
      var $38=HEAP16[(($37)>>1)]; //@line 426 "ldo.c"
      var $39=((($38)+(1))&65535); //@line 426 "ldo.c"
      HEAP16[(($37)>>1)]=$39; //@line 426 "ldo.c"
      var $40=$2; //@line 426 "ldo.c"
      var $41=(($40+54)|0); //@line 426 "ldo.c"
      HEAP16[(($41)>>1)]=$39; //@line 426 "ldo.c"
      var $42=$2; //@line 427 "ldo.c"
      var $43=$2; //@line 427 "ldo.c"
      var $44=(($43+8)|0); //@line 427 "ldo.c"
      var $45=HEAP32[(($44)>>2)]; //@line 427 "ldo.c"
      var $46=$3; //@line 427 "ldo.c"
      var $47=(((-$46))|0); //@line 427 "ldo.c"
      var $48=(($45+($47)*(12))|0); //@line 427 "ldo.c"
      var $49=$48; //@line 427 "ldo.c"
      var $50=__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($42, 8, $49); //@line 427 "ldo.c"
      $status=$50; //@line 427 "ldo.c"
      var $51=$status; //@line 428 "ldo.c"
      var $52=(($51)|0)!=0; //@line 428 "ldo.c"
      if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 428 "ldo.c"
    case 9: 
      var $54=$status; //@line 429 "ldo.c"
      var $55=(($54) & 255); //@line 429 "ldo.c"
      var $56=$2; //@line 429 "ldo.c"
      var $57=(($56+6)|0); //@line 429 "ldo.c"
      HEAP8[($57)]=$55; //@line 429 "ldo.c"
      var $58=$2; //@line 430 "ldo.c"
      var $59=$status; //@line 430 "ldo.c"
      var $60=$2; //@line 430 "ldo.c"
      var $61=(($60+8)|0); //@line 430 "ldo.c"
      var $62=HEAP32[(($61)>>2)]; //@line 430 "ldo.c"
      __Z16luaD_seterrorobjP9lua_StateiP10lua_TValue($58, $59, $62); //@line 430 "ldo.c"
      var $63=$2; //@line 431 "ldo.c"
      var $64=(($63+8)|0); //@line 431 "ldo.c"
      var $65=HEAP32[(($64)>>2)]; //@line 431 "ldo.c"
      var $66=$2; //@line 431 "ldo.c"
      var $67=(($66+20)|0); //@line 431 "ldo.c"
      var $68=HEAP32[(($67)>>2)]; //@line 431 "ldo.c"
      var $69=(($68+8)|0); //@line 431 "ldo.c"
      HEAP32[(($69)>>2)]=$65; //@line 431 "ldo.c"
      __label__ = 11; break; //@line 432 "ldo.c"
    case 10: 
      var $71=$2; //@line 435 "ldo.c"
      var $72=(($71+6)|0); //@line 435 "ldo.c"
      var $73=HEAPU8[($72)]; //@line 435 "ldo.c"
      var $74=(($73)&255); //@line 435 "ldo.c"
      $status=$74; //@line 435 "ldo.c"
      __label__ = 11; break; //@line 436 "ldo.c"
    case 11: 
      var $76=$2; //@line 437 "ldo.c"
      var $77=(($76+52)|0); //@line 437 "ldo.c"
      var $78=HEAP16[(($77)>>1)]; //@line 437 "ldo.c"
      var $79=((($78)-(1))&65535); //@line 437 "ldo.c"
      HEAP16[(($77)>>1)]=$79; //@line 437 "ldo.c"
      var $80=$status; //@line 439 "ldo.c"
      $1=$80; //@line 439 "ldo.c"
      __label__ = 12; break; //@line 439 "ldo.c"
    case 12: 
      var $82=$1; //@line 440 "ldo.c"
      ;
      return $82; //@line 440 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_resume["X"]=1;

function __Z12resume_errorP9lua_StatePKc($L, $msg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i_o;
      $1=$L;
      $2=$msg;
      var $3=$1; //@line 409 "ldo.c"
      var $4=(($3+20)|0); //@line 409 "ldo.c"
      var $5=HEAP32[(($4)>>2)]; //@line 409 "ldo.c"
      var $6=(($5)|0); //@line 409 "ldo.c"
      var $7=HEAP32[(($6)>>2)]; //@line 409 "ldo.c"
      var $8=$1; //@line 409 "ldo.c"
      var $9=(($8+8)|0); //@line 409 "ldo.c"
      HEAP32[(($9)>>2)]=$7; //@line 409 "ldo.c"
      var $10=$1; //@line 410 "ldo.c"
      var $11=(($10+8)|0); //@line 410 "ldo.c"
      var $12=HEAP32[(($11)>>2)]; //@line 410 "ldo.c"
      $i_o=$12; //@line 410 "ldo.c"
      var $13=$1; //@line 410 "ldo.c"
      var $14=$2; //@line 410 "ldo.c"
      var $15=$2; //@line 410 "ldo.c"
      var $16=_strlen($15); //@line 410 "ldo.c"
      var $17=__Z12luaS_newlstrP9lua_StatePKcj($13, $14, $16); //@line 410 "ldo.c"
      var $18=$17; //@line 410 "ldo.c"
      var $19=$i_o; //@line 410 "ldo.c"
      var $20=(($19)|0); //@line 410 "ldo.c"
      var $21=$20; //@line 410 "ldo.c"
      HEAP32[(($21)>>2)]=$18; //@line 410 "ldo.c"
      var $22=$i_o; //@line 410 "ldo.c"
      var $23=(($22+8)|0); //@line 410 "ldo.c"
      HEAP32[(($23)>>2)]=4; //@line 410 "ldo.c"
      var $24=$1; //@line 411 "ldo.c"
      var $25=(($24+28)|0); //@line 411 "ldo.c"
      var $26=HEAP32[(($25)>>2)]; //@line 411 "ldo.c"
      var $27=$26; //@line 411 "ldo.c"
      var $28=$1; //@line 411 "ldo.c"
      var $29=(($28+8)|0); //@line 411 "ldo.c"
      var $30=HEAP32[(($29)>>2)]; //@line 411 "ldo.c"
      var $31=$30; //@line 411 "ldo.c"
      var $32=$27; //@line 411 "ldo.c"
      var $33=$31; //@line 411 "ldo.c"
      var $34=((($32)-($33))|0); //@line 411 "ldo.c"
      var $35=(($34)|0) <= 12; //@line 411 "ldo.c"
      if ($35) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 411 "ldo.c"
    case 3: 
      var $37=$1; //@line 411 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($37, 1); //@line 411 "ldo.c"
      __label__ = 5; break; //@line 411 "ldo.c"
    case 4: 
      __label__ = 5; break; //@line 411 "ldo.c"
    case 5: 
      var $40=$1; //@line 411 "ldo.c"
      var $41=(($40+8)|0); //@line 411 "ldo.c"
      var $42=HEAP32[(($41)>>2)]; //@line 411 "ldo.c"
      var $43=(($42+12)|0); //@line 411 "ldo.c"
      HEAP32[(($41)>>2)]=$43; //@line 411 "ldo.c"
      ;
      return 2; //@line 413 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12resume_errorP9lua_StatePKc["X"]=1;

function __Z6resumeP9lua_StatePv($L, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $firstArg;
      var $ci;
      $1=$L;
      $2=$ud;
      var $3=$2; //@line 384 "ldo.c"
      var $4=$3; //@line 384 "ldo.c"
      $firstArg=$4; //@line 384 "ldo.c"
      var $5=$1; //@line 385 "ldo.c"
      var $6=(($5+20)|0); //@line 385 "ldo.c"
      var $7=HEAP32[(($6)>>2)]; //@line 385 "ldo.c"
      $ci=$7; //@line 385 "ldo.c"
      var $8=$1; //@line 386 "ldo.c"
      var $9=(($8+6)|0); //@line 386 "ldo.c"
      var $10=HEAPU8[($9)]; //@line 386 "ldo.c"
      var $11=(($10)&255); //@line 386 "ldo.c"
      var $12=(($11)|0)==0; //@line 386 "ldo.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 386 "ldo.c"
    case 3: 
      var $14=$1; //@line 388 "ldo.c"
      var $15=$firstArg; //@line 388 "ldo.c"
      var $16=((($15)-(12))|0); //@line 388 "ldo.c"
      var $17=__Z12luaD_precallP9lua_StateP10lua_TValuei($14, $16, -1); //@line 388 "ldo.c"
      var $18=(($17)|0)!=0; //@line 388 "ldo.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 388 "ldo.c"
    case 4: 
      __label__ = 13; break; //@line 389 "ldo.c"
    case 5: 
      __label__ = 12; break; //@line 390 "ldo.c"
    case 6: 
      var $22=$1; //@line 393 "ldo.c"
      var $23=(($22+6)|0); //@line 393 "ldo.c"
      HEAP8[($23)]=0; //@line 393 "ldo.c"
      var $24=$ci; //@line 394 "ldo.c"
      var $25=(($24+4)|0); //@line 394 "ldo.c"
      var $26=HEAP32[(($25)>>2)]; //@line 394 "ldo.c"
      var $27=(($26)|0); //@line 394 "ldo.c"
      var $28=$27; //@line 394 "ldo.c"
      var $29=HEAP32[(($28)>>2)]; //@line 394 "ldo.c"
      var $30=$29; //@line 394 "ldo.c"
      var $31=$30; //@line 394 "ldo.c"
      var $32=(($31+6)|0); //@line 394 "ldo.c"
      var $33=HEAP8[($32)]; //@line 394 "ldo.c"
      var $34=(($33 << 24) >> 24)!=0; //@line 394 "ldo.c"
      if ($34) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 394 "ldo.c"
    case 7: 
      var $36=$1; //@line 398 "ldo.c"
      var $37=$firstArg; //@line 398 "ldo.c"
      var $38=__Z12luaD_poscallP9lua_StateP10lua_TValue($36, $37); //@line 398 "ldo.c"
      var $39=(($38)|0)!=0; //@line 398 "ldo.c"
      if ($39) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 398 "ldo.c"
    case 8: 
      var $41=$1; //@line 399 "ldo.c"
      var $42=(($41+20)|0); //@line 399 "ldo.c"
      var $43=HEAP32[(($42)>>2)]; //@line 399 "ldo.c"
      var $44=(($43+8)|0); //@line 399 "ldo.c"
      var $45=HEAP32[(($44)>>2)]; //@line 399 "ldo.c"
      var $46=$1; //@line 399 "ldo.c"
      var $47=(($46+8)|0); //@line 399 "ldo.c"
      HEAP32[(($47)>>2)]=$45; //@line 399 "ldo.c"
      __label__ = 9; break; //@line 399 "ldo.c"
    case 9: 
      __label__ = 11; break; //@line 400 "ldo.c"
    case 10: 
      var $50=$1; //@line 402 "ldo.c"
      var $51=(($50+20)|0); //@line 402 "ldo.c"
      var $52=HEAP32[(($51)>>2)]; //@line 402 "ldo.c"
      var $53=(($52)|0); //@line 402 "ldo.c"
      var $54=HEAP32[(($53)>>2)]; //@line 402 "ldo.c"
      var $55=$1; //@line 402 "ldo.c"
      var $56=(($55+12)|0); //@line 402 "ldo.c"
      HEAP32[(($56)>>2)]=$54; //@line 402 "ldo.c"
      __label__ = 11; break; //@line 402 "ldo.c"
    case 11: 
      __label__ = 12; break; //@line 403 "ldo.c"
    case 12: 
      var $59=$1; //@line 404 "ldo.c"
      var $60=$1; //@line 404 "ldo.c"
      var $61=(($60+20)|0); //@line 404 "ldo.c"
      var $62=HEAP32[(($61)>>2)]; //@line 404 "ldo.c"
      var $63=$1; //@line 404 "ldo.c"
      var $64=(($63+40)|0); //@line 404 "ldo.c"
      var $65=HEAP32[(($64)>>2)]; //@line 404 "ldo.c"
      var $66=$62; //@line 404 "ldo.c"
      var $67=$65; //@line 404 "ldo.c"
      var $68=((($66)-($67))|0); //@line 404 "ldo.c"
      var $69=((((($68)|0))/(24))&-1); //@line 404 "ldo.c"
      __Z12luaV_executeP9lua_Statei($59, $69); //@line 404 "ldo.c"
      __label__ = 13; break; //@line 405 "ldo.c"
    case 13: 
      ;
      return; //@line 405 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6resumeP9lua_StatePv["X"]=1;

function _lua_yield($L, $nresults) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$nresults;
      var $3=$1; //@line 446 "ldo.c"
      var $4=(($3+52)|0); //@line 446 "ldo.c"
      var $5=HEAPU16[(($4)>>1)]; //@line 446 "ldo.c"
      var $6=(($5)&65535); //@line 446 "ldo.c"
      var $7=$1; //@line 446 "ldo.c"
      var $8=(($7+54)|0); //@line 446 "ldo.c"
      var $9=HEAPU16[(($8)>>1)]; //@line 446 "ldo.c"
      var $10=(($9)&65535); //@line 446 "ldo.c"
      var $11=(($6)|0) > (($10)|0); //@line 446 "ldo.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 446 "ldo.c"
    case 3: 
      var $13=$1; //@line 447 "ldo.c"
      __Z13luaG_runerrorP9lua_StatePKcz($13, ((STRING_TABLE.__str425)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 447 "ldo.c"
      __label__ = 4; break; //@line 447 "ldo.c"
    case 4: 
      var $15=$1; //@line 448 "ldo.c"
      var $16=(($15+8)|0); //@line 448 "ldo.c"
      var $17=HEAP32[(($16)>>2)]; //@line 448 "ldo.c"
      var $18=$2; //@line 448 "ldo.c"
      var $19=(((-$18))|0); //@line 448 "ldo.c"
      var $20=(($17+($19)*(12))|0); //@line 448 "ldo.c"
      var $21=$1; //@line 448 "ldo.c"
      var $22=(($21+12)|0); //@line 448 "ldo.c"
      HEAP32[(($22)>>2)]=$20; //@line 448 "ldo.c"
      var $23=$1; //@line 449 "ldo.c"
      var $24=(($23+6)|0); //@line 449 "ldo.c"
      HEAP8[($24)]=1; //@line 449 "ldo.c"
      STACKTOP = __stackBase__;
      return -1; //@line 451 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($L, $func, $u, $old_top, $ef) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $status;
      var $oldnCcalls;
      var $old_ci;
      var $old_allowhooks;
      var $old_errfunc;
      var $oldtop;
      $1=$L;
      $2=$func;
      $3=$u;
      $4=$old_top;
      $5=$ef;
      var $6=$1; //@line 458 "ldo.c"
      var $7=(($6+52)|0); //@line 458 "ldo.c"
      var $8=HEAP16[(($7)>>1)]; //@line 458 "ldo.c"
      $oldnCcalls=$8; //@line 458 "ldo.c"
      var $9=$1; //@line 459 "ldo.c"
      var $10=(($9+20)|0); //@line 459 "ldo.c"
      var $11=HEAP32[(($10)>>2)]; //@line 459 "ldo.c"
      var $12=$11; //@line 459 "ldo.c"
      var $13=$1; //@line 459 "ldo.c"
      var $14=(($13+40)|0); //@line 459 "ldo.c"
      var $15=HEAP32[(($14)>>2)]; //@line 459 "ldo.c"
      var $16=$15; //@line 459 "ldo.c"
      var $17=$12; //@line 459 "ldo.c"
      var $18=$16; //@line 459 "ldo.c"
      var $19=((($17)-($18))|0); //@line 459 "ldo.c"
      $old_ci=$19; //@line 459 "ldo.c"
      var $20=$1; //@line 460 "ldo.c"
      var $21=(($20+57)|0); //@line 460 "ldo.c"
      var $22=HEAP8[($21)]; //@line 460 "ldo.c"
      $old_allowhooks=$22; //@line 460 "ldo.c"
      var $23=$1; //@line 461 "ldo.c"
      var $24=(($23+108)|0); //@line 461 "ldo.c"
      var $25=HEAP32[(($24)>>2)]; //@line 461 "ldo.c"
      $old_errfunc=$25; //@line 461 "ldo.c"
      var $26=$5; //@line 462 "ldo.c"
      var $27=$1; //@line 462 "ldo.c"
      var $28=(($27+108)|0); //@line 462 "ldo.c"
      HEAP32[(($28)>>2)]=$26; //@line 462 "ldo.c"
      var $29=$1; //@line 463 "ldo.c"
      var $30=$2; //@line 463 "ldo.c"
      var $31=$3; //@line 463 "ldo.c"
      var $32=__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($29, $30, $31); //@line 463 "ldo.c"
      $status=$32; //@line 463 "ldo.c"
      var $33=$status; //@line 464 "ldo.c"
      var $34=(($33)|0)!=0; //@line 464 "ldo.c"
      if ($34) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 464 "ldo.c"
    case 3: 
      var $36=$1; //@line 465 "ldo.c"
      var $37=(($36+32)|0); //@line 465 "ldo.c"
      var $38=HEAP32[(($37)>>2)]; //@line 465 "ldo.c"
      var $39=$38; //@line 465 "ldo.c"
      var $40=$4; //@line 465 "ldo.c"
      var $41=(($39+$40)|0); //@line 465 "ldo.c"
      var $42=$41; //@line 465 "ldo.c"
      $oldtop=$42; //@line 465 "ldo.c"
      var $43=$1; //@line 466 "ldo.c"
      var $44=$oldtop; //@line 466 "ldo.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($43, $44); //@line 466 "ldo.c"
      var $45=$1; //@line 467 "ldo.c"
      var $46=$status; //@line 467 "ldo.c"
      var $47=$oldtop; //@line 467 "ldo.c"
      __Z16luaD_seterrorobjP9lua_StateiP10lua_TValue($45, $46, $47); //@line 467 "ldo.c"
      var $48=$oldnCcalls; //@line 468 "ldo.c"
      var $49=$1; //@line 468 "ldo.c"
      var $50=(($49+52)|0); //@line 468 "ldo.c"
      HEAP16[(($50)>>1)]=$48; //@line 468 "ldo.c"
      var $51=$1; //@line 469 "ldo.c"
      var $52=(($51+40)|0); //@line 469 "ldo.c"
      var $53=HEAP32[(($52)>>2)]; //@line 469 "ldo.c"
      var $54=$53; //@line 469 "ldo.c"
      var $55=$old_ci; //@line 469 "ldo.c"
      var $56=(($54+$55)|0); //@line 469 "ldo.c"
      var $57=$56; //@line 469 "ldo.c"
      var $58=$1; //@line 469 "ldo.c"
      var $59=(($58+20)|0); //@line 469 "ldo.c"
      HEAP32[(($59)>>2)]=$57; //@line 469 "ldo.c"
      var $60=$1; //@line 470 "ldo.c"
      var $61=(($60+20)|0); //@line 470 "ldo.c"
      var $62=HEAP32[(($61)>>2)]; //@line 470 "ldo.c"
      var $63=(($62)|0); //@line 470 "ldo.c"
      var $64=HEAP32[(($63)>>2)]; //@line 470 "ldo.c"
      var $65=$1; //@line 470 "ldo.c"
      var $66=(($65+12)|0); //@line 470 "ldo.c"
      HEAP32[(($66)>>2)]=$64; //@line 470 "ldo.c"
      var $67=$1; //@line 471 "ldo.c"
      var $68=(($67+20)|0); //@line 471 "ldo.c"
      var $69=HEAP32[(($68)>>2)]; //@line 471 "ldo.c"
      var $70=(($69+12)|0); //@line 471 "ldo.c"
      var $71=HEAP32[(($70)>>2)]; //@line 471 "ldo.c"
      var $72=$1; //@line 471 "ldo.c"
      var $73=(($72+24)|0); //@line 471 "ldo.c"
      HEAP32[(($73)>>2)]=$71; //@line 471 "ldo.c"
      var $74=$old_allowhooks; //@line 472 "ldo.c"
      var $75=$1; //@line 472 "ldo.c"
      var $76=(($75+57)|0); //@line 472 "ldo.c"
      HEAP8[($76)]=$74; //@line 472 "ldo.c"
      var $77=$1; //@line 473 "ldo.c"
      __Z19restore_stack_limitP9lua_State($77); //@line 473 "ldo.c"
      __label__ = 4; break; //@line 474 "ldo.c"
    case 4: 
      var $79=$old_errfunc; //@line 475 "ldo.c"
      var $80=$1; //@line 475 "ldo.c"
      var $81=(($80+108)|0); //@line 475 "ldo.c"
      HEAP32[(($81)>>2)]=$79; //@line 475 "ldo.c"
      var $82=$status; //@line 476 "ldo.c"
      ;
      return $82; //@line 476 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii["X"]=1;

function __Z19restore_stack_limitP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $inuse;
      $1=$L;
      var $2=$1; //@line 73 "ldo.c"
      var $3=(($2+48)|0); //@line 73 "ldo.c"
      var $4=HEAP32[(($3)>>2)]; //@line 73 "ldo.c"
      var $5=(($4)|0) > 20000; //@line 73 "ldo.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 73 "ldo.c"
    case 3: 
      var $7=$1; //@line 74 "ldo.c"
      var $8=(($7+20)|0); //@line 74 "ldo.c"
      var $9=HEAP32[(($8)>>2)]; //@line 74 "ldo.c"
      var $10=$1; //@line 74 "ldo.c"
      var $11=(($10+40)|0); //@line 74 "ldo.c"
      var $12=HEAP32[(($11)>>2)]; //@line 74 "ldo.c"
      var $13=$9; //@line 74 "ldo.c"
      var $14=$12; //@line 74 "ldo.c"
      var $15=((($13)-($14))|0); //@line 74 "ldo.c"
      var $16=((((($15)|0))/(24))&-1); //@line 74 "ldo.c"
      $inuse=$16; //@line 74 "ldo.c"
      var $17=$inuse; //@line 75 "ldo.c"
      var $18=((($17)+(1))|0); //@line 75 "ldo.c"
      var $19=(($18)|0) < 20000; //@line 75 "ldo.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 75 "ldo.c"
    case 4: 
      var $21=$1; //@line 76 "ldo.c"
      __Z14luaD_reallocCIP9lua_Statei($21, 20000); //@line 76 "ldo.c"
      __label__ = 5; break; //@line 76 "ldo.c"
    case 5: 
      __label__ = 6; break; //@line 77 "ldo.c"
    case 6: 
      ;
      return; //@line 78 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z20luaD_protectedparserP9lua_StateP3ZioPKc($L, $z, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $p=__stackBase__;
  var $status;
  $1=$L;
  $2=$z;
  $3=$name;
  var $4=$2; //@line 511 "ldo.c"
  var $5=(($p)|0); //@line 511 "ldo.c"
  HEAP32[(($5)>>2)]=$4; //@line 511 "ldo.c"
  var $6=$3; //@line 511 "ldo.c"
  var $7=(($p+16)|0); //@line 511 "ldo.c"
  HEAP32[(($7)>>2)]=$6; //@line 511 "ldo.c"
  var $8=(($p+4)|0); //@line 512 "ldo.c"
  var $9=(($8)|0); //@line 512 "ldo.c"
  HEAP32[(($9)>>2)]=0; //@line 512 "ldo.c"
  var $10=(($p+4)|0); //@line 512 "ldo.c"
  var $11=(($10+8)|0); //@line 512 "ldo.c"
  HEAP32[(($11)>>2)]=0; //@line 512 "ldo.c"
  var $12=$1; //@line 513 "ldo.c"
  var $13=$p; //@line 513 "ldo.c"
  var $14=$1; //@line 513 "ldo.c"
  var $15=(($14+8)|0); //@line 513 "ldo.c"
  var $16=HEAP32[(($15)>>2)]; //@line 513 "ldo.c"
  var $17=$16; //@line 513 "ldo.c"
  var $18=$1; //@line 513 "ldo.c"
  var $19=(($18+32)|0); //@line 513 "ldo.c"
  var $20=HEAP32[(($19)>>2)]; //@line 513 "ldo.c"
  var $21=$20; //@line 513 "ldo.c"
  var $22=$17; //@line 513 "ldo.c"
  var $23=$21; //@line 513 "ldo.c"
  var $24=((($22)-($23))|0); //@line 513 "ldo.c"
  var $25=$1; //@line 513 "ldo.c"
  var $26=(($25+108)|0); //@line 513 "ldo.c"
  var $27=HEAP32[(($26)>>2)]; //@line 513 "ldo.c"
  var $28=__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii($12, 14, $13, $24, $27); //@line 513 "ldo.c"
  $status=$28; //@line 513 "ldo.c"
  var $29=$1; //@line 514 "ldo.c"
  var $30=(($p+4)|0); //@line 514 "ldo.c"
  var $31=(($30)|0); //@line 514 "ldo.c"
  var $32=HEAP32[(($31)>>2)]; //@line 514 "ldo.c"
  var $33=(($p+4)|0); //@line 514 "ldo.c"
  var $34=(($33+8)|0); //@line 514 "ldo.c"
  var $35=HEAP32[(($34)>>2)]; //@line 514 "ldo.c"
  var $36=(($35)|0); //@line 514 "ldo.c"
  var $37=__Z13luaM_realloc_P9lua_StatePvjj($29, $32, $36, 0); //@line 514 "ldo.c"
  var $38=(($p+4)|0); //@line 514 "ldo.c"
  var $39=(($38)|0); //@line 514 "ldo.c"
  HEAP32[(($39)>>2)]=$37; //@line 514 "ldo.c"
  var $40=(($p+4)|0); //@line 514 "ldo.c"
  var $41=(($40+8)|0); //@line 514 "ldo.c"
  HEAP32[(($41)>>2)]=0; //@line 514 "ldo.c"
  var $42=$status; //@line 515 "ldo.c"
  STACKTOP = __stackBase__;
  return $42; //@line 515 "ldo.c"
}
__Z20luaD_protectedparserP9lua_StateP3ZioPKc["X"]=1;

function __Z8f_parserP9lua_StatePv($L, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $tf;
      var $cl;
      var $p;
      var $c;
      var $i_o;
      $1=$L;
      $2=$ud;
      var $3=$2; //@line 494 "ldo.c"
      var $4=$3; //@line 494 "ldo.c"
      $p=$4; //@line 494 "ldo.c"
      var $5=$p; //@line 495 "ldo.c"
      var $6=(($5)|0); //@line 495 "ldo.c"
      var $7=HEAP32[(($6)>>2)]; //@line 495 "ldo.c"
      var $8=__Z14luaZ_lookaheadP3Zio($7); //@line 495 "ldo.c"
      $c=$8; //@line 495 "ldo.c"
      var $9=$1; //@line 496 "ldo.c"
      var $10=(($9+16)|0); //@line 496 "ldo.c"
      var $11=HEAP32[(($10)>>2)]; //@line 496 "ldo.c"
      var $12=(($11+68)|0); //@line 496 "ldo.c"
      var $13=HEAPU32[(($12)>>2)]; //@line 496 "ldo.c"
      var $14=$1; //@line 496 "ldo.c"
      var $15=(($14+16)|0); //@line 496 "ldo.c"
      var $16=HEAP32[(($15)>>2)]; //@line 496 "ldo.c"
      var $17=(($16+64)|0); //@line 496 "ldo.c"
      var $18=HEAPU32[(($17)>>2)]; //@line 496 "ldo.c"
      var $19=(($13)>>>0) >= (($18)>>>0); //@line 496 "ldo.c"
      if ($19) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 496 "ldo.c"
    case 3: 
      var $21=$1; //@line 496 "ldo.c"
      __Z9luaC_stepP9lua_State($21); //@line 496 "ldo.c"
      __label__ = 4; break; //@line 496 "ldo.c"
    case 4: 
      var $23=$c; //@line 497 "ldo.c"
      var $24=HEAP8[(((STRING_TABLE.__str526)|0))]; //@line 497 "ldo.c"
      var $25=(($24 << 24) >> 24); //@line 497 "ldo.c"
      var $26=(($23)|0)==(($25)|0); //@line 497 "ldo.c"
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 497 "ldo.c"
    case 5: 
      var $30 = 10;__label__ = 7; break; //@line 497 "ldo.c"
    case 6: 
      var $30 = 12;__label__ = 7; break; //@line 497 "ldo.c"
    case 7: 
      var $30; //@line 497 "ldo.c"
      var $31=$1; //@line 497 "ldo.c"
      var $32=$p; //@line 497 "ldo.c"
      var $33=(($32)|0); //@line 497 "ldo.c"
      var $34=HEAP32[(($33)>>2)]; //@line 497 "ldo.c"
      var $35=$p; //@line 497 "ldo.c"
      var $36=(($35+4)|0); //@line 497 "ldo.c"
      var $37=$p; //@line 497 "ldo.c"
      var $38=(($37+16)|0); //@line 497 "ldo.c"
      var $39=HEAP32[(($38)>>2)]; //@line 497 "ldo.c"
      var $40=FUNCTION_TABLE[$30]($31, $34, $36, $39); //@line 497 "ldo.c"
      $tf=$40; //@line 497 "ldo.c"
      var $41=$1; //@line 499 "ldo.c"
      var $42=$tf; //@line 499 "ldo.c"
      var $43=(($42+72)|0); //@line 499 "ldo.c"
      var $44=HEAPU8[($43)]; //@line 499 "ldo.c"
      var $45=(($44)&255); //@line 499 "ldo.c"
      var $46=$1; //@line 499 "ldo.c"
      var $47=(($46+72)|0); //@line 499 "ldo.c"
      var $48=(($47)|0); //@line 499 "ldo.c"
      var $49=$48; //@line 499 "ldo.c"
      var $50=HEAP32[(($49)>>2)]; //@line 499 "ldo.c"
      var $51=$50; //@line 499 "ldo.c"
      var $52=__Z16luaF_newLclosureP9lua_StateiP5Table($41, $45, $51); //@line 499 "ldo.c"
      $cl=$52; //@line 499 "ldo.c"
      var $53=$tf; //@line 500 "ldo.c"
      var $54=$cl; //@line 500 "ldo.c"
      var $55=$54; //@line 500 "ldo.c"
      var $56=(($55+16)|0); //@line 500 "ldo.c"
      HEAP32[(($56)>>2)]=$53; //@line 500 "ldo.c"
      $i=0; //@line 501 "ldo.c"
      __label__ = 8; break; //@line 501 "ldo.c"
    case 8: 
      var $58=$i; //@line 501 "ldo.c"
      var $59=$tf; //@line 501 "ldo.c"
      var $60=(($59+72)|0); //@line 501 "ldo.c"
      var $61=HEAPU8[($60)]; //@line 501 "ldo.c"
      var $62=(($61)&255); //@line 501 "ldo.c"
      var $63=(($58)|0) < (($62)|0); //@line 501 "ldo.c"
      if ($63) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 501 "ldo.c"
    case 9: 
      var $65=$1; //@line 502 "ldo.c"
      var $66=__Z13luaF_newupvalP9lua_State($65); //@line 502 "ldo.c"
      var $67=$i; //@line 502 "ldo.c"
      var $68=$cl; //@line 502 "ldo.c"
      var $69=$68; //@line 502 "ldo.c"
      var $70=(($69+20)|0); //@line 502 "ldo.c"
      var $71=(($70+($67<<2))|0); //@line 502 "ldo.c"
      HEAP32[(($71)>>2)]=$66; //@line 502 "ldo.c"
      __label__ = 10; break; //@line 502 "ldo.c"
    case 10: 
      var $73=$i; //@line 501 "ldo.c"
      var $74=((($73)+(1))|0); //@line 501 "ldo.c"
      $i=$74; //@line 501 "ldo.c"
      __label__ = 8; break; //@line 501 "ldo.c"
    case 11: 
      var $76=$1; //@line 503 "ldo.c"
      var $77=(($76+8)|0); //@line 503 "ldo.c"
      var $78=HEAP32[(($77)>>2)]; //@line 503 "ldo.c"
      $i_o=$78; //@line 503 "ldo.c"
      var $79=$cl; //@line 503 "ldo.c"
      var $80=$79; //@line 503 "ldo.c"
      var $81=$i_o; //@line 503 "ldo.c"
      var $82=(($81)|0); //@line 503 "ldo.c"
      var $83=$82; //@line 503 "ldo.c"
      HEAP32[(($83)>>2)]=$80; //@line 503 "ldo.c"
      var $84=$i_o; //@line 503 "ldo.c"
      var $85=(($84+8)|0); //@line 503 "ldo.c"
      HEAP32[(($85)>>2)]=6; //@line 503 "ldo.c"
      var $86=$1; //@line 504 "ldo.c"
      var $87=(($86+28)|0); //@line 504 "ldo.c"
      var $88=HEAP32[(($87)>>2)]; //@line 504 "ldo.c"
      var $89=$88; //@line 504 "ldo.c"
      var $90=$1; //@line 504 "ldo.c"
      var $91=(($90+8)|0); //@line 504 "ldo.c"
      var $92=HEAP32[(($91)>>2)]; //@line 504 "ldo.c"
      var $93=$92; //@line 504 "ldo.c"
      var $94=$89; //@line 504 "ldo.c"
      var $95=$93; //@line 504 "ldo.c"
      var $96=((($94)-($95))|0); //@line 504 "ldo.c"
      var $97=(($96)|0) <= 12; //@line 504 "ldo.c"
      if ($97) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 504 "ldo.c"
    case 12: 
      var $99=$1; //@line 504 "ldo.c"
      __Z14luaD_growstackP9lua_Statei($99, 1); //@line 504 "ldo.c"
      __label__ = 14; break; //@line 504 "ldo.c"
    case 13: 
      __label__ = 14; break; //@line 504 "ldo.c"
    case 14: 
      var $102=$1; //@line 504 "ldo.c"
      var $103=(($102+8)|0); //@line 504 "ldo.c"
      var $104=HEAP32[(($103)>>2)]; //@line 504 "ldo.c"
      var $105=(($104+12)|0); //@line 504 "ldo.c"
      HEAP32[(($103)>>2)]=$105; //@line 504 "ldo.c"
      ;
      return; //@line 505 "ldo.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8f_parserP9lua_StatePv["X"]=1;

function __Z9luaU_dumpP9lua_StatePK5ProtoPFiS0_PKvjPvES6_i($L, $f, $w, $data, $strip) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $D=__stackBase__;
  $1=$L;
  $2=$f;
  $3=$w;
  $4=$data;
  $5=$strip;
  var $6=$1; //@line 156 "ldump.c"
  var $7=(($D)|0); //@line 156 "ldump.c"
  HEAP32[(($7)>>2)]=$6; //@line 156 "ldump.c"
  var $8=$3; //@line 157 "ldump.c"
  var $9=(($D+4)|0); //@line 157 "ldump.c"
  HEAP32[(($9)>>2)]=$8; //@line 157 "ldump.c"
  var $10=$4; //@line 158 "ldump.c"
  var $11=(($D+8)|0); //@line 158 "ldump.c"
  HEAP32[(($11)>>2)]=$10; //@line 158 "ldump.c"
  var $12=$5; //@line 159 "ldump.c"
  var $13=(($D+12)|0); //@line 159 "ldump.c"
  HEAP32[(($13)>>2)]=$12; //@line 159 "ldump.c"
  var $14=(($D+16)|0); //@line 160 "ldump.c"
  HEAP32[(($14)>>2)]=0; //@line 160 "ldump.c"
  __Z10DumpHeaderP9DumpState($D); //@line 161 "ldump.c"
  var $15=$2; //@line 162 "ldump.c"
  __Z12DumpFunctionPK5ProtoPK7TStringP9DumpState($15, 0, $D); //@line 162 "ldump.c"
  var $16=(($D+16)|0); //@line 163 "ldump.c"
  var $17=HEAP32[(($16)>>2)]; //@line 163 "ldump.c"
  STACKTOP = __stackBase__;
  return $17; //@line 163 "ldump.c"
}


function __Z10DumpHeaderP9DumpState($D) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $h=__stackBase__;
  $1=$D;
  var $2=(($h)|0); //@line 146 "ldump.c"
  __Z11luaU_headerPc($2); //@line 146 "ldump.c"
  var $3=(($h)|0); //@line 147 "ldump.c"
  var $4=$1; //@line 147 "ldump.c"
  __Z9DumpBlockPKvjP9DumpState($3, 12, $4); //@line 147 "ldump.c"
  STACKTOP = __stackBase__;
  return; //@line 148 "ldump.c"
}


function __Z12DumpFunctionPK5ProtoPK7TStringP9DumpState($f, $p, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$f;
      $2=$p;
      $3=$D;
      var $4=$1; //@line 131 "ldump.c"
      var $5=(($4+32)|0); //@line 131 "ldump.c"
      var $6=HEAP32[(($5)>>2)]; //@line 131 "ldump.c"
      var $7=$2; //@line 131 "ldump.c"
      var $8=(($6)|0)==(($7)|0); //@line 131 "ldump.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 131 "ldump.c"
    case 3: 
      var $10=$3; //@line 131 "ldump.c"
      var $11=(($10+12)|0); //@line 131 "ldump.c"
      var $12=HEAP32[(($11)>>2)]; //@line 131 "ldump.c"
      var $13=(($12)|0)!=0; //@line 131 "ldump.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 131 "ldump.c"
    case 4: 
      var $20 = 0;__label__ = 6; break; //@line 131 "ldump.c"
    case 5: 
      var $16=$1; //@line 131 "ldump.c"
      var $17=(($16+32)|0); //@line 131 "ldump.c"
      var $18=HEAP32[(($17)>>2)]; //@line 131 "ldump.c"
      var $20 = $18;__label__ = 6; break; //@line 131 "ldump.c"
    case 6: 
      var $20; //@line 131 "ldump.c"
      var $21=$3; //@line 131 "ldump.c"
      __Z10DumpStringPK7TStringP9DumpState($20, $21); //@line 131 "ldump.c"
      var $22=$1; //@line 132 "ldump.c"
      var $23=(($22+60)|0); //@line 132 "ldump.c"
      var $24=HEAP32[(($23)>>2)]; //@line 132 "ldump.c"
      var $25=$3; //@line 132 "ldump.c"
      __Z7DumpIntiP9DumpState($24, $25); //@line 132 "ldump.c"
      var $26=$1; //@line 133 "ldump.c"
      var $27=(($26+64)|0); //@line 133 "ldump.c"
      var $28=HEAP32[(($27)>>2)]; //@line 133 "ldump.c"
      var $29=$3; //@line 133 "ldump.c"
      __Z7DumpIntiP9DumpState($28, $29); //@line 133 "ldump.c"
      var $30=$1; //@line 134 "ldump.c"
      var $31=(($30+72)|0); //@line 134 "ldump.c"
      var $32=HEAPU8[($31)]; //@line 134 "ldump.c"
      var $33=(($32)&255); //@line 134 "ldump.c"
      var $34=$3; //@line 134 "ldump.c"
      __Z8DumpChariP9DumpState($33, $34); //@line 134 "ldump.c"
      var $35=$1; //@line 135 "ldump.c"
      var $36=(($35+73)|0); //@line 135 "ldump.c"
      var $37=HEAPU8[($36)]; //@line 135 "ldump.c"
      var $38=(($37)&255); //@line 135 "ldump.c"
      var $39=$3; //@line 135 "ldump.c"
      __Z8DumpChariP9DumpState($38, $39); //@line 135 "ldump.c"
      var $40=$1; //@line 136 "ldump.c"
      var $41=(($40+74)|0); //@line 136 "ldump.c"
      var $42=HEAPU8[($41)]; //@line 136 "ldump.c"
      var $43=(($42)&255); //@line 136 "ldump.c"
      var $44=$3; //@line 136 "ldump.c"
      __Z8DumpChariP9DumpState($43, $44); //@line 136 "ldump.c"
      var $45=$1; //@line 137 "ldump.c"
      var $46=(($45+75)|0); //@line 137 "ldump.c"
      var $47=HEAPU8[($46)]; //@line 137 "ldump.c"
      var $48=(($47)&255); //@line 137 "ldump.c"
      var $49=$3; //@line 137 "ldump.c"
      __Z8DumpChariP9DumpState($48, $49); //@line 137 "ldump.c"
      var $50=$1; //@line 138 "ldump.c"
      var $51=(($50+12)|0); //@line 138 "ldump.c"
      var $52=HEAP32[(($51)>>2)]; //@line 138 "ldump.c"
      var $53=$52; //@line 138 "ldump.c"
      var $54=$1; //@line 138 "ldump.c"
      var $55=(($54+44)|0); //@line 138 "ldump.c"
      var $56=HEAP32[(($55)>>2)]; //@line 138 "ldump.c"
      var $57=$3; //@line 138 "ldump.c"
      __Z10DumpVectorPKvijP9DumpState($53, $56, 4, $57); //@line 138 "ldump.c"
      var $58=$1; //@line 139 "ldump.c"
      var $59=$3; //@line 139 "ldump.c"
      __Z13DumpConstantsPK5ProtoP9DumpState($58, $59); //@line 139 "ldump.c"
      var $60=$1; //@line 140 "ldump.c"
      var $61=$3; //@line 140 "ldump.c"
      __Z9DumpDebugPK5ProtoP9DumpState($60, $61); //@line 140 "ldump.c"
      ;
      return; //@line 141 "ldump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12DumpFunctionPK5ProtoPK7TStringP9DumpState["X"]=1;

function __Z10DumpStringPK7TStringP9DumpState($s, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size=__stackBase__;
      var $size1=(__stackBase__)+(4);
      $1=$s;
      $2=$D;
      var $3=$1; //@line 63 "ldump.c"
      var $4=(($3)|0)==0; //@line 63 "ldump.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 63 "ldump.c"
    case 3: 
      var $6=$1; //@line 63 "ldump.c"
      var $7=(($6+16)|0); //@line 63 "ldump.c"
      var $8=$7; //@line 63 "ldump.c"
      var $9=(($8)|0)==0; //@line 63 "ldump.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 63 "ldump.c"
    case 4: 
      HEAP32[(($size)>>2)]=0; //@line 65 "ldump.c"
      var $11=$size; //@line 66 "ldump.c"
      var $12=$2; //@line 66 "ldump.c"
      __Z9DumpBlockPKvjP9DumpState($11, 4, $12); //@line 66 "ldump.c"
      __label__ = 6; break; //@line 67 "ldump.c"
    case 5: 
      var $14=$1; //@line 70 "ldump.c"
      var $15=$14; //@line 70 "ldump.c"
      var $16=(($15+12)|0); //@line 70 "ldump.c"
      var $17=HEAP32[(($16)>>2)]; //@line 70 "ldump.c"
      var $18=((($17)+(1))|0); //@line 70 "ldump.c"
      HEAP32[(($size1)>>2)]=$18; //@line 70 "ldump.c"
      var $19=$size1; //@line 71 "ldump.c"
      var $20=$2; //@line 71 "ldump.c"
      __Z9DumpBlockPKvjP9DumpState($19, 4, $20); //@line 71 "ldump.c"
      var $21=$1; //@line 72 "ldump.c"
      var $22=(($21+16)|0); //@line 72 "ldump.c"
      var $23=$22; //@line 72 "ldump.c"
      var $24=HEAP32[(($size1)>>2)]; //@line 72 "ldump.c"
      var $25=$2; //@line 72 "ldump.c"
      __Z9DumpBlockPKvjP9DumpState($23, $24, $25); //@line 72 "ldump.c"
      __label__ = 6; break; //@line 73 "ldump.c"
    case 6: 
      STACKTOP = __stackBase__;
      return; //@line 74 "ldump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7DumpIntiP9DumpState($x, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1=__stackBase__;
  var $2;
  HEAP32[(($1)>>2)]=$x;
  $2=$D;
  var $3=$1; //@line 47 "ldump.c"
  var $4=$2; //@line 47 "ldump.c"
  __Z9DumpBlockPKvjP9DumpState($3, 4, $4); //@line 47 "ldump.c"
  STACKTOP = __stackBase__;
  return; //@line 48 "ldump.c"
}


function __Z8DumpChariP9DumpState($y, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $2;
  var $x=__stackBase__;
  $1=$y;
  $2=$D;
  var $3=$1; //@line 41 "ldump.c"
  var $4=(($3) & 255); //@line 41 "ldump.c"
  HEAP8[($x)]=$4; //@line 41 "ldump.c"
  var $5=$2; //@line 42 "ldump.c"
  __Z9DumpBlockPKvjP9DumpState($x, 1, $5); //@line 42 "ldump.c"
  STACKTOP = __stackBase__;
  return; //@line 43 "ldump.c"
}


function __Z10DumpVectorPKvijP9DumpState($b, $n, $size, $D) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$b;
  $2=$n;
  $3=$size;
  $4=$D;
  var $5=$2; //@line 57 "ldump.c"
  var $6=$4; //@line 57 "ldump.c"
  __Z7DumpIntiP9DumpState($5, $6); //@line 57 "ldump.c"
  var $7=$1; //@line 58 "ldump.c"
  var $8=$2; //@line 58 "ldump.c"
  var $9=$3; //@line 58 "ldump.c"
  var $10=((($8)*($9))|0); //@line 58 "ldump.c"
  var $11=$4; //@line 58 "ldump.c"
  __Z9DumpBlockPKvjP9DumpState($7, $10, $11); //@line 58 "ldump.c"
  ;
  return; //@line 59 "ldump.c"
}


function __Z13DumpConstantsPK5ProtoP9DumpState($f, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      var $o;
      $1=$f;
      $2=$D;
      var $3=$1; //@line 82 "ldump.c"
      var $4=(($3+40)|0); //@line 82 "ldump.c"
      var $5=HEAP32[(($4)>>2)]; //@line 82 "ldump.c"
      $n=$5; //@line 82 "ldump.c"
      var $6=$n; //@line 83 "ldump.c"
      var $7=$2; //@line 83 "ldump.c"
      __Z7DumpIntiP9DumpState($6, $7); //@line 83 "ldump.c"
      $i=0; //@line 84 "ldump.c"
      __label__ = 3; break; //@line 84 "ldump.c"
    case 3: 
      var $9=$i; //@line 84 "ldump.c"
      var $10=$n; //@line 84 "ldump.c"
      var $11=(($9)|0) < (($10)|0); //@line 84 "ldump.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 84 "ldump.c"
    case 4: 
      var $13=$i; //@line 86 "ldump.c"
      var $14=$1; //@line 86 "ldump.c"
      var $15=(($14+8)|0); //@line 86 "ldump.c"
      var $16=HEAP32[(($15)>>2)]; //@line 86 "ldump.c"
      var $17=(($16+($13)*(12))|0); //@line 86 "ldump.c"
      $o=$17; //@line 86 "ldump.c"
      var $18=$o; //@line 87 "ldump.c"
      var $19=(($18+8)|0); //@line 87 "ldump.c"
      var $20=HEAP32[(($19)>>2)]; //@line 87 "ldump.c"
      var $21=$2; //@line 87 "ldump.c"
      __Z8DumpChariP9DumpState($20, $21); //@line 87 "ldump.c"
      var $22=$o; //@line 88 "ldump.c"
      var $23=(($22+8)|0); //@line 88 "ldump.c"
      var $24=HEAP32[(($23)>>2)]; //@line 88 "ldump.c"
      if ((($24)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($24)|0) == 1) {
        __label__ = 6; break;
      }
      else if ((($24)|0) == 3) {
        __label__ = 7; break;
      }
      else if ((($24)|0) == 4) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 5: 
      __label__ = 10; break; //@line 91 "ldump.c"
    case 6: 
      var $27=$o; //@line 93 "ldump.c"
      var $28=(($27)|0); //@line 93 "ldump.c"
      var $29=$28; //@line 93 "ldump.c"
      var $30=HEAP32[(($29)>>2)]; //@line 93 "ldump.c"
      var $31=$2; //@line 93 "ldump.c"
      __Z8DumpChariP9DumpState($30, $31); //@line 93 "ldump.c"
      __label__ = 10; break; //@line 94 "ldump.c"
    case 7: 
      var $33=$o; //@line 96 "ldump.c"
      var $34=(($33)|0); //@line 96 "ldump.c"
      var $35=$34; //@line 96 "ldump.c"
      var $36=(tempDoubleI32[0]=HEAP32[(($35)>>2)],tempDoubleI32[1]=HEAP32[((($35)+(4))>>2)],tempDoubleF64[0]); //@line 96 "ldump.c"
      var $37=$2; //@line 96 "ldump.c"
      __Z10DumpNumberdP9DumpState($36, $37); //@line 96 "ldump.c"
      __label__ = 10; break; //@line 97 "ldump.c"
    case 8: 
      var $39=$o; //@line 99 "ldump.c"
      var $40=(($39)|0); //@line 99 "ldump.c"
      var $41=$40; //@line 99 "ldump.c"
      var $42=HEAP32[(($41)>>2)]; //@line 99 "ldump.c"
      var $43=$42; //@line 99 "ldump.c"
      var $44=$2; //@line 99 "ldump.c"
      __Z10DumpStringPK7TStringP9DumpState($43, $44); //@line 99 "ldump.c"
      __label__ = 10; break; //@line 100 "ldump.c"
    case 9: 
      __label__ = 10; break; //@line 103 "ldump.c"
    case 10: 
      __label__ = 11; break; //@line 105 "ldump.c"
    case 11: 
      var $48=$i; //@line 84 "ldump.c"
      var $49=((($48)+(1))|0); //@line 84 "ldump.c"
      $i=$49; //@line 84 "ldump.c"
      __label__ = 3; break; //@line 84 "ldump.c"
    case 12: 
      var $51=$1; //@line 106 "ldump.c"
      var $52=(($51+52)|0); //@line 106 "ldump.c"
      var $53=HEAP32[(($52)>>2)]; //@line 106 "ldump.c"
      $n=$53; //@line 106 "ldump.c"
      var $54=$n; //@line 107 "ldump.c"
      var $55=$2; //@line 107 "ldump.c"
      __Z7DumpIntiP9DumpState($54, $55); //@line 107 "ldump.c"
      $i=0; //@line 108 "ldump.c"
      __label__ = 13; break; //@line 108 "ldump.c"
    case 13: 
      var $57=$i; //@line 108 "ldump.c"
      var $58=$n; //@line 108 "ldump.c"
      var $59=(($57)|0) < (($58)|0); //@line 108 "ldump.c"
      if ($59) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 108 "ldump.c"
    case 14: 
      var $61=$i; //@line 108 "ldump.c"
      var $62=$1; //@line 108 "ldump.c"
      var $63=(($62+16)|0); //@line 108 "ldump.c"
      var $64=HEAP32[(($63)>>2)]; //@line 108 "ldump.c"
      var $65=(($64+($61<<2))|0); //@line 108 "ldump.c"
      var $66=HEAP32[(($65)>>2)]; //@line 108 "ldump.c"
      var $67=$1; //@line 108 "ldump.c"
      var $68=(($67+32)|0); //@line 108 "ldump.c"
      var $69=HEAP32[(($68)>>2)]; //@line 108 "ldump.c"
      var $70=$2; //@line 108 "ldump.c"
      __Z12DumpFunctionPK5ProtoPK7TStringP9DumpState($66, $69, $70); //@line 108 "ldump.c"
      __label__ = 15; break; //@line 108 "ldump.c"
    case 15: 
      var $72=$i; //@line 108 "ldump.c"
      var $73=((($72)+(1))|0); //@line 108 "ldump.c"
      $i=$73; //@line 108 "ldump.c"
      __label__ = 13; break; //@line 108 "ldump.c"
    case 16: 
      ;
      return; //@line 109 "ldump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13DumpConstantsPK5ProtoP9DumpState["X"]=1;

function __Z9DumpDebugPK5ProtoP9DumpState($f, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      $1=$f;
      $2=$D;
      var $3=$2; //@line 114 "ldump.c"
      var $4=(($3+12)|0); //@line 114 "ldump.c"
      var $5=HEAP32[(($4)>>2)]; //@line 114 "ldump.c"
      var $6=(($5)|0)!=0; //@line 114 "ldump.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 114 "ldump.c"
    case 3: 
      var $13 = 0;__label__ = 5; break; //@line 114 "ldump.c"
    case 4: 
      var $9=$1; //@line 114 "ldump.c"
      var $10=(($9+48)|0); //@line 114 "ldump.c"
      var $11=HEAP32[(($10)>>2)]; //@line 114 "ldump.c"
      var $13 = $11;__label__ = 5; break; //@line 114 "ldump.c"
    case 5: 
      var $13; //@line 114 "ldump.c"
      $n=$13; //@line 114 "ldump.c"
      var $14=$1; //@line 115 "ldump.c"
      var $15=(($14+20)|0); //@line 115 "ldump.c"
      var $16=HEAP32[(($15)>>2)]; //@line 115 "ldump.c"
      var $17=$16; //@line 115 "ldump.c"
      var $18=$n; //@line 115 "ldump.c"
      var $19=$2; //@line 115 "ldump.c"
      __Z10DumpVectorPKvijP9DumpState($17, $18, 4, $19); //@line 115 "ldump.c"
      var $20=$2; //@line 116 "ldump.c"
      var $21=(($20+12)|0); //@line 116 "ldump.c"
      var $22=HEAP32[(($21)>>2)]; //@line 116 "ldump.c"
      var $23=(($22)|0)!=0; //@line 116 "ldump.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 116 "ldump.c"
    case 6: 
      var $30 = 0;__label__ = 8; break; //@line 116 "ldump.c"
    case 7: 
      var $26=$1; //@line 116 "ldump.c"
      var $27=(($26+56)|0); //@line 116 "ldump.c"
      var $28=HEAP32[(($27)>>2)]; //@line 116 "ldump.c"
      var $30 = $28;__label__ = 8; break; //@line 116 "ldump.c"
    case 8: 
      var $30; //@line 116 "ldump.c"
      $n=$30; //@line 116 "ldump.c"
      var $31=$n; //@line 117 "ldump.c"
      var $32=$2; //@line 117 "ldump.c"
      __Z7DumpIntiP9DumpState($31, $32); //@line 117 "ldump.c"
      $i=0; //@line 118 "ldump.c"
      __label__ = 9; break; //@line 118 "ldump.c"
    case 9: 
      var $34=$i; //@line 118 "ldump.c"
      var $35=$n; //@line 118 "ldump.c"
      var $36=(($34)|0) < (($35)|0); //@line 118 "ldump.c"
      if ($36) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 118 "ldump.c"
    case 10: 
      var $38=$i; //@line 120 "ldump.c"
      var $39=$1; //@line 120 "ldump.c"
      var $40=(($39+24)|0); //@line 120 "ldump.c"
      var $41=HEAP32[(($40)>>2)]; //@line 120 "ldump.c"
      var $42=(($41+($38)*(12))|0); //@line 120 "ldump.c"
      var $43=(($42)|0); //@line 120 "ldump.c"
      var $44=HEAP32[(($43)>>2)]; //@line 120 "ldump.c"
      var $45=$2; //@line 120 "ldump.c"
      __Z10DumpStringPK7TStringP9DumpState($44, $45); //@line 120 "ldump.c"
      var $46=$i; //@line 121 "ldump.c"
      var $47=$1; //@line 121 "ldump.c"
      var $48=(($47+24)|0); //@line 121 "ldump.c"
      var $49=HEAP32[(($48)>>2)]; //@line 121 "ldump.c"
      var $50=(($49+($46)*(12))|0); //@line 121 "ldump.c"
      var $51=(($50+4)|0); //@line 121 "ldump.c"
      var $52=HEAP32[(($51)>>2)]; //@line 121 "ldump.c"
      var $53=$2; //@line 121 "ldump.c"
      __Z7DumpIntiP9DumpState($52, $53); //@line 121 "ldump.c"
      var $54=$i; //@line 122 "ldump.c"
      var $55=$1; //@line 122 "ldump.c"
      var $56=(($55+24)|0); //@line 122 "ldump.c"
      var $57=HEAP32[(($56)>>2)]; //@line 122 "ldump.c"
      var $58=(($57+($54)*(12))|0); //@line 122 "ldump.c"
      var $59=(($58+8)|0); //@line 122 "ldump.c"
      var $60=HEAP32[(($59)>>2)]; //@line 122 "ldump.c"
      var $61=$2; //@line 122 "ldump.c"
      __Z7DumpIntiP9DumpState($60, $61); //@line 122 "ldump.c"
      __label__ = 11; break; //@line 123 "ldump.c"
    case 11: 
      var $63=$i; //@line 118 "ldump.c"
      var $64=((($63)+(1))|0); //@line 118 "ldump.c"
      $i=$64; //@line 118 "ldump.c"
      __label__ = 9; break; //@line 118 "ldump.c"
    case 12: 
      var $66=$2; //@line 124 "ldump.c"
      var $67=(($66+12)|0); //@line 124 "ldump.c"
      var $68=HEAP32[(($67)>>2)]; //@line 124 "ldump.c"
      var $69=(($68)|0)!=0; //@line 124 "ldump.c"
      if ($69) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 124 "ldump.c"
    case 13: 
      var $76 = 0;__label__ = 15; break; //@line 124 "ldump.c"
    case 14: 
      var $72=$1; //@line 124 "ldump.c"
      var $73=(($72+36)|0); //@line 124 "ldump.c"
      var $74=HEAP32[(($73)>>2)]; //@line 124 "ldump.c"
      var $76 = $74;__label__ = 15; break; //@line 124 "ldump.c"
    case 15: 
      var $76; //@line 124 "ldump.c"
      $n=$76; //@line 124 "ldump.c"
      var $77=$n; //@line 125 "ldump.c"
      var $78=$2; //@line 125 "ldump.c"
      __Z7DumpIntiP9DumpState($77, $78); //@line 125 "ldump.c"
      $i=0; //@line 126 "ldump.c"
      __label__ = 16; break; //@line 126 "ldump.c"
    case 16: 
      var $80=$i; //@line 126 "ldump.c"
      var $81=$n; //@line 126 "ldump.c"
      var $82=(($80)|0) < (($81)|0); //@line 126 "ldump.c"
      if ($82) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 126 "ldump.c"
    case 17: 
      var $84=$i; //@line 126 "ldump.c"
      var $85=$1; //@line 126 "ldump.c"
      var $86=(($85+28)|0); //@line 126 "ldump.c"
      var $87=HEAP32[(($86)>>2)]; //@line 126 "ldump.c"
      var $88=(($87+($84<<2))|0); //@line 126 "ldump.c"
      var $89=HEAP32[(($88)>>2)]; //@line 126 "ldump.c"
      var $90=$2; //@line 126 "ldump.c"
      __Z10DumpStringPK7TStringP9DumpState($89, $90); //@line 126 "ldump.c"
      __label__ = 18; break; //@line 126 "ldump.c"
    case 18: 
      var $92=$i; //@line 126 "ldump.c"
      var $93=((($92)+(1))|0); //@line 126 "ldump.c"
      $i=$93; //@line 126 "ldump.c"
      __label__ = 16; break; //@line 126 "ldump.c"
    case 19: 
      ;
      return; //@line 127 "ldump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9DumpDebugPK5ProtoP9DumpState["X"]=1;

function __Z10DumpNumberdP9DumpState($x, $D) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;

  var $1=__stackBase__;
  var $2;
  (tempDoubleF64[0]=$x,HEAP32[(($1)>>2)]=tempDoubleI32[0],HEAP32[((($1)+(4))>>2)]=tempDoubleI32[1]);
  $2=$D;
  var $3=$1; //@line 52 "ldump.c"
  var $4=$2; //@line 52 "ldump.c"
  __Z9DumpBlockPKvjP9DumpState($3, 8, $4); //@line 52 "ldump.c"
  STACKTOP = __stackBase__;
  return; //@line 53 "ldump.c"
}


function __Z9DumpBlockPKvjP9DumpState($b, $size, $D) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$b;
      $2=$size;
      $3=$D;
      var $4=$3; //@line 31 "ldump.c"
      var $5=(($4+16)|0); //@line 31 "ldump.c"
      var $6=HEAP32[(($5)>>2)]; //@line 31 "ldump.c"
      var $7=(($6)|0)==0; //@line 31 "ldump.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 31 "ldump.c"
    case 3: 
      var $9=$3; //@line 34 "ldump.c"
      var $10=(($9+4)|0); //@line 34 "ldump.c"
      var $11=HEAP32[(($10)>>2)]; //@line 34 "ldump.c"
      var $12=$3; //@line 34 "ldump.c"
      var $13=(($12)|0); //@line 34 "ldump.c"
      var $14=HEAP32[(($13)>>2)]; //@line 34 "ldump.c"
      var $15=$1; //@line 34 "ldump.c"
      var $16=$2; //@line 34 "ldump.c"
      var $17=$3; //@line 34 "ldump.c"
      var $18=(($17+8)|0); //@line 34 "ldump.c"
      var $19=HEAP32[(($18)>>2)]; //@line 34 "ldump.c"
      var $20=FUNCTION_TABLE[$11]($14, $15, $16, $19); //@line 34 "ldump.c"
      var $21=$3; //@line 34 "ldump.c"
      var $22=(($21+16)|0); //@line 34 "ldump.c"
      HEAP32[(($22)>>2)]=$20; //@line 34 "ldump.c"
      __label__ = 4; break; //@line 36 "ldump.c"
    case 4: 
      ;
      return; //@line 37 "ldump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11unlinkupvalP5UpVal($uv) {
  ;
  var __label__;

  var $1;
  $1=$uv;
  var $2=$1; //@line 84 "lfunc.c"
  var $3=(($2+12)|0); //@line 84 "lfunc.c"
  var $4=$3; //@line 84 "lfunc.c"
  var $5=(($4)|0); //@line 84 "lfunc.c"
  var $6=HEAP32[(($5)>>2)]; //@line 84 "lfunc.c"
  var $7=$1; //@line 84 "lfunc.c"
  var $8=(($7+12)|0); //@line 84 "lfunc.c"
  var $9=$8; //@line 84 "lfunc.c"
  var $10=(($9+4)|0); //@line 84 "lfunc.c"
  var $11=HEAP32[(($10)>>2)]; //@line 84 "lfunc.c"
  var $12=(($11+12)|0); //@line 84 "lfunc.c"
  var $13=$12; //@line 84 "lfunc.c"
  var $14=(($13)|0); //@line 84 "lfunc.c"
  HEAP32[(($14)>>2)]=$6; //@line 84 "lfunc.c"
  var $15=$1; //@line 85 "lfunc.c"
  var $16=(($15+12)|0); //@line 85 "lfunc.c"
  var $17=$16; //@line 85 "lfunc.c"
  var $18=(($17+4)|0); //@line 85 "lfunc.c"
  var $19=HEAP32[(($18)>>2)]; //@line 85 "lfunc.c"
  var $20=$1; //@line 85 "lfunc.c"
  var $21=(($20+12)|0); //@line 85 "lfunc.c"
  var $22=$21; //@line 85 "lfunc.c"
  var $23=(($22)|0); //@line 85 "lfunc.c"
  var $24=HEAP32[(($23)>>2)]; //@line 85 "lfunc.c"
  var $25=(($24+12)|0); //@line 85 "lfunc.c"
  var $26=$25; //@line 85 "lfunc.c"
  var $27=(($26+4)|0); //@line 85 "lfunc.c"
  HEAP32[(($27)>>2)]=$19; //@line 85 "lfunc.c"
  ;
  return; //@line 86 "lfunc.c"
}


function __Z17luaF_getlocalnamePK5Protoii($f, $local_number, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $2=$f;
      $3=$local_number;
      $4=$pc;
      $i=0; //@line 165 "lfunc.c"
      __label__ = 3; break; //@line 165 "lfunc.c"
    case 3: 
      var $6=$i; //@line 165 "lfunc.c"
      var $7=$2; //@line 165 "lfunc.c"
      var $8=(($7+56)|0); //@line 165 "lfunc.c"
      var $9=HEAP32[(($8)>>2)]; //@line 165 "lfunc.c"
      var $10=(($6)|0) < (($9)|0); //@line 165 "lfunc.c"
      if ($10) { __label__ = 4; break; } else { var $22 = 0;__label__ = 5; break; } //@line 165 "lfunc.c"
    case 4: 
      var $12=$i; //@line 165 "lfunc.c"
      var $13=$2; //@line 165 "lfunc.c"
      var $14=(($13+24)|0); //@line 165 "lfunc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 165 "lfunc.c"
      var $16=(($15+($12)*(12))|0); //@line 165 "lfunc.c"
      var $17=(($16+4)|0); //@line 165 "lfunc.c"
      var $18=HEAP32[(($17)>>2)]; //@line 165 "lfunc.c"
      var $19=$4; //@line 165 "lfunc.c"
      var $20=(($18)|0) <= (($19)|0); //@line 165 "lfunc.c"
      var $22 = $20;__label__ = 5; break; //@line 165 "lfunc.c"
    case 5: 
      var $22;
      if ($22) { __label__ = 6; break; } else { __label__ = 12; break; } //@line 165 "lfunc.c"
    case 6: 
      var $24=$4; //@line 166 "lfunc.c"
      var $25=$i; //@line 166 "lfunc.c"
      var $26=$2; //@line 166 "lfunc.c"
      var $27=(($26+24)|0); //@line 166 "lfunc.c"
      var $28=HEAP32[(($27)>>2)]; //@line 166 "lfunc.c"
      var $29=(($28+($25)*(12))|0); //@line 166 "lfunc.c"
      var $30=(($29+8)|0); //@line 166 "lfunc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 166 "lfunc.c"
      var $32=(($24)|0) < (($31)|0); //@line 166 "lfunc.c"
      if ($32) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 166 "lfunc.c"
    case 7: 
      var $34=$3; //@line 167 "lfunc.c"
      var $35=((($34)-(1))|0); //@line 167 "lfunc.c"
      $3=$35; //@line 167 "lfunc.c"
      var $36=$3; //@line 168 "lfunc.c"
      var $37=(($36)|0)==0; //@line 168 "lfunc.c"
      if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 168 "lfunc.c"
    case 8: 
      var $39=$i; //@line 169 "lfunc.c"
      var $40=$2; //@line 169 "lfunc.c"
      var $41=(($40+24)|0); //@line 169 "lfunc.c"
      var $42=HEAP32[(($41)>>2)]; //@line 169 "lfunc.c"
      var $43=(($42+($39)*(12))|0); //@line 169 "lfunc.c"
      var $44=(($43)|0); //@line 169 "lfunc.c"
      var $45=HEAP32[(($44)>>2)]; //@line 169 "lfunc.c"
      var $46=(($45+16)|0); //@line 169 "lfunc.c"
      var $47=$46; //@line 169 "lfunc.c"
      $1=$47; //@line 169 "lfunc.c"
      __label__ = 13; break; //@line 169 "lfunc.c"
    case 9: 
      __label__ = 10; break; //@line 170 "lfunc.c"
    case 10: 
      __label__ = 11; break; //@line 171 "lfunc.c"
    case 11: 
      var $51=$i; //@line 165 "lfunc.c"
      var $52=((($51)+(1))|0); //@line 165 "lfunc.c"
      $i=$52; //@line 165 "lfunc.c"
      __label__ = 3; break; //@line 165 "lfunc.c"
    case 12: 
      $1=0; //@line 172 "lfunc.c"
      __label__ = 13; break; //@line 172 "lfunc.c"
    case 13: 
      var $55=$1; //@line 173 "lfunc.c"
      ;
      return $55; //@line 173 "lfunc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z17luaF_getlocalnamePK5Protoii["X"]=1;

function __Z16luaF_newCclosureP9lua_StateiP5Table($L, $nelems, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $c;
  $1=$L;
  $2=$nelems;
  $3=$e;
  var $4=$1; //@line 24 "lfunc.c"
  var $5=$2; //@line 24 "lfunc.c"
  var $6=((($5)-(1))|0); //@line 24 "lfunc.c"
  var $7=((($6)*(12))|0); //@line 24 "lfunc.c"
  var $8=((($7)+(32))|0); //@line 24 "lfunc.c"
  var $9=__Z13luaM_realloc_P9lua_StatePvjj($4, 0, 0, $8); //@line 24 "lfunc.c"
  var $10=$9; //@line 24 "lfunc.c"
  $c=$10; //@line 24 "lfunc.c"
  var $11=$1; //@line 25 "lfunc.c"
  var $12=$c; //@line 25 "lfunc.c"
  var $13=$12; //@line 25 "lfunc.c"
  __Z9luaC_linkP9lua_StateP8GCObjecth($11, $13, 6); //@line 25 "lfunc.c"
  var $14=$c; //@line 26 "lfunc.c"
  var $15=$14; //@line 26 "lfunc.c"
  var $16=(($15+6)|0); //@line 26 "lfunc.c"
  HEAP8[($16)]=1; //@line 26 "lfunc.c"
  var $17=$3; //@line 27 "lfunc.c"
  var $18=$c; //@line 27 "lfunc.c"
  var $19=$18; //@line 27 "lfunc.c"
  var $20=(($19+12)|0); //@line 27 "lfunc.c"
  HEAP32[(($20)>>2)]=$17; //@line 27 "lfunc.c"
  var $21=$2; //@line 28 "lfunc.c"
  var $22=(($21) & 255); //@line 28 "lfunc.c"
  var $23=$c; //@line 28 "lfunc.c"
  var $24=$23; //@line 28 "lfunc.c"
  var $25=(($24+7)|0); //@line 28 "lfunc.c"
  HEAP8[($25)]=$22; //@line 28 "lfunc.c"
  var $26=$c; //@line 29 "lfunc.c"
  ;
  return $26; //@line 29 "lfunc.c"
}


function __Z16luaF_newLclosureP9lua_StateiP5Table($L, $nelems, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      $1=$L;
      $2=$nelems;
      $3=$e;
      var $4=$1; //@line 34 "lfunc.c"
      var $5=$2; //@line 34 "lfunc.c"
      var $6=((($5)-(1))|0); //@line 34 "lfunc.c"
      var $7=((($6<<2))|0); //@line 34 "lfunc.c"
      var $8=((($7)+(24))|0); //@line 34 "lfunc.c"
      var $9=__Z13luaM_realloc_P9lua_StatePvjj($4, 0, 0, $8); //@line 34 "lfunc.c"
      var $10=$9; //@line 34 "lfunc.c"
      $c=$10; //@line 34 "lfunc.c"
      var $11=$1; //@line 35 "lfunc.c"
      var $12=$c; //@line 35 "lfunc.c"
      var $13=$12; //@line 35 "lfunc.c"
      __Z9luaC_linkP9lua_StateP8GCObjecth($11, $13, 6); //@line 35 "lfunc.c"
      var $14=$c; //@line 36 "lfunc.c"
      var $15=$14; //@line 36 "lfunc.c"
      var $16=(($15+6)|0); //@line 36 "lfunc.c"
      HEAP8[($16)]=0; //@line 36 "lfunc.c"
      var $17=$3; //@line 37 "lfunc.c"
      var $18=$c; //@line 37 "lfunc.c"
      var $19=$18; //@line 37 "lfunc.c"
      var $20=(($19+12)|0); //@line 37 "lfunc.c"
      HEAP32[(($20)>>2)]=$17; //@line 37 "lfunc.c"
      var $21=$2; //@line 38 "lfunc.c"
      var $22=(($21) & 255); //@line 38 "lfunc.c"
      var $23=$c; //@line 38 "lfunc.c"
      var $24=$23; //@line 38 "lfunc.c"
      var $25=(($24+7)|0); //@line 38 "lfunc.c"
      HEAP8[($25)]=$22; //@line 38 "lfunc.c"
      __label__ = 3; break; //@line 39 "lfunc.c"
    case 3: 
      var $27=$2; //@line 39 "lfunc.c"
      var $28=((($27)-(1))|0); //@line 39 "lfunc.c"
      $2=$28; //@line 39 "lfunc.c"
      var $29=(($27)|0)!=0; //@line 39 "lfunc.c"
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 39 "lfunc.c"
    case 4: 
      var $31=$2; //@line 39 "lfunc.c"
      var $32=$c; //@line 39 "lfunc.c"
      var $33=$32; //@line 39 "lfunc.c"
      var $34=(($33+20)|0); //@line 39 "lfunc.c"
      var $35=(($34+($31<<2))|0); //@line 39 "lfunc.c"
      HEAP32[(($35)>>2)]=0; //@line 39 "lfunc.c"
      __label__ = 3; break; //@line 39 "lfunc.c"
    case 5: 
      var $37=$c; //@line 40 "lfunc.c"
      ;
      return $37; //@line 40 "lfunc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaF_newupvalP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $uv;
  $1=$L;
  var $2=$1; //@line 45 "lfunc.c"
  var $3=__Z13luaM_realloc_P9lua_StatePvjj($2, 0, 0, 24); //@line 45 "lfunc.c"
  var $4=$3; //@line 45 "lfunc.c"
  $uv=$4; //@line 45 "lfunc.c"
  var $5=$1; //@line 46 "lfunc.c"
  var $6=$uv; //@line 46 "lfunc.c"
  var $7=$6; //@line 46 "lfunc.c"
  __Z9luaC_linkP9lua_StateP8GCObjecth($5, $7, 10); //@line 46 "lfunc.c"
  var $8=$uv; //@line 47 "lfunc.c"
  var $9=(($8+12)|0); //@line 47 "lfunc.c"
  var $10=$9; //@line 47 "lfunc.c"
  var $11=$uv; //@line 47 "lfunc.c"
  var $12=(($11+8)|0); //@line 47 "lfunc.c"
  HEAP32[(($12)>>2)]=$10; //@line 47 "lfunc.c"
  var $13=$uv; //@line 48 "lfunc.c"
  var $14=(($13+8)|0); //@line 48 "lfunc.c"
  var $15=HEAP32[(($14)>>2)]; //@line 48 "lfunc.c"
  var $16=(($15+8)|0); //@line 48 "lfunc.c"
  HEAP32[(($16)>>2)]=0; //@line 48 "lfunc.c"
  var $17=$uv; //@line 49 "lfunc.c"
  ;
  return $17; //@line 49 "lfunc.c"
}


function __Z14luaF_findupvalP9lua_StateP10lua_TValue($L, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $g;
      var $pp;
      var $p;
      var $uv;
      $2=$L;
      $3=$level;
      var $4=$2; //@line 54 "lfunc.c"
      var $5=(($4+16)|0); //@line 54 "lfunc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 54 "lfunc.c"
      $g=$6; //@line 54 "lfunc.c"
      var $7=$2; //@line 55 "lfunc.c"
      var $8=(($7+96)|0); //@line 55 "lfunc.c"
      $pp=$8; //@line 55 "lfunc.c"
      __label__ = 3; break; //@line 58 "lfunc.c"
    case 3: 
      var $10=$pp; //@line 58 "lfunc.c"
      var $11=HEAP32[(($10)>>2)]; //@line 58 "lfunc.c"
      var $12=(($11)|0)!=0; //@line 58 "lfunc.c"
      if ($12) { __label__ = 4; break; } else { var $22 = 0;__label__ = 5; break; } //@line 58 "lfunc.c"
    case 4: 
      var $14=$pp; //@line 58 "lfunc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 58 "lfunc.c"
      var $16=$15; //@line 58 "lfunc.c"
      $p=$16; //@line 58 "lfunc.c"
      var $17=(($16+8)|0); //@line 58 "lfunc.c"
      var $18=HEAPU32[(($17)>>2)]; //@line 58 "lfunc.c"
      var $19=$3; //@line 58 "lfunc.c"
      var $20=(($18)>>>0) >= (($19)>>>0); //@line 58 "lfunc.c"
      var $22 = $20;__label__ = 5; break; //@line 58 "lfunc.c"
    case 5: 
      var $22;
      if ($22) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 58 "lfunc.c"
    case 6: 
      var $24=$p; //@line 60 "lfunc.c"
      var $25=(($24+8)|0); //@line 60 "lfunc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 60 "lfunc.c"
      var $27=$3; //@line 60 "lfunc.c"
      var $28=(($26)|0)==(($27)|0); //@line 60 "lfunc.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 60 "lfunc.c"
    case 7: 
      var $30=$p; //@line 61 "lfunc.c"
      var $31=$30; //@line 61 "lfunc.c"
      var $32=$31; //@line 61 "lfunc.c"
      var $33=(($32+5)|0); //@line 61 "lfunc.c"
      var $34=HEAPU8[($33)]; //@line 61 "lfunc.c"
      var $35=(($34)&255); //@line 61 "lfunc.c"
      var $36=$g; //@line 61 "lfunc.c"
      var $37=(($36+20)|0); //@line 61 "lfunc.c"
      var $38=HEAPU8[($37)]; //@line 61 "lfunc.c"
      var $39=(($38)&255); //@line 61 "lfunc.c"
      var $40=$39 ^ 3; //@line 61 "lfunc.c"
      var $41=$35 & $40; //@line 61 "lfunc.c"
      var $42=$41 & 3; //@line 61 "lfunc.c"
      var $43=(($42)|0)!=0; //@line 61 "lfunc.c"
      if ($43) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 61 "lfunc.c"
    case 8: 
      var $45=$p; //@line 62 "lfunc.c"
      var $46=$45; //@line 62 "lfunc.c"
      var $47=$46; //@line 62 "lfunc.c"
      var $48=(($47+5)|0); //@line 62 "lfunc.c"
      var $49=HEAPU8[($48)]; //@line 62 "lfunc.c"
      var $50=(($49)&255); //@line 62 "lfunc.c"
      var $51=$50 ^ 3; //@line 62 "lfunc.c"
      var $52=(($51) & 255); //@line 62 "lfunc.c"
      HEAP8[($48)]=$52; //@line 62 "lfunc.c"
      __label__ = 9; break; //@line 62 "lfunc.c"
    case 9: 
      var $54=$p; //@line 63 "lfunc.c"
      $1=$54; //@line 63 "lfunc.c"
      __label__ = 12; break; //@line 63 "lfunc.c"
    case 10: 
      var $56=$p; //@line 65 "lfunc.c"
      var $57=(($56)|0); //@line 65 "lfunc.c"
      $pp=$57; //@line 65 "lfunc.c"
      __label__ = 3; break; //@line 66 "lfunc.c"
    case 11: 
      var $59=$2; //@line 67 "lfunc.c"
      var $60=__Z13luaM_realloc_P9lua_StatePvjj($59, 0, 0, 24); //@line 67 "lfunc.c"
      var $61=$60; //@line 67 "lfunc.c"
      $uv=$61; //@line 67 "lfunc.c"
      var $62=$uv; //@line 68 "lfunc.c"
      var $63=(($62+4)|0); //@line 68 "lfunc.c"
      HEAP8[($63)]=10; //@line 68 "lfunc.c"
      var $64=$g; //@line 69 "lfunc.c"
      var $65=(($64+20)|0); //@line 69 "lfunc.c"
      var $66=HEAPU8[($65)]; //@line 69 "lfunc.c"
      var $67=(($66)&255); //@line 69 "lfunc.c"
      var $68=$67 & 3; //@line 69 "lfunc.c"
      var $69=(($68) & 255); //@line 69 "lfunc.c"
      var $70=$uv; //@line 69 "lfunc.c"
      var $71=(($70+5)|0); //@line 69 "lfunc.c"
      HEAP8[($71)]=$69; //@line 69 "lfunc.c"
      var $72=$3; //@line 70 "lfunc.c"
      var $73=$uv; //@line 70 "lfunc.c"
      var $74=(($73+8)|0); //@line 70 "lfunc.c"
      HEAP32[(($74)>>2)]=$72; //@line 70 "lfunc.c"
      var $75=$pp; //@line 71 "lfunc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 71 "lfunc.c"
      var $77=$uv; //@line 71 "lfunc.c"
      var $78=(($77)|0); //@line 71 "lfunc.c"
      HEAP32[(($78)>>2)]=$76; //@line 71 "lfunc.c"
      var $79=$uv; //@line 72 "lfunc.c"
      var $80=$79; //@line 72 "lfunc.c"
      var $81=$pp; //@line 72 "lfunc.c"
      HEAP32[(($81)>>2)]=$80; //@line 72 "lfunc.c"
      var $82=$g; //@line 73 "lfunc.c"
      var $83=(($82+108)|0); //@line 73 "lfunc.c"
      var $84=$uv; //@line 73 "lfunc.c"
      var $85=(($84+12)|0); //@line 73 "lfunc.c"
      var $86=$85; //@line 73 "lfunc.c"
      var $87=(($86)|0); //@line 73 "lfunc.c"
      HEAP32[(($87)>>2)]=$83; //@line 73 "lfunc.c"
      var $88=$g; //@line 74 "lfunc.c"
      var $89=(($88+108)|0); //@line 74 "lfunc.c"
      var $90=(($89+12)|0); //@line 74 "lfunc.c"
      var $91=$90; //@line 74 "lfunc.c"
      var $92=(($91+4)|0); //@line 74 "lfunc.c"
      var $93=HEAP32[(($92)>>2)]; //@line 74 "lfunc.c"
      var $94=$uv; //@line 74 "lfunc.c"
      var $95=(($94+12)|0); //@line 74 "lfunc.c"
      var $96=$95; //@line 74 "lfunc.c"
      var $97=(($96+4)|0); //@line 74 "lfunc.c"
      HEAP32[(($97)>>2)]=$93; //@line 74 "lfunc.c"
      var $98=$uv; //@line 75 "lfunc.c"
      var $99=$uv; //@line 75 "lfunc.c"
      var $100=(($99+12)|0); //@line 75 "lfunc.c"
      var $101=$100; //@line 75 "lfunc.c"
      var $102=(($101+4)|0); //@line 75 "lfunc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 75 "lfunc.c"
      var $104=(($103+12)|0); //@line 75 "lfunc.c"
      var $105=$104; //@line 75 "lfunc.c"
      var $106=(($105)|0); //@line 75 "lfunc.c"
      HEAP32[(($106)>>2)]=$98; //@line 75 "lfunc.c"
      var $107=$uv; //@line 76 "lfunc.c"
      var $108=$g; //@line 76 "lfunc.c"
      var $109=(($108+108)|0); //@line 76 "lfunc.c"
      var $110=(($109+12)|0); //@line 76 "lfunc.c"
      var $111=$110; //@line 76 "lfunc.c"
      var $112=(($111+4)|0); //@line 76 "lfunc.c"
      HEAP32[(($112)>>2)]=$107; //@line 76 "lfunc.c"
      var $113=$uv; //@line 78 "lfunc.c"
      $1=$113; //@line 78 "lfunc.c"
      __label__ = 12; break; //@line 78 "lfunc.c"
    case 12: 
      var $115=$1; //@line 79 "lfunc.c"
      ;
      return $115; //@line 79 "lfunc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14luaF_findupvalP9lua_StateP10lua_TValue["X"]=1;

function __Z14luaF_freeupvalP9lua_StateP5UpVal($L, $uv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$uv;
      var $3=$2; //@line 90 "lfunc.c"
      var $4=(($3+8)|0); //@line 90 "lfunc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 90 "lfunc.c"
      var $6=$2; //@line 90 "lfunc.c"
      var $7=(($6+12)|0); //@line 90 "lfunc.c"
      var $8=$7; //@line 90 "lfunc.c"
      var $9=(($5)|0)!=(($8)|0); //@line 90 "lfunc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 90 "lfunc.c"
    case 3: 
      var $11=$2; //@line 91 "lfunc.c"
      __Z11unlinkupvalP5UpVal($11); //@line 91 "lfunc.c"
      __label__ = 4; break; //@line 91 "lfunc.c"
    case 4: 
      var $13=$1; //@line 92 "lfunc.c"
      var $14=$2; //@line 92 "lfunc.c"
      var $15=$14; //@line 92 "lfunc.c"
      var $16=__Z13luaM_realloc_P9lua_StatePvjj($13, $15, 24, 0); //@line 92 "lfunc.c"
      ;
      return; //@line 93 "lfunc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10luaF_closeP9lua_StateP10lua_TValue($L, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $uv;
      var $g;
      var $o;
      var $o2;
      var $o1;
      $1=$L;
      $2=$level;
      var $3=$1; //@line 98 "lfunc.c"
      var $4=(($3+16)|0); //@line 98 "lfunc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 98 "lfunc.c"
      $g=$5; //@line 98 "lfunc.c"
      __label__ = 3; break; //@line 99 "lfunc.c"
    case 3: 
      var $7=$1; //@line 99 "lfunc.c"
      var $8=(($7+96)|0); //@line 99 "lfunc.c"
      var $9=HEAP32[(($8)>>2)]; //@line 99 "lfunc.c"
      var $10=(($9)|0)!=0; //@line 99 "lfunc.c"
      if ($10) { __label__ = 4; break; } else { var $21 = 0;__label__ = 5; break; } //@line 99 "lfunc.c"
    case 4: 
      var $12=$1; //@line 99 "lfunc.c"
      var $13=(($12+96)|0); //@line 99 "lfunc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 99 "lfunc.c"
      var $15=$14; //@line 99 "lfunc.c"
      $uv=$15; //@line 99 "lfunc.c"
      var $16=(($15+8)|0); //@line 99 "lfunc.c"
      var $17=HEAPU32[(($16)>>2)]; //@line 99 "lfunc.c"
      var $18=$2; //@line 99 "lfunc.c"
      var $19=(($17)>>>0) >= (($18)>>>0); //@line 99 "lfunc.c"
      var $21 = $19;__label__ = 5; break; //@line 99 "lfunc.c"
    case 5: 
      var $21;
      if ($21) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 99 "lfunc.c"
    case 6: 
      var $23=$uv; //@line 100 "lfunc.c"
      var $24=$23; //@line 100 "lfunc.c"
      $o=$24; //@line 100 "lfunc.c"
      var $25=$uv; //@line 102 "lfunc.c"
      var $26=(($25)|0); //@line 102 "lfunc.c"
      var $27=HEAP32[(($26)>>2)]; //@line 102 "lfunc.c"
      var $28=$1; //@line 102 "lfunc.c"
      var $29=(($28+96)|0); //@line 102 "lfunc.c"
      HEAP32[(($29)>>2)]=$27; //@line 102 "lfunc.c"
      var $30=$o; //@line 103 "lfunc.c"
      var $31=$30; //@line 103 "lfunc.c"
      var $32=(($31+5)|0); //@line 103 "lfunc.c"
      var $33=HEAPU8[($32)]; //@line 103 "lfunc.c"
      var $34=(($33)&255); //@line 103 "lfunc.c"
      var $35=$g; //@line 103 "lfunc.c"
      var $36=(($35+20)|0); //@line 103 "lfunc.c"
      var $37=HEAPU8[($36)]; //@line 103 "lfunc.c"
      var $38=(($37)&255); //@line 103 "lfunc.c"
      var $39=$38 ^ 3; //@line 103 "lfunc.c"
      var $40=$34 & $39; //@line 103 "lfunc.c"
      var $41=$40 & 3; //@line 103 "lfunc.c"
      var $42=(($41)|0)!=0; //@line 103 "lfunc.c"
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 103 "lfunc.c"
    case 7: 
      var $44=$1; //@line 104 "lfunc.c"
      var $45=$uv; //@line 104 "lfunc.c"
      __Z14luaF_freeupvalP9lua_StateP5UpVal($44, $45); //@line 104 "lfunc.c"
      __label__ = 9; break; //@line 104 "lfunc.c"
    case 8: 
      var $47=$uv; //@line 106 "lfunc.c"
      __Z11unlinkupvalP5UpVal($47); //@line 106 "lfunc.c"
      var $48=$uv; //@line 107 "lfunc.c"
      var $49=(($48+8)|0); //@line 107 "lfunc.c"
      var $50=HEAP32[(($49)>>2)]; //@line 107 "lfunc.c"
      $o2=$50; //@line 107 "lfunc.c"
      var $51=$uv; //@line 107 "lfunc.c"
      var $52=(($51+12)|0); //@line 107 "lfunc.c"
      var $53=$52; //@line 107 "lfunc.c"
      $o1=$53; //@line 107 "lfunc.c"
      var $54=$o1; //@line 107 "lfunc.c"
      var $55=(($54)|0); //@line 107 "lfunc.c"
      var $56=$o2; //@line 107 "lfunc.c"
      var $57=(($56)|0); //@line 107 "lfunc.c"
      var $58=$55; //@line 107 "lfunc.c"
      var $59=$57; //@line 107 "lfunc.c"
      HEAP32[(($58)>>2)]=HEAP32[(($59)>>2)];HEAP32[((($58)+(4))>>2)]=HEAP32[((($59)+(4))>>2)]; //@line 107 "lfunc.c"
      var $60=$o2; //@line 107 "lfunc.c"
      var $61=(($60+8)|0); //@line 107 "lfunc.c"
      var $62=HEAP32[(($61)>>2)]; //@line 107 "lfunc.c"
      var $63=$o1; //@line 107 "lfunc.c"
      var $64=(($63+8)|0); //@line 107 "lfunc.c"
      HEAP32[(($64)>>2)]=$62; //@line 107 "lfunc.c"
      var $65=$uv; //@line 108 "lfunc.c"
      var $66=(($65+12)|0); //@line 108 "lfunc.c"
      var $67=$66; //@line 108 "lfunc.c"
      var $68=$uv; //@line 108 "lfunc.c"
      var $69=(($68+8)|0); //@line 108 "lfunc.c"
      HEAP32[(($69)>>2)]=$67; //@line 108 "lfunc.c"
      var $70=$1; //@line 109 "lfunc.c"
      var $71=$uv; //@line 109 "lfunc.c"
      __Z14luaC_linkupvalP9lua_StateP5UpVal($70, $71); //@line 109 "lfunc.c"
      __label__ = 9; break; //@line 110 "lfunc.c"
    case 9: 
      __label__ = 3; break; //@line 111 "lfunc.c"
    case 10: 
      ;
      return; //@line 112 "lfunc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10luaF_closeP9lua_StateP10lua_TValue["X"]=1;

function __Z13luaF_newprotoP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $f;
  $1=$L;
  var $2=$1; //@line 116 "lfunc.c"
  var $3=__Z13luaM_realloc_P9lua_StatePvjj($2, 0, 0, 76); //@line 116 "lfunc.c"
  var $4=$3; //@line 116 "lfunc.c"
  $f=$4; //@line 116 "lfunc.c"
  var $5=$1; //@line 117 "lfunc.c"
  var $6=$f; //@line 117 "lfunc.c"
  var $7=$6; //@line 117 "lfunc.c"
  __Z9luaC_linkP9lua_StateP8GCObjecth($5, $7, 9); //@line 117 "lfunc.c"
  var $8=$f; //@line 118 "lfunc.c"
  var $9=(($8+8)|0); //@line 118 "lfunc.c"
  HEAP32[(($9)>>2)]=0; //@line 118 "lfunc.c"
  var $10=$f; //@line 119 "lfunc.c"
  var $11=(($10+40)|0); //@line 119 "lfunc.c"
  HEAP32[(($11)>>2)]=0; //@line 119 "lfunc.c"
  var $12=$f; //@line 120 "lfunc.c"
  var $13=(($12+16)|0); //@line 120 "lfunc.c"
  HEAP32[(($13)>>2)]=0; //@line 120 "lfunc.c"
  var $14=$f; //@line 121 "lfunc.c"
  var $15=(($14+52)|0); //@line 121 "lfunc.c"
  HEAP32[(($15)>>2)]=0; //@line 121 "lfunc.c"
  var $16=$f; //@line 122 "lfunc.c"
  var $17=(($16+12)|0); //@line 122 "lfunc.c"
  HEAP32[(($17)>>2)]=0; //@line 122 "lfunc.c"
  var $18=$f; //@line 123 "lfunc.c"
  var $19=(($18+44)|0); //@line 123 "lfunc.c"
  HEAP32[(($19)>>2)]=0; //@line 123 "lfunc.c"
  var $20=$f; //@line 124 "lfunc.c"
  var $21=(($20+48)|0); //@line 124 "lfunc.c"
  HEAP32[(($21)>>2)]=0; //@line 124 "lfunc.c"
  var $22=$f; //@line 125 "lfunc.c"
  var $23=(($22+36)|0); //@line 125 "lfunc.c"
  HEAP32[(($23)>>2)]=0; //@line 125 "lfunc.c"
  var $24=$f; //@line 126 "lfunc.c"
  var $25=(($24+72)|0); //@line 126 "lfunc.c"
  HEAP8[($25)]=0; //@line 126 "lfunc.c"
  var $26=$f; //@line 127 "lfunc.c"
  var $27=(($26+28)|0); //@line 127 "lfunc.c"
  HEAP32[(($27)>>2)]=0; //@line 127 "lfunc.c"
  var $28=$f; //@line 128 "lfunc.c"
  var $29=(($28+73)|0); //@line 128 "lfunc.c"
  HEAP8[($29)]=0; //@line 128 "lfunc.c"
  var $30=$f; //@line 129 "lfunc.c"
  var $31=(($30+74)|0); //@line 129 "lfunc.c"
  HEAP8[($31)]=0; //@line 129 "lfunc.c"
  var $32=$f; //@line 130 "lfunc.c"
  var $33=(($32+75)|0); //@line 130 "lfunc.c"
  HEAP8[($33)]=0; //@line 130 "lfunc.c"
  var $34=$f; //@line 131 "lfunc.c"
  var $35=(($34+20)|0); //@line 131 "lfunc.c"
  HEAP32[(($35)>>2)]=0; //@line 131 "lfunc.c"
  var $36=$f; //@line 132 "lfunc.c"
  var $37=(($36+56)|0); //@line 132 "lfunc.c"
  HEAP32[(($37)>>2)]=0; //@line 132 "lfunc.c"
  var $38=$f; //@line 133 "lfunc.c"
  var $39=(($38+24)|0); //@line 133 "lfunc.c"
  HEAP32[(($39)>>2)]=0; //@line 133 "lfunc.c"
  var $40=$f; //@line 134 "lfunc.c"
  var $41=(($40+60)|0); //@line 134 "lfunc.c"
  HEAP32[(($41)>>2)]=0; //@line 134 "lfunc.c"
  var $42=$f; //@line 135 "lfunc.c"
  var $43=(($42+64)|0); //@line 135 "lfunc.c"
  HEAP32[(($43)>>2)]=0; //@line 135 "lfunc.c"
  var $44=$f; //@line 136 "lfunc.c"
  var $45=(($44+32)|0); //@line 136 "lfunc.c"
  HEAP32[(($45)>>2)]=0; //@line 136 "lfunc.c"
  var $46=$f; //@line 137 "lfunc.c"
  ;
  return $46; //@line 137 "lfunc.c"
}
__Z13luaF_newprotoP9lua_State["X"]=1;

function __Z14luaF_freeprotoP9lua_StateP5Proto($L, $f) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$f;
  var $3=$1; //@line 142 "lfunc.c"
  var $4=$2; //@line 142 "lfunc.c"
  var $5=(($4+12)|0); //@line 142 "lfunc.c"
  var $6=HEAP32[(($5)>>2)]; //@line 142 "lfunc.c"
  var $7=$6; //@line 142 "lfunc.c"
  var $8=$2; //@line 142 "lfunc.c"
  var $9=(($8+44)|0); //@line 142 "lfunc.c"
  var $10=HEAP32[(($9)>>2)]; //@line 142 "lfunc.c"
  var $11=((($10<<2))|0); //@line 142 "lfunc.c"
  var $12=__Z13luaM_realloc_P9lua_StatePvjj($3, $7, $11, 0); //@line 142 "lfunc.c"
  var $13=$1; //@line 143 "lfunc.c"
  var $14=$2; //@line 143 "lfunc.c"
  var $15=(($14+16)|0); //@line 143 "lfunc.c"
  var $16=HEAP32[(($15)>>2)]; //@line 143 "lfunc.c"
  var $17=$16; //@line 143 "lfunc.c"
  var $18=$2; //@line 143 "lfunc.c"
  var $19=(($18+52)|0); //@line 143 "lfunc.c"
  var $20=HEAP32[(($19)>>2)]; //@line 143 "lfunc.c"
  var $21=((($20<<2))|0); //@line 143 "lfunc.c"
  var $22=__Z13luaM_realloc_P9lua_StatePvjj($13, $17, $21, 0); //@line 143 "lfunc.c"
  var $23=$1; //@line 144 "lfunc.c"
  var $24=$2; //@line 144 "lfunc.c"
  var $25=(($24+8)|0); //@line 144 "lfunc.c"
  var $26=HEAP32[(($25)>>2)]; //@line 144 "lfunc.c"
  var $27=$26; //@line 144 "lfunc.c"
  var $28=$2; //@line 144 "lfunc.c"
  var $29=(($28+40)|0); //@line 144 "lfunc.c"
  var $30=HEAP32[(($29)>>2)]; //@line 144 "lfunc.c"
  var $31=((($30)*(12))|0); //@line 144 "lfunc.c"
  var $32=__Z13luaM_realloc_P9lua_StatePvjj($23, $27, $31, 0); //@line 144 "lfunc.c"
  var $33=$1; //@line 145 "lfunc.c"
  var $34=$2; //@line 145 "lfunc.c"
  var $35=(($34+20)|0); //@line 145 "lfunc.c"
  var $36=HEAP32[(($35)>>2)]; //@line 145 "lfunc.c"
  var $37=$36; //@line 145 "lfunc.c"
  var $38=$2; //@line 145 "lfunc.c"
  var $39=(($38+48)|0); //@line 145 "lfunc.c"
  var $40=HEAP32[(($39)>>2)]; //@line 145 "lfunc.c"
  var $41=((($40<<2))|0); //@line 145 "lfunc.c"
  var $42=__Z13luaM_realloc_P9lua_StatePvjj($33, $37, $41, 0); //@line 145 "lfunc.c"
  var $43=$1; //@line 146 "lfunc.c"
  var $44=$2; //@line 146 "lfunc.c"
  var $45=(($44+24)|0); //@line 146 "lfunc.c"
  var $46=HEAP32[(($45)>>2)]; //@line 146 "lfunc.c"
  var $47=$46; //@line 146 "lfunc.c"
  var $48=$2; //@line 146 "lfunc.c"
  var $49=(($48+56)|0); //@line 146 "lfunc.c"
  var $50=HEAP32[(($49)>>2)]; //@line 146 "lfunc.c"
  var $51=((($50)*(12))|0); //@line 146 "lfunc.c"
  var $52=__Z13luaM_realloc_P9lua_StatePvjj($43, $47, $51, 0); //@line 146 "lfunc.c"
  var $53=$1; //@line 147 "lfunc.c"
  var $54=$2; //@line 147 "lfunc.c"
  var $55=(($54+28)|0); //@line 147 "lfunc.c"
  var $56=HEAP32[(($55)>>2)]; //@line 147 "lfunc.c"
  var $57=$56; //@line 147 "lfunc.c"
  var $58=$2; //@line 147 "lfunc.c"
  var $59=(($58+36)|0); //@line 147 "lfunc.c"
  var $60=HEAP32[(($59)>>2)]; //@line 147 "lfunc.c"
  var $61=((($60<<2))|0); //@line 147 "lfunc.c"
  var $62=__Z13luaM_realloc_P9lua_StatePvjj($53, $57, $61, 0); //@line 147 "lfunc.c"
  var $63=$1; //@line 148 "lfunc.c"
  var $64=$2; //@line 148 "lfunc.c"
  var $65=$64; //@line 148 "lfunc.c"
  var $66=__Z13luaM_realloc_P9lua_StatePvjj($63, $65, 76, 0); //@line 148 "lfunc.c"
  ;
  return; //@line 149 "lfunc.c"
}
__Z14luaF_freeprotoP9lua_StateP5Proto["X"]=1;

function __Z16luaF_freeclosureP9lua_StateP7Closure($L, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size;
      $1=$L;
      $2=$c;
      var $3=$2; //@line 154 "lfunc.c"
      var $4=$3; //@line 154 "lfunc.c"
      var $5=(($4+6)|0); //@line 154 "lfunc.c"
      var $6=HEAP8[($5)]; //@line 154 "lfunc.c"
      var $7=(($6 << 24) >> 24)!=0; //@line 154 "lfunc.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 154 "lfunc.c"
    case 3: 
      var $9=$2; //@line 154 "lfunc.c"
      var $10=$9; //@line 154 "lfunc.c"
      var $11=(($10+7)|0); //@line 154 "lfunc.c"
      var $12=HEAPU8[($11)]; //@line 154 "lfunc.c"
      var $13=(($12)&255); //@line 154 "lfunc.c"
      var $14=((($13)-(1))|0); //@line 154 "lfunc.c"
      var $15=((($14)*(12))|0); //@line 154 "lfunc.c"
      var $16=((($15)+(32))|0); //@line 154 "lfunc.c"
      var $27 = $16;__label__ = 5; break; //@line 154 "lfunc.c"
    case 4: 
      var $18=$2; //@line 154 "lfunc.c"
      var $19=$18; //@line 154 "lfunc.c"
      var $20=(($19+7)|0); //@line 154 "lfunc.c"
      var $21=HEAPU8[($20)]; //@line 154 "lfunc.c"
      var $22=(($21)&255); //@line 154 "lfunc.c"
      var $23=((($22)-(1))|0); //@line 154 "lfunc.c"
      var $24=((($23<<2))|0); //@line 154 "lfunc.c"
      var $25=((($24)+(24))|0); //@line 154 "lfunc.c"
      var $27 = $25;__label__ = 5; break; //@line 154 "lfunc.c"
    case 5: 
      var $27; //@line 154 "lfunc.c"
      $size=$27; //@line 154 "lfunc.c"
      var $28=$1; //@line 155 "lfunc.c"
      var $29=$2; //@line 155 "lfunc.c"
      var $30=$29; //@line 155 "lfunc.c"
      var $31=$size; //@line 155 "lfunc.c"
      var $32=__Z13luaM_realloc_P9lua_StatePvjj($28, $30, $31, 0); //@line 155 "lfunc.c"
      ;
      return; //@line 156 "lfunc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z18luaC_separateudataP9lua_Statei($L, $all) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $g;
      var $deadmem;
      var $p;
      var $curr;
      $1=$L;
      $2=$all;
      var $3=$1; //@line 129 "lgc.c"
      var $4=(($3+16)|0); //@line 129 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 129 "lgc.c"
      $g=$5; //@line 129 "lgc.c"
      $deadmem=0; //@line 130 "lgc.c"
      var $6=$g; //@line 131 "lgc.c"
      var $7=(($6+104)|0); //@line 131 "lgc.c"
      var $8=HEAP32[(($7)>>2)]; //@line 131 "lgc.c"
      var $9=(($8)|0); //@line 131 "lgc.c"
      $p=$9; //@line 131 "lgc.c"
      __label__ = 3; break; //@line 133 "lgc.c"
    case 3: 
      var $11=$p; //@line 133 "lgc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 133 "lgc.c"
      $curr=$12; //@line 133 "lgc.c"
      var $13=(($12)|0)!=0; //@line 133 "lgc.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 22; break; } //@line 133 "lgc.c"
    case 4: 
      var $15=$curr; //@line 134 "lgc.c"
      var $16=$15; //@line 134 "lgc.c"
      var $17=(($16+5)|0); //@line 134 "lgc.c"
      var $18=HEAPU8[($17)]; //@line 134 "lgc.c"
      var $19=(($18)&255); //@line 134 "lgc.c"
      var $20=$19 & 3; //@line 134 "lgc.c"
      var $21=(($20)|0)!=0; //@line 134 "lgc.c"
      if ($21) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 134 "lgc.c"
    case 5: 
      var $23=$2; //@line 134 "lgc.c"
      var $24=(($23)|0)!=0; //@line 134 "lgc.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 134 "lgc.c"
    case 6: 
      var $26=$curr; //@line 134 "lgc.c"
      var $27=$26; //@line 134 "lgc.c"
      var $28=$27; //@line 134 "lgc.c"
      var $29=(($28+5)|0); //@line 134 "lgc.c"
      var $30=HEAPU8[($29)]; //@line 134 "lgc.c"
      var $31=(($30)&255); //@line 134 "lgc.c"
      var $32=$31 & 8; //@line 134 "lgc.c"
      var $33=(($32)|0)!=0; //@line 134 "lgc.c"
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 134 "lgc.c"
    case 7: 
      var $35=$curr; //@line 135 "lgc.c"
      var $36=$35; //@line 135 "lgc.c"
      var $37=(($36)|0); //@line 135 "lgc.c"
      $p=$37; //@line 135 "lgc.c"
      __label__ = 21; break; //@line 135 "lgc.c"
    case 8: 
      var $39=$curr; //@line 136 "lgc.c"
      var $40=$39; //@line 136 "lgc.c"
      var $41=$40; //@line 136 "lgc.c"
      var $42=(($41+8)|0); //@line 136 "lgc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 136 "lgc.c"
      var $44=(($43)|0)==0; //@line 136 "lgc.c"
      if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 136 "lgc.c"
    case 9: 
      var $74 = 0;__label__ = 14; break; //@line 136 "lgc.c"
    case 10: 
      var $47=$curr; //@line 136 "lgc.c"
      var $48=$47; //@line 136 "lgc.c"
      var $49=$48; //@line 136 "lgc.c"
      var $50=(($49+8)|0); //@line 136 "lgc.c"
      var $51=HEAP32[(($50)>>2)]; //@line 136 "lgc.c"
      var $52=(($51+6)|0); //@line 136 "lgc.c"
      var $53=HEAPU8[($52)]; //@line 136 "lgc.c"
      var $54=(($53)&255); //@line 136 "lgc.c"
      var $55=$54 & 4; //@line 136 "lgc.c"
      var $56=(($55)|0)!=0; //@line 136 "lgc.c"
      if ($56) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 136 "lgc.c"
    case 11: 
      var $72 = 0;__label__ = 13; break; //@line 136 "lgc.c"
    case 12: 
      var $59=$curr; //@line 136 "lgc.c"
      var $60=$59; //@line 136 "lgc.c"
      var $61=$60; //@line 136 "lgc.c"
      var $62=(($61+8)|0); //@line 136 "lgc.c"
      var $63=HEAP32[(($62)>>2)]; //@line 136 "lgc.c"
      var $64=$1; //@line 136 "lgc.c"
      var $65=(($64+16)|0); //@line 136 "lgc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 136 "lgc.c"
      var $67=(($66+168)|0); //@line 136 "lgc.c"
      var $68=(($67+8)|0); //@line 136 "lgc.c"
      var $69=HEAP32[(($68)>>2)]; //@line 136 "lgc.c"
      var $70=__Z10luaT_gettmP5Table3TMSP7TString($63, 2, $69); //@line 136 "lgc.c"
      var $72 = $70;__label__ = 13; break; //@line 136 "lgc.c"
    case 13: 
      var $72; //@line 136 "lgc.c"
      var $74 = $72;__label__ = 14; break; //@line 136 "lgc.c"
    case 14: 
      var $74; //@line 136 "lgc.c"
      var $75=(($74)|0)==0; //@line 136 "lgc.c"
      if ($75) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 136 "lgc.c"
    case 15: 
      var $77=$curr; //@line 137 "lgc.c"
      var $78=$77; //@line 137 "lgc.c"
      var $79=$78; //@line 137 "lgc.c"
      var $80=(($79+5)|0); //@line 137 "lgc.c"
      var $81=HEAPU8[($80)]; //@line 137 "lgc.c"
      var $82=(($81)&255); //@line 137 "lgc.c"
      var $83=$82 | 8; //@line 137 "lgc.c"
      var $84=(($83) & 255); //@line 137 "lgc.c"
      HEAP8[($80)]=$84; //@line 137 "lgc.c"
      var $85=$curr; //@line 138 "lgc.c"
      var $86=$85; //@line 138 "lgc.c"
      var $87=(($86)|0); //@line 138 "lgc.c"
      $p=$87; //@line 138 "lgc.c"
      __label__ = 20; break; //@line 139 "lgc.c"
    case 16: 
      var $89=$curr; //@line 141 "lgc.c"
      var $90=$89; //@line 141 "lgc.c"
      var $91=$90; //@line 141 "lgc.c"
      var $92=(($91+16)|0); //@line 141 "lgc.c"
      var $93=HEAP32[(($92)>>2)]; //@line 141 "lgc.c"
      var $94=((($93)+(20))|0); //@line 141 "lgc.c"
      var $95=$deadmem; //@line 141 "lgc.c"
      var $96=((($95)+($94))|0); //@line 141 "lgc.c"
      $deadmem=$96; //@line 141 "lgc.c"
      var $97=$curr; //@line 142 "lgc.c"
      var $98=$97; //@line 142 "lgc.c"
      var $99=$98; //@line 142 "lgc.c"
      var $100=(($99+5)|0); //@line 142 "lgc.c"
      var $101=HEAPU8[($100)]; //@line 142 "lgc.c"
      var $102=(($101)&255); //@line 142 "lgc.c"
      var $103=$102 | 8; //@line 142 "lgc.c"
      var $104=(($103) & 255); //@line 142 "lgc.c"
      HEAP8[($100)]=$104; //@line 142 "lgc.c"
      var $105=$curr; //@line 143 "lgc.c"
      var $106=$105; //@line 143 "lgc.c"
      var $107=(($106)|0); //@line 143 "lgc.c"
      var $108=HEAP32[(($107)>>2)]; //@line 143 "lgc.c"
      var $109=$p; //@line 143 "lgc.c"
      HEAP32[(($109)>>2)]=$108; //@line 143 "lgc.c"
      var $110=$g; //@line 145 "lgc.c"
      var $111=(($110+48)|0); //@line 145 "lgc.c"
      var $112=HEAP32[(($111)>>2)]; //@line 145 "lgc.c"
      var $113=(($112)|0)==0; //@line 145 "lgc.c"
      if ($113) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 145 "lgc.c"
    case 17: 
      var $115=$curr; //@line 146 "lgc.c"
      var $116=$curr; //@line 146 "lgc.c"
      var $117=$116; //@line 146 "lgc.c"
      var $118=(($117)|0); //@line 146 "lgc.c"
      HEAP32[(($118)>>2)]=$115; //@line 146 "lgc.c"
      var $119=$g; //@line 146 "lgc.c"
      var $120=(($119+48)|0); //@line 146 "lgc.c"
      HEAP32[(($120)>>2)]=$115; //@line 146 "lgc.c"
      __label__ = 19; break; //@line 146 "lgc.c"
    case 18: 
      var $122=$g; //@line 148 "lgc.c"
      var $123=(($122+48)|0); //@line 148 "lgc.c"
      var $124=HEAP32[(($123)>>2)]; //@line 148 "lgc.c"
      var $125=$124; //@line 148 "lgc.c"
      var $126=(($125)|0); //@line 148 "lgc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 148 "lgc.c"
      var $128=$curr; //@line 148 "lgc.c"
      var $129=$128; //@line 148 "lgc.c"
      var $130=(($129)|0); //@line 148 "lgc.c"
      HEAP32[(($130)>>2)]=$127; //@line 148 "lgc.c"
      var $131=$curr; //@line 149 "lgc.c"
      var $132=$g; //@line 149 "lgc.c"
      var $133=(($132+48)|0); //@line 149 "lgc.c"
      var $134=HEAP32[(($133)>>2)]; //@line 149 "lgc.c"
      var $135=$134; //@line 149 "lgc.c"
      var $136=(($135)|0); //@line 149 "lgc.c"
      HEAP32[(($136)>>2)]=$131; //@line 149 "lgc.c"
      var $137=$curr; //@line 150 "lgc.c"
      var $138=$g; //@line 150 "lgc.c"
      var $139=(($138+48)|0); //@line 150 "lgc.c"
      HEAP32[(($139)>>2)]=$137; //@line 150 "lgc.c"
      __label__ = 19; break; //@line 151 "lgc.c"
    case 19: 
      __label__ = 20; break; //@line 152 "lgc.c"
    case 20: 
      __label__ = 21; break; //@line 152 "lgc.c"
    case 21: 
      __label__ = 3; break; //@line 153 "lgc.c"
    case 22: 
      var $144=$deadmem; //@line 154 "lgc.c"
      ;
      return $144; //@line 154 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z18luaC_separateudataP9lua_Statei["X"]=1;

function __Z13luaC_callGCTMP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      __label__ = 3; break; //@line 478 "lgc.c"
    case 3: 
      var $3=$1; //@line 478 "lgc.c"
      var $4=(($3+16)|0); //@line 478 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 478 "lgc.c"
      var $6=(($5+48)|0); //@line 478 "lgc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 478 "lgc.c"
      var $8=(($7)|0)!=0; //@line 478 "lgc.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 478 "lgc.c"
    case 4: 
      var $10=$1; //@line 479 "lgc.c"
      __Z4GCTMP9lua_State($10); //@line 479 "lgc.c"
      __label__ = 3; break; //@line 479 "lgc.c"
    case 5: 
      ;
      return; //@line 480 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z4GCTMP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $o;
      var $udata;
      var $tm;
      var $oldah;
      var $oldt;
      var $o2;
      var $o1;
      var $i_o;
      $1=$L;
      var $2=$1; //@line 446 "lgc.c"
      var $3=(($2+16)|0); //@line 446 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 446 "lgc.c"
      $g=$4; //@line 446 "lgc.c"
      var $5=$g; //@line 447 "lgc.c"
      var $6=(($5+48)|0); //@line 447 "lgc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 447 "lgc.c"
      var $8=$7; //@line 447 "lgc.c"
      var $9=(($8)|0); //@line 447 "lgc.c"
      var $10=HEAP32[(($9)>>2)]; //@line 447 "lgc.c"
      $o=$10; //@line 447 "lgc.c"
      var $11=$o; //@line 448 "lgc.c"
      var $12=$11; //@line 448 "lgc.c"
      $udata=$12; //@line 448 "lgc.c"
      var $13=$o; //@line 451 "lgc.c"
      var $14=$g; //@line 451 "lgc.c"
      var $15=(($14+48)|0); //@line 451 "lgc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 451 "lgc.c"
      var $17=(($13)|0)==(($16)|0); //@line 451 "lgc.c"
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 451 "lgc.c"
    case 3: 
      var $19=$g; //@line 452 "lgc.c"
      var $20=(($19+48)|0); //@line 452 "lgc.c"
      HEAP32[(($20)>>2)]=0; //@line 452 "lgc.c"
      __label__ = 5; break; //@line 452 "lgc.c"
    case 4: 
      var $22=$udata; //@line 454 "lgc.c"
      var $23=$22; //@line 454 "lgc.c"
      var $24=(($23)|0); //@line 454 "lgc.c"
      var $25=HEAP32[(($24)>>2)]; //@line 454 "lgc.c"
      var $26=$g; //@line 454 "lgc.c"
      var $27=(($26+48)|0); //@line 454 "lgc.c"
      var $28=HEAP32[(($27)>>2)]; //@line 454 "lgc.c"
      var $29=$28; //@line 454 "lgc.c"
      var $30=(($29)|0); //@line 454 "lgc.c"
      HEAP32[(($30)>>2)]=$25; //@line 454 "lgc.c"
      __label__ = 5; break; //@line 454 "lgc.c"
    case 5: 
      var $32=$g; //@line 455 "lgc.c"
      var $33=(($32+104)|0); //@line 455 "lgc.c"
      var $34=HEAP32[(($33)>>2)]; //@line 455 "lgc.c"
      var $35=(($34)|0); //@line 455 "lgc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 455 "lgc.c"
      var $37=$udata; //@line 455 "lgc.c"
      var $38=$37; //@line 455 "lgc.c"
      var $39=(($38)|0); //@line 455 "lgc.c"
      HEAP32[(($39)>>2)]=$36; //@line 455 "lgc.c"
      var $40=$o; //@line 456 "lgc.c"
      var $41=$g; //@line 456 "lgc.c"
      var $42=(($41+104)|0); //@line 456 "lgc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 456 "lgc.c"
      var $44=(($43)|0); //@line 456 "lgc.c"
      HEAP32[(($44)>>2)]=$40; //@line 456 "lgc.c"
      var $45=$o; //@line 457 "lgc.c"
      var $46=$45; //@line 457 "lgc.c"
      var $47=(($46+5)|0); //@line 457 "lgc.c"
      var $48=HEAPU8[($47)]; //@line 457 "lgc.c"
      var $49=(($48)&255); //@line 457 "lgc.c"
      var $50=$49 & 248; //@line 457 "lgc.c"
      var $51=$g; //@line 457 "lgc.c"
      var $52=(($51+20)|0); //@line 457 "lgc.c"
      var $53=HEAPU8[($52)]; //@line 457 "lgc.c"
      var $54=(($53)&255); //@line 457 "lgc.c"
      var $55=$54 & 3; //@line 457 "lgc.c"
      var $56=(($55) & 255); //@line 457 "lgc.c"
      var $57=(($56)&255); //@line 457 "lgc.c"
      var $58=$50 | $57; //@line 457 "lgc.c"
      var $59=(($58) & 255); //@line 457 "lgc.c"
      var $60=$o; //@line 457 "lgc.c"
      var $61=$60; //@line 457 "lgc.c"
      var $62=(($61+5)|0); //@line 457 "lgc.c"
      HEAP8[($62)]=$59; //@line 457 "lgc.c"
      var $63=$udata; //@line 458 "lgc.c"
      var $64=$63; //@line 458 "lgc.c"
      var $65=(($64+8)|0); //@line 458 "lgc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 458 "lgc.c"
      var $67=(($66)|0)==0; //@line 458 "lgc.c"
      if ($67) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 458 "lgc.c"
    case 6: 
      var $95 = 0;__label__ = 11; break; //@line 458 "lgc.c"
    case 7: 
      var $70=$udata; //@line 458 "lgc.c"
      var $71=$70; //@line 458 "lgc.c"
      var $72=(($71+8)|0); //@line 458 "lgc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 458 "lgc.c"
      var $74=(($73+6)|0); //@line 458 "lgc.c"
      var $75=HEAPU8[($74)]; //@line 458 "lgc.c"
      var $76=(($75)&255); //@line 458 "lgc.c"
      var $77=$76 & 4; //@line 458 "lgc.c"
      var $78=(($77)|0)!=0; //@line 458 "lgc.c"
      if ($78) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 458 "lgc.c"
    case 8: 
      var $93 = 0;__label__ = 10; break; //@line 458 "lgc.c"
    case 9: 
      var $81=$udata; //@line 458 "lgc.c"
      var $82=$81; //@line 458 "lgc.c"
      var $83=(($82+8)|0); //@line 458 "lgc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 458 "lgc.c"
      var $85=$1; //@line 458 "lgc.c"
      var $86=(($85+16)|0); //@line 458 "lgc.c"
      var $87=HEAP32[(($86)>>2)]; //@line 458 "lgc.c"
      var $88=(($87+168)|0); //@line 458 "lgc.c"
      var $89=(($88+8)|0); //@line 458 "lgc.c"
      var $90=HEAP32[(($89)>>2)]; //@line 458 "lgc.c"
      var $91=__Z10luaT_gettmP5Table3TMSP7TString($84, 2, $90); //@line 458 "lgc.c"
      var $93 = $91;__label__ = 10; break; //@line 458 "lgc.c"
    case 10: 
      var $93; //@line 458 "lgc.c"
      var $95 = $93;__label__ = 11; break; //@line 458 "lgc.c"
    case 11: 
      var $95; //@line 458 "lgc.c"
      $tm=$95; //@line 458 "lgc.c"
      var $96=$tm; //@line 459 "lgc.c"
      var $97=(($96)|0)!=0; //@line 459 "lgc.c"
      if ($97) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 459 "lgc.c"
    case 12: 
      var $99=$1; //@line 460 "lgc.c"
      var $100=(($99+57)|0); //@line 460 "lgc.c"
      var $101=HEAP8[($100)]; //@line 460 "lgc.c"
      $oldah=$101; //@line 460 "lgc.c"
      var $102=$g; //@line 461 "lgc.c"
      var $103=(($102+64)|0); //@line 461 "lgc.c"
      var $104=HEAP32[(($103)>>2)]; //@line 461 "lgc.c"
      $oldt=$104; //@line 461 "lgc.c"
      var $105=$1; //@line 462 "lgc.c"
      var $106=(($105+57)|0); //@line 462 "lgc.c"
      HEAP8[($106)]=0; //@line 462 "lgc.c"
      var $107=$g; //@line 463 "lgc.c"
      var $108=(($107+68)|0); //@line 463 "lgc.c"
      var $109=HEAP32[(($108)>>2)]; //@line 463 "lgc.c"
      var $110=((($109<<1))|0); //@line 463 "lgc.c"
      var $111=$g; //@line 463 "lgc.c"
      var $112=(($111+64)|0); //@line 463 "lgc.c"
      HEAP32[(($112)>>2)]=$110; //@line 463 "lgc.c"
      var $113=$tm; //@line 464 "lgc.c"
      $o2=$113; //@line 464 "lgc.c"
      var $114=$1; //@line 464 "lgc.c"
      var $115=(($114+8)|0); //@line 464 "lgc.c"
      var $116=HEAP32[(($115)>>2)]; //@line 464 "lgc.c"
      $o1=$116; //@line 464 "lgc.c"
      var $117=$o1; //@line 464 "lgc.c"
      var $118=(($117)|0); //@line 464 "lgc.c"
      var $119=$o2; //@line 464 "lgc.c"
      var $120=(($119)|0); //@line 464 "lgc.c"
      var $121=$118; //@line 464 "lgc.c"
      var $122=$120; //@line 464 "lgc.c"
      HEAP32[(($121)>>2)]=HEAP32[(($122)>>2)];HEAP32[((($121)+(4))>>2)]=HEAP32[((($122)+(4))>>2)]; //@line 464 "lgc.c"
      var $123=$o2; //@line 464 "lgc.c"
      var $124=(($123+8)|0); //@line 464 "lgc.c"
      var $125=HEAP32[(($124)>>2)]; //@line 464 "lgc.c"
      var $126=$o1; //@line 464 "lgc.c"
      var $127=(($126+8)|0); //@line 464 "lgc.c"
      HEAP32[(($127)>>2)]=$125; //@line 464 "lgc.c"
      var $128=$1; //@line 465 "lgc.c"
      var $129=(($128+8)|0); //@line 465 "lgc.c"
      var $130=HEAP32[(($129)>>2)]; //@line 465 "lgc.c"
      var $131=(($130+12)|0); //@line 465 "lgc.c"
      $i_o=$131; //@line 465 "lgc.c"
      var $132=$udata; //@line 465 "lgc.c"
      var $133=$132; //@line 465 "lgc.c"
      var $134=$i_o; //@line 465 "lgc.c"
      var $135=(($134)|0); //@line 465 "lgc.c"
      var $136=$135; //@line 465 "lgc.c"
      HEAP32[(($136)>>2)]=$133; //@line 465 "lgc.c"
      var $137=$i_o; //@line 465 "lgc.c"
      var $138=(($137+8)|0); //@line 465 "lgc.c"
      HEAP32[(($138)>>2)]=7; //@line 465 "lgc.c"
      var $139=$1; //@line 466 "lgc.c"
      var $140=(($139+8)|0); //@line 466 "lgc.c"
      var $141=HEAP32[(($140)>>2)]; //@line 466 "lgc.c"
      var $142=(($141+24)|0); //@line 466 "lgc.c"
      HEAP32[(($140)>>2)]=$142; //@line 466 "lgc.c"
      var $143=$1; //@line 467 "lgc.c"
      var $144=$1; //@line 467 "lgc.c"
      var $145=(($144+8)|0); //@line 467 "lgc.c"
      var $146=HEAP32[(($145)>>2)]; //@line 467 "lgc.c"
      var $147=((($146)-(24))|0); //@line 467 "lgc.c"
      __Z9luaD_callP9lua_StateP10lua_TValuei($143, $147, 0); //@line 467 "lgc.c"
      var $148=$oldah; //@line 468 "lgc.c"
      var $149=$1; //@line 468 "lgc.c"
      var $150=(($149+57)|0); //@line 468 "lgc.c"
      HEAP8[($150)]=$148; //@line 468 "lgc.c"
      var $151=$oldt; //@line 469 "lgc.c"
      var $152=$g; //@line 469 "lgc.c"
      var $153=(($152+64)|0); //@line 469 "lgc.c"
      HEAP32[(($153)>>2)]=$151; //@line 469 "lgc.c"
      __label__ = 13; break; //@line 470 "lgc.c"
    case 13: 
      ;
      return; //@line 471 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z4GCTMP9lua_State["X"]=1;

function __Z12luaC_freeallP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $i;
      $1=$L;
      var $2=$1; //@line 484 "lgc.c"
      var $3=(($2+16)|0); //@line 484 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 484 "lgc.c"
      $g=$4; //@line 484 "lgc.c"
      var $5=$g; //@line 486 "lgc.c"
      var $6=(($5+20)|0); //@line 486 "lgc.c"
      HEAP8[($6)]=67; //@line 486 "lgc.c"
      var $7=$1; //@line 487 "lgc.c"
      var $8=$g; //@line 487 "lgc.c"
      var $9=(($8+28)|0); //@line 487 "lgc.c"
      var $10=__Z9sweeplistP9lua_StatePP8GCObjectj($7, $9, -3); //@line 487 "lgc.c"
      $i=0; //@line 488 "lgc.c"
      __label__ = 3; break; //@line 488 "lgc.c"
    case 3: 
      var $12=$i; //@line 488 "lgc.c"
      var $13=$g; //@line 488 "lgc.c"
      var $14=(($13)|0); //@line 488 "lgc.c"
      var $15=(($14+8)|0); //@line 488 "lgc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 488 "lgc.c"
      var $17=(($12)|0) < (($16)|0); //@line 488 "lgc.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 488 "lgc.c"
    case 4: 
      var $19=$1; //@line 489 "lgc.c"
      var $20=$i; //@line 489 "lgc.c"
      var $21=$g; //@line 489 "lgc.c"
      var $22=(($21)|0); //@line 489 "lgc.c"
      var $23=(($22)|0); //@line 489 "lgc.c"
      var $24=HEAP32[(($23)>>2)]; //@line 489 "lgc.c"
      var $25=(($24+($20<<2))|0); //@line 489 "lgc.c"
      var $26=__Z9sweeplistP9lua_StatePP8GCObjectj($19, $25, -3); //@line 489 "lgc.c"
      __label__ = 5; break; //@line 489 "lgc.c"
    case 5: 
      var $28=$i; //@line 488 "lgc.c"
      var $29=((($28)+(1))|0); //@line 488 "lgc.c"
      $i=$29; //@line 488 "lgc.c"
      __label__ = 3; break; //@line 488 "lgc.c"
    case 6: 
      ;
      return; //@line 490 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9sweeplistP9lua_StatePP8GCObjectj($L, $p, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $curr;
      var $g;
      var $deadmask;
      $1=$L;
      $2=$p;
      $3=$count;
      var $4=$1; //@line 409 "lgc.c"
      var $5=(($4+16)|0); //@line 409 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 409 "lgc.c"
      $g=$6; //@line 409 "lgc.c"
      var $7=$g; //@line 410 "lgc.c"
      var $8=(($7+20)|0); //@line 410 "lgc.c"
      var $9=HEAPU8[($8)]; //@line 410 "lgc.c"
      var $10=(($9)&255); //@line 410 "lgc.c"
      var $11=$10 ^ 3; //@line 410 "lgc.c"
      $deadmask=$11; //@line 410 "lgc.c"
      __label__ = 3; break; //@line 411 "lgc.c"
    case 3: 
      var $13=$2; //@line 411 "lgc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 411 "lgc.c"
      $curr=$14; //@line 411 "lgc.c"
      var $15=(($14)|0)!=0; //@line 411 "lgc.c"
      if ($15) { __label__ = 4; break; } else { var $21 = 0;__label__ = 5; break; } //@line 411 "lgc.c"
    case 4: 
      var $17=$3; //@line 411 "lgc.c"
      var $18=((($17)-(1))|0); //@line 411 "lgc.c"
      $3=$18; //@line 411 "lgc.c"
      var $19=(($17)>>>0) > 0; //@line 411 "lgc.c"
      var $21 = $19;__label__ = 5; break; //@line 411 "lgc.c"
    case 5: 
      var $21;
      if ($21) { __label__ = 6; break; } else { __label__ = 14; break; } //@line 411 "lgc.c"
    case 6: 
      var $23=$curr; //@line 412 "lgc.c"
      var $24=$23; //@line 412 "lgc.c"
      var $25=(($24+4)|0); //@line 412 "lgc.c"
      var $26=HEAPU8[($25)]; //@line 412 "lgc.c"
      var $27=(($26)&255); //@line 412 "lgc.c"
      var $28=(($27)|0)==8; //@line 412 "lgc.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 412 "lgc.c"
    case 7: 
      var $30=$1; //@line 413 "lgc.c"
      var $31=$curr; //@line 413 "lgc.c"
      var $32=$31; //@line 413 "lgc.c"
      var $33=(($32+96)|0); //@line 413 "lgc.c"
      var $34=__Z9sweeplistP9lua_StatePP8GCObjectj($30, $33, -3); //@line 413 "lgc.c"
      __label__ = 8; break; //@line 413 "lgc.c"
    case 8: 
      var $36=$curr; //@line 414 "lgc.c"
      var $37=$36; //@line 414 "lgc.c"
      var $38=(($37+5)|0); //@line 414 "lgc.c"
      var $39=HEAPU8[($38)]; //@line 414 "lgc.c"
      var $40=(($39)&255); //@line 414 "lgc.c"
      var $41=$40 ^ 3; //@line 414 "lgc.c"
      var $42=$deadmask; //@line 414 "lgc.c"
      var $43=$41 & $42; //@line 414 "lgc.c"
      var $44=(($43)|0)!=0; //@line 414 "lgc.c"
      if ($44) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 414 "lgc.c"
    case 9: 
      var $46=$curr; //@line 416 "lgc.c"
      var $47=$46; //@line 416 "lgc.c"
      var $48=(($47+5)|0); //@line 416 "lgc.c"
      var $49=HEAPU8[($48)]; //@line 416 "lgc.c"
      var $50=(($49)&255); //@line 416 "lgc.c"
      var $51=$50 & 248; //@line 416 "lgc.c"
      var $52=$g; //@line 416 "lgc.c"
      var $53=(($52+20)|0); //@line 416 "lgc.c"
      var $54=HEAPU8[($53)]; //@line 416 "lgc.c"
      var $55=(($54)&255); //@line 416 "lgc.c"
      var $56=$55 & 3; //@line 416 "lgc.c"
      var $57=(($56) & 255); //@line 416 "lgc.c"
      var $58=(($57)&255); //@line 416 "lgc.c"
      var $59=$51 | $58; //@line 416 "lgc.c"
      var $60=(($59) & 255); //@line 416 "lgc.c"
      var $61=$curr; //@line 416 "lgc.c"
      var $62=$61; //@line 416 "lgc.c"
      var $63=(($62+5)|0); //@line 416 "lgc.c"
      HEAP8[($63)]=$60; //@line 416 "lgc.c"
      var $64=$curr; //@line 417 "lgc.c"
      var $65=$64; //@line 417 "lgc.c"
      var $66=(($65)|0); //@line 417 "lgc.c"
      $2=$66; //@line 417 "lgc.c"
      __label__ = 13; break; //@line 418 "lgc.c"
    case 10: 
      var $68=$curr; //@line 421 "lgc.c"
      var $69=$68; //@line 421 "lgc.c"
      var $70=(($69)|0); //@line 421 "lgc.c"
      var $71=HEAP32[(($70)>>2)]; //@line 421 "lgc.c"
      var $72=$2; //@line 421 "lgc.c"
      HEAP32[(($72)>>2)]=$71; //@line 421 "lgc.c"
      var $73=$curr; //@line 422 "lgc.c"
      var $74=$g; //@line 422 "lgc.c"
      var $75=(($74+28)|0); //@line 422 "lgc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 422 "lgc.c"
      var $77=(($73)|0)==(($76)|0); //@line 422 "lgc.c"
      if ($77) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 422 "lgc.c"
    case 11: 
      var $79=$curr; //@line 423 "lgc.c"
      var $80=$79; //@line 423 "lgc.c"
      var $81=(($80)|0); //@line 423 "lgc.c"
      var $82=HEAP32[(($81)>>2)]; //@line 423 "lgc.c"
      var $83=$g; //@line 423 "lgc.c"
      var $84=(($83+28)|0); //@line 423 "lgc.c"
      HEAP32[(($84)>>2)]=$82; //@line 423 "lgc.c"
      __label__ = 12; break; //@line 423 "lgc.c"
    case 12: 
      var $86=$1; //@line 424 "lgc.c"
      var $87=$curr; //@line 424 "lgc.c"
      __Z7freeobjP9lua_StateP8GCObject($86, $87); //@line 424 "lgc.c"
      __label__ = 13; break; //@line 425 "lgc.c"
    case 13: 
      __label__ = 3; break; //@line 426 "lgc.c"
    case 14: 
      var $90=$2; //@line 427 "lgc.c"
      ;
      return $90; //@line 427 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9sweeplistP9lua_StatePP8GCObjectj["X"]=1;

function __Z9luaC_stepP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $lim;
      $1=$L;
      var $2=$1; //@line 611 "lgc.c"
      var $3=(($2+16)|0); //@line 611 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 611 "lgc.c"
      $g=$4; //@line 611 "lgc.c"
      var $5=$g; //@line 612 "lgc.c"
      var $6=(($5+84)|0); //@line 612 "lgc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 612 "lgc.c"
      var $8=((($7)*(10))|0); //@line 612 "lgc.c"
      $lim=$8; //@line 612 "lgc.c"
      var $9=$lim; //@line 613 "lgc.c"
      var $10=(($9)|0)==0; //@line 613 "lgc.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 613 "lgc.c"
    case 3: 
      $lim=2147483646; //@line 614 "lgc.c"
      __label__ = 4; break; //@line 614 "lgc.c"
    case 4: 
      var $13=$g; //@line 615 "lgc.c"
      var $14=(($13+68)|0); //@line 615 "lgc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 615 "lgc.c"
      var $16=$g; //@line 615 "lgc.c"
      var $17=(($16+64)|0); //@line 615 "lgc.c"
      var $18=HEAP32[(($17)>>2)]; //@line 615 "lgc.c"
      var $19=((($15)-($18))|0); //@line 615 "lgc.c"
      var $20=$g; //@line 615 "lgc.c"
      var $21=(($20+76)|0); //@line 615 "lgc.c"
      var $22=HEAP32[(($21)>>2)]; //@line 615 "lgc.c"
      var $23=((($22)+($19))|0); //@line 615 "lgc.c"
      HEAP32[(($21)>>2)]=$23; //@line 615 "lgc.c"
      __label__ = 5; break; //@line 616 "lgc.c"
    case 5: 
      var $25=$1; //@line 617 "lgc.c"
      var $26=__Z10singlestepP9lua_State($25); //@line 617 "lgc.c"
      var $27=$lim; //@line 617 "lgc.c"
      var $28=((($27)-($26))|0); //@line 617 "lgc.c"
      $lim=$28; //@line 617 "lgc.c"
      var $29=$g; //@line 618 "lgc.c"
      var $30=(($29+21)|0); //@line 618 "lgc.c"
      var $31=HEAPU8[($30)]; //@line 618 "lgc.c"
      var $32=(($31)&255); //@line 618 "lgc.c"
      var $33=(($32)|0)==0; //@line 618 "lgc.c"
      if ($33) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 618 "lgc.c"
    case 6: 
      __label__ = 9; break; //@line 619 "lgc.c"
    case 7: 
      __label__ = 8; break; //@line 620 "lgc.c"
    case 8: 
      var $37=$lim; //@line 620 "lgc.c"
      var $38=(($37)|0) > 0; //@line 620 "lgc.c"
      if ($38) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 620 "lgc.c"
    case 9: 
      var $40=$g; //@line 621 "lgc.c"
      var $41=(($40+21)|0); //@line 621 "lgc.c"
      var $42=HEAPU8[($41)]; //@line 621 "lgc.c"
      var $43=(($42)&255); //@line 621 "lgc.c"
      var $44=(($43)|0)!=0; //@line 621 "lgc.c"
      if ($44) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 621 "lgc.c"
    case 10: 
      var $46=$g; //@line 622 "lgc.c"
      var $47=(($46+76)|0); //@line 622 "lgc.c"
      var $48=HEAPU32[(($47)>>2)]; //@line 622 "lgc.c"
      var $49=(($48)>>>0) < 1024; //@line 622 "lgc.c"
      if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 622 "lgc.c"
    case 11: 
      var $51=$g; //@line 623 "lgc.c"
      var $52=(($51+68)|0); //@line 623 "lgc.c"
      var $53=HEAP32[(($52)>>2)]; //@line 623 "lgc.c"
      var $54=((($53)+(1024))|0); //@line 623 "lgc.c"
      var $55=$g; //@line 623 "lgc.c"
      var $56=(($55+64)|0); //@line 623 "lgc.c"
      HEAP32[(($56)>>2)]=$54; //@line 623 "lgc.c"
      __label__ = 13; break; //@line 623 "lgc.c"
    case 12: 
      var $58=$g; //@line 625 "lgc.c"
      var $59=(($58+76)|0); //@line 625 "lgc.c"
      var $60=HEAP32[(($59)>>2)]; //@line 625 "lgc.c"
      var $61=((($60)-(1024))|0); //@line 625 "lgc.c"
      HEAP32[(($59)>>2)]=$61; //@line 625 "lgc.c"
      var $62=$g; //@line 626 "lgc.c"
      var $63=(($62+68)|0); //@line 626 "lgc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 626 "lgc.c"
      var $65=$g; //@line 626 "lgc.c"
      var $66=(($65+64)|0); //@line 626 "lgc.c"
      HEAP32[(($66)>>2)]=$64; //@line 626 "lgc.c"
      __label__ = 13; break; //@line 627 "lgc.c"
    case 13: 
      __label__ = 15; break; //@line 628 "lgc.c"
    case 14: 
      var $69=$g; //@line 631 "lgc.c"
      var $70=(($69+72)|0); //@line 631 "lgc.c"
      var $71=HEAPU32[(($70)>>2)]; //@line 631 "lgc.c"
      var $72=Math.floor(((($71)>>>0))/(100)); //@line 631 "lgc.c"
      var $73=$g; //@line 631 "lgc.c"
      var $74=(($73+80)|0); //@line 631 "lgc.c"
      var $75=HEAP32[(($74)>>2)]; //@line 631 "lgc.c"
      var $76=((($72)*($75))|0); //@line 631 "lgc.c"
      var $77=$g; //@line 631 "lgc.c"
      var $78=(($77+64)|0); //@line 631 "lgc.c"
      HEAP32[(($78)>>2)]=$76; //@line 631 "lgc.c"
      __label__ = 15; break; //@line 632 "lgc.c"
    case 15: 
      ;
      return; //@line 633 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9luaC_stepP9lua_State["X"]=1;

function __Z10singlestepP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $g;
      var $old;
      var $old1;
      $2=$L;
      var $3=$2; //@line 557 "lgc.c"
      var $4=(($3+16)|0); //@line 557 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 557 "lgc.c"
      $g=$5; //@line 557 "lgc.c"
      var $6=$g; //@line 559 "lgc.c"
      var $7=(($6+21)|0); //@line 559 "lgc.c"
      var $8=HEAPU8[($7)]; //@line 559 "lgc.c"
      var $9=(($8)&255); //@line 559 "lgc.c"
      if ((($9)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 7; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 10; break;
      }
      else if ((($9)|0) == 4) {
        __label__ = 13; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 3: 
      var $11=$2; //@line 561 "lgc.c"
      __Z8markrootP9lua_State($11); //@line 561 "lgc.c"
      $1=0; //@line 562 "lgc.c"
      __label__ = 19; break; //@line 562 "lgc.c"
    case 4: 
      var $13=$g; //@line 565 "lgc.c"
      var $14=(($13+36)|0); //@line 565 "lgc.c"
      var $15=HEAP32[(($14)>>2)]; //@line 565 "lgc.c"
      var $16=(($15)|0)!=0; //@line 565 "lgc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 565 "lgc.c"
    case 5: 
      var $18=$g; //@line 566 "lgc.c"
      var $19=__Z13propagatemarkP12global_State($18); //@line 566 "lgc.c"
      $1=$19; //@line 566 "lgc.c"
      __label__ = 19; break; //@line 566 "lgc.c"
    case 6: 
      var $21=$2; //@line 568 "lgc.c"
      __Z6atomicP9lua_State($21); //@line 568 "lgc.c"
      $1=0; //@line 569 "lgc.c"
      __label__ = 19; break; //@line 569 "lgc.c"
    case 7: 
      var $23=$g; //@line 573 "lgc.c"
      var $24=(($23+68)|0); //@line 573 "lgc.c"
      var $25=HEAP32[(($24)>>2)]; //@line 573 "lgc.c"
      $old=$25; //@line 573 "lgc.c"
      var $26=$2; //@line 574 "lgc.c"
      var $27=$g; //@line 574 "lgc.c"
      var $28=(($27+24)|0); //@line 574 "lgc.c"
      var $29=HEAP32[(($28)>>2)]; //@line 574 "lgc.c"
      var $30=((($29)+(1))|0); //@line 574 "lgc.c"
      HEAP32[(($28)>>2)]=$30; //@line 574 "lgc.c"
      var $31=$g; //@line 574 "lgc.c"
      var $32=(($31)|0); //@line 574 "lgc.c"
      var $33=(($32)|0); //@line 574 "lgc.c"
      var $34=HEAP32[(($33)>>2)]; //@line 574 "lgc.c"
      var $35=(($34+($29<<2))|0); //@line 574 "lgc.c"
      var $36=__Z9sweeplistP9lua_StatePP8GCObjectj($26, $35, -3); //@line 574 "lgc.c"
      var $37=$g; //@line 575 "lgc.c"
      var $38=(($37+24)|0); //@line 575 "lgc.c"
      var $39=HEAP32[(($38)>>2)]; //@line 575 "lgc.c"
      var $40=$g; //@line 575 "lgc.c"
      var $41=(($40)|0); //@line 575 "lgc.c"
      var $42=(($41+8)|0); //@line 575 "lgc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 575 "lgc.c"
      var $44=(($39)|0) >= (($43)|0); //@line 575 "lgc.c"
      if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 575 "lgc.c"
    case 8: 
      var $46=$g; //@line 576 "lgc.c"
      var $47=(($46+21)|0); //@line 576 "lgc.c"
      HEAP8[($47)]=3; //@line 576 "lgc.c"
      __label__ = 9; break; //@line 576 "lgc.c"
    case 9: 
      var $49=$old; //@line 578 "lgc.c"
      var $50=$g; //@line 578 "lgc.c"
      var $51=(($50+68)|0); //@line 578 "lgc.c"
      var $52=HEAP32[(($51)>>2)]; //@line 578 "lgc.c"
      var $53=((($49)-($52))|0); //@line 578 "lgc.c"
      var $54=$g; //@line 578 "lgc.c"
      var $55=(($54+72)|0); //@line 578 "lgc.c"
      var $56=HEAP32[(($55)>>2)]; //@line 578 "lgc.c"
      var $57=((($56)-($53))|0); //@line 578 "lgc.c"
      HEAP32[(($55)>>2)]=$57; //@line 578 "lgc.c"
      $1=10; //@line 579 "lgc.c"
      __label__ = 19; break; //@line 579 "lgc.c"
    case 10: 
      var $59=$g; //@line 582 "lgc.c"
      var $60=(($59+68)|0); //@line 582 "lgc.c"
      var $61=HEAP32[(($60)>>2)]; //@line 582 "lgc.c"
      $old1=$61; //@line 582 "lgc.c"
      var $62=$2; //@line 583 "lgc.c"
      var $63=$g; //@line 583 "lgc.c"
      var $64=(($63+32)|0); //@line 583 "lgc.c"
      var $65=HEAP32[(($64)>>2)]; //@line 583 "lgc.c"
      var $66=__Z9sweeplistP9lua_StatePP8GCObjectj($62, $65, 40); //@line 583 "lgc.c"
      var $67=$g; //@line 583 "lgc.c"
      var $68=(($67+32)|0); //@line 583 "lgc.c"
      HEAP32[(($68)>>2)]=$66; //@line 583 "lgc.c"
      var $69=$g; //@line 584 "lgc.c"
      var $70=(($69+32)|0); //@line 584 "lgc.c"
      var $71=HEAP32[(($70)>>2)]; //@line 584 "lgc.c"
      var $72=HEAP32[(($71)>>2)]; //@line 584 "lgc.c"
      var $73=(($72)|0)==0; //@line 584 "lgc.c"
      if ($73) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 584 "lgc.c"
    case 11: 
      var $75=$2; //@line 585 "lgc.c"
      __Z10checkSizesP9lua_State($75); //@line 585 "lgc.c"
      var $76=$g; //@line 586 "lgc.c"
      var $77=(($76+21)|0); //@line 586 "lgc.c"
      HEAP8[($77)]=4; //@line 586 "lgc.c"
      __label__ = 12; break; //@line 587 "lgc.c"
    case 12: 
      var $79=$old1; //@line 589 "lgc.c"
      var $80=$g; //@line 589 "lgc.c"
      var $81=(($80+68)|0); //@line 589 "lgc.c"
      var $82=HEAP32[(($81)>>2)]; //@line 589 "lgc.c"
      var $83=((($79)-($82))|0); //@line 589 "lgc.c"
      var $84=$g; //@line 589 "lgc.c"
      var $85=(($84+72)|0); //@line 589 "lgc.c"
      var $86=HEAP32[(($85)>>2)]; //@line 589 "lgc.c"
      var $87=((($86)-($83))|0); //@line 589 "lgc.c"
      HEAP32[(($85)>>2)]=$87; //@line 589 "lgc.c"
      $1=400; //@line 590 "lgc.c"
      __label__ = 19; break; //@line 590 "lgc.c"
    case 13: 
      var $89=$g; //@line 593 "lgc.c"
      var $90=(($89+48)|0); //@line 593 "lgc.c"
      var $91=HEAP32[(($90)>>2)]; //@line 593 "lgc.c"
      var $92=(($91)|0)!=0; //@line 593 "lgc.c"
      if ($92) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 593 "lgc.c"
    case 14: 
      var $94=$2; //@line 594 "lgc.c"
      __Z4GCTMP9lua_State($94); //@line 594 "lgc.c"
      var $95=$g; //@line 595 "lgc.c"
      var $96=(($95+72)|0); //@line 595 "lgc.c"
      var $97=HEAPU32[(($96)>>2)]; //@line 595 "lgc.c"
      var $98=(($97)>>>0) > 100; //@line 595 "lgc.c"
      if ($98) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 595 "lgc.c"
    case 15: 
      var $100=$g; //@line 596 "lgc.c"
      var $101=(($100+72)|0); //@line 596 "lgc.c"
      var $102=HEAP32[(($101)>>2)]; //@line 596 "lgc.c"
      var $103=((($102)-(100))|0); //@line 596 "lgc.c"
      HEAP32[(($101)>>2)]=$103; //@line 596 "lgc.c"
      __label__ = 16; break; //@line 596 "lgc.c"
    case 16: 
      $1=100; //@line 597 "lgc.c"
      __label__ = 19; break; //@line 597 "lgc.c"
    case 17: 
      var $106=$g; //@line 600 "lgc.c"
      var $107=(($106+21)|0); //@line 600 "lgc.c"
      HEAP8[($107)]=0; //@line 600 "lgc.c"
      var $108=$g; //@line 601 "lgc.c"
      var $109=(($108+76)|0); //@line 601 "lgc.c"
      HEAP32[(($109)>>2)]=0; //@line 601 "lgc.c"
      $1=0; //@line 602 "lgc.c"
      __label__ = 19; break; //@line 602 "lgc.c"
    case 18: 
      $1=0; //@line 605 "lgc.c"
      __label__ = 19; break; //@line 605 "lgc.c"
    case 19: 
      var $112=$1; //@line 607 "lgc.c"
      ;
      return $112; //@line 607 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10singlestepP9lua_State["X"]=1;

function __Z11luaC_fullgcP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      $1=$L;
      var $2=$1; //@line 637 "lgc.c"
      var $3=(($2+16)|0); //@line 637 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 637 "lgc.c"
      $g=$4; //@line 637 "lgc.c"
      var $5=$g; //@line 638 "lgc.c"
      var $6=(($5+21)|0); //@line 638 "lgc.c"
      var $7=HEAPU8[($6)]; //@line 638 "lgc.c"
      var $8=(($7)&255); //@line 638 "lgc.c"
      var $9=(($8)|0) <= 1; //@line 638 "lgc.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 638 "lgc.c"
    case 3: 
      var $11=$g; //@line 640 "lgc.c"
      var $12=(($11+24)|0); //@line 640 "lgc.c"
      HEAP32[(($12)>>2)]=0; //@line 640 "lgc.c"
      var $13=$g; //@line 641 "lgc.c"
      var $14=(($13+28)|0); //@line 641 "lgc.c"
      var $15=$g; //@line 641 "lgc.c"
      var $16=(($15+32)|0); //@line 641 "lgc.c"
      HEAP32[(($16)>>2)]=$14; //@line 641 "lgc.c"
      var $17=$g; //@line 643 "lgc.c"
      var $18=(($17+36)|0); //@line 643 "lgc.c"
      HEAP32[(($18)>>2)]=0; //@line 643 "lgc.c"
      var $19=$g; //@line 644 "lgc.c"
      var $20=(($19+40)|0); //@line 644 "lgc.c"
      HEAP32[(($20)>>2)]=0; //@line 644 "lgc.c"
      var $21=$g; //@line 645 "lgc.c"
      var $22=(($21+44)|0); //@line 645 "lgc.c"
      HEAP32[(($22)>>2)]=0; //@line 645 "lgc.c"
      var $23=$g; //@line 646 "lgc.c"
      var $24=(($23+21)|0); //@line 646 "lgc.c"
      HEAP8[($24)]=2; //@line 646 "lgc.c"
      __label__ = 4; break; //@line 647 "lgc.c"
    case 4: 
      __label__ = 5; break; //@line 650 "lgc.c"
    case 5: 
      var $27=$g; //@line 650 "lgc.c"
      var $28=(($27+21)|0); //@line 650 "lgc.c"
      var $29=HEAPU8[($28)]; //@line 650 "lgc.c"
      var $30=(($29)&255); //@line 650 "lgc.c"
      var $31=(($30)|0)!=4; //@line 650 "lgc.c"
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 650 "lgc.c"
    case 6: 
      var $33=$1; //@line 652 "lgc.c"
      var $34=__Z10singlestepP9lua_State($33); //@line 652 "lgc.c"
      __label__ = 5; break; //@line 653 "lgc.c"
    case 7: 
      var $36=$1; //@line 654 "lgc.c"
      __Z8markrootP9lua_State($36); //@line 654 "lgc.c"
      __label__ = 8; break; //@line 655 "lgc.c"
    case 8: 
      var $38=$g; //@line 655 "lgc.c"
      var $39=(($38+21)|0); //@line 655 "lgc.c"
      var $40=HEAPU8[($39)]; //@line 655 "lgc.c"
      var $41=(($40)&255); //@line 655 "lgc.c"
      var $42=(($41)|0)!=0; //@line 655 "lgc.c"
      if ($42) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 655 "lgc.c"
    case 9: 
      var $44=$1; //@line 656 "lgc.c"
      var $45=__Z10singlestepP9lua_State($44); //@line 656 "lgc.c"
      __label__ = 8; break; //@line 657 "lgc.c"
    case 10: 
      var $47=$g; //@line 658 "lgc.c"
      var $48=(($47+72)|0); //@line 658 "lgc.c"
      var $49=HEAPU32[(($48)>>2)]; //@line 658 "lgc.c"
      var $50=Math.floor(((($49)>>>0))/(100)); //@line 658 "lgc.c"
      var $51=$g; //@line 658 "lgc.c"
      var $52=(($51+80)|0); //@line 658 "lgc.c"
      var $53=HEAP32[(($52)>>2)]; //@line 658 "lgc.c"
      var $54=((($50)*($53))|0); //@line 658 "lgc.c"
      var $55=$g; //@line 658 "lgc.c"
      var $56=(($55+64)|0); //@line 658 "lgc.c"
      HEAP32[(($56)>>2)]=$54; //@line 658 "lgc.c"
      ;
      return; //@line 659 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaC_fullgcP9lua_State["X"]=1;

function __Z8markrootP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      $1=$L;
      var $2=$1; //@line 502 "lgc.c"
      var $3=(($2+16)|0); //@line 502 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 502 "lgc.c"
      $g=$4; //@line 502 "lgc.c"
      var $5=$g; //@line 503 "lgc.c"
      var $6=(($5+36)|0); //@line 503 "lgc.c"
      HEAP32[(($6)>>2)]=0; //@line 503 "lgc.c"
      var $7=$g; //@line 504 "lgc.c"
      var $8=(($7+40)|0); //@line 504 "lgc.c"
      HEAP32[(($8)>>2)]=0; //@line 504 "lgc.c"
      var $9=$g; //@line 505 "lgc.c"
      var $10=(($9+44)|0); //@line 505 "lgc.c"
      HEAP32[(($10)>>2)]=0; //@line 505 "lgc.c"
      var $11=$g; //@line 506 "lgc.c"
      var $12=(($11+104)|0); //@line 506 "lgc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 506 "lgc.c"
      var $14=$13; //@line 506 "lgc.c"
      var $15=$14; //@line 506 "lgc.c"
      var $16=(($15+5)|0); //@line 506 "lgc.c"
      var $17=HEAPU8[($16)]; //@line 506 "lgc.c"
      var $18=(($17)&255); //@line 506 "lgc.c"
      var $19=$18 & 3; //@line 506 "lgc.c"
      var $20=(($19)|0)!=0; //@line 506 "lgc.c"
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 506 "lgc.c"
    case 3: 
      var $22=$g; //@line 506 "lgc.c"
      var $23=$g; //@line 506 "lgc.c"
      var $24=(($23+104)|0); //@line 506 "lgc.c"
      var $25=HEAP32[(($24)>>2)]; //@line 506 "lgc.c"
      var $26=$25; //@line 506 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($22, $26); //@line 506 "lgc.c"
      __label__ = 4; break; //@line 506 "lgc.c"
    case 4: 
      var $28=$g; //@line 508 "lgc.c"
      var $29=(($28+104)|0); //@line 508 "lgc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 508 "lgc.c"
      var $31=(($30+72)|0); //@line 508 "lgc.c"
      var $32=(($31+8)|0); //@line 508 "lgc.c"
      var $33=HEAP32[(($32)>>2)]; //@line 508 "lgc.c"
      var $34=(($33)|0) >= 4; //@line 508 "lgc.c"
      if ($34) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 508 "lgc.c"
    case 5: 
      var $36=$g; //@line 508 "lgc.c"
      var $37=(($36+104)|0); //@line 508 "lgc.c"
      var $38=HEAP32[(($37)>>2)]; //@line 508 "lgc.c"
      var $39=(($38+72)|0); //@line 508 "lgc.c"
      var $40=(($39)|0); //@line 508 "lgc.c"
      var $41=$40; //@line 508 "lgc.c"
      var $42=HEAP32[(($41)>>2)]; //@line 508 "lgc.c"
      var $43=$42; //@line 508 "lgc.c"
      var $44=(($43+5)|0); //@line 508 "lgc.c"
      var $45=HEAPU8[($44)]; //@line 508 "lgc.c"
      var $46=(($45)&255); //@line 508 "lgc.c"
      var $47=$46 & 3; //@line 508 "lgc.c"
      var $48=(($47)|0)!=0; //@line 508 "lgc.c"
      if ($48) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 508 "lgc.c"
    case 6: 
      var $50=$g; //@line 508 "lgc.c"
      var $51=$g; //@line 508 "lgc.c"
      var $52=(($51+104)|0); //@line 508 "lgc.c"
      var $53=HEAP32[(($52)>>2)]; //@line 508 "lgc.c"
      var $54=(($53+72)|0); //@line 508 "lgc.c"
      var $55=(($54)|0); //@line 508 "lgc.c"
      var $56=$55; //@line 508 "lgc.c"
      var $57=HEAP32[(($56)>>2)]; //@line 508 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($50, $57); //@line 508 "lgc.c"
      __label__ = 7; break; //@line 508 "lgc.c"
    case 7: 
      var $59=$1; //@line 509 "lgc.c"
      var $60=(($59+16)|0); //@line 509 "lgc.c"
      var $61=HEAP32[(($60)>>2)]; //@line 509 "lgc.c"
      var $62=(($61+92)|0); //@line 509 "lgc.c"
      var $63=(($62+8)|0); //@line 509 "lgc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 509 "lgc.c"
      var $65=(($64)|0) >= 4; //@line 509 "lgc.c"
      if ($65) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 509 "lgc.c"
    case 8: 
      var $67=$1; //@line 509 "lgc.c"
      var $68=(($67+16)|0); //@line 509 "lgc.c"
      var $69=HEAP32[(($68)>>2)]; //@line 509 "lgc.c"
      var $70=(($69+92)|0); //@line 509 "lgc.c"
      var $71=(($70)|0); //@line 509 "lgc.c"
      var $72=$71; //@line 509 "lgc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 509 "lgc.c"
      var $74=$73; //@line 509 "lgc.c"
      var $75=(($74+5)|0); //@line 509 "lgc.c"
      var $76=HEAPU8[($75)]; //@line 509 "lgc.c"
      var $77=(($76)&255); //@line 509 "lgc.c"
      var $78=$77 & 3; //@line 509 "lgc.c"
      var $79=(($78)|0)!=0; //@line 509 "lgc.c"
      if ($79) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 509 "lgc.c"
    case 9: 
      var $81=$g; //@line 509 "lgc.c"
      var $82=$1; //@line 509 "lgc.c"
      var $83=(($82+16)|0); //@line 509 "lgc.c"
      var $84=HEAP32[(($83)>>2)]; //@line 509 "lgc.c"
      var $85=(($84+92)|0); //@line 509 "lgc.c"
      var $86=(($85)|0); //@line 509 "lgc.c"
      var $87=$86; //@line 509 "lgc.c"
      var $88=HEAP32[(($87)>>2)]; //@line 509 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($81, $88); //@line 509 "lgc.c"
      __label__ = 10; break; //@line 509 "lgc.c"
    case 10: 
      var $90=$g; //@line 510 "lgc.c"
      __Z6markmtP12global_State($90); //@line 510 "lgc.c"
      var $91=$g; //@line 511 "lgc.c"
      var $92=(($91+21)|0); //@line 511 "lgc.c"
      HEAP8[($92)]=1; //@line 511 "lgc.c"
      ;
      return; //@line 512 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8markrootP9lua_State["X"]=1;

function __Z16luaC_barrierbackP9lua_StateP5Table($L, $t) {
  ;
  var __label__;

  var $1;
  var $2;
  var $g;
  var $o;
  $1=$L;
  $2=$t;
  var $3=$1; //@line 676 "lgc.c"
  var $4=(($3+16)|0); //@line 676 "lgc.c"
  var $5=HEAP32[(($4)>>2)]; //@line 676 "lgc.c"
  $g=$5; //@line 676 "lgc.c"
  var $6=$2; //@line 677 "lgc.c"
  var $7=$6; //@line 677 "lgc.c"
  $o=$7; //@line 677 "lgc.c"
  var $8=$o; //@line 680 "lgc.c"
  var $9=$8; //@line 680 "lgc.c"
  var $10=(($9+5)|0); //@line 680 "lgc.c"
  var $11=HEAPU8[($10)]; //@line 680 "lgc.c"
  var $12=(($11)&255); //@line 680 "lgc.c"
  var $13=$12 & 251; //@line 680 "lgc.c"
  var $14=(($13) & 255); //@line 680 "lgc.c"
  HEAP8[($10)]=$14; //@line 680 "lgc.c"
  var $15=$g; //@line 681 "lgc.c"
  var $16=(($15+40)|0); //@line 681 "lgc.c"
  var $17=HEAP32[(($16)>>2)]; //@line 681 "lgc.c"
  var $18=$2; //@line 681 "lgc.c"
  var $19=(($18+24)|0); //@line 681 "lgc.c"
  HEAP32[(($19)>>2)]=$17; //@line 681 "lgc.c"
  var $20=$o; //@line 682 "lgc.c"
  var $21=$g; //@line 682 "lgc.c"
  var $22=(($21+40)|0); //@line 682 "lgc.c"
  HEAP32[(($22)>>2)]=$20; //@line 682 "lgc.c"
  ;
  return; //@line 683 "lgc.c"
}


function __Z9luaC_linkP9lua_StateP8GCObjecth($L, $o, $tt) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $g;
  $1=$L;
  $2=$o;
  $3=$tt;
  var $4=$1; //@line 687 "lgc.c"
  var $5=(($4+16)|0); //@line 687 "lgc.c"
  var $6=HEAP32[(($5)>>2)]; //@line 687 "lgc.c"
  $g=$6; //@line 687 "lgc.c"
  var $7=$g; //@line 688 "lgc.c"
  var $8=(($7+28)|0); //@line 688 "lgc.c"
  var $9=HEAP32[(($8)>>2)]; //@line 688 "lgc.c"
  var $10=$2; //@line 688 "lgc.c"
  var $11=$10; //@line 688 "lgc.c"
  var $12=(($11)|0); //@line 688 "lgc.c"
  HEAP32[(($12)>>2)]=$9; //@line 688 "lgc.c"
  var $13=$2; //@line 689 "lgc.c"
  var $14=$g; //@line 689 "lgc.c"
  var $15=(($14+28)|0); //@line 689 "lgc.c"
  HEAP32[(($15)>>2)]=$13; //@line 689 "lgc.c"
  var $16=$g; //@line 690 "lgc.c"
  var $17=(($16+20)|0); //@line 690 "lgc.c"
  var $18=HEAPU8[($17)]; //@line 690 "lgc.c"
  var $19=(($18)&255); //@line 690 "lgc.c"
  var $20=$19 & 3; //@line 690 "lgc.c"
  var $21=(($20) & 255); //@line 690 "lgc.c"
  var $22=$2; //@line 690 "lgc.c"
  var $23=$22; //@line 690 "lgc.c"
  var $24=(($23+5)|0); //@line 690 "lgc.c"
  HEAP8[($24)]=$21; //@line 690 "lgc.c"
  var $25=$3; //@line 691 "lgc.c"
  var $26=$2; //@line 691 "lgc.c"
  var $27=$26; //@line 691 "lgc.c"
  var $28=(($27+4)|0); //@line 691 "lgc.c"
  HEAP8[($28)]=$25; //@line 691 "lgc.c"
  ;
  return; //@line 692 "lgc.c"
}


function __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($L, $o, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $g;
      $1=$L;
      $2=$o;
      $3=$v;
      var $4=$1; //@line 663 "lgc.c"
      var $5=(($4+16)|0); //@line 663 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 663 "lgc.c"
      $g=$6; //@line 663 "lgc.c"
      var $7=$g; //@line 668 "lgc.c"
      var $8=(($7+21)|0); //@line 668 "lgc.c"
      var $9=HEAPU8[($8)]; //@line 668 "lgc.c"
      var $10=(($9)&255); //@line 668 "lgc.c"
      var $11=(($10)|0)==1; //@line 668 "lgc.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 668 "lgc.c"
    case 3: 
      var $13=$g; //@line 669 "lgc.c"
      var $14=$3; //@line 669 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($13, $14); //@line 669 "lgc.c"
      __label__ = 5; break; //@line 669 "lgc.c"
    case 4: 
      var $16=$2; //@line 671 "lgc.c"
      var $17=$16; //@line 671 "lgc.c"
      var $18=(($17+5)|0); //@line 671 "lgc.c"
      var $19=HEAPU8[($18)]; //@line 671 "lgc.c"
      var $20=(($19)&255); //@line 671 "lgc.c"
      var $21=$20 & 248; //@line 671 "lgc.c"
      var $22=$g; //@line 671 "lgc.c"
      var $23=(($22+20)|0); //@line 671 "lgc.c"
      var $24=HEAPU8[($23)]; //@line 671 "lgc.c"
      var $25=(($24)&255); //@line 671 "lgc.c"
      var $26=$25 & 3; //@line 671 "lgc.c"
      var $27=(($26) & 255); //@line 671 "lgc.c"
      var $28=(($27)&255); //@line 671 "lgc.c"
      var $29=$21 | $28; //@line 671 "lgc.c"
      var $30=(($29) & 255); //@line 671 "lgc.c"
      var $31=$2; //@line 671 "lgc.c"
      var $32=$31; //@line 671 "lgc.c"
      var $33=(($32+5)|0); //@line 671 "lgc.c"
      HEAP8[($33)]=$30; //@line 671 "lgc.c"
      __label__ = 5; break; //@line 671 "lgc.c"
    case 5: 
      ;
      return; //@line 672 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16reallymarkobjectP12global_StateP8GCObject($g, $o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $mt;
      var $uv;
      $1=$g;
      $2=$o;
      var $3=$2; //@line 71 "lgc.c"
      var $4=$3; //@line 71 "lgc.c"
      var $5=(($4+5)|0); //@line 71 "lgc.c"
      var $6=HEAPU8[($5)]; //@line 71 "lgc.c"
      var $7=(($6)&255); //@line 71 "lgc.c"
      var $8=$7 & 252; //@line 71 "lgc.c"
      var $9=(($8) & 255); //@line 71 "lgc.c"
      HEAP8[($5)]=$9; //@line 71 "lgc.c"
      var $10=$2; //@line 72 "lgc.c"
      var $11=$10; //@line 72 "lgc.c"
      var $12=(($11+4)|0); //@line 72 "lgc.c"
      var $13=HEAPU8[($12)]; //@line 72 "lgc.c"
      var $14=(($13)&255); //@line 72 "lgc.c"
      if ((($14)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($14)|0) == 7) {
        __label__ = 4; break;
      }
      else if ((($14)|0) == 10) {
        __label__ = 11; break;
      }
      else if ((($14)|0) == 6) {
        __label__ = 17; break;
      }
      else if ((($14)|0) == 5) {
        __label__ = 18; break;
      }
      else if ((($14)|0) == 8) {
        __label__ = 19; break;
      }
      else if ((($14)|0) == 9) {
        __label__ = 20; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 3: 
      __label__ = 22; break; //@line 74 "lgc.c"
    case 4: 
      var $17=$2; //@line 77 "lgc.c"
      var $18=$17; //@line 77 "lgc.c"
      var $19=$18; //@line 77 "lgc.c"
      var $20=(($19+8)|0); //@line 77 "lgc.c"
      var $21=HEAP32[(($20)>>2)]; //@line 77 "lgc.c"
      $mt=$21; //@line 77 "lgc.c"
      var $22=$2; //@line 78 "lgc.c"
      var $23=$22; //@line 78 "lgc.c"
      var $24=(($23+5)|0); //@line 78 "lgc.c"
      var $25=HEAPU8[($24)]; //@line 78 "lgc.c"
      var $26=(($25)&255); //@line 78 "lgc.c"
      var $27=$26 | 4; //@line 78 "lgc.c"
      var $28=(($27) & 255); //@line 78 "lgc.c"
      HEAP8[($24)]=$28; //@line 78 "lgc.c"
      var $29=$mt; //@line 79 "lgc.c"
      var $30=(($29)|0)!=0; //@line 79 "lgc.c"
      if ($30) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 79 "lgc.c"
    case 5: 
      var $32=$mt; //@line 79 "lgc.c"
      var $33=$32; //@line 79 "lgc.c"
      var $34=$33; //@line 79 "lgc.c"
      var $35=(($34+5)|0); //@line 79 "lgc.c"
      var $36=HEAPU8[($35)]; //@line 79 "lgc.c"
      var $37=(($36)&255); //@line 79 "lgc.c"
      var $38=$37 & 3; //@line 79 "lgc.c"
      var $39=(($38)|0)!=0; //@line 79 "lgc.c"
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 79 "lgc.c"
    case 6: 
      var $41=$1; //@line 79 "lgc.c"
      var $42=$mt; //@line 79 "lgc.c"
      var $43=$42; //@line 79 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($41, $43); //@line 79 "lgc.c"
      __label__ = 7; break; //@line 79 "lgc.c"
    case 7: 
      __label__ = 8; break; //@line 79 "lgc.c"
    case 8: 
      var $46=$2; //@line 80 "lgc.c"
      var $47=$46; //@line 80 "lgc.c"
      var $48=$47; //@line 80 "lgc.c"
      var $49=(($48+12)|0); //@line 80 "lgc.c"
      var $50=HEAP32[(($49)>>2)]; //@line 80 "lgc.c"
      var $51=$50; //@line 80 "lgc.c"
      var $52=$51; //@line 80 "lgc.c"
      var $53=(($52+5)|0); //@line 80 "lgc.c"
      var $54=HEAPU8[($53)]; //@line 80 "lgc.c"
      var $55=(($54)&255); //@line 80 "lgc.c"
      var $56=$55 & 3; //@line 80 "lgc.c"
      var $57=(($56)|0)!=0; //@line 80 "lgc.c"
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 80 "lgc.c"
    case 9: 
      var $59=$1; //@line 80 "lgc.c"
      var $60=$2; //@line 80 "lgc.c"
      var $61=$60; //@line 80 "lgc.c"
      var $62=$61; //@line 80 "lgc.c"
      var $63=(($62+12)|0); //@line 80 "lgc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 80 "lgc.c"
      var $65=$64; //@line 80 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($59, $65); //@line 80 "lgc.c"
      __label__ = 10; break; //@line 80 "lgc.c"
    case 10: 
      __label__ = 22; break; //@line 81 "lgc.c"
    case 11: 
      var $68=$2; //@line 84 "lgc.c"
      var $69=$68; //@line 84 "lgc.c"
      $uv=$69; //@line 84 "lgc.c"
      var $70=$uv; //@line 85 "lgc.c"
      var $71=(($70+8)|0); //@line 85 "lgc.c"
      var $72=HEAP32[(($71)>>2)]; //@line 85 "lgc.c"
      var $73=(($72+8)|0); //@line 85 "lgc.c"
      var $74=HEAP32[(($73)>>2)]; //@line 85 "lgc.c"
      var $75=(($74)|0) >= 4; //@line 85 "lgc.c"
      if ($75) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 85 "lgc.c"
    case 12: 
      var $77=$uv; //@line 85 "lgc.c"
      var $78=(($77+8)|0); //@line 85 "lgc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 85 "lgc.c"
      var $80=(($79)|0); //@line 85 "lgc.c"
      var $81=$80; //@line 85 "lgc.c"
      var $82=HEAP32[(($81)>>2)]; //@line 85 "lgc.c"
      var $83=$82; //@line 85 "lgc.c"
      var $84=(($83+5)|0); //@line 85 "lgc.c"
      var $85=HEAPU8[($84)]; //@line 85 "lgc.c"
      var $86=(($85)&255); //@line 85 "lgc.c"
      var $87=$86 & 3; //@line 85 "lgc.c"
      var $88=(($87)|0)!=0; //@line 85 "lgc.c"
      if ($88) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 85 "lgc.c"
    case 13: 
      var $90=$1; //@line 85 "lgc.c"
      var $91=$uv; //@line 85 "lgc.c"
      var $92=(($91+8)|0); //@line 85 "lgc.c"
      var $93=HEAP32[(($92)>>2)]; //@line 85 "lgc.c"
      var $94=(($93)|0); //@line 85 "lgc.c"
      var $95=$94; //@line 85 "lgc.c"
      var $96=HEAP32[(($95)>>2)]; //@line 85 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($90, $96); //@line 85 "lgc.c"
      __label__ = 14; break; //@line 85 "lgc.c"
    case 14: 
      var $98=$uv; //@line 86 "lgc.c"
      var $99=(($98+8)|0); //@line 86 "lgc.c"
      var $100=HEAP32[(($99)>>2)]; //@line 86 "lgc.c"
      var $101=$uv; //@line 86 "lgc.c"
      var $102=(($101+12)|0); //@line 86 "lgc.c"
      var $103=$102; //@line 86 "lgc.c"
      var $104=(($100)|0)==(($103)|0); //@line 86 "lgc.c"
      if ($104) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 86 "lgc.c"
    case 15: 
      var $106=$2; //@line 87 "lgc.c"
      var $107=$106; //@line 87 "lgc.c"
      var $108=(($107+5)|0); //@line 87 "lgc.c"
      var $109=HEAPU8[($108)]; //@line 87 "lgc.c"
      var $110=(($109)&255); //@line 87 "lgc.c"
      var $111=$110 | 4; //@line 87 "lgc.c"
      var $112=(($111) & 255); //@line 87 "lgc.c"
      HEAP8[($108)]=$112; //@line 87 "lgc.c"
      __label__ = 16; break; //@line 87 "lgc.c"
    case 16: 
      __label__ = 22; break; //@line 88 "lgc.c"
    case 17: 
      var $115=$1; //@line 91 "lgc.c"
      var $116=(($115+36)|0); //@line 91 "lgc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 91 "lgc.c"
      var $118=$2; //@line 91 "lgc.c"
      var $119=$118; //@line 91 "lgc.c"
      var $120=$119; //@line 91 "lgc.c"
      var $121=(($120+8)|0); //@line 91 "lgc.c"
      HEAP32[(($121)>>2)]=$117; //@line 91 "lgc.c"
      var $122=$2; //@line 92 "lgc.c"
      var $123=$1; //@line 92 "lgc.c"
      var $124=(($123+36)|0); //@line 92 "lgc.c"
      HEAP32[(($124)>>2)]=$122; //@line 92 "lgc.c"
      __label__ = 22; break; //@line 93 "lgc.c"
    case 18: 
      var $126=$1; //@line 96 "lgc.c"
      var $127=(($126+36)|0); //@line 96 "lgc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 96 "lgc.c"
      var $129=$2; //@line 96 "lgc.c"
      var $130=$129; //@line 96 "lgc.c"
      var $131=(($130+24)|0); //@line 96 "lgc.c"
      HEAP32[(($131)>>2)]=$128; //@line 96 "lgc.c"
      var $132=$2; //@line 97 "lgc.c"
      var $133=$1; //@line 97 "lgc.c"
      var $134=(($133+36)|0); //@line 97 "lgc.c"
      HEAP32[(($134)>>2)]=$132; //@line 97 "lgc.c"
      __label__ = 22; break; //@line 98 "lgc.c"
    case 19: 
      var $136=$1; //@line 101 "lgc.c"
      var $137=(($136+36)|0); //@line 101 "lgc.c"
      var $138=HEAP32[(($137)>>2)]; //@line 101 "lgc.c"
      var $139=$2; //@line 101 "lgc.c"
      var $140=$139; //@line 101 "lgc.c"
      var $141=(($140+100)|0); //@line 101 "lgc.c"
      HEAP32[(($141)>>2)]=$138; //@line 101 "lgc.c"
      var $142=$2; //@line 102 "lgc.c"
      var $143=$1; //@line 102 "lgc.c"
      var $144=(($143+36)|0); //@line 102 "lgc.c"
      HEAP32[(($144)>>2)]=$142; //@line 102 "lgc.c"
      __label__ = 22; break; //@line 103 "lgc.c"
    case 20: 
      var $146=$1; //@line 106 "lgc.c"
      var $147=(($146+36)|0); //@line 106 "lgc.c"
      var $148=HEAP32[(($147)>>2)]; //@line 106 "lgc.c"
      var $149=$2; //@line 106 "lgc.c"
      var $150=$149; //@line 106 "lgc.c"
      var $151=(($150+68)|0); //@line 106 "lgc.c"
      HEAP32[(($151)>>2)]=$148; //@line 106 "lgc.c"
      var $152=$2; //@line 107 "lgc.c"
      var $153=$1; //@line 107 "lgc.c"
      var $154=(($153+36)|0); //@line 107 "lgc.c"
      HEAP32[(($154)>>2)]=$152; //@line 107 "lgc.c"
      __label__ = 22; break; //@line 108 "lgc.c"
    case 21: 
      __label__ = 22; break; //@line 111 "lgc.c"
    case 22: 
      ;
      return; //@line 112 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z16reallymarkobjectP12global_StateP8GCObject["X"]=1;

function __Z14luaC_linkupvalP9lua_StateP5UpVal($L, $uv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $g;
      var $o;
      $1=$L;
      $2=$uv;
      var $3=$1; //@line 696 "lgc.c"
      var $4=(($3+16)|0); //@line 696 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 696 "lgc.c"
      $g=$5; //@line 696 "lgc.c"
      var $6=$2; //@line 697 "lgc.c"
      var $7=$6; //@line 697 "lgc.c"
      $o=$7; //@line 697 "lgc.c"
      var $8=$g; //@line 698 "lgc.c"
      var $9=(($8+28)|0); //@line 698 "lgc.c"
      var $10=HEAP32[(($9)>>2)]; //@line 698 "lgc.c"
      var $11=$o; //@line 698 "lgc.c"
      var $12=$11; //@line 698 "lgc.c"
      var $13=(($12)|0); //@line 698 "lgc.c"
      HEAP32[(($13)>>2)]=$10; //@line 698 "lgc.c"
      var $14=$o; //@line 699 "lgc.c"
      var $15=$g; //@line 699 "lgc.c"
      var $16=(($15+28)|0); //@line 699 "lgc.c"
      HEAP32[(($16)>>2)]=$14; //@line 699 "lgc.c"
      var $17=$o; //@line 700 "lgc.c"
      var $18=$17; //@line 700 "lgc.c"
      var $19=(($18+5)|0); //@line 700 "lgc.c"
      var $20=HEAPU8[($19)]; //@line 700 "lgc.c"
      var $21=(($20)&255); //@line 700 "lgc.c"
      var $22=$21 & 4; //@line 700 "lgc.c"
      var $23=(($22)|0)!=0; //@line 700 "lgc.c"
      if ($23) { __label__ = 12; break; } else { __label__ = 3; break; } //@line 700 "lgc.c"
    case 3: 
      var $25=$o; //@line 700 "lgc.c"
      var $26=$25; //@line 700 "lgc.c"
      var $27=(($26+5)|0); //@line 700 "lgc.c"
      var $28=HEAPU8[($27)]; //@line 700 "lgc.c"
      var $29=(($28)&255); //@line 700 "lgc.c"
      var $30=$29 & 3; //@line 700 "lgc.c"
      var $31=(($30)|0)!=0; //@line 700 "lgc.c"
      if ($31) { __label__ = 12; break; } else { __label__ = 4; break; } //@line 700 "lgc.c"
    case 4: 
      var $33=$g; //@line 701 "lgc.c"
      var $34=(($33+21)|0); //@line 701 "lgc.c"
      var $35=HEAPU8[($34)]; //@line 701 "lgc.c"
      var $36=(($35)&255); //@line 701 "lgc.c"
      var $37=(($36)|0)==1; //@line 701 "lgc.c"
      if ($37) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 701 "lgc.c"
    case 5: 
      var $39=$o; //@line 702 "lgc.c"
      var $40=$39; //@line 702 "lgc.c"
      var $41=(($40+5)|0); //@line 702 "lgc.c"
      var $42=HEAPU8[($41)]; //@line 702 "lgc.c"
      var $43=(($42)&255); //@line 702 "lgc.c"
      var $44=$43 | 4; //@line 702 "lgc.c"
      var $45=(($44) & 255); //@line 702 "lgc.c"
      HEAP8[($41)]=$45; //@line 702 "lgc.c"
      var $46=$2; //@line 703 "lgc.c"
      var $47=(($46+8)|0); //@line 703 "lgc.c"
      var $48=HEAP32[(($47)>>2)]; //@line 703 "lgc.c"
      var $49=(($48+8)|0); //@line 703 "lgc.c"
      var $50=HEAP32[(($49)>>2)]; //@line 703 "lgc.c"
      var $51=(($50)|0) >= 4; //@line 703 "lgc.c"
      if ($51) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 703 "lgc.c"
    case 6: 
      var $53=$2; //@line 703 "lgc.c"
      var $54=(($53+8)|0); //@line 703 "lgc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 703 "lgc.c"
      var $56=(($55)|0); //@line 703 "lgc.c"
      var $57=$56; //@line 703 "lgc.c"
      var $58=HEAP32[(($57)>>2)]; //@line 703 "lgc.c"
      var $59=$58; //@line 703 "lgc.c"
      var $60=(($59+5)|0); //@line 703 "lgc.c"
      var $61=HEAPU8[($60)]; //@line 703 "lgc.c"
      var $62=(($61)&255); //@line 703 "lgc.c"
      var $63=$62 & 3; //@line 703 "lgc.c"
      var $64=(($63)|0)!=0; //@line 703 "lgc.c"
      if ($64) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 703 "lgc.c"
    case 7: 
      var $66=$2; //@line 703 "lgc.c"
      var $67=$66; //@line 703 "lgc.c"
      var $68=$67; //@line 703 "lgc.c"
      var $69=(($68+5)|0); //@line 703 "lgc.c"
      var $70=HEAPU8[($69)]; //@line 703 "lgc.c"
      var $71=(($70)&255); //@line 703 "lgc.c"
      var $72=$71 & 4; //@line 703 "lgc.c"
      var $73=(($72)|0)!=0; //@line 703 "lgc.c"
      if ($73) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 703 "lgc.c"
    case 8: 
      var $75=$1; //@line 703 "lgc.c"
      var $76=$2; //@line 703 "lgc.c"
      var $77=$76; //@line 703 "lgc.c"
      var $78=$2; //@line 703 "lgc.c"
      var $79=(($78+8)|0); //@line 703 "lgc.c"
      var $80=HEAP32[(($79)>>2)]; //@line 703 "lgc.c"
      var $81=(($80)|0); //@line 703 "lgc.c"
      var $82=$81; //@line 703 "lgc.c"
      var $83=HEAP32[(($82)>>2)]; //@line 703 "lgc.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($75, $77, $83); //@line 703 "lgc.c"
      __label__ = 9; break; //@line 703 "lgc.c"
    case 9: 
      __label__ = 11; break; //@line 704 "lgc.c"
    case 10: 
      var $86=$o; //@line 706 "lgc.c"
      var $87=$86; //@line 706 "lgc.c"
      var $88=(($87+5)|0); //@line 706 "lgc.c"
      var $89=HEAPU8[($88)]; //@line 706 "lgc.c"
      var $90=(($89)&255); //@line 706 "lgc.c"
      var $91=$90 & 248; //@line 706 "lgc.c"
      var $92=$g; //@line 706 "lgc.c"
      var $93=(($92+20)|0); //@line 706 "lgc.c"
      var $94=HEAPU8[($93)]; //@line 706 "lgc.c"
      var $95=(($94)&255); //@line 706 "lgc.c"
      var $96=$95 & 3; //@line 706 "lgc.c"
      var $97=(($96) & 255); //@line 706 "lgc.c"
      var $98=(($97)&255); //@line 706 "lgc.c"
      var $99=$91 | $98; //@line 706 "lgc.c"
      var $100=(($99) & 255); //@line 706 "lgc.c"
      var $101=$o; //@line 706 "lgc.c"
      var $102=$101; //@line 706 "lgc.c"
      var $103=(($102+5)|0); //@line 706 "lgc.c"
      HEAP8[($103)]=$100; //@line 706 "lgc.c"
      __label__ = 11; break; //@line 708 "lgc.c"
    case 11: 
      __label__ = 12; break; //@line 709 "lgc.c"
    case 12: 
      ;
      return; //@line 710 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14luaC_linkupvalP9lua_StateP5UpVal["X"]=1;

function __Z6markmtP12global_State($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$g;
      $i=0; //@line 495 "lgc.c"
      __label__ = 3; break; //@line 495 "lgc.c"
    case 3: 
      var $3=$i; //@line 495 "lgc.c"
      var $4=(($3)|0) < 9; //@line 495 "lgc.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 495 "lgc.c"
    case 4: 
      var $6=$i; //@line 496 "lgc.c"
      var $7=$1; //@line 496 "lgc.c"
      var $8=(($7+132)|0); //@line 496 "lgc.c"
      var $9=(($8+($6<<2))|0); //@line 496 "lgc.c"
      var $10=HEAP32[(($9)>>2)]; //@line 496 "lgc.c"
      var $11=(($10)|0)!=0; //@line 496 "lgc.c"
      if ($11) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 496 "lgc.c"
    case 5: 
      var $13=$i; //@line 496 "lgc.c"
      var $14=$1; //@line 496 "lgc.c"
      var $15=(($14+132)|0); //@line 496 "lgc.c"
      var $16=(($15+($13<<2))|0); //@line 496 "lgc.c"
      var $17=HEAP32[(($16)>>2)]; //@line 496 "lgc.c"
      var $18=$17; //@line 496 "lgc.c"
      var $19=$18; //@line 496 "lgc.c"
      var $20=(($19+5)|0); //@line 496 "lgc.c"
      var $21=HEAPU8[($20)]; //@line 496 "lgc.c"
      var $22=(($21)&255); //@line 496 "lgc.c"
      var $23=$22 & 3; //@line 496 "lgc.c"
      var $24=(($23)|0)!=0; //@line 496 "lgc.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 496 "lgc.c"
    case 6: 
      var $26=$1; //@line 496 "lgc.c"
      var $27=$i; //@line 496 "lgc.c"
      var $28=$1; //@line 496 "lgc.c"
      var $29=(($28+132)|0); //@line 496 "lgc.c"
      var $30=(($29+($27<<2))|0); //@line 496 "lgc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 496 "lgc.c"
      var $32=$31; //@line 496 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($26, $32); //@line 496 "lgc.c"
      __label__ = 7; break; //@line 496 "lgc.c"
    case 7: 
      __label__ = 8; break; //@line 496 "lgc.c"
    case 8: 
      __label__ = 9; break; //@line 496 "lgc.c"
    case 9: 
      var $36=$i; //@line 495 "lgc.c"
      var $37=((($36)+(1))|0); //@line 495 "lgc.c"
      $i=$37; //@line 495 "lgc.c"
      __label__ = 3; break; //@line 495 "lgc.c"
    case 10: 
      ;
      return; //@line 497 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13propagatemarkP12global_State($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $h;
      var $cl;
      var $th;
      var $p;
      $2=$g;
      var $3=$2; //@line 278 "lgc.c"
      var $4=(($3+36)|0); //@line 278 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 278 "lgc.c"
      $o=$5; //@line 278 "lgc.c"
      var $6=$o; //@line 280 "lgc.c"
      var $7=$6; //@line 280 "lgc.c"
      var $8=(($7+5)|0); //@line 280 "lgc.c"
      var $9=HEAPU8[($8)]; //@line 280 "lgc.c"
      var $10=(($9)&255); //@line 280 "lgc.c"
      var $11=$10 | 4; //@line 280 "lgc.c"
      var $12=(($11) & 255); //@line 280 "lgc.c"
      HEAP8[($8)]=$12; //@line 280 "lgc.c"
      var $13=$o; //@line 281 "lgc.c"
      var $14=$13; //@line 281 "lgc.c"
      var $15=(($14+4)|0); //@line 281 "lgc.c"
      var $16=HEAPU8[($15)]; //@line 281 "lgc.c"
      var $17=(($16)&255); //@line 281 "lgc.c"
      if ((($17)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($17)|0) == 6) {
        __label__ = 6; break;
      }
      else if ((($17)|0) == 8) {
        __label__ = 10; break;
      }
      else if ((($17)|0) == 9) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 3: 
      var $19=$o; //@line 283 "lgc.c"
      var $20=$19; //@line 283 "lgc.c"
      $h=$20; //@line 283 "lgc.c"
      var $21=$h; //@line 284 "lgc.c"
      var $22=(($21+24)|0); //@line 284 "lgc.c"
      var $23=HEAP32[(($22)>>2)]; //@line 284 "lgc.c"
      var $24=$2; //@line 284 "lgc.c"
      var $25=(($24+36)|0); //@line 284 "lgc.c"
      HEAP32[(($25)>>2)]=$23; //@line 284 "lgc.c"
      var $26=$2; //@line 285 "lgc.c"
      var $27=$h; //@line 285 "lgc.c"
      var $28=__Z13traversetableP12global_StateP5Table($26, $27); //@line 285 "lgc.c"
      var $29=(($28)|0)!=0; //@line 285 "lgc.c"
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 285 "lgc.c"
    case 4: 
      var $31=$o; //@line 286 "lgc.c"
      var $32=$31; //@line 286 "lgc.c"
      var $33=(($32+5)|0); //@line 286 "lgc.c"
      var $34=HEAPU8[($33)]; //@line 286 "lgc.c"
      var $35=(($34)&255); //@line 286 "lgc.c"
      var $36=$35 & 251; //@line 286 "lgc.c"
      var $37=(($36) & 255); //@line 286 "lgc.c"
      HEAP8[($33)]=$37; //@line 286 "lgc.c"
      __label__ = 5; break; //@line 286 "lgc.c"
    case 5: 
      var $39=$h; //@line 287 "lgc.c"
      var $40=(($39+28)|0); //@line 287 "lgc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 287 "lgc.c"
      var $42=((($41)*(12))|0); //@line 287 "lgc.c"
      var $43=((($42)+(32))|0); //@line 287 "lgc.c"
      var $44=$h; //@line 287 "lgc.c"
      var $45=(($44+7)|0); //@line 287 "lgc.c"
      var $46=HEAPU8[($45)]; //@line 287 "lgc.c"
      var $47=(($46)&255); //@line 287 "lgc.c"
      var $48=1 << $47; //@line 287 "lgc.c"
      var $49=((($48)*(28))|0); //@line 287 "lgc.c"
      var $50=((($43)+($49))|0); //@line 287 "lgc.c"
      $1=$50; //@line 287 "lgc.c"
      __label__ = 13; break; //@line 287 "lgc.c"
    case 6: 
      var $52=$o; //@line 291 "lgc.c"
      var $53=$52; //@line 291 "lgc.c"
      $cl=$53; //@line 291 "lgc.c"
      var $54=$cl; //@line 292 "lgc.c"
      var $55=$54; //@line 292 "lgc.c"
      var $56=(($55+8)|0); //@line 292 "lgc.c"
      var $57=HEAP32[(($56)>>2)]; //@line 292 "lgc.c"
      var $58=$2; //@line 292 "lgc.c"
      var $59=(($58+36)|0); //@line 292 "lgc.c"
      HEAP32[(($59)>>2)]=$57; //@line 292 "lgc.c"
      var $60=$2; //@line 293 "lgc.c"
      var $61=$cl; //@line 293 "lgc.c"
      __Z15traverseclosureP12global_StateP7Closure($60, $61); //@line 293 "lgc.c"
      var $62=$cl; //@line 294 "lgc.c"
      var $63=$62; //@line 294 "lgc.c"
      var $64=(($63+6)|0); //@line 294 "lgc.c"
      var $65=HEAP8[($64)]; //@line 294 "lgc.c"
      var $66=(($65 << 24) >> 24)!=0; //@line 294 "lgc.c"
      if ($66) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 294 "lgc.c"
    case 7: 
      var $68=$cl; //@line 294 "lgc.c"
      var $69=$68; //@line 294 "lgc.c"
      var $70=(($69+7)|0); //@line 294 "lgc.c"
      var $71=HEAPU8[($70)]; //@line 294 "lgc.c"
      var $72=(($71)&255); //@line 294 "lgc.c"
      var $73=((($72)-(1))|0); //@line 294 "lgc.c"
      var $74=((($73)*(12))|0); //@line 294 "lgc.c"
      var $75=((($74)+(32))|0); //@line 294 "lgc.c"
      var $86 = $75;__label__ = 9; break; //@line 294 "lgc.c"
    case 8: 
      var $77=$cl; //@line 294 "lgc.c"
      var $78=$77; //@line 294 "lgc.c"
      var $79=(($78+7)|0); //@line 294 "lgc.c"
      var $80=HEAPU8[($79)]; //@line 294 "lgc.c"
      var $81=(($80)&255); //@line 294 "lgc.c"
      var $82=((($81)-(1))|0); //@line 294 "lgc.c"
      var $83=((($82<<2))|0); //@line 294 "lgc.c"
      var $84=((($83)+(24))|0); //@line 294 "lgc.c"
      var $86 = $84;__label__ = 9; break; //@line 294 "lgc.c"
    case 9: 
      var $86; //@line 294 "lgc.c"
      $1=$86; //@line 294 "lgc.c"
      __label__ = 13; break; //@line 294 "lgc.c"
    case 10: 
      var $88=$o; //@line 298 "lgc.c"
      var $89=$88; //@line 298 "lgc.c"
      $th=$89; //@line 298 "lgc.c"
      var $90=$th; //@line 299 "lgc.c"
      var $91=(($90+100)|0); //@line 299 "lgc.c"
      var $92=HEAP32[(($91)>>2)]; //@line 299 "lgc.c"
      var $93=$2; //@line 299 "lgc.c"
      var $94=(($93+36)|0); //@line 299 "lgc.c"
      HEAP32[(($94)>>2)]=$92; //@line 299 "lgc.c"
      var $95=$2; //@line 300 "lgc.c"
      var $96=(($95+40)|0); //@line 300 "lgc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 300 "lgc.c"
      var $98=$th; //@line 300 "lgc.c"
      var $99=(($98+100)|0); //@line 300 "lgc.c"
      HEAP32[(($99)>>2)]=$97; //@line 300 "lgc.c"
      var $100=$o; //@line 301 "lgc.c"
      var $101=$2; //@line 301 "lgc.c"
      var $102=(($101+40)|0); //@line 301 "lgc.c"
      HEAP32[(($102)>>2)]=$100; //@line 301 "lgc.c"
      var $103=$o; //@line 302 "lgc.c"
      var $104=$103; //@line 302 "lgc.c"
      var $105=(($104+5)|0); //@line 302 "lgc.c"
      var $106=HEAPU8[($105)]; //@line 302 "lgc.c"
      var $107=(($106)&255); //@line 302 "lgc.c"
      var $108=$107 & 251; //@line 302 "lgc.c"
      var $109=(($108) & 255); //@line 302 "lgc.c"
      HEAP8[($105)]=$109; //@line 302 "lgc.c"
      var $110=$2; //@line 303 "lgc.c"
      var $111=$th; //@line 303 "lgc.c"
      __Z13traversestackP12global_StateP9lua_State($110, $111); //@line 303 "lgc.c"
      var $112=$th; //@line 304 "lgc.c"
      var $113=(($112+44)|0); //@line 304 "lgc.c"
      var $114=HEAP32[(($113)>>2)]; //@line 304 "lgc.c"
      var $115=((($114)*(12))|0); //@line 304 "lgc.c"
      var $116=((($115)+(112))|0); //@line 304 "lgc.c"
      var $117=$th; //@line 304 "lgc.c"
      var $118=(($117+48)|0); //@line 304 "lgc.c"
      var $119=HEAP32[(($118)>>2)]; //@line 304 "lgc.c"
      var $120=((($119)*(24))|0); //@line 304 "lgc.c"
      var $121=((($116)+($120))|0); //@line 304 "lgc.c"
      $1=$121; //@line 304 "lgc.c"
      __label__ = 13; break; //@line 304 "lgc.c"
    case 11: 
      var $123=$o; //@line 308 "lgc.c"
      var $124=$123; //@line 308 "lgc.c"
      $p=$124; //@line 308 "lgc.c"
      var $125=$p; //@line 309 "lgc.c"
      var $126=(($125+68)|0); //@line 309 "lgc.c"
      var $127=HEAP32[(($126)>>2)]; //@line 309 "lgc.c"
      var $128=$2; //@line 309 "lgc.c"
      var $129=(($128+36)|0); //@line 309 "lgc.c"
      HEAP32[(($129)>>2)]=$127; //@line 309 "lgc.c"
      var $130=$2; //@line 310 "lgc.c"
      var $131=$p; //@line 310 "lgc.c"
      __Z13traverseprotoP12global_StateP5Proto($130, $131); //@line 310 "lgc.c"
      var $132=$p; //@line 311 "lgc.c"
      var $133=(($132+44)|0); //@line 311 "lgc.c"
      var $134=HEAP32[(($133)>>2)]; //@line 311 "lgc.c"
      var $135=((($134<<2))|0); //@line 311 "lgc.c"
      var $136=((($135)+(76))|0); //@line 311 "lgc.c"
      var $137=$p; //@line 311 "lgc.c"
      var $138=(($137+52)|0); //@line 311 "lgc.c"
      var $139=HEAP32[(($138)>>2)]; //@line 311 "lgc.c"
      var $140=((($139<<2))|0); //@line 311 "lgc.c"
      var $141=((($136)+($140))|0); //@line 311 "lgc.c"
      var $142=$p; //@line 311 "lgc.c"
      var $143=(($142+40)|0); //@line 311 "lgc.c"
      var $144=HEAP32[(($143)>>2)]; //@line 311 "lgc.c"
      var $145=((($144)*(12))|0); //@line 311 "lgc.c"
      var $146=((($141)+($145))|0); //@line 311 "lgc.c"
      var $147=$p; //@line 311 "lgc.c"
      var $148=(($147+48)|0); //@line 311 "lgc.c"
      var $149=HEAP32[(($148)>>2)]; //@line 311 "lgc.c"
      var $150=((($149<<2))|0); //@line 311 "lgc.c"
      var $151=((($146)+($150))|0); //@line 311 "lgc.c"
      var $152=$p; //@line 311 "lgc.c"
      var $153=(($152+56)|0); //@line 311 "lgc.c"
      var $154=HEAP32[(($153)>>2)]; //@line 311 "lgc.c"
      var $155=((($154)*(12))|0); //@line 311 "lgc.c"
      var $156=((($151)+($155))|0); //@line 311 "lgc.c"
      var $157=$p; //@line 311 "lgc.c"
      var $158=(($157+36)|0); //@line 311 "lgc.c"
      var $159=HEAP32[(($158)>>2)]; //@line 311 "lgc.c"
      var $160=((($159<<2))|0); //@line 311 "lgc.c"
      var $161=((($156)+($160))|0); //@line 311 "lgc.c"
      $1=$161; //@line 311 "lgc.c"
      __label__ = 13; break; //@line 311 "lgc.c"
    case 12: 
      $1=0; //@line 318 "lgc.c"
      __label__ = 13; break; //@line 318 "lgc.c"
    case 13: 
      var $164=$1; //@line 320 "lgc.c"
      ;
      return $164; //@line 320 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13propagatemarkP12global_State["X"]=1;

function __Z6atomicP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $udsize;
      $1=$L;
      var $2=$1; //@line 526 "lgc.c"
      var $3=(($2+16)|0); //@line 526 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 526 "lgc.c"
      $g=$4; //@line 526 "lgc.c"
      var $5=$g; //@line 529 "lgc.c"
      __Z12remarkupvalsP12global_State($5); //@line 529 "lgc.c"
      var $6=$g; //@line 531 "lgc.c"
      var $7=__Z12propagateallP12global_State($6); //@line 531 "lgc.c"
      var $8=$g; //@line 533 "lgc.c"
      var $9=(($8+44)|0); //@line 533 "lgc.c"
      var $10=HEAP32[(($9)>>2)]; //@line 533 "lgc.c"
      var $11=$g; //@line 533 "lgc.c"
      var $12=(($11+36)|0); //@line 533 "lgc.c"
      HEAP32[(($12)>>2)]=$10; //@line 533 "lgc.c"
      var $13=$g; //@line 534 "lgc.c"
      var $14=(($13+44)|0); //@line 534 "lgc.c"
      HEAP32[(($14)>>2)]=0; //@line 534 "lgc.c"
      var $15=$1; //@line 536 "lgc.c"
      var $16=$15; //@line 536 "lgc.c"
      var $17=$16; //@line 536 "lgc.c"
      var $18=(($17+5)|0); //@line 536 "lgc.c"
      var $19=HEAPU8[($18)]; //@line 536 "lgc.c"
      var $20=(($19)&255); //@line 536 "lgc.c"
      var $21=$20 & 3; //@line 536 "lgc.c"
      var $22=(($21)|0)!=0; //@line 536 "lgc.c"
      if ($22) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 536 "lgc.c"
    case 3: 
      var $24=$g; //@line 536 "lgc.c"
      var $25=$1; //@line 536 "lgc.c"
      var $26=$25; //@line 536 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($24, $26); //@line 536 "lgc.c"
      __label__ = 4; break; //@line 536 "lgc.c"
    case 4: 
      var $28=$g; //@line 537 "lgc.c"
      __Z6markmtP12global_State($28); //@line 537 "lgc.c"
      var $29=$g; //@line 538 "lgc.c"
      var $30=__Z12propagateallP12global_State($29); //@line 538 "lgc.c"
      var $31=$g; //@line 540 "lgc.c"
      var $32=(($31+40)|0); //@line 540 "lgc.c"
      var $33=HEAP32[(($32)>>2)]; //@line 540 "lgc.c"
      var $34=$g; //@line 540 "lgc.c"
      var $35=(($34+36)|0); //@line 540 "lgc.c"
      HEAP32[(($35)>>2)]=$33; //@line 540 "lgc.c"
      var $36=$g; //@line 541 "lgc.c"
      var $37=(($36+40)|0); //@line 541 "lgc.c"
      HEAP32[(($37)>>2)]=0; //@line 541 "lgc.c"
      var $38=$g; //@line 542 "lgc.c"
      var $39=__Z12propagateallP12global_State($38); //@line 542 "lgc.c"
      var $40=$1; //@line 543 "lgc.c"
      var $41=__Z18luaC_separateudataP9lua_Statei($40, 0); //@line 543 "lgc.c"
      $udsize=$41; //@line 543 "lgc.c"
      var $42=$g; //@line 544 "lgc.c"
      __Z7marktmuP12global_State($42); //@line 544 "lgc.c"
      var $43=$g; //@line 545 "lgc.c"
      var $44=__Z12propagateallP12global_State($43); //@line 545 "lgc.c"
      var $45=$udsize; //@line 545 "lgc.c"
      var $46=((($45)+($44))|0); //@line 545 "lgc.c"
      $udsize=$46; //@line 545 "lgc.c"
      var $47=$g; //@line 546 "lgc.c"
      var $48=(($47+44)|0); //@line 546 "lgc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 546 "lgc.c"
      __Z10cleartableP8GCObject($49); //@line 546 "lgc.c"
      var $50=$g; //@line 548 "lgc.c"
      var $51=(($50+20)|0); //@line 548 "lgc.c"
      var $52=HEAPU8[($51)]; //@line 548 "lgc.c"
      var $53=(($52)&255); //@line 548 "lgc.c"
      var $54=$53 ^ 3; //@line 548 "lgc.c"
      var $55=(($54) & 255); //@line 548 "lgc.c"
      var $56=$g; //@line 548 "lgc.c"
      var $57=(($56+20)|0); //@line 548 "lgc.c"
      HEAP8[($57)]=$55; //@line 548 "lgc.c"
      var $58=$g; //@line 549 "lgc.c"
      var $59=(($58+24)|0); //@line 549 "lgc.c"
      HEAP32[(($59)>>2)]=0; //@line 549 "lgc.c"
      var $60=$g; //@line 550 "lgc.c"
      var $61=(($60+28)|0); //@line 550 "lgc.c"
      var $62=$g; //@line 550 "lgc.c"
      var $63=(($62+32)|0); //@line 550 "lgc.c"
      HEAP32[(($63)>>2)]=$61; //@line 550 "lgc.c"
      var $64=$g; //@line 551 "lgc.c"
      var $65=(($64+21)|0); //@line 551 "lgc.c"
      HEAP8[($65)]=2; //@line 551 "lgc.c"
      var $66=$g; //@line 552 "lgc.c"
      var $67=(($66+68)|0); //@line 552 "lgc.c"
      var $68=HEAP32[(($67)>>2)]; //@line 552 "lgc.c"
      var $69=$udsize; //@line 552 "lgc.c"
      var $70=((($68)-($69))|0); //@line 552 "lgc.c"
      var $71=$g; //@line 552 "lgc.c"
      var $72=(($71+72)|0); //@line 552 "lgc.c"
      HEAP32[(($72)>>2)]=$70; //@line 552 "lgc.c"
      ;
      return; //@line 553 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6atomicP9lua_State["X"]=1;

function __Z9isclearedPK10lua_TValuei($o, $iskey) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$o;
      $3=$iskey;
      var $4=$2; //@line 338 "lgc.c"
      var $5=(($4+8)|0); //@line 338 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 338 "lgc.c"
      var $7=(($6)|0) >= 4; //@line 338 "lgc.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 338 "lgc.c"
    case 3: 
      $1=0; //@line 338 "lgc.c"
      __label__ = 13; break; //@line 338 "lgc.c"
    case 4: 
      var $10=$2; //@line 339 "lgc.c"
      var $11=(($10+8)|0); //@line 339 "lgc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 339 "lgc.c"
      var $13=(($12)|0)==4; //@line 339 "lgc.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 339 "lgc.c"
    case 5: 
      var $15=$2; //@line 340 "lgc.c"
      var $16=(($15)|0); //@line 340 "lgc.c"
      var $17=$16; //@line 340 "lgc.c"
      var $18=HEAP32[(($17)>>2)]; //@line 340 "lgc.c"
      var $19=$18; //@line 340 "lgc.c"
      var $20=$19; //@line 340 "lgc.c"
      var $21=(($20+5)|0); //@line 340 "lgc.c"
      var $22=HEAPU8[($21)]; //@line 340 "lgc.c"
      var $23=(($22)&255); //@line 340 "lgc.c"
      var $24=$23 & 252; //@line 340 "lgc.c"
      var $25=(($24) & 255); //@line 340 "lgc.c"
      HEAP8[($21)]=$25; //@line 340 "lgc.c"
      $1=0; //@line 341 "lgc.c"
      __label__ = 13; break; //@line 341 "lgc.c"
    case 6: 
      var $27=$2; //@line 343 "lgc.c"
      var $28=(($27)|0); //@line 343 "lgc.c"
      var $29=$28; //@line 343 "lgc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 343 "lgc.c"
      var $31=$30; //@line 343 "lgc.c"
      var $32=(($31+5)|0); //@line 343 "lgc.c"
      var $33=HEAPU8[($32)]; //@line 343 "lgc.c"
      var $34=(($33)&255); //@line 343 "lgc.c"
      var $35=$34 & 3; //@line 343 "lgc.c"
      var $36=(($35)|0)!=0; //@line 343 "lgc.c"
      if ($36) { var $62 = 1;__label__ = 12; break; } else { __label__ = 7; break; } //@line 343 "lgc.c"
    case 7: 
      var $38=$2; //@line 343 "lgc.c"
      var $39=(($38+8)|0); //@line 343 "lgc.c"
      var $40=HEAP32[(($39)>>2)]; //@line 343 "lgc.c"
      var $41=(($40)|0)==7; //@line 343 "lgc.c"
      if ($41) { __label__ = 8; break; } else { var $60 = 0;__label__ = 11; break; } //@line 343 "lgc.c"
    case 8: 
      var $43=$3; //@line 343 "lgc.c"
      var $44=(($43)|0)!=0; //@line 343 "lgc.c"
      if ($44) { var $58 = 0;__label__ = 10; break; } else { __label__ = 9; break; } //@line 343 "lgc.c"
    case 9: 
      var $46=$2; //@line 343 "lgc.c"
      var $47=(($46)|0); //@line 343 "lgc.c"
      var $48=$47; //@line 343 "lgc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 343 "lgc.c"
      var $50=$49; //@line 343 "lgc.c"
      var $51=$50; //@line 343 "lgc.c"
      var $52=(($51+5)|0); //@line 343 "lgc.c"
      var $53=HEAPU8[($52)]; //@line 343 "lgc.c"
      var $54=(($53)&255); //@line 343 "lgc.c"
      var $55=$54 & 8; //@line 343 "lgc.c"
      var $56=(($55)|0)!=0; //@line 343 "lgc.c"
      var $58 = $56;__label__ = 10; break; //@line 343 "lgc.c"
    case 10: 
      var $58;
      var $60 = $58;__label__ = 11; break; //@line 343 "lgc.c"
    case 11: 
      var $60;
      var $62 = $60;__label__ = 12; break; //@line 343 "lgc.c"
    case 12: 
      var $62;
      var $63=(($62)&1); //@line 343 "lgc.c"
      $1=$63; //@line 343 "lgc.c"
      __label__ = 13; break; //@line 343 "lgc.c"
    case 13: 
      var $65=$1; //@line 345 "lgc.c"
      ;
      return $65; //@line 345 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9isclearedPK10lua_TValuei["X"]=1;

function __Z11removeentryP4Node($n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$n;
      var $2=$1; //@line 64 "lgc.c"
      var $3=(($2+12)|0); //@line 64 "lgc.c"
      var $4=$3; //@line 64 "lgc.c"
      var $5=(($4+8)|0); //@line 64 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 64 "lgc.c"
      var $7=(($6)|0) >= 4; //@line 64 "lgc.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 64 "lgc.c"
    case 3: 
      var $9=$1; //@line 65 "lgc.c"
      var $10=(($9+12)|0); //@line 65 "lgc.c"
      var $11=$10; //@line 65 "lgc.c"
      var $12=(($11+8)|0); //@line 65 "lgc.c"
      HEAP32[(($12)>>2)]=11; //@line 65 "lgc.c"
      __label__ = 4; break; //@line 65 "lgc.c"
    case 4: 
      ;
      return; //@line 66 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10checkSizesP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $g;
      var $newsize;
      $1=$L;
      var $2=$1; //@line 432 "lgc.c"
      var $3=(($2+16)|0); //@line 432 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 432 "lgc.c"
      $g=$4; //@line 432 "lgc.c"
      var $5=$g; //@line 434 "lgc.c"
      var $6=(($5)|0); //@line 434 "lgc.c"
      var $7=(($6+4)|0); //@line 434 "lgc.c"
      var $8=HEAPU32[(($7)>>2)]; //@line 434 "lgc.c"
      var $9=$g; //@line 434 "lgc.c"
      var $10=(($9)|0); //@line 434 "lgc.c"
      var $11=(($10+8)|0); //@line 434 "lgc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 434 "lgc.c"
      var $13=((((($12)|0))/(4))&-1); //@line 434 "lgc.c"
      var $14=(($8)>>>0) < (($13)>>>0); //@line 434 "lgc.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 434 "lgc.c"
    case 3: 
      var $16=$g; //@line 434 "lgc.c"
      var $17=(($16)|0); //@line 434 "lgc.c"
      var $18=(($17+8)|0); //@line 434 "lgc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 434 "lgc.c"
      var $20=(($19)|0) > 64; //@line 434 "lgc.c"
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 434 "lgc.c"
    case 4: 
      var $22=$1; //@line 436 "lgc.c"
      var $23=$g; //@line 436 "lgc.c"
      var $24=(($23)|0); //@line 436 "lgc.c"
      var $25=(($24+8)|0); //@line 436 "lgc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 436 "lgc.c"
      var $27=((((($26)|0))/(2))&-1); //@line 436 "lgc.c"
      __Z11luaS_resizeP9lua_Statei($22, $27); //@line 436 "lgc.c"
      __label__ = 5; break; //@line 436 "lgc.c"
    case 5: 
      var $29=$g; //@line 438 "lgc.c"
      var $30=(($29+52)|0); //@line 438 "lgc.c"
      var $31=(($30+8)|0); //@line 438 "lgc.c"
      var $32=HEAPU32[(($31)>>2)]; //@line 438 "lgc.c"
      var $33=(($32)>>>0) > 64; //@line 438 "lgc.c"
      if ($33) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 438 "lgc.c"
    case 6: 
      var $35=$g; //@line 439 "lgc.c"
      var $36=(($35+52)|0); //@line 439 "lgc.c"
      var $37=(($36+8)|0); //@line 439 "lgc.c"
      var $38=HEAPU32[(($37)>>2)]; //@line 439 "lgc.c"
      var $39=Math.floor(((($38)>>>0))/(2)); //@line 439 "lgc.c"
      $newsize=$39; //@line 439 "lgc.c"
      var $40=$newsize; //@line 440 "lgc.c"
      var $41=((($40)+(1))|0); //@line 440 "lgc.c"
      var $42=(($41)>>>0) <= 4294967293; //@line 440 "lgc.c"
      if ($42) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 440 "lgc.c"
    case 7: 
      var $44=$1; //@line 440 "lgc.c"
      var $45=$g; //@line 440 "lgc.c"
      var $46=(($45+52)|0); //@line 440 "lgc.c"
      var $47=(($46)|0); //@line 440 "lgc.c"
      var $48=HEAP32[(($47)>>2)]; //@line 440 "lgc.c"
      var $49=$g; //@line 440 "lgc.c"
      var $50=(($49+52)|0); //@line 440 "lgc.c"
      var $51=(($50+8)|0); //@line 440 "lgc.c"
      var $52=HEAP32[(($51)>>2)]; //@line 440 "lgc.c"
      var $53=(($52)|0); //@line 440 "lgc.c"
      var $54=$newsize; //@line 440 "lgc.c"
      var $55=(($54)|0); //@line 440 "lgc.c"
      var $56=__Z13luaM_realloc_P9lua_StatePvjj($44, $48, $53, $55); //@line 440 "lgc.c"
      var $61 = $56;__label__ = 9; break; //@line 440 "lgc.c"
    case 8: 
      var $58=$1; //@line 440 "lgc.c"
      var $59=__Z11luaM_toobigP9lua_State($58); //@line 440 "lgc.c"
      var $61 = $59;__label__ = 9; break; //@line 440 "lgc.c"
    case 9: 
      var $61; //@line 440 "lgc.c"
      var $62=$g; //@line 440 "lgc.c"
      var $63=(($62+52)|0); //@line 440 "lgc.c"
      var $64=(($63)|0); //@line 440 "lgc.c"
      HEAP32[(($64)>>2)]=$61; //@line 440 "lgc.c"
      var $65=$newsize; //@line 440 "lgc.c"
      var $66=$g; //@line 440 "lgc.c"
      var $67=(($66+52)|0); //@line 440 "lgc.c"
      var $68=(($67+8)|0); //@line 440 "lgc.c"
      HEAP32[(($68)>>2)]=$65; //@line 440 "lgc.c"
      __label__ = 10; break; //@line 441 "lgc.c"
    case 10: 
      ;
      return; //@line 442 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10checkSizesP9lua_State["X"]=1;

function __Z12remarkupvalsP12global_State($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $uv;
      $1=$g;
      var $2=$1; //@line 517 "lgc.c"
      var $3=(($2+108)|0); //@line 517 "lgc.c"
      var $4=(($3+12)|0); //@line 517 "lgc.c"
      var $5=$4; //@line 517 "lgc.c"
      var $6=(($5+4)|0); //@line 517 "lgc.c"
      var $7=HEAP32[(($6)>>2)]; //@line 517 "lgc.c"
      $uv=$7; //@line 517 "lgc.c"
      __label__ = 3; break; //@line 517 "lgc.c"
    case 3: 
      var $9=$uv; //@line 517 "lgc.c"
      var $10=$1; //@line 517 "lgc.c"
      var $11=(($10+108)|0); //@line 517 "lgc.c"
      var $12=(($9)|0)!=(($11)|0); //@line 517 "lgc.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 517 "lgc.c"
    case 4: 
      var $14=$uv; //@line 519 "lgc.c"
      var $15=$14; //@line 519 "lgc.c"
      var $16=$15; //@line 519 "lgc.c"
      var $17=(($16+5)|0); //@line 519 "lgc.c"
      var $18=HEAPU8[($17)]; //@line 519 "lgc.c"
      var $19=(($18)&255); //@line 519 "lgc.c"
      var $20=$19 & 4; //@line 519 "lgc.c"
      var $21=(($20)|0)!=0; //@line 519 "lgc.c"
      if ($21) { __label__ = 10; break; } else { __label__ = 5; break; } //@line 519 "lgc.c"
    case 5: 
      var $23=$uv; //@line 519 "lgc.c"
      var $24=$23; //@line 519 "lgc.c"
      var $25=$24; //@line 519 "lgc.c"
      var $26=(($25+5)|0); //@line 519 "lgc.c"
      var $27=HEAPU8[($26)]; //@line 519 "lgc.c"
      var $28=(($27)&255); //@line 519 "lgc.c"
      var $29=$28 & 3; //@line 519 "lgc.c"
      var $30=(($29)|0)!=0; //@line 519 "lgc.c"
      if ($30) { __label__ = 10; break; } else { __label__ = 6; break; } //@line 519 "lgc.c"
    case 6: 
      var $32=$uv; //@line 520 "lgc.c"
      var $33=(($32+8)|0); //@line 520 "lgc.c"
      var $34=HEAP32[(($33)>>2)]; //@line 520 "lgc.c"
      var $35=(($34+8)|0); //@line 520 "lgc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 520 "lgc.c"
      var $37=(($36)|0) >= 4; //@line 520 "lgc.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 520 "lgc.c"
    case 7: 
      var $39=$uv; //@line 520 "lgc.c"
      var $40=(($39+8)|0); //@line 520 "lgc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 520 "lgc.c"
      var $42=(($41)|0); //@line 520 "lgc.c"
      var $43=$42; //@line 520 "lgc.c"
      var $44=HEAP32[(($43)>>2)]; //@line 520 "lgc.c"
      var $45=$44; //@line 520 "lgc.c"
      var $46=(($45+5)|0); //@line 520 "lgc.c"
      var $47=HEAPU8[($46)]; //@line 520 "lgc.c"
      var $48=(($47)&255); //@line 520 "lgc.c"
      var $49=$48 & 3; //@line 520 "lgc.c"
      var $50=(($49)|0)!=0; //@line 520 "lgc.c"
      if ($50) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 520 "lgc.c"
    case 8: 
      var $52=$1; //@line 520 "lgc.c"
      var $53=$uv; //@line 520 "lgc.c"
      var $54=(($53+8)|0); //@line 520 "lgc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 520 "lgc.c"
      var $56=(($55)|0); //@line 520 "lgc.c"
      var $57=$56; //@line 520 "lgc.c"
      var $58=HEAP32[(($57)>>2)]; //@line 520 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($52, $58); //@line 520 "lgc.c"
      __label__ = 9; break; //@line 520 "lgc.c"
    case 9: 
      __label__ = 10; break; //@line 520 "lgc.c"
    case 10: 
      __label__ = 11; break; //@line 521 "lgc.c"
    case 11: 
      var $62=$uv; //@line 517 "lgc.c"
      var $63=(($62+12)|0); //@line 517 "lgc.c"
      var $64=$63; //@line 517 "lgc.c"
      var $65=(($64+4)|0); //@line 517 "lgc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 517 "lgc.c"
      $uv=$66; //@line 517 "lgc.c"
      __label__ = 3; break; //@line 517 "lgc.c"
    case 12: 
      ;
      return; //@line 522 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12remarkupvalsP12global_State["X"]=1;

function __Z12propagateallP12global_State($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $m;
      $1=$g;
      $m=0; //@line 324 "lgc.c"
      __label__ = 3; break; //@line 325 "lgc.c"
    case 3: 
      var $3=$1; //@line 325 "lgc.c"
      var $4=(($3+36)|0); //@line 325 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 325 "lgc.c"
      var $6=(($5)|0)!=0; //@line 325 "lgc.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 325 "lgc.c"
    case 4: 
      var $8=$1; //@line 325 "lgc.c"
      var $9=__Z13propagatemarkP12global_State($8); //@line 325 "lgc.c"
      var $10=$m; //@line 325 "lgc.c"
      var $11=((($10)+($9))|0); //@line 325 "lgc.c"
      $m=$11; //@line 325 "lgc.c"
      __label__ = 3; break; //@line 325 "lgc.c"
    case 5: 
      var $13=$m; //@line 326 "lgc.c"
      ;
      return $13; //@line 326 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7marktmuP12global_State($g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $u;
      $1=$g;
      var $2=$1; //@line 116 "lgc.c"
      var $3=(($2+48)|0); //@line 116 "lgc.c"
      var $4=HEAP32[(($3)>>2)]; //@line 116 "lgc.c"
      $u=$4; //@line 116 "lgc.c"
      var $5=$u; //@line 117 "lgc.c"
      var $6=(($5)|0)!=0; //@line 117 "lgc.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 117 "lgc.c"
    case 3: 
      __label__ = 4; break; //@line 118 "lgc.c"
    case 4: 
      var $9=$u; //@line 119 "lgc.c"
      var $10=$9; //@line 119 "lgc.c"
      var $11=(($10)|0); //@line 119 "lgc.c"
      var $12=HEAP32[(($11)>>2)]; //@line 119 "lgc.c"
      $u=$12; //@line 119 "lgc.c"
      var $13=$u; //@line 120 "lgc.c"
      var $14=$13; //@line 120 "lgc.c"
      var $15=(($14+5)|0); //@line 120 "lgc.c"
      var $16=HEAPU8[($15)]; //@line 120 "lgc.c"
      var $17=(($16)&255); //@line 120 "lgc.c"
      var $18=$17 & 248; //@line 120 "lgc.c"
      var $19=$1; //@line 120 "lgc.c"
      var $20=(($19+20)|0); //@line 120 "lgc.c"
      var $21=HEAPU8[($20)]; //@line 120 "lgc.c"
      var $22=(($21)&255); //@line 120 "lgc.c"
      var $23=$22 & 3; //@line 120 "lgc.c"
      var $24=(($23) & 255); //@line 120 "lgc.c"
      var $25=(($24)&255); //@line 120 "lgc.c"
      var $26=$18 | $25; //@line 120 "lgc.c"
      var $27=(($26) & 255); //@line 120 "lgc.c"
      var $28=$u; //@line 120 "lgc.c"
      var $29=$28; //@line 120 "lgc.c"
      var $30=(($29+5)|0); //@line 120 "lgc.c"
      HEAP8[($30)]=$27; //@line 120 "lgc.c"
      var $31=$1; //@line 121 "lgc.c"
      var $32=$u; //@line 121 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($31, $32); //@line 121 "lgc.c"
      __label__ = 5; break; //@line 122 "lgc.c"
    case 5: 
      var $34=$u; //@line 122 "lgc.c"
      var $35=$1; //@line 122 "lgc.c"
      var $36=(($35+48)|0); //@line 122 "lgc.c"
      var $37=HEAP32[(($36)>>2)]; //@line 122 "lgc.c"
      var $38=(($34)|0)!=(($37)|0); //@line 122 "lgc.c"
      if ($38) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 122 "lgc.c"
    case 6: 
      __label__ = 7; break; //@line 123 "lgc.c"
    case 7: 
      ;
      return; //@line 124 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10cleartableP8GCObject($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $h;
      var $i;
      var $o;
      var $n;
      $1=$l;
      __label__ = 3; break; //@line 352 "lgc.c"
    case 3: 
      var $3=$1; //@line 352 "lgc.c"
      var $4=(($3)|0)!=0; //@line 352 "lgc.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 19; break; } //@line 352 "lgc.c"
    case 4: 
      var $6=$1; //@line 353 "lgc.c"
      var $7=$6; //@line 353 "lgc.c"
      $h=$7; //@line 353 "lgc.c"
      var $8=$h; //@line 354 "lgc.c"
      var $9=(($8+28)|0); //@line 354 "lgc.c"
      var $10=HEAP32[(($9)>>2)]; //@line 354 "lgc.c"
      $i=$10; //@line 354 "lgc.c"
      var $11=$h; //@line 357 "lgc.c"
      var $12=(($11+5)|0); //@line 357 "lgc.c"
      var $13=HEAPU8[($12)]; //@line 357 "lgc.c"
      var $14=(($13)&255); //@line 357 "lgc.c"
      var $15=$14 & 16; //@line 357 "lgc.c"
      var $16=(($15)|0)!=0; //@line 357 "lgc.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 11; break; } //@line 357 "lgc.c"
    case 5: 
      __label__ = 6; break; //@line 358 "lgc.c"
    case 6: 
      var $19=$i; //@line 358 "lgc.c"
      var $20=((($19)-(1))|0); //@line 358 "lgc.c"
      $i=$20; //@line 358 "lgc.c"
      var $21=(($19)|0)!=0; //@line 358 "lgc.c"
      if ($21) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 358 "lgc.c"
    case 7: 
      var $23=$i; //@line 359 "lgc.c"
      var $24=$h; //@line 359 "lgc.c"
      var $25=(($24+12)|0); //@line 359 "lgc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 359 "lgc.c"
      var $27=(($26+($23)*(12))|0); //@line 359 "lgc.c"
      $o=$27; //@line 359 "lgc.c"
      var $28=$o; //@line 360 "lgc.c"
      var $29=__Z9isclearedPK10lua_TValuei($28, 0); //@line 360 "lgc.c"
      var $30=(($29)|0)!=0; //@line 360 "lgc.c"
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 360 "lgc.c"
    case 8: 
      var $32=$o; //@line 361 "lgc.c"
      var $33=(($32+8)|0); //@line 361 "lgc.c"
      HEAP32[(($33)>>2)]=0; //@line 361 "lgc.c"
      __label__ = 9; break; //@line 361 "lgc.c"
    case 9: 
      __label__ = 6; break; //@line 362 "lgc.c"
    case 10: 
      __label__ = 11; break; //@line 363 "lgc.c"
    case 11: 
      var $37=$h; //@line 364 "lgc.c"
      var $38=(($37+7)|0); //@line 364 "lgc.c"
      var $39=HEAPU8[($38)]; //@line 364 "lgc.c"
      var $40=(($39)&255); //@line 364 "lgc.c"
      var $41=1 << $40; //@line 364 "lgc.c"
      $i=$41; //@line 364 "lgc.c"
      __label__ = 12; break; //@line 365 "lgc.c"
    case 12: 
      var $43=$i; //@line 365 "lgc.c"
      var $44=((($43)-(1))|0); //@line 365 "lgc.c"
      $i=$44; //@line 365 "lgc.c"
      var $45=(($43)|0)!=0; //@line 365 "lgc.c"
      if ($45) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 365 "lgc.c"
    case 13: 
      var $47=$i; //@line 366 "lgc.c"
      var $48=$h; //@line 366 "lgc.c"
      var $49=(($48+16)|0); //@line 366 "lgc.c"
      var $50=HEAP32[(($49)>>2)]; //@line 366 "lgc.c"
      var $51=(($50+($47)*(28))|0); //@line 366 "lgc.c"
      $n=$51; //@line 366 "lgc.c"
      var $52=$n; //@line 367 "lgc.c"
      var $53=(($52)|0); //@line 367 "lgc.c"
      var $54=(($53+8)|0); //@line 367 "lgc.c"
      var $55=HEAP32[(($54)>>2)]; //@line 367 "lgc.c"
      var $56=(($55)|0)==0; //@line 367 "lgc.c"
      if ($56) { __label__ = 17; break; } else { __label__ = 14; break; } //@line 367 "lgc.c"
    case 14: 
      var $58=$n; //@line 368 "lgc.c"
      var $59=(($58+12)|0); //@line 368 "lgc.c"
      var $60=$59; //@line 368 "lgc.c"
      var $61=__Z9isclearedPK10lua_TValuei($60, 1); //@line 368 "lgc.c"
      var $62=(($61)|0)!=0; //@line 368 "lgc.c"
      if ($62) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 368 "lgc.c"
    case 15: 
      var $64=$n; //@line 368 "lgc.c"
      var $65=(($64)|0); //@line 368 "lgc.c"
      var $66=__Z9isclearedPK10lua_TValuei($65, 0); //@line 368 "lgc.c"
      var $67=(($66)|0)!=0; //@line 368 "lgc.c"
      if ($67) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 368 "lgc.c"
    case 16: 
      var $69=$n; //@line 369 "lgc.c"
      var $70=(($69)|0); //@line 369 "lgc.c"
      var $71=(($70+8)|0); //@line 369 "lgc.c"
      HEAP32[(($71)>>2)]=0; //@line 369 "lgc.c"
      var $72=$n; //@line 370 "lgc.c"
      __Z11removeentryP4Node($72); //@line 370 "lgc.c"
      __label__ = 17; break; //@line 371 "lgc.c"
    case 17: 
      __label__ = 12; break; //@line 372 "lgc.c"
    case 18: 
      var $75=$h; //@line 373 "lgc.c"
      var $76=(($75+24)|0); //@line 373 "lgc.c"
      var $77=HEAP32[(($76)>>2)]; //@line 373 "lgc.c"
      $1=$77; //@line 373 "lgc.c"
      __label__ = 3; break; //@line 374 "lgc.c"
    case 19: 
      ;
      return; //@line 375 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10cleartableP8GCObject["X"]=1;

function __Z13traversetableP12global_StateP5Table($g, $h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $weakkey;
      var $weakvalue;
      var $mode;
      var $n;
      $2=$g;
      $3=$h;
      $weakkey=0; //@line 160 "lgc.c"
      $weakvalue=0; //@line 161 "lgc.c"
      var $4=$3; //@line 163 "lgc.c"
      var $5=(($4+8)|0); //@line 163 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 163 "lgc.c"
      var $7=(($6)|0)!=0; //@line 163 "lgc.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 163 "lgc.c"
    case 3: 
      var $9=$3; //@line 164 "lgc.c"
      var $10=(($9+8)|0); //@line 164 "lgc.c"
      var $11=HEAP32[(($10)>>2)]; //@line 164 "lgc.c"
      var $12=$11; //@line 164 "lgc.c"
      var $13=$12; //@line 164 "lgc.c"
      var $14=(($13+5)|0); //@line 164 "lgc.c"
      var $15=HEAPU8[($14)]; //@line 164 "lgc.c"
      var $16=(($15)&255); //@line 164 "lgc.c"
      var $17=$16 & 3; //@line 164 "lgc.c"
      var $18=(($17)|0)!=0; //@line 164 "lgc.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 164 "lgc.c"
    case 4: 
      var $20=$2; //@line 164 "lgc.c"
      var $21=$3; //@line 164 "lgc.c"
      var $22=(($21+8)|0); //@line 164 "lgc.c"
      var $23=HEAP32[(($22)>>2)]; //@line 164 "lgc.c"
      var $24=$23; //@line 164 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($20, $24); //@line 164 "lgc.c"
      __label__ = 5; break; //@line 164 "lgc.c"
    case 5: 
      __label__ = 6; break; //@line 164 "lgc.c"
    case 6: 
      var $27=$3; //@line 165 "lgc.c"
      var $28=(($27+8)|0); //@line 165 "lgc.c"
      var $29=HEAP32[(($28)>>2)]; //@line 165 "lgc.c"
      var $30=(($29)|0)==0; //@line 165 "lgc.c"
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 165 "lgc.c"
    case 7: 
      var $54 = 0;__label__ = 12; break; //@line 165 "lgc.c"
    case 8: 
      var $33=$3; //@line 165 "lgc.c"
      var $34=(($33+8)|0); //@line 165 "lgc.c"
      var $35=HEAP32[(($34)>>2)]; //@line 165 "lgc.c"
      var $36=(($35+6)|0); //@line 165 "lgc.c"
      var $37=HEAPU8[($36)]; //@line 165 "lgc.c"
      var $38=(($37)&255); //@line 165 "lgc.c"
      var $39=$38 & 8; //@line 165 "lgc.c"
      var $40=(($39)|0)!=0; //@line 165 "lgc.c"
      if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 165 "lgc.c"
    case 9: 
      var $52 = 0;__label__ = 11; break; //@line 165 "lgc.c"
    case 10: 
      var $43=$3; //@line 165 "lgc.c"
      var $44=(($43+8)|0); //@line 165 "lgc.c"
      var $45=HEAP32[(($44)>>2)]; //@line 165 "lgc.c"
      var $46=$2; //@line 165 "lgc.c"
      var $47=(($46+168)|0); //@line 165 "lgc.c"
      var $48=(($47+12)|0); //@line 165 "lgc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 165 "lgc.c"
      var $50=__Z10luaT_gettmP5Table3TMSP7TString($45, 3, $49); //@line 165 "lgc.c"
      var $52 = $50;__label__ = 11; break; //@line 165 "lgc.c"
    case 11: 
      var $52; //@line 165 "lgc.c"
      var $54 = $52;__label__ = 12; break; //@line 165 "lgc.c"
    case 12: 
      var $54; //@line 165 "lgc.c"
      $mode=$54; //@line 165 "lgc.c"
      var $55=$mode; //@line 166 "lgc.c"
      var $56=(($55)|0)!=0; //@line 166 "lgc.c"
      if ($56) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 166 "lgc.c"
    case 13: 
      var $58=$mode; //@line 166 "lgc.c"
      var $59=(($58+8)|0); //@line 166 "lgc.c"
      var $60=HEAP32[(($59)>>2)]; //@line 166 "lgc.c"
      var $61=(($60)|0)==4; //@line 166 "lgc.c"
      if ($61) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 166 "lgc.c"
    case 14: 
      var $63=$mode; //@line 167 "lgc.c"
      var $64=(($63)|0); //@line 167 "lgc.c"
      var $65=$64; //@line 167 "lgc.c"
      var $66=HEAP32[(($65)>>2)]; //@line 167 "lgc.c"
      var $67=$66; //@line 167 "lgc.c"
      var $68=(($67+16)|0); //@line 167 "lgc.c"
      var $69=$68; //@line 167 "lgc.c"
      var $70=_strchr($69, 107); //@line 167 "lgc.c"
      var $71=(($70)|0)!=0; //@line 167 "lgc.c"
      var $72=(($71)&1); //@line 167 "lgc.c"
      $weakkey=$72; //@line 167 "lgc.c"
      var $73=$mode; //@line 168 "lgc.c"
      var $74=(($73)|0); //@line 168 "lgc.c"
      var $75=$74; //@line 168 "lgc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 168 "lgc.c"
      var $77=$76; //@line 168 "lgc.c"
      var $78=(($77+16)|0); //@line 168 "lgc.c"
      var $79=$78; //@line 168 "lgc.c"
      var $80=_strchr($79, 118); //@line 168 "lgc.c"
      var $81=(($80)|0)!=0; //@line 168 "lgc.c"
      var $82=(($81)&1); //@line 168 "lgc.c"
      $weakvalue=$82; //@line 168 "lgc.c"
      var $83=$weakkey; //@line 169 "lgc.c"
      var $84=(($83)|0)!=0; //@line 169 "lgc.c"
      if ($84) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 169 "lgc.c"
    case 15: 
      var $86=$weakvalue; //@line 169 "lgc.c"
      var $87=(($86)|0)!=0; //@line 169 "lgc.c"
      if ($87) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 169 "lgc.c"
    case 16: 
      var $89=$3; //@line 170 "lgc.c"
      var $90=(($89+5)|0); //@line 170 "lgc.c"
      var $91=HEAPU8[($90)]; //@line 170 "lgc.c"
      var $92=(($91)&255); //@line 170 "lgc.c"
      var $93=$92 & -25; //@line 170 "lgc.c"
      var $94=(($93) & 255); //@line 170 "lgc.c"
      HEAP8[($90)]=$94; //@line 170 "lgc.c"
      var $95=$weakkey; //@line 171 "lgc.c"
      var $96=$95 << 3; //@line 171 "lgc.c"
      var $97=$weakvalue; //@line 171 "lgc.c"
      var $98=$97 << 4; //@line 171 "lgc.c"
      var $99=$96 | $98; //@line 171 "lgc.c"
      var $100=(($99) & 255); //@line 171 "lgc.c"
      var $101=(($100)&255); //@line 171 "lgc.c"
      var $102=$3; //@line 171 "lgc.c"
      var $103=(($102+5)|0); //@line 171 "lgc.c"
      var $104=HEAPU8[($103)]; //@line 171 "lgc.c"
      var $105=(($104)&255); //@line 171 "lgc.c"
      var $106=$105 | $101; //@line 171 "lgc.c"
      var $107=(($106) & 255); //@line 171 "lgc.c"
      HEAP8[($103)]=$107; //@line 171 "lgc.c"
      var $108=$2; //@line 173 "lgc.c"
      var $109=(($108+44)|0); //@line 173 "lgc.c"
      var $110=HEAP32[(($109)>>2)]; //@line 173 "lgc.c"
      var $111=$3; //@line 173 "lgc.c"
      var $112=(($111+24)|0); //@line 173 "lgc.c"
      HEAP32[(($112)>>2)]=$110; //@line 173 "lgc.c"
      var $113=$3; //@line 174 "lgc.c"
      var $114=$113; //@line 174 "lgc.c"
      var $115=$2; //@line 174 "lgc.c"
      var $116=(($115+44)|0); //@line 174 "lgc.c"
      HEAP32[(($116)>>2)]=$114; //@line 174 "lgc.c"
      __label__ = 17; break; //@line 175 "lgc.c"
    case 17: 
      __label__ = 18; break; //@line 176 "lgc.c"
    case 18: 
      var $119=$weakkey; //@line 177 "lgc.c"
      var $120=(($119)|0)!=0; //@line 177 "lgc.c"
      if ($120) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 177 "lgc.c"
    case 19: 
      var $122=$weakvalue; //@line 177 "lgc.c"
      var $123=(($122)|0)!=0; //@line 177 "lgc.c"
      if ($123) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 177 "lgc.c"
    case 20: 
      $1=1; //@line 177 "lgc.c"
      __label__ = 48; break; //@line 177 "lgc.c"
    case 21: 
      var $126=$weakvalue; //@line 178 "lgc.c"
      var $127=(($126)|0)!=0; //@line 178 "lgc.c"
      if ($127) { __label__ = 29; break; } else { __label__ = 22; break; } //@line 178 "lgc.c"
    case 22: 
      var $129=$3; //@line 179 "lgc.c"
      var $130=(($129+28)|0); //@line 179 "lgc.c"
      var $131=HEAP32[(($130)>>2)]; //@line 179 "lgc.c"
      $i=$131; //@line 179 "lgc.c"
      __label__ = 23; break; //@line 180 "lgc.c"
    case 23: 
      var $133=$i; //@line 180 "lgc.c"
      var $134=((($133)-(1))|0); //@line 180 "lgc.c"
      $i=$134; //@line 180 "lgc.c"
      var $135=(($133)|0)!=0; //@line 180 "lgc.c"
      if ($135) { __label__ = 24; break; } else { __label__ = 28; break; } //@line 180 "lgc.c"
    case 24: 
      var $137=$i; //@line 181 "lgc.c"
      var $138=$3; //@line 181 "lgc.c"
      var $139=(($138+12)|0); //@line 181 "lgc.c"
      var $140=HEAP32[(($139)>>2)]; //@line 181 "lgc.c"
      var $141=(($140+($137)*(12))|0); //@line 181 "lgc.c"
      var $142=(($141+8)|0); //@line 181 "lgc.c"
      var $143=HEAP32[(($142)>>2)]; //@line 181 "lgc.c"
      var $144=(($143)|0) >= 4; //@line 181 "lgc.c"
      if ($144) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 181 "lgc.c"
    case 25: 
      var $146=$i; //@line 181 "lgc.c"
      var $147=$3; //@line 181 "lgc.c"
      var $148=(($147+12)|0); //@line 181 "lgc.c"
      var $149=HEAP32[(($148)>>2)]; //@line 181 "lgc.c"
      var $150=(($149+($146)*(12))|0); //@line 181 "lgc.c"
      var $151=(($150)|0); //@line 181 "lgc.c"
      var $152=$151; //@line 181 "lgc.c"
      var $153=HEAP32[(($152)>>2)]; //@line 181 "lgc.c"
      var $154=$153; //@line 181 "lgc.c"
      var $155=(($154+5)|0); //@line 181 "lgc.c"
      var $156=HEAPU8[($155)]; //@line 181 "lgc.c"
      var $157=(($156)&255); //@line 181 "lgc.c"
      var $158=$157 & 3; //@line 181 "lgc.c"
      var $159=(($158)|0)!=0; //@line 181 "lgc.c"
      if ($159) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 181 "lgc.c"
    case 26: 
      var $161=$2; //@line 181 "lgc.c"
      var $162=$i; //@line 181 "lgc.c"
      var $163=$3; //@line 181 "lgc.c"
      var $164=(($163+12)|0); //@line 181 "lgc.c"
      var $165=HEAP32[(($164)>>2)]; //@line 181 "lgc.c"
      var $166=(($165+($162)*(12))|0); //@line 181 "lgc.c"
      var $167=(($166)|0); //@line 181 "lgc.c"
      var $168=$167; //@line 181 "lgc.c"
      var $169=HEAP32[(($168)>>2)]; //@line 181 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($161, $169); //@line 181 "lgc.c"
      __label__ = 27; break; //@line 181 "lgc.c"
    case 27: 
      __label__ = 23; break; //@line 181 "lgc.c"
    case 28: 
      __label__ = 29; break; //@line 182 "lgc.c"
    case 29: 
      var $173=$3; //@line 183 "lgc.c"
      var $174=(($173+7)|0); //@line 183 "lgc.c"
      var $175=HEAPU8[($174)]; //@line 183 "lgc.c"
      var $176=(($175)&255); //@line 183 "lgc.c"
      var $177=1 << $176; //@line 183 "lgc.c"
      $i=$177; //@line 183 "lgc.c"
      __label__ = 30; break; //@line 184 "lgc.c"
    case 30: 
      var $179=$i; //@line 184 "lgc.c"
      var $180=((($179)-(1))|0); //@line 184 "lgc.c"
      $i=$180; //@line 184 "lgc.c"
      var $181=(($179)|0)!=0; //@line 184 "lgc.c"
      if ($181) { __label__ = 31; break; } else { __label__ = 45; break; } //@line 184 "lgc.c"
    case 31: 
      var $183=$i; //@line 185 "lgc.c"
      var $184=$3; //@line 185 "lgc.c"
      var $185=(($184+16)|0); //@line 185 "lgc.c"
      var $186=HEAP32[(($185)>>2)]; //@line 185 "lgc.c"
      var $187=(($186+($183)*(28))|0); //@line 185 "lgc.c"
      $n=$187; //@line 185 "lgc.c"
      var $188=$n; //@line 187 "lgc.c"
      var $189=(($188)|0); //@line 187 "lgc.c"
      var $190=(($189+8)|0); //@line 187 "lgc.c"
      var $191=HEAP32[(($190)>>2)]; //@line 187 "lgc.c"
      var $192=(($191)|0)==0; //@line 187 "lgc.c"
      if ($192) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 187 "lgc.c"
    case 32: 
      var $194=$n; //@line 188 "lgc.c"
      __Z11removeentryP4Node($194); //@line 188 "lgc.c"
      __label__ = 44; break; //@line 188 "lgc.c"
    case 33: 
      var $196=$weakkey; //@line 191 "lgc.c"
      var $197=(($196)|0)!=0; //@line 191 "lgc.c"
      if ($197) { __label__ = 38; break; } else { __label__ = 34; break; } //@line 191 "lgc.c"
    case 34: 
      var $199=$n; //@line 191 "lgc.c"
      var $200=(($199+12)|0); //@line 191 "lgc.c"
      var $201=$200; //@line 191 "lgc.c"
      var $202=(($201+8)|0); //@line 191 "lgc.c"
      var $203=HEAP32[(($202)>>2)]; //@line 191 "lgc.c"
      var $204=(($203)|0) >= 4; //@line 191 "lgc.c"
      if ($204) { __label__ = 35; break; } else { __label__ = 37; break; } //@line 191 "lgc.c"
    case 35: 
      var $206=$n; //@line 191 "lgc.c"
      var $207=(($206+12)|0); //@line 191 "lgc.c"
      var $208=$207; //@line 191 "lgc.c"
      var $209=(($208)|0); //@line 191 "lgc.c"
      var $210=$209; //@line 191 "lgc.c"
      var $211=HEAP32[(($210)>>2)]; //@line 191 "lgc.c"
      var $212=$211; //@line 191 "lgc.c"
      var $213=(($212+5)|0); //@line 191 "lgc.c"
      var $214=HEAPU8[($213)]; //@line 191 "lgc.c"
      var $215=(($214)&255); //@line 191 "lgc.c"
      var $216=$215 & 3; //@line 191 "lgc.c"
      var $217=(($216)|0)!=0; //@line 191 "lgc.c"
      if ($217) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 191 "lgc.c"
    case 36: 
      var $219=$2; //@line 191 "lgc.c"
      var $220=$n; //@line 191 "lgc.c"
      var $221=(($220+12)|0); //@line 191 "lgc.c"
      var $222=$221; //@line 191 "lgc.c"
      var $223=(($222)|0); //@line 191 "lgc.c"
      var $224=$223; //@line 191 "lgc.c"
      var $225=HEAP32[(($224)>>2)]; //@line 191 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($219, $225); //@line 191 "lgc.c"
      __label__ = 37; break; //@line 191 "lgc.c"
    case 37: 
      __label__ = 38; break; //@line 191 "lgc.c"
    case 38: 
      var $228=$weakvalue; //@line 192 "lgc.c"
      var $229=(($228)|0)!=0; //@line 192 "lgc.c"
      if ($229) { __label__ = 43; break; } else { __label__ = 39; break; } //@line 192 "lgc.c"
    case 39: 
      var $231=$n; //@line 192 "lgc.c"
      var $232=(($231)|0); //@line 192 "lgc.c"
      var $233=(($232+8)|0); //@line 192 "lgc.c"
      var $234=HEAP32[(($233)>>2)]; //@line 192 "lgc.c"
      var $235=(($234)|0) >= 4; //@line 192 "lgc.c"
      if ($235) { __label__ = 40; break; } else { __label__ = 42; break; } //@line 192 "lgc.c"
    case 40: 
      var $237=$n; //@line 192 "lgc.c"
      var $238=(($237)|0); //@line 192 "lgc.c"
      var $239=(($238)|0); //@line 192 "lgc.c"
      var $240=$239; //@line 192 "lgc.c"
      var $241=HEAP32[(($240)>>2)]; //@line 192 "lgc.c"
      var $242=$241; //@line 192 "lgc.c"
      var $243=(($242+5)|0); //@line 192 "lgc.c"
      var $244=HEAPU8[($243)]; //@line 192 "lgc.c"
      var $245=(($244)&255); //@line 192 "lgc.c"
      var $246=$245 & 3; //@line 192 "lgc.c"
      var $247=(($246)|0)!=0; //@line 192 "lgc.c"
      if ($247) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 192 "lgc.c"
    case 41: 
      var $249=$2; //@line 192 "lgc.c"
      var $250=$n; //@line 192 "lgc.c"
      var $251=(($250)|0); //@line 192 "lgc.c"
      var $252=(($251)|0); //@line 192 "lgc.c"
      var $253=$252; //@line 192 "lgc.c"
      var $254=HEAP32[(($253)>>2)]; //@line 192 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($249, $254); //@line 192 "lgc.c"
      __label__ = 42; break; //@line 192 "lgc.c"
    case 42: 
      __label__ = 43; break; //@line 192 "lgc.c"
    case 43: 
      __label__ = 44; break; //@line 193 "lgc.c"
    case 44: 
      __label__ = 30; break; //@line 194 "lgc.c"
    case 45: 
      var $259=$weakkey; //@line 195 "lgc.c"
      var $260=(($259)|0)!=0; //@line 195 "lgc.c"
      if ($260) { var $265 = 1;__label__ = 47; break; } else { __label__ = 46; break; } //@line 195 "lgc.c"
    case 46: 
      var $262=$weakvalue; //@line 195 "lgc.c"
      var $263=(($262)|0)!=0; //@line 195 "lgc.c"
      var $265 = $263;__label__ = 47; break; //@line 195 "lgc.c"
    case 47: 
      var $265;
      var $266=(($265)&1); //@line 195 "lgc.c"
      $1=$266; //@line 195 "lgc.c"
      __label__ = 48; break; //@line 195 "lgc.c"
    case 48: 
      var $268=$1; //@line 196 "lgc.c"
      ;
      return $268; //@line 196 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13traversetableP12global_StateP5Table["X"]=1;

function __Z15traverseclosureP12global_StateP7Closure($g, $cl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $i1;
      $1=$g;
      $2=$cl;
      var $3=$2; //@line 225 "lgc.c"
      var $4=$3; //@line 225 "lgc.c"
      var $5=(($4+12)|0); //@line 225 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 225 "lgc.c"
      var $7=$6; //@line 225 "lgc.c"
      var $8=$7; //@line 225 "lgc.c"
      var $9=(($8+5)|0); //@line 225 "lgc.c"
      var $10=HEAPU8[($9)]; //@line 225 "lgc.c"
      var $11=(($10)&255); //@line 225 "lgc.c"
      var $12=$11 & 3; //@line 225 "lgc.c"
      var $13=(($12)|0)!=0; //@line 225 "lgc.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 225 "lgc.c"
    case 3: 
      var $15=$1; //@line 225 "lgc.c"
      var $16=$2; //@line 225 "lgc.c"
      var $17=$16; //@line 225 "lgc.c"
      var $18=(($17+12)|0); //@line 225 "lgc.c"
      var $19=HEAP32[(($18)>>2)]; //@line 225 "lgc.c"
      var $20=$19; //@line 225 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($15, $20); //@line 225 "lgc.c"
      __label__ = 4; break; //@line 225 "lgc.c"
    case 4: 
      var $22=$2; //@line 226 "lgc.c"
      var $23=$22; //@line 226 "lgc.c"
      var $24=(($23+6)|0); //@line 226 "lgc.c"
      var $25=HEAP8[($24)]; //@line 226 "lgc.c"
      var $26=(($25 << 24) >> 24)!=0; //@line 226 "lgc.c"
      if ($26) { __label__ = 5; break; } else { __label__ = 13; break; } //@line 226 "lgc.c"
    case 5: 
      $i=0; //@line 228 "lgc.c"
      __label__ = 6; break; //@line 228 "lgc.c"
    case 6: 
      var $29=$i; //@line 228 "lgc.c"
      var $30=$2; //@line 228 "lgc.c"
      var $31=$30; //@line 228 "lgc.c"
      var $32=(($31+7)|0); //@line 228 "lgc.c"
      var $33=HEAPU8[($32)]; //@line 228 "lgc.c"
      var $34=(($33)&255); //@line 228 "lgc.c"
      var $35=(($29)|0) < (($34)|0); //@line 228 "lgc.c"
      if ($35) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 228 "lgc.c"
    case 7: 
      var $37=$i; //@line 229 "lgc.c"
      var $38=$2; //@line 229 "lgc.c"
      var $39=$38; //@line 229 "lgc.c"
      var $40=(($39+20)|0); //@line 229 "lgc.c"
      var $41=(($40+($37)*(12))|0); //@line 229 "lgc.c"
      var $42=(($41+8)|0); //@line 229 "lgc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 229 "lgc.c"
      var $44=(($43)|0) >= 4; //@line 229 "lgc.c"
      if ($44) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 229 "lgc.c"
    case 8: 
      var $46=$i; //@line 229 "lgc.c"
      var $47=$2; //@line 229 "lgc.c"
      var $48=$47; //@line 229 "lgc.c"
      var $49=(($48+20)|0); //@line 229 "lgc.c"
      var $50=(($49+($46)*(12))|0); //@line 229 "lgc.c"
      var $51=(($50)|0); //@line 229 "lgc.c"
      var $52=$51; //@line 229 "lgc.c"
      var $53=HEAP32[(($52)>>2)]; //@line 229 "lgc.c"
      var $54=$53; //@line 229 "lgc.c"
      var $55=(($54+5)|0); //@line 229 "lgc.c"
      var $56=HEAPU8[($55)]; //@line 229 "lgc.c"
      var $57=(($56)&255); //@line 229 "lgc.c"
      var $58=$57 & 3; //@line 229 "lgc.c"
      var $59=(($58)|0)!=0; //@line 229 "lgc.c"
      if ($59) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 229 "lgc.c"
    case 9: 
      var $61=$1; //@line 229 "lgc.c"
      var $62=$i; //@line 229 "lgc.c"
      var $63=$2; //@line 229 "lgc.c"
      var $64=$63; //@line 229 "lgc.c"
      var $65=(($64+20)|0); //@line 229 "lgc.c"
      var $66=(($65+($62)*(12))|0); //@line 229 "lgc.c"
      var $67=(($66)|0); //@line 229 "lgc.c"
      var $68=$67; //@line 229 "lgc.c"
      var $69=HEAP32[(($68)>>2)]; //@line 229 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($61, $69); //@line 229 "lgc.c"
      __label__ = 10; break; //@line 229 "lgc.c"
    case 10: 
      __label__ = 11; break; //@line 229 "lgc.c"
    case 11: 
      var $72=$i; //@line 228 "lgc.c"
      var $73=((($72)+(1))|0); //@line 228 "lgc.c"
      $i=$73; //@line 228 "lgc.c"
      __label__ = 6; break; //@line 228 "lgc.c"
    case 12: 
      __label__ = 22; break; //@line 230 "lgc.c"
    case 13: 
      var $76=$2; //@line 234 "lgc.c"
      var $77=$76; //@line 234 "lgc.c"
      var $78=(($77+16)|0); //@line 234 "lgc.c"
      var $79=HEAP32[(($78)>>2)]; //@line 234 "lgc.c"
      var $80=$79; //@line 234 "lgc.c"
      var $81=$80; //@line 234 "lgc.c"
      var $82=(($81+5)|0); //@line 234 "lgc.c"
      var $83=HEAPU8[($82)]; //@line 234 "lgc.c"
      var $84=(($83)&255); //@line 234 "lgc.c"
      var $85=$84 & 3; //@line 234 "lgc.c"
      var $86=(($85)|0)!=0; //@line 234 "lgc.c"
      if ($86) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 234 "lgc.c"
    case 14: 
      var $88=$1; //@line 234 "lgc.c"
      var $89=$2; //@line 234 "lgc.c"
      var $90=$89; //@line 234 "lgc.c"
      var $91=(($90+16)|0); //@line 234 "lgc.c"
      var $92=HEAP32[(($91)>>2)]; //@line 234 "lgc.c"
      var $93=$92; //@line 234 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($88, $93); //@line 234 "lgc.c"
      __label__ = 15; break; //@line 234 "lgc.c"
    case 15: 
      $i1=0; //@line 235 "lgc.c"
      __label__ = 16; break; //@line 235 "lgc.c"
    case 16: 
      var $96=$i1; //@line 235 "lgc.c"
      var $97=$2; //@line 235 "lgc.c"
      var $98=$97; //@line 235 "lgc.c"
      var $99=(($98+7)|0); //@line 235 "lgc.c"
      var $100=HEAPU8[($99)]; //@line 235 "lgc.c"
      var $101=(($100)&255); //@line 235 "lgc.c"
      var $102=(($96)|0) < (($101)|0); //@line 235 "lgc.c"
      if ($102) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 235 "lgc.c"
    case 17: 
      var $104=$i1; //@line 236 "lgc.c"
      var $105=$2; //@line 236 "lgc.c"
      var $106=$105; //@line 236 "lgc.c"
      var $107=(($106+20)|0); //@line 236 "lgc.c"
      var $108=(($107+($104<<2))|0); //@line 236 "lgc.c"
      var $109=HEAP32[(($108)>>2)]; //@line 236 "lgc.c"
      var $110=$109; //@line 236 "lgc.c"
      var $111=$110; //@line 236 "lgc.c"
      var $112=(($111+5)|0); //@line 236 "lgc.c"
      var $113=HEAPU8[($112)]; //@line 236 "lgc.c"
      var $114=(($113)&255); //@line 236 "lgc.c"
      var $115=$114 & 3; //@line 236 "lgc.c"
      var $116=(($115)|0)!=0; //@line 236 "lgc.c"
      if ($116) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 236 "lgc.c"
    case 18: 
      var $118=$1; //@line 236 "lgc.c"
      var $119=$i1; //@line 236 "lgc.c"
      var $120=$2; //@line 236 "lgc.c"
      var $121=$120; //@line 236 "lgc.c"
      var $122=(($121+20)|0); //@line 236 "lgc.c"
      var $123=(($122+($119<<2))|0); //@line 236 "lgc.c"
      var $124=HEAP32[(($123)>>2)]; //@line 236 "lgc.c"
      var $125=$124; //@line 236 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($118, $125); //@line 236 "lgc.c"
      __label__ = 19; break; //@line 236 "lgc.c"
    case 19: 
      __label__ = 20; break; //@line 236 "lgc.c"
    case 20: 
      var $128=$i1; //@line 235 "lgc.c"
      var $129=((($128)+(1))|0); //@line 235 "lgc.c"
      $i1=$129; //@line 235 "lgc.c"
      __label__ = 16; break; //@line 235 "lgc.c"
    case 21: 
      __label__ = 22; break; //@line 237 "lgc.c"
    case 22: 
      ;
      return; //@line 238 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15traverseclosureP12global_StateP7Closure["X"]=1;

function __Z13traversestackP12global_StateP9lua_State($g, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $lim;
      var $ci;
      $1=$g;
      $2=$l;
      var $3=$2; //@line 259 "lgc.c"
      var $4=(($3+72)|0); //@line 259 "lgc.c"
      var $5=(($4+8)|0); //@line 259 "lgc.c"
      var $6=HEAP32[(($5)>>2)]; //@line 259 "lgc.c"
      var $7=(($6)|0) >= 4; //@line 259 "lgc.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 259 "lgc.c"
    case 3: 
      var $9=$2; //@line 259 "lgc.c"
      var $10=(($9+72)|0); //@line 259 "lgc.c"
      var $11=(($10)|0); //@line 259 "lgc.c"
      var $12=$11; //@line 259 "lgc.c"
      var $13=HEAP32[(($12)>>2)]; //@line 259 "lgc.c"
      var $14=$13; //@line 259 "lgc.c"
      var $15=(($14+5)|0); //@line 259 "lgc.c"
      var $16=HEAPU8[($15)]; //@line 259 "lgc.c"
      var $17=(($16)&255); //@line 259 "lgc.c"
      var $18=$17 & 3; //@line 259 "lgc.c"
      var $19=(($18)|0)!=0; //@line 259 "lgc.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 259 "lgc.c"
    case 4: 
      var $21=$1; //@line 259 "lgc.c"
      var $22=$2; //@line 259 "lgc.c"
      var $23=(($22+72)|0); //@line 259 "lgc.c"
      var $24=(($23)|0); //@line 259 "lgc.c"
      var $25=$24; //@line 259 "lgc.c"
      var $26=HEAP32[(($25)>>2)]; //@line 259 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($21, $26); //@line 259 "lgc.c"
      __label__ = 5; break; //@line 259 "lgc.c"
    case 5: 
      var $28=$2; //@line 260 "lgc.c"
      var $29=(($28+8)|0); //@line 260 "lgc.c"
      var $30=HEAP32[(($29)>>2)]; //@line 260 "lgc.c"
      $lim=$30; //@line 260 "lgc.c"
      var $31=$2; //@line 261 "lgc.c"
      var $32=(($31+40)|0); //@line 261 "lgc.c"
      var $33=HEAP32[(($32)>>2)]; //@line 261 "lgc.c"
      $ci=$33; //@line 261 "lgc.c"
      __label__ = 6; break; //@line 261 "lgc.c"
    case 6: 
      var $35=$ci; //@line 261 "lgc.c"
      var $36=$2; //@line 261 "lgc.c"
      var $37=(($36+20)|0); //@line 261 "lgc.c"
      var $38=HEAPU32[(($37)>>2)]; //@line 261 "lgc.c"
      var $39=(($35)>>>0) <= (($38)>>>0); //@line 261 "lgc.c"
      if ($39) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 261 "lgc.c"
    case 7: 
      var $41=$lim; //@line 263 "lgc.c"
      var $42=$ci; //@line 263 "lgc.c"
      var $43=(($42+8)|0); //@line 263 "lgc.c"
      var $44=HEAPU32[(($43)>>2)]; //@line 263 "lgc.c"
      var $45=(($41)>>>0) < (($44)>>>0); //@line 263 "lgc.c"
      if ($45) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 263 "lgc.c"
    case 8: 
      var $47=$ci; //@line 263 "lgc.c"
      var $48=(($47+8)|0); //@line 263 "lgc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 263 "lgc.c"
      $lim=$49; //@line 263 "lgc.c"
      __label__ = 9; break; //@line 263 "lgc.c"
    case 9: 
      __label__ = 10; break; //@line 264 "lgc.c"
    case 10: 
      var $52=$ci; //@line 261 "lgc.c"
      var $53=(($52+24)|0); //@line 261 "lgc.c"
      $ci=$53; //@line 261 "lgc.c"
      __label__ = 6; break; //@line 261 "lgc.c"
    case 11: 
      var $55=$2; //@line 265 "lgc.c"
      var $56=(($55+32)|0); //@line 265 "lgc.c"
      var $57=HEAP32[(($56)>>2)]; //@line 265 "lgc.c"
      $o=$57; //@line 265 "lgc.c"
      __label__ = 12; break; //@line 265 "lgc.c"
    case 12: 
      var $59=$o; //@line 265 "lgc.c"
      var $60=$2; //@line 265 "lgc.c"
      var $61=(($60+8)|0); //@line 265 "lgc.c"
      var $62=HEAPU32[(($61)>>2)]; //@line 265 "lgc.c"
      var $63=(($59)>>>0) < (($62)>>>0); //@line 265 "lgc.c"
      if ($63) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 265 "lgc.c"
    case 13: 
      var $65=$o; //@line 266 "lgc.c"
      var $66=(($65+8)|0); //@line 266 "lgc.c"
      var $67=HEAP32[(($66)>>2)]; //@line 266 "lgc.c"
      var $68=(($67)|0) >= 4; //@line 266 "lgc.c"
      if ($68) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 266 "lgc.c"
    case 14: 
      var $70=$o; //@line 266 "lgc.c"
      var $71=(($70)|0); //@line 266 "lgc.c"
      var $72=$71; //@line 266 "lgc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 266 "lgc.c"
      var $74=$73; //@line 266 "lgc.c"
      var $75=(($74+5)|0); //@line 266 "lgc.c"
      var $76=HEAPU8[($75)]; //@line 266 "lgc.c"
      var $77=(($76)&255); //@line 266 "lgc.c"
      var $78=$77 & 3; //@line 266 "lgc.c"
      var $79=(($78)|0)!=0; //@line 266 "lgc.c"
      if ($79) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 266 "lgc.c"
    case 15: 
      var $81=$1; //@line 266 "lgc.c"
      var $82=$o; //@line 266 "lgc.c"
      var $83=(($82)|0); //@line 266 "lgc.c"
      var $84=$83; //@line 266 "lgc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 266 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($81, $85); //@line 266 "lgc.c"
      __label__ = 16; break; //@line 266 "lgc.c"
    case 16: 
      __label__ = 17; break; //@line 266 "lgc.c"
    case 17: 
      var $88=$o; //@line 265 "lgc.c"
      var $89=(($88+12)|0); //@line 265 "lgc.c"
      $o=$89; //@line 265 "lgc.c"
      __label__ = 12; break; //@line 265 "lgc.c"
    case 18: 
      __label__ = 19; break; //@line 267 "lgc.c"
    case 19: 
      var $92=$o; //@line 267 "lgc.c"
      var $93=$lim; //@line 267 "lgc.c"
      var $94=(($92)>>>0) <= (($93)>>>0); //@line 267 "lgc.c"
      if ($94) { __label__ = 20; break; } else { __label__ = 22; break; } //@line 267 "lgc.c"
    case 20: 
      var $96=$o; //@line 268 "lgc.c"
      var $97=(($96+8)|0); //@line 268 "lgc.c"
      HEAP32[(($97)>>2)]=0; //@line 268 "lgc.c"
      __label__ = 21; break; //@line 268 "lgc.c"
    case 21: 
      var $99=$o; //@line 267 "lgc.c"
      var $100=(($99+12)|0); //@line 267 "lgc.c"
      $o=$100; //@line 267 "lgc.c"
      __label__ = 19; break; //@line 267 "lgc.c"
    case 22: 
      var $102=$2; //@line 269 "lgc.c"
      var $103=$lim; //@line 269 "lgc.c"
      __Z15checkstacksizesP9lua_StateP10lua_TValue($102, $103); //@line 269 "lgc.c"
      ;
      return; //@line 270 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13traversestackP12global_StateP9lua_State["X"]=1;

function __Z13traverseprotoP12global_StateP5Proto($g, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$g;
      $2=$f;
      var $3=$2; //@line 205 "lgc.c"
      var $4=(($3+32)|0); //@line 205 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 205 "lgc.c"
      var $6=(($5)|0)!=0; //@line 205 "lgc.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 205 "lgc.c"
    case 3: 
      var $8=$2; //@line 205 "lgc.c"
      var $9=(($8+32)|0); //@line 205 "lgc.c"
      var $10=HEAP32[(($9)>>2)]; //@line 205 "lgc.c"
      var $11=$10; //@line 205 "lgc.c"
      var $12=(($11+5)|0); //@line 205 "lgc.c"
      var $13=HEAPU8[($12)]; //@line 205 "lgc.c"
      var $14=(($13)&255); //@line 205 "lgc.c"
      var $15=$14 & 252; //@line 205 "lgc.c"
      var $16=(($15) & 255); //@line 205 "lgc.c"
      HEAP8[($12)]=$16; //@line 205 "lgc.c"
      __label__ = 4; break; //@line 205 "lgc.c"
    case 4: 
      $i=0; //@line 206 "lgc.c"
      __label__ = 5; break; //@line 206 "lgc.c"
    case 5: 
      var $19=$i; //@line 206 "lgc.c"
      var $20=$2; //@line 206 "lgc.c"
      var $21=(($20+40)|0); //@line 206 "lgc.c"
      var $22=HEAP32[(($21)>>2)]; //@line 206 "lgc.c"
      var $23=(($19)|0) < (($22)|0); //@line 206 "lgc.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 206 "lgc.c"
    case 6: 
      var $25=$i; //@line 207 "lgc.c"
      var $26=$2; //@line 207 "lgc.c"
      var $27=(($26+8)|0); //@line 207 "lgc.c"
      var $28=HEAP32[(($27)>>2)]; //@line 207 "lgc.c"
      var $29=(($28+($25)*(12))|0); //@line 207 "lgc.c"
      var $30=(($29+8)|0); //@line 207 "lgc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 207 "lgc.c"
      var $32=(($31)|0) >= 4; //@line 207 "lgc.c"
      if ($32) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 207 "lgc.c"
    case 7: 
      var $34=$i; //@line 207 "lgc.c"
      var $35=$2; //@line 207 "lgc.c"
      var $36=(($35+8)|0); //@line 207 "lgc.c"
      var $37=HEAP32[(($36)>>2)]; //@line 207 "lgc.c"
      var $38=(($37+($34)*(12))|0); //@line 207 "lgc.c"
      var $39=(($38)|0); //@line 207 "lgc.c"
      var $40=$39; //@line 207 "lgc.c"
      var $41=HEAP32[(($40)>>2)]; //@line 207 "lgc.c"
      var $42=$41; //@line 207 "lgc.c"
      var $43=(($42+5)|0); //@line 207 "lgc.c"
      var $44=HEAPU8[($43)]; //@line 207 "lgc.c"
      var $45=(($44)&255); //@line 207 "lgc.c"
      var $46=$45 & 3; //@line 207 "lgc.c"
      var $47=(($46)|0)!=0; //@line 207 "lgc.c"
      if ($47) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 207 "lgc.c"
    case 8: 
      var $49=$1; //@line 207 "lgc.c"
      var $50=$i; //@line 207 "lgc.c"
      var $51=$2; //@line 207 "lgc.c"
      var $52=(($51+8)|0); //@line 207 "lgc.c"
      var $53=HEAP32[(($52)>>2)]; //@line 207 "lgc.c"
      var $54=(($53+($50)*(12))|0); //@line 207 "lgc.c"
      var $55=(($54)|0); //@line 207 "lgc.c"
      var $56=$55; //@line 207 "lgc.c"
      var $57=HEAP32[(($56)>>2)]; //@line 207 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($49, $57); //@line 207 "lgc.c"
      __label__ = 9; break; //@line 207 "lgc.c"
    case 9: 
      __label__ = 10; break; //@line 207 "lgc.c"
    case 10: 
      var $60=$i; //@line 206 "lgc.c"
      var $61=((($60)+(1))|0); //@line 206 "lgc.c"
      $i=$61; //@line 206 "lgc.c"
      __label__ = 5; break; //@line 206 "lgc.c"
    case 11: 
      $i=0; //@line 208 "lgc.c"
      __label__ = 12; break; //@line 208 "lgc.c"
    case 12: 
      var $64=$i; //@line 208 "lgc.c"
      var $65=$2; //@line 208 "lgc.c"
      var $66=(($65+36)|0); //@line 208 "lgc.c"
      var $67=HEAP32[(($66)>>2)]; //@line 208 "lgc.c"
      var $68=(($64)|0) < (($67)|0); //@line 208 "lgc.c"
      if ($68) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 208 "lgc.c"
    case 13: 
      var $70=$i; //@line 209 "lgc.c"
      var $71=$2; //@line 209 "lgc.c"
      var $72=(($71+28)|0); //@line 209 "lgc.c"
      var $73=HEAP32[(($72)>>2)]; //@line 209 "lgc.c"
      var $74=(($73+($70<<2))|0); //@line 209 "lgc.c"
      var $75=HEAP32[(($74)>>2)]; //@line 209 "lgc.c"
      var $76=(($75)|0)!=0; //@line 209 "lgc.c"
      if ($76) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 209 "lgc.c"
    case 14: 
      var $78=$i; //@line 210 "lgc.c"
      var $79=$2; //@line 210 "lgc.c"
      var $80=(($79+28)|0); //@line 210 "lgc.c"
      var $81=HEAP32[(($80)>>2)]; //@line 210 "lgc.c"
      var $82=(($81+($78<<2))|0); //@line 210 "lgc.c"
      var $83=HEAP32[(($82)>>2)]; //@line 210 "lgc.c"
      var $84=$83; //@line 210 "lgc.c"
      var $85=(($84+5)|0); //@line 210 "lgc.c"
      var $86=HEAPU8[($85)]; //@line 210 "lgc.c"
      var $87=(($86)&255); //@line 210 "lgc.c"
      var $88=$87 & 252; //@line 210 "lgc.c"
      var $89=(($88) & 255); //@line 210 "lgc.c"
      HEAP8[($85)]=$89; //@line 210 "lgc.c"
      __label__ = 15; break; //@line 210 "lgc.c"
    case 15: 
      __label__ = 16; break; //@line 211 "lgc.c"
    case 16: 
      var $92=$i; //@line 208 "lgc.c"
      var $93=((($92)+(1))|0); //@line 208 "lgc.c"
      $i=$93; //@line 208 "lgc.c"
      __label__ = 12; break; //@line 208 "lgc.c"
    case 17: 
      $i=0; //@line 212 "lgc.c"
      __label__ = 18; break; //@line 212 "lgc.c"
    case 18: 
      var $96=$i; //@line 212 "lgc.c"
      var $97=$2; //@line 212 "lgc.c"
      var $98=(($97+52)|0); //@line 212 "lgc.c"
      var $99=HEAP32[(($98)>>2)]; //@line 212 "lgc.c"
      var $100=(($96)|0) < (($99)|0); //@line 212 "lgc.c"
      if ($100) { __label__ = 19; break; } else { __label__ = 25; break; } //@line 212 "lgc.c"
    case 19: 
      var $102=$i; //@line 213 "lgc.c"
      var $103=$2; //@line 213 "lgc.c"
      var $104=(($103+16)|0); //@line 213 "lgc.c"
      var $105=HEAP32[(($104)>>2)]; //@line 213 "lgc.c"
      var $106=(($105+($102<<2))|0); //@line 213 "lgc.c"
      var $107=HEAP32[(($106)>>2)]; //@line 213 "lgc.c"
      var $108=(($107)|0)!=0; //@line 213 "lgc.c"
      if ($108) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 213 "lgc.c"
    case 20: 
      var $110=$i; //@line 214 "lgc.c"
      var $111=$2; //@line 214 "lgc.c"
      var $112=(($111+16)|0); //@line 214 "lgc.c"
      var $113=HEAP32[(($112)>>2)]; //@line 214 "lgc.c"
      var $114=(($113+($110<<2))|0); //@line 214 "lgc.c"
      var $115=HEAP32[(($114)>>2)]; //@line 214 "lgc.c"
      var $116=$115; //@line 214 "lgc.c"
      var $117=$116; //@line 214 "lgc.c"
      var $118=(($117+5)|0); //@line 214 "lgc.c"
      var $119=HEAPU8[($118)]; //@line 214 "lgc.c"
      var $120=(($119)&255); //@line 214 "lgc.c"
      var $121=$120 & 3; //@line 214 "lgc.c"
      var $122=(($121)|0)!=0; //@line 214 "lgc.c"
      if ($122) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 214 "lgc.c"
    case 21: 
      var $124=$1; //@line 214 "lgc.c"
      var $125=$i; //@line 214 "lgc.c"
      var $126=$2; //@line 214 "lgc.c"
      var $127=(($126+16)|0); //@line 214 "lgc.c"
      var $128=HEAP32[(($127)>>2)]; //@line 214 "lgc.c"
      var $129=(($128+($125<<2))|0); //@line 214 "lgc.c"
      var $130=HEAP32[(($129)>>2)]; //@line 214 "lgc.c"
      var $131=$130; //@line 214 "lgc.c"
      __Z16reallymarkobjectP12global_StateP8GCObject($124, $131); //@line 214 "lgc.c"
      __label__ = 22; break; //@line 214 "lgc.c"
    case 22: 
      __label__ = 23; break; //@line 214 "lgc.c"
    case 23: 
      __label__ = 24; break; //@line 215 "lgc.c"
    case 24: 
      var $135=$i; //@line 212 "lgc.c"
      var $136=((($135)+(1))|0); //@line 212 "lgc.c"
      $i=$136; //@line 212 "lgc.c"
      __label__ = 18; break; //@line 212 "lgc.c"
    case 25: 
      $i=0; //@line 216 "lgc.c"
      __label__ = 26; break; //@line 216 "lgc.c"
    case 26: 
      var $139=$i; //@line 216 "lgc.c"
      var $140=$2; //@line 216 "lgc.c"
      var $141=(($140+56)|0); //@line 216 "lgc.c"
      var $142=HEAP32[(($141)>>2)]; //@line 216 "lgc.c"
      var $143=(($139)|0) < (($142)|0); //@line 216 "lgc.c"
      if ($143) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 216 "lgc.c"
    case 27: 
      var $145=$i; //@line 217 "lgc.c"
      var $146=$2; //@line 217 "lgc.c"
      var $147=(($146+24)|0); //@line 217 "lgc.c"
      var $148=HEAP32[(($147)>>2)]; //@line 217 "lgc.c"
      var $149=(($148+($145)*(12))|0); //@line 217 "lgc.c"
      var $150=(($149)|0); //@line 217 "lgc.c"
      var $151=HEAP32[(($150)>>2)]; //@line 217 "lgc.c"
      var $152=(($151)|0)!=0; //@line 217 "lgc.c"
      if ($152) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 217 "lgc.c"
    case 28: 
      var $154=$i; //@line 218 "lgc.c"
      var $155=$2; //@line 218 "lgc.c"
      var $156=(($155+24)|0); //@line 218 "lgc.c"
      var $157=HEAP32[(($156)>>2)]; //@line 218 "lgc.c"
      var $158=(($157+($154)*(12))|0); //@line 218 "lgc.c"
      var $159=(($158)|0); //@line 218 "lgc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 218 "lgc.c"
      var $161=$160; //@line 218 "lgc.c"
      var $162=(($161+5)|0); //@line 218 "lgc.c"
      var $163=HEAPU8[($162)]; //@line 218 "lgc.c"
      var $164=(($163)&255); //@line 218 "lgc.c"
      var $165=$164 & 252; //@line 218 "lgc.c"
      var $166=(($165) & 255); //@line 218 "lgc.c"
      HEAP8[($162)]=$166; //@line 218 "lgc.c"
      __label__ = 29; break; //@line 218 "lgc.c"
    case 29: 
      __label__ = 30; break; //@line 219 "lgc.c"
    case 30: 
      var $169=$i; //@line 216 "lgc.c"
      var $170=((($169)+(1))|0); //@line 216 "lgc.c"
      $i=$170; //@line 216 "lgc.c"
      __label__ = 26; break; //@line 216 "lgc.c"
    case 31: 
      ;
      return; //@line 220 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13traverseprotoP12global_StateP5Proto["X"]=1;

function __Z15checkstacksizesP9lua_StateP10lua_TValue($L, $max) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ci_used;
      var $s_used;
      $1=$L;
      $2=$max;
      var $3=$1; //@line 242 "lgc.c"
      var $4=(($3+20)|0); //@line 242 "lgc.c"
      var $5=HEAP32[(($4)>>2)]; //@line 242 "lgc.c"
      var $6=$1; //@line 242 "lgc.c"
      var $7=(($6+40)|0); //@line 242 "lgc.c"
      var $8=HEAP32[(($7)>>2)]; //@line 242 "lgc.c"
      var $9=$5; //@line 242 "lgc.c"
      var $10=$8; //@line 242 "lgc.c"
      var $11=((($9)-($10))|0); //@line 242 "lgc.c"
      var $12=((((($11)|0))/(24))&-1); //@line 242 "lgc.c"
      $ci_used=$12; //@line 242 "lgc.c"
      var $13=$2; //@line 243 "lgc.c"
      var $14=$1; //@line 243 "lgc.c"
      var $15=(($14+32)|0); //@line 243 "lgc.c"
      var $16=HEAP32[(($15)>>2)]; //@line 243 "lgc.c"
      var $17=$13; //@line 243 "lgc.c"
      var $18=$16; //@line 243 "lgc.c"
      var $19=((($17)-($18))|0); //@line 243 "lgc.c"
      var $20=((((($19)|0))/(12))&-1); //@line 243 "lgc.c"
      $s_used=$20; //@line 243 "lgc.c"
      var $21=$1; //@line 244 "lgc.c"
      var $22=(($21+48)|0); //@line 244 "lgc.c"
      var $23=HEAP32[(($22)>>2)]; //@line 244 "lgc.c"
      var $24=(($23)|0) > 20000; //@line 244 "lgc.c"
      if ($24) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 244 "lgc.c"
    case 3: 
      __label__ = 10; break; //@line 245 "lgc.c"
    case 4: 
      var $27=$ci_used; //@line 246 "lgc.c"
      var $28=((($27<<2))|0); //@line 246 "lgc.c"
      var $29=$1; //@line 246 "lgc.c"
      var $30=(($29+48)|0); //@line 246 "lgc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 246 "lgc.c"
      var $32=(($28)|0) < (($31)|0); //@line 246 "lgc.c"
      if ($32) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 246 "lgc.c"
    case 5: 
      var $34=$1; //@line 246 "lgc.c"
      var $35=(($34+48)|0); //@line 246 "lgc.c"
      var $36=HEAP32[(($35)>>2)]; //@line 246 "lgc.c"
      var $37=16 < (($36)|0); //@line 246 "lgc.c"
      if ($37) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 246 "lgc.c"
    case 6: 
      var $39=$1; //@line 247 "lgc.c"
      var $40=$1; //@line 247 "lgc.c"
      var $41=(($40+48)|0); //@line 247 "lgc.c"
      var $42=HEAP32[(($41)>>2)]; //@line 247 "lgc.c"
      var $43=((((($42)|0))/(2))&-1); //@line 247 "lgc.c"
      __Z14luaD_reallocCIP9lua_Statei($39, $43); //@line 247 "lgc.c"
      __label__ = 7; break; //@line 247 "lgc.c"
    case 7: 
      var $45=$s_used; //@line 249 "lgc.c"
      var $46=((($45<<2))|0); //@line 249 "lgc.c"
      var $47=$1; //@line 249 "lgc.c"
      var $48=(($47+44)|0); //@line 249 "lgc.c"
      var $49=HEAP32[(($48)>>2)]; //@line 249 "lgc.c"
      var $50=(($46)|0) < (($49)|0); //@line 249 "lgc.c"
      if ($50) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 249 "lgc.c"
    case 8: 
      var $52=$1; //@line 249 "lgc.c"
      var $53=(($52+44)|0); //@line 249 "lgc.c"
      var $54=HEAP32[(($53)>>2)]; //@line 249 "lgc.c"
      var $55=90 < (($54)|0); //@line 249 "lgc.c"
      if ($55) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 249 "lgc.c"
    case 9: 
      var $57=$1; //@line 251 "lgc.c"
      var $58=$1; //@line 251 "lgc.c"
      var $59=(($58+44)|0); //@line 251 "lgc.c"
      var $60=HEAP32[(($59)>>2)]; //@line 251 "lgc.c"
      var $61=((((($60)|0))/(2))&-1); //@line 251 "lgc.c"
      __Z17luaD_reallocstackP9lua_Statei($57, $61); //@line 251 "lgc.c"
      __label__ = 10; break; //@line 251 "lgc.c"
    case 10: 
      ;
      return; //@line 253 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15checkstacksizesP9lua_StateP10lua_TValue["X"]=1;

function __Z7freeobjP9lua_StateP8GCObject($L, $o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$o;
      var $3=$2; //@line 379 "lgc.c"
      var $4=$3; //@line 379 "lgc.c"
      var $5=(($4+4)|0); //@line 379 "lgc.c"
      var $6=HEAPU8[($5)]; //@line 379 "lgc.c"
      var $7=(($6)&255); //@line 379 "lgc.c"
      if ((($7)|0) == 9) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 6) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 10) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 5) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 8) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 4) {
        __label__ = 8; break;
      }
      else if ((($7)|0) == 7) {
        __label__ = 9; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 3: 
      var $9=$1; //@line 380 "lgc.c"
      var $10=$2; //@line 380 "lgc.c"
      var $11=$10; //@line 380 "lgc.c"
      __Z14luaF_freeprotoP9lua_StateP5Proto($9, $11); //@line 380 "lgc.c"
      __label__ = 11; break; //@line 380 "lgc.c"
    case 4: 
      var $13=$1; //@line 381 "lgc.c"
      var $14=$2; //@line 381 "lgc.c"
      var $15=$14; //@line 381 "lgc.c"
      __Z16luaF_freeclosureP9lua_StateP7Closure($13, $15); //@line 381 "lgc.c"
      __label__ = 11; break; //@line 381 "lgc.c"
    case 5: 
      var $17=$1; //@line 382 "lgc.c"
      var $18=$2; //@line 382 "lgc.c"
      var $19=$18; //@line 382 "lgc.c"
      __Z14luaF_freeupvalP9lua_StateP5UpVal($17, $19); //@line 382 "lgc.c"
      __label__ = 11; break; //@line 382 "lgc.c"
    case 6: 
      var $21=$1; //@line 383 "lgc.c"
      var $22=$2; //@line 383 "lgc.c"
      var $23=$22; //@line 383 "lgc.c"
      __Z9luaH_freeP9lua_StateP5Table($21, $23); //@line 383 "lgc.c"
      __label__ = 11; break; //@line 383 "lgc.c"
    case 7: 
      var $25=$1; //@line 386 "lgc.c"
      var $26=$2; //@line 386 "lgc.c"
      var $27=$26; //@line 386 "lgc.c"
      __Z15luaE_freethreadP9lua_StateS0_($25, $27); //@line 386 "lgc.c"
      __label__ = 11; break; //@line 387 "lgc.c"
    case 8: 
      var $29=$1; //@line 390 "lgc.c"
      var $30=(($29+16)|0); //@line 390 "lgc.c"
      var $31=HEAP32[(($30)>>2)]; //@line 390 "lgc.c"
      var $32=(($31)|0); //@line 390 "lgc.c"
      var $33=(($32+4)|0); //@line 390 "lgc.c"
      var $34=HEAP32[(($33)>>2)]; //@line 390 "lgc.c"
      var $35=((($34)-(1))|0); //@line 390 "lgc.c"
      HEAP32[(($33)>>2)]=$35; //@line 390 "lgc.c"
      var $36=$1; //@line 391 "lgc.c"
      var $37=$2; //@line 391 "lgc.c"
      var $38=$37; //@line 391 "lgc.c"
      var $39=$2; //@line 391 "lgc.c"
      var $40=$39; //@line 391 "lgc.c"
      var $41=$40; //@line 391 "lgc.c"
      var $42=(($41+12)|0); //@line 391 "lgc.c"
      var $43=HEAP32[(($42)>>2)]; //@line 391 "lgc.c"
      var $44=((($43)+(1))|0); //@line 391 "lgc.c"
      var $45=(($44)|0); //@line 391 "lgc.c"
      var $46=((($45)+(16))|0); //@line 391 "lgc.c"
      var $47=__Z13luaM_realloc_P9lua_StatePvjj($36, $38, $46, 0); //@line 391 "lgc.c"
      __label__ = 11; break; //@line 392 "lgc.c"
    case 9: 
      var $49=$1; //@line 395 "lgc.c"
      var $50=$2; //@line 395 "lgc.c"
      var $51=$50; //@line 395 "lgc.c"
      var $52=$2; //@line 395 "lgc.c"
      var $53=$52; //@line 395 "lgc.c"
      var $54=$53; //@line 395 "lgc.c"
      var $55=(($54+16)|0); //@line 395 "lgc.c"
      var $56=HEAP32[(($55)>>2)]; //@line 395 "lgc.c"
      var $57=((($56)+(20))|0); //@line 395 "lgc.c"
      var $58=__Z13luaM_realloc_P9lua_StatePvjj($49, $51, $57, 0); //@line 395 "lgc.c"
      __label__ = 11; break; //@line 396 "lgc.c"
    case 10: 
      __label__ = 11; break; //@line 399 "lgc.c"
    case 11: 
      ;
      return; //@line 400 "lgc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7freeobjP9lua_StateP8GCObject["X"]=1;

function __Z9luaX_initP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      var $ts;
      $1=$L;
      $i=0; //@line 66 "llex.c"
      __label__ = 3; break; //@line 66 "llex.c"
    case 3: 
      var $3=$i; //@line 66 "llex.c"
      var $4=(($3)|0) < 21; //@line 66 "llex.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 66 "llex.c"
    case 4: 
      var $6=$1; //@line 67 "llex.c"
      var $7=$i; //@line 67 "llex.c"
      var $8=((_luaX_tokens+($7<<2))|0); //@line 67 "llex.c"
      var $9=HEAP32[(($8)>>2)]; //@line 67 "llex.c"
      var $10=$i; //@line 67 "llex.c"
      var $11=((_luaX_tokens+($10<<2))|0); //@line 67 "llex.c"
      var $12=HEAP32[(($11)>>2)]; //@line 67 "llex.c"
      var $13=_strlen($12); //@line 67 "llex.c"
      var $14=__Z12luaS_newlstrP9lua_StatePKcj($6, $9, $13); //@line 67 "llex.c"
      $ts=$14; //@line 67 "llex.c"
      var $15=$ts; //@line 68 "llex.c"
      var $16=$15; //@line 68 "llex.c"
      var $17=(($16+5)|0); //@line 68 "llex.c"
      var $18=HEAPU8[($17)]; //@line 68 "llex.c"
      var $19=(($18)&255); //@line 68 "llex.c"
      var $20=$19 | 32; //@line 68 "llex.c"
      var $21=(($20) & 255); //@line 68 "llex.c"
      HEAP8[($17)]=$21; //@line 68 "llex.c"
      var $22=$i; //@line 70 "llex.c"
      var $23=((($22)+(1))|0); //@line 70 "llex.c"
      var $24=(($23) & 255); //@line 70 "llex.c"
      var $25=$ts; //@line 70 "llex.c"
      var $26=$25; //@line 70 "llex.c"
      var $27=(($26+6)|0); //@line 70 "llex.c"
      HEAP8[($27)]=$24; //@line 70 "llex.c"
      __label__ = 5; break; //@line 71 "llex.c"
    case 5: 
      var $29=$i; //@line 66 "llex.c"
      var $30=((($29)+(1))|0); //@line 66 "llex.c"
      $i=$30; //@line 66 "llex.c"
      __label__ = 3; break; //@line 66 "llex.c"
    case 6: 
      ;
      return; //@line 72 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaX_token2strP8LexStatei($ls, $token) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$token;
      var $4=$3; //@line 79 "llex.c"
      var $5=(($4)|0) < 257; //@line 79 "llex.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 79 "llex.c"
    case 3: 
      var $7=$3; //@line 81 "llex.c"
      var $8=_iscntrl($7); //@line 81 "llex.c"
      var $9=(($8)|0)!=0; //@line 81 "llex.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 81 "llex.c"
    case 4: 
      var $11=$2; //@line 81 "llex.c"
      var $12=(($11+40)|0); //@line 81 "llex.c"
      var $13=HEAP32[(($12)>>2)]; //@line 81 "llex.c"
      var $14=$3; //@line 81 "llex.c"
      var $15=__Z16luaO_pushfstringP9lua_StatePKcz($13, ((STRING_TABLE.__str31)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$14,tempInt)); //@line 81 "llex.c"
      var $23 = $15;__label__ = 6; break; //@line 81 "llex.c"
    case 5: 
      var $17=$2; //@line 82 "llex.c"
      var $18=(($17+40)|0); //@line 82 "llex.c"
      var $19=HEAP32[(($18)>>2)]; //@line 82 "llex.c"
      var $20=$3; //@line 82 "llex.c"
      var $21=__Z16luaO_pushfstringP9lua_StatePKcz($19, ((STRING_TABLE.__str32)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$20,tempInt)); //@line 82 "llex.c"
      var $23 = $21;__label__ = 6; break; //@line 82 "llex.c"
    case 6: 
      var $23; //@line 82 "llex.c"
      $1=$23; //@line 82 "llex.c"
      __label__ = 8; break; //@line 82 "llex.c"
    case 7: 
      var $25=$3; //@line 85 "llex.c"
      var $26=((($25)-(257))|0); //@line 85 "llex.c"
      var $27=((_luaX_tokens+($26<<2))|0); //@line 85 "llex.c"
      var $28=HEAP32[(($27)>>2)]; //@line 85 "llex.c"
      $1=$28; //@line 85 "llex.c"
      __label__ = 8; break; //@line 85 "llex.c"
    case 8: 
      var $30=$1; //@line 86 "llex.c"
      STACKTOP = __stackBase__;
      return $30; //@line 86 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaX_lexerrorP8LexStatePKci($ls, $msg, $token) {
  var __stackBase__  = STACKTOP; STACKTOP += 80; _memset(__stackBase__, 0, 80);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $buff=__stackBase__;
      $1=$ls;
      $2=$msg;
      $3=$token;
      var $4=(($buff)|0); //@line 104 "llex.c"
      var $5=$1; //@line 104 "llex.c"
      var $6=(($5+52)|0); //@line 104 "llex.c"
      var $7=HEAP32[(($6)>>2)]; //@line 104 "llex.c"
      var $8=(($7+16)|0); //@line 104 "llex.c"
      var $9=$8; //@line 104 "llex.c"
      __Z12luaO_chunkidPcPKcj($4, $9, 80); //@line 104 "llex.c"
      var $10=$1; //@line 105 "llex.c"
      var $11=(($10+40)|0); //@line 105 "llex.c"
      var $12=HEAP32[(($11)>>2)]; //@line 105 "llex.c"
      var $13=(($buff)|0); //@line 105 "llex.c"
      var $14=$1; //@line 105 "llex.c"
      var $15=(($14+4)|0); //@line 105 "llex.c"
      var $16=HEAP32[(($15)>>2)]; //@line 105 "llex.c"
      var $17=$2; //@line 105 "llex.c"
      var $18=__Z16luaO_pushfstringP9lua_StatePKcz($12, ((STRING_TABLE.__str33)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$13,HEAP32[(((tempInt)+(4))>>2)]=$16,HEAP32[(((tempInt)+(8))>>2)]=$17,tempInt)); //@line 105 "llex.c"
      $2=$18; //@line 105 "llex.c"
      var $19=$3; //@line 106 "llex.c"
      var $20=(($19)|0)!=0; //@line 106 "llex.c"
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 106 "llex.c"
    case 3: 
      var $22=$1; //@line 107 "llex.c"
      var $23=(($22+40)|0); //@line 107 "llex.c"
      var $24=HEAP32[(($23)>>2)]; //@line 107 "llex.c"
      var $25=$2; //@line 107 "llex.c"
      var $26=$1; //@line 107 "llex.c"
      var $27=$3; //@line 107 "llex.c"
      var $28=__Z8txtTokenP8LexStatei($26, $27); //@line 107 "llex.c"
      var $29=__Z16luaO_pushfstringP9lua_StatePKcz($24, ((STRING_TABLE.__str34)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$28,tempInt)); //@line 107 "llex.c"
      __label__ = 4; break; //@line 107 "llex.c"
    case 4: 
      var $31=$1; //@line 108 "llex.c"
      var $32=(($31+40)|0); //@line 108 "llex.c"
      var $33=HEAP32[(($32)>>2)]; //@line 108 "llex.c"
      __Z10luaD_throwP9lua_Statei($33, 3); //@line 108 "llex.c"
      STACKTOP = __stackBase__;
      return; //@line 109 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8txtTokenP8LexStatei($ls, $token) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$token;
      var $4=$3; //@line 90 "llex.c"
      if ((($4)|0) == 285 || (($4)|0) == 286 || (($4)|0) == 284) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 3: 
      var $6=$2; //@line 94 "llex.c"
      __Z4saveP8LexStatei($6, 0); //@line 94 "llex.c"
      var $7=$2; //@line 95 "llex.c"
      var $8=(($7+48)|0); //@line 95 "llex.c"
      var $9=HEAP32[(($8)>>2)]; //@line 95 "llex.c"
      var $10=(($9)|0); //@line 95 "llex.c"
      var $11=HEAP32[(($10)>>2)]; //@line 95 "llex.c"
      $1=$11; //@line 95 "llex.c"
      __label__ = 5; break; //@line 95 "llex.c"
    case 4: 
      var $13=$2; //@line 97 "llex.c"
      var $14=$3; //@line 97 "llex.c"
      var $15=__Z14luaX_token2strP8LexStatei($13, $14); //@line 97 "llex.c"
      $1=$15; //@line 97 "llex.c"
      __label__ = 5; break; //@line 97 "llex.c"
    case 5: 
      var $17=$1; //@line 99 "llex.c"
      ;
      return $17; //@line 99 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16luaX_syntaxerrorP8LexStatePKc($ls, $msg) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$msg;
  var $3=$1; //@line 113 "llex.c"
  var $4=$2; //@line 113 "llex.c"
  var $5=$1; //@line 113 "llex.c"
  var $6=(($5+12)|0); //@line 113 "llex.c"
  var $7=(($6)|0); //@line 113 "llex.c"
  var $8=HEAP32[(($7)>>2)]; //@line 113 "llex.c"
  __Z13luaX_lexerrorP8LexStatePKci($3, $4, $8); //@line 113 "llex.c"
  ;
  return; //@line 114 "llex.c"
}


function __Z14luaX_newstringP8LexStatePKcj($ls, $str, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $L;
      var $ts;
      var $o;
      var $i_o;
      $1=$ls;
      $2=$str;
      $3=$l;
      var $4=$1; //@line 118 "llex.c"
      var $5=(($4+40)|0); //@line 118 "llex.c"
      var $6=HEAP32[(($5)>>2)]; //@line 118 "llex.c"
      $L=$6; //@line 118 "llex.c"
      var $7=$L; //@line 119 "llex.c"
      var $8=$2; //@line 119 "llex.c"
      var $9=$3; //@line 119 "llex.c"
      var $10=__Z12luaS_newlstrP9lua_StatePKcj($7, $8, $9); //@line 119 "llex.c"
      $ts=$10; //@line 119 "llex.c"
      var $11=$L; //@line 120 "llex.c"
      var $12=$1; //@line 120 "llex.c"
      var $13=(($12+36)|0); //@line 120 "llex.c"
      var $14=HEAP32[(($13)>>2)]; //@line 120 "llex.c"
      var $15=(($14+4)|0); //@line 120 "llex.c"
      var $16=HEAP32[(($15)>>2)]; //@line 120 "llex.c"
      var $17=$ts; //@line 120 "llex.c"
      var $18=__Z11luaH_setstrP9lua_StateP5TableP7TString($11, $16, $17); //@line 120 "llex.c"
      $o=$18; //@line 120 "llex.c"
      var $19=$o; //@line 121 "llex.c"
      var $20=(($19+8)|0); //@line 121 "llex.c"
      var $21=HEAP32[(($20)>>2)]; //@line 121 "llex.c"
      var $22=(($21)|0)==0; //@line 121 "llex.c"
      if ($22) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 121 "llex.c"
    case 3: 
      var $24=$o; //@line 122 "llex.c"
      $i_o=$24; //@line 122 "llex.c"
      var $25=$i_o; //@line 122 "llex.c"
      var $26=(($25)|0); //@line 122 "llex.c"
      var $27=$26; //@line 122 "llex.c"
      HEAP32[(($27)>>2)]=1; //@line 122 "llex.c"
      var $28=$i_o; //@line 122 "llex.c"
      var $29=(($28+8)|0); //@line 122 "llex.c"
      HEAP32[(($29)>>2)]=1; //@line 122 "llex.c"
      var $30=$L; //@line 123 "llex.c"
      var $31=(($30+16)|0); //@line 123 "llex.c"
      var $32=HEAP32[(($31)>>2)]; //@line 123 "llex.c"
      var $33=(($32+68)|0); //@line 123 "llex.c"
      var $34=HEAPU32[(($33)>>2)]; //@line 123 "llex.c"
      var $35=$L; //@line 123 "llex.c"
      var $36=(($35+16)|0); //@line 123 "llex.c"
      var $37=HEAP32[(($36)>>2)]; //@line 123 "llex.c"
      var $38=(($37+64)|0); //@line 123 "llex.c"
      var $39=HEAPU32[(($38)>>2)]; //@line 123 "llex.c"
      var $40=(($34)>>>0) >= (($39)>>>0); //@line 123 "llex.c"
      if ($40) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 123 "llex.c"
    case 4: 
      var $42=$L; //@line 123 "llex.c"
      __Z9luaC_stepP9lua_State($42); //@line 123 "llex.c"
      __label__ = 5; break; //@line 123 "llex.c"
    case 5: 
      __label__ = 6; break; //@line 124 "llex.c"
    case 6: 
      var $45=$ts; //@line 125 "llex.c"
      ;
      return $45; //@line 125 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14luaX_newstringP8LexStatePKcj["X"]=1;

function __Z13luaX_setinputP9lua_StateP8LexStateP3ZioP7TString($L, $ls, $z, $source) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$L;
      $2=$ls;
      $3=$z;
      $4=$source;
      var $5=$2; //@line 141 "llex.c"
      var $6=(($5+56)|0); //@line 141 "llex.c"
      HEAP8[($6)]=46; //@line 141 "llex.c"
      var $7=$1; //@line 142 "llex.c"
      var $8=$2; //@line 142 "llex.c"
      var $9=(($8+40)|0); //@line 142 "llex.c"
      HEAP32[(($9)>>2)]=$7; //@line 142 "llex.c"
      var $10=$2; //@line 143 "llex.c"
      var $11=(($10+24)|0); //@line 143 "llex.c"
      var $12=(($11)|0); //@line 143 "llex.c"
      HEAP32[(($12)>>2)]=287; //@line 143 "llex.c"
      var $13=$3; //@line 144 "llex.c"
      var $14=$2; //@line 144 "llex.c"
      var $15=(($14+44)|0); //@line 144 "llex.c"
      HEAP32[(($15)>>2)]=$13; //@line 144 "llex.c"
      var $16=$2; //@line 145 "llex.c"
      var $17=(($16+36)|0); //@line 145 "llex.c"
      HEAP32[(($17)>>2)]=0; //@line 145 "llex.c"
      var $18=$2; //@line 146 "llex.c"
      var $19=(($18+4)|0); //@line 146 "llex.c"
      HEAP32[(($19)>>2)]=1; //@line 146 "llex.c"
      var $20=$2; //@line 147 "llex.c"
      var $21=(($20+8)|0); //@line 147 "llex.c"
      HEAP32[(($21)>>2)]=1; //@line 147 "llex.c"
      var $22=$4; //@line 148 "llex.c"
      var $23=$2; //@line 148 "llex.c"
      var $24=(($23+52)|0); //@line 148 "llex.c"
      HEAP32[(($24)>>2)]=$22; //@line 148 "llex.c"
      var $25=$2; //@line 149 "llex.c"
      var $26=(($25+40)|0); //@line 149 "llex.c"
      var $27=HEAP32[(($26)>>2)]; //@line 149 "llex.c"
      var $28=$2; //@line 149 "llex.c"
      var $29=(($28+48)|0); //@line 149 "llex.c"
      var $30=HEAP32[(($29)>>2)]; //@line 149 "llex.c"
      var $31=(($30)|0); //@line 149 "llex.c"
      var $32=HEAP32[(($31)>>2)]; //@line 149 "llex.c"
      var $33=$2; //@line 149 "llex.c"
      var $34=(($33+48)|0); //@line 149 "llex.c"
      var $35=HEAP32[(($34)>>2)]; //@line 149 "llex.c"
      var $36=(($35+8)|0); //@line 149 "llex.c"
      var $37=HEAP32[(($36)>>2)]; //@line 149 "llex.c"
      var $38=(($37)|0); //@line 149 "llex.c"
      var $39=__Z13luaM_realloc_P9lua_StatePvjj($27, $32, $38, 32); //@line 149 "llex.c"
      var $40=$2; //@line 149 "llex.c"
      var $41=(($40+48)|0); //@line 149 "llex.c"
      var $42=HEAP32[(($41)>>2)]; //@line 149 "llex.c"
      var $43=(($42)|0); //@line 149 "llex.c"
      HEAP32[(($43)>>2)]=$39; //@line 149 "llex.c"
      var $44=$2; //@line 149 "llex.c"
      var $45=(($44+48)|0); //@line 149 "llex.c"
      var $46=HEAP32[(($45)>>2)]; //@line 149 "llex.c"
      var $47=(($46+8)|0); //@line 149 "llex.c"
      HEAP32[(($47)>>2)]=32; //@line 149 "llex.c"
      var $48=$2; //@line 150 "llex.c"
      var $49=(($48+44)|0); //@line 150 "llex.c"
      var $50=HEAP32[(($49)>>2)]; //@line 150 "llex.c"
      var $51=(($50)|0); //@line 150 "llex.c"
      var $52=HEAPU32[(($51)>>2)]; //@line 150 "llex.c"
      var $53=((($52)-(1))|0); //@line 150 "llex.c"
      HEAP32[(($51)>>2)]=$53; //@line 150 "llex.c"
      var $54=(($52)>>>0) > 0; //@line 150 "llex.c"
      if ($54) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 150 "llex.c"
    case 3: 
      var $56=$2; //@line 150 "llex.c"
      var $57=(($56+44)|0); //@line 150 "llex.c"
      var $58=HEAP32[(($57)>>2)]; //@line 150 "llex.c"
      var $59=(($58+4)|0); //@line 150 "llex.c"
      var $60=HEAP32[(($59)>>2)]; //@line 150 "llex.c"
      var $61=(($60+1)|0); //@line 150 "llex.c"
      HEAP32[(($59)>>2)]=$61; //@line 150 "llex.c"
      var $62=HEAPU8[($60)]; //@line 150 "llex.c"
      var $63=(($62)&255); //@line 150 "llex.c"
      var $70 = $63;__label__ = 5; break; //@line 150 "llex.c"
    case 4: 
      var $65=$2; //@line 150 "llex.c"
      var $66=(($65+44)|0); //@line 150 "llex.c"
      var $67=HEAP32[(($66)>>2)]; //@line 150 "llex.c"
      var $68=__Z9luaZ_fillP3Zio($67); //@line 150 "llex.c"
      var $70 = $68;__label__ = 5; break; //@line 150 "llex.c"
    case 5: 
      var $70; //@line 150 "llex.c"
      var $71=$2; //@line 150 "llex.c"
      var $72=(($71)|0); //@line 150 "llex.c"
      HEAP32[(($72)>>2)]=$70; //@line 150 "llex.c"
      ;
      return; //@line 151 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaX_setinputP9lua_StateP8LexStateP3ZioP7TString["X"]=1;

function __Z9luaX_nextP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ls;
      var $2=$1; //@line 449 "llex.c"
      var $3=(($2+4)|0); //@line 449 "llex.c"
      var $4=HEAP32[(($3)>>2)]; //@line 449 "llex.c"
      var $5=$1; //@line 449 "llex.c"
      var $6=(($5+8)|0); //@line 449 "llex.c"
      HEAP32[(($6)>>2)]=$4; //@line 449 "llex.c"
      var $7=$1; //@line 450 "llex.c"
      var $8=(($7+24)|0); //@line 450 "llex.c"
      var $9=(($8)|0); //@line 450 "llex.c"
      var $10=HEAP32[(($9)>>2)]; //@line 450 "llex.c"
      var $11=(($10)|0)!=287; //@line 450 "llex.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 450 "llex.c"
    case 3: 
      var $13=$1; //@line 451 "llex.c"
      var $14=(($13+12)|0); //@line 451 "llex.c"
      var $15=$1; //@line 451 "llex.c"
      var $16=(($15+24)|0); //@line 451 "llex.c"
      var $17=$14; //@line 451 "llex.c"
      var $18=$16; //@line 451 "llex.c"
      HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($17)+(8))>>2)]=HEAP32[((($18)+(8))>>2)]; //@line 451 "llex.c"
      var $19=$1; //@line 452 "llex.c"
      var $20=(($19+24)|0); //@line 452 "llex.c"
      var $21=(($20)|0); //@line 452 "llex.c"
      HEAP32[(($21)>>2)]=287; //@line 452 "llex.c"
      __label__ = 5; break; //@line 453 "llex.c"
    case 4: 
      var $23=$1; //@line 455 "llex.c"
      var $24=$1; //@line 455 "llex.c"
      var $25=(($24+12)|0); //@line 455 "llex.c"
      var $26=(($25+4)|0); //@line 455 "llex.c"
      var $27=__Z4llexP8LexStateP7SemInfo($23, $26); //@line 455 "llex.c"
      var $28=$1; //@line 455 "llex.c"
      var $29=(($28+12)|0); //@line 455 "llex.c"
      var $30=(($29)|0); //@line 455 "llex.c"
      HEAP32[(($30)>>2)]=$27; //@line 455 "llex.c"
      __label__ = 5; break; //@line 455 "llex.c"
    case 5: 
      ;
      return; //@line 456 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z4llexP8LexStateP7SemInfo($ls, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sep;
      var $sep1;
      var $ts;
      var $c;
      $2=$ls;
      $3=$seminfo;
      var $4=$2; //@line 335 "llex.c"
      var $5=(($4+48)|0); //@line 335 "llex.c"
      var $6=HEAP32[(($5)>>2)]; //@line 335 "llex.c"
      var $7=(($6+4)|0); //@line 335 "llex.c"
      HEAP32[(($7)>>2)]=0; //@line 335 "llex.c"
      __label__ = 3; break; //@line 336 "llex.c"
    case 3: 
      var $9=$2; //@line 337 "llex.c"
      var $10=(($9)|0); //@line 337 "llex.c"
      var $11=HEAP32[(($10)>>2)]; //@line 337 "llex.c"
      if ((($11)|0) == 10 || (($11)|0) == 13) {
        __label__ = 4; break;
      }
      else if ((($11)|0) == 45) {
        __label__ = 5; break;
      }
      else if ((($11)|0) == 91) {
        __label__ = 27; break;
      }
      else if ((($11)|0) == 61) {
        __label__ = 34; break;
      }
      else if ((($11)|0) == 60) {
        __label__ = 43; break;
      }
      else if ((($11)|0) == 62) {
        __label__ = 52; break;
      }
      else if ((($11)|0) == 126) {
        __label__ = 61; break;
      }
      else if ((($11)|0) == 34 || (($11)|0) == 39) {
        __label__ = 70; break;
      }
      else if ((($11)|0) == 46) {
        __label__ = 71; break;
      }
      else if ((($11)|0) == -1) {
        __label__ = 81; break;
      }
      else {
      __label__ = 82; break;
      }
      
    case 4: 
      var $13=$2; //@line 340 "llex.c"
      __Z13inclinenumberP8LexState($13); //@line 340 "llex.c"
      __label__ = 3; break; //@line 341 "llex.c"
    case 5: 
      var $15=$2; //@line 344 "llex.c"
      var $16=(($15+44)|0); //@line 344 "llex.c"
      var $17=HEAP32[(($16)>>2)]; //@line 344 "llex.c"
      var $18=(($17)|0); //@line 344 "llex.c"
      var $19=HEAPU32[(($18)>>2)]; //@line 344 "llex.c"
      var $20=((($19)-(1))|0); //@line 344 "llex.c"
      HEAP32[(($18)>>2)]=$20; //@line 344 "llex.c"
      var $21=(($19)>>>0) > 0; //@line 344 "llex.c"
      if ($21) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 344 "llex.c"
    case 6: 
      var $23=$2; //@line 344 "llex.c"
      var $24=(($23+44)|0); //@line 344 "llex.c"
      var $25=HEAP32[(($24)>>2)]; //@line 344 "llex.c"
      var $26=(($25+4)|0); //@line 344 "llex.c"
      var $27=HEAP32[(($26)>>2)]; //@line 344 "llex.c"
      var $28=(($27+1)|0); //@line 344 "llex.c"
      HEAP32[(($26)>>2)]=$28; //@line 344 "llex.c"
      var $29=HEAPU8[($27)]; //@line 344 "llex.c"
      var $30=(($29)&255); //@line 344 "llex.c"
      var $37 = $30;__label__ = 8; break; //@line 344 "llex.c"
    case 7: 
      var $32=$2; //@line 344 "llex.c"
      var $33=(($32+44)|0); //@line 344 "llex.c"
      var $34=HEAP32[(($33)>>2)]; //@line 344 "llex.c"
      var $35=__Z9luaZ_fillP3Zio($34); //@line 344 "llex.c"
      var $37 = $35;__label__ = 8; break; //@line 344 "llex.c"
    case 8: 
      var $37; //@line 344 "llex.c"
      var $38=$2; //@line 344 "llex.c"
      var $39=(($38)|0); //@line 344 "llex.c"
      HEAP32[(($39)>>2)]=$37; //@line 344 "llex.c"
      var $40=$2; //@line 345 "llex.c"
      var $41=(($40)|0); //@line 345 "llex.c"
      var $42=HEAP32[(($41)>>2)]; //@line 345 "llex.c"
      var $43=(($42)|0)!=45; //@line 345 "llex.c"
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 345 "llex.c"
    case 9: 
      $1=45; //@line 345 "llex.c"
      __label__ = 106; break; //@line 345 "llex.c"
    case 10: 
      var $46=$2; //@line 347 "llex.c"
      var $47=(($46+44)|0); //@line 347 "llex.c"
      var $48=HEAP32[(($47)>>2)]; //@line 347 "llex.c"
      var $49=(($48)|0); //@line 347 "llex.c"
      var $50=HEAPU32[(($49)>>2)]; //@line 347 "llex.c"
      var $51=((($50)-(1))|0); //@line 347 "llex.c"
      HEAP32[(($49)>>2)]=$51; //@line 347 "llex.c"
      var $52=(($50)>>>0) > 0; //@line 347 "llex.c"
      if ($52) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 347 "llex.c"
    case 11: 
      var $54=$2; //@line 347 "llex.c"
      var $55=(($54+44)|0); //@line 347 "llex.c"
      var $56=HEAP32[(($55)>>2)]; //@line 347 "llex.c"
      var $57=(($56+4)|0); //@line 347 "llex.c"
      var $58=HEAP32[(($57)>>2)]; //@line 347 "llex.c"
      var $59=(($58+1)|0); //@line 347 "llex.c"
      HEAP32[(($57)>>2)]=$59; //@line 347 "llex.c"
      var $60=HEAPU8[($58)]; //@line 347 "llex.c"
      var $61=(($60)&255); //@line 347 "llex.c"
      var $68 = $61;__label__ = 13; break; //@line 347 "llex.c"
    case 12: 
      var $63=$2; //@line 347 "llex.c"
      var $64=(($63+44)|0); //@line 347 "llex.c"
      var $65=HEAP32[(($64)>>2)]; //@line 347 "llex.c"
      var $66=__Z9luaZ_fillP3Zio($65); //@line 347 "llex.c"
      var $68 = $66;__label__ = 13; break; //@line 347 "llex.c"
    case 13: 
      var $68; //@line 347 "llex.c"
      var $69=$2; //@line 347 "llex.c"
      var $70=(($69)|0); //@line 347 "llex.c"
      HEAP32[(($70)>>2)]=$68; //@line 347 "llex.c"
      var $71=$2; //@line 348 "llex.c"
      var $72=(($71)|0); //@line 348 "llex.c"
      var $73=HEAP32[(($72)>>2)]; //@line 348 "llex.c"
      var $74=(($73)|0)==91; //@line 348 "llex.c"
      if ($74) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 348 "llex.c"
    case 14: 
      var $76=$2; //@line 349 "llex.c"
      var $77=__Z8skip_sepP8LexState($76); //@line 349 "llex.c"
      $sep=$77; //@line 349 "llex.c"
      var $78=$2; //@line 350 "llex.c"
      var $79=(($78+48)|0); //@line 350 "llex.c"
      var $80=HEAP32[(($79)>>2)]; //@line 350 "llex.c"
      var $81=(($80+4)|0); //@line 350 "llex.c"
      HEAP32[(($81)>>2)]=0; //@line 350 "llex.c"
      var $82=$sep; //@line 351 "llex.c"
      var $83=(($82)|0) >= 0; //@line 351 "llex.c"
      if ($83) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 351 "llex.c"
    case 15: 
      var $85=$2; //@line 352 "llex.c"
      var $86=$sep; //@line 352 "llex.c"
      __Z16read_long_stringP8LexStateP7SemInfoi($85, 0, $86); //@line 352 "llex.c"
      var $87=$2; //@line 353 "llex.c"
      var $88=(($87+48)|0); //@line 353 "llex.c"
      var $89=HEAP32[(($88)>>2)]; //@line 353 "llex.c"
      var $90=(($89+4)|0); //@line 353 "llex.c"
      HEAP32[(($90)>>2)]=0; //@line 353 "llex.c"
      __label__ = 3; break; //@line 354 "llex.c"
    case 16: 
      __label__ = 17; break; //@line 356 "llex.c"
    case 17: 
      __label__ = 18; break; //@line 358 "llex.c"
    case 18: 
      var $94=$2; //@line 358 "llex.c"
      var $95=(($94)|0); //@line 358 "llex.c"
      var $96=HEAP32[(($95)>>2)]; //@line 358 "llex.c"
      var $97=(($96)|0)==10; //@line 358 "llex.c"
      if ($97) { var $109 = 0;__label__ = 21; break; } else { __label__ = 19; break; } //@line 358 "llex.c"
    case 19: 
      var $99=$2; //@line 358 "llex.c"
      var $100=(($99)|0); //@line 358 "llex.c"
      var $101=HEAP32[(($100)>>2)]; //@line 358 "llex.c"
      var $102=(($101)|0)==13; //@line 358 "llex.c"
      if ($102) { var $109 = 0;__label__ = 21; break; } else { __label__ = 20; break; } //@line 358 "llex.c"
    case 20: 
      var $104=$2; //@line 358 "llex.c"
      var $105=(($104)|0); //@line 358 "llex.c"
      var $106=HEAP32[(($105)>>2)]; //@line 358 "llex.c"
      var $107=(($106)|0)!=-1; //@line 358 "llex.c"
      var $109 = $107;__label__ = 21; break; //@line 358 "llex.c"
    case 21: 
      var $109;
      if ($109) { __label__ = 22; break; } else { __label__ = 26; break; } //@line 358 "llex.c"
    case 22: 
      var $111=$2; //@line 359 "llex.c"
      var $112=(($111+44)|0); //@line 359 "llex.c"
      var $113=HEAP32[(($112)>>2)]; //@line 359 "llex.c"
      var $114=(($113)|0); //@line 359 "llex.c"
      var $115=HEAPU32[(($114)>>2)]; //@line 359 "llex.c"
      var $116=((($115)-(1))|0); //@line 359 "llex.c"
      HEAP32[(($114)>>2)]=$116; //@line 359 "llex.c"
      var $117=(($115)>>>0) > 0; //@line 359 "llex.c"
      if ($117) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 359 "llex.c"
    case 23: 
      var $119=$2; //@line 359 "llex.c"
      var $120=(($119+44)|0); //@line 359 "llex.c"
      var $121=HEAP32[(($120)>>2)]; //@line 359 "llex.c"
      var $122=(($121+4)|0); //@line 359 "llex.c"
      var $123=HEAP32[(($122)>>2)]; //@line 359 "llex.c"
      var $124=(($123+1)|0); //@line 359 "llex.c"
      HEAP32[(($122)>>2)]=$124; //@line 359 "llex.c"
      var $125=HEAPU8[($123)]; //@line 359 "llex.c"
      var $126=(($125)&255); //@line 359 "llex.c"
      var $133 = $126;__label__ = 25; break; //@line 359 "llex.c"
    case 24: 
      var $128=$2; //@line 359 "llex.c"
      var $129=(($128+44)|0); //@line 359 "llex.c"
      var $130=HEAP32[(($129)>>2)]; //@line 359 "llex.c"
      var $131=__Z9luaZ_fillP3Zio($130); //@line 359 "llex.c"
      var $133 = $131;__label__ = 25; break; //@line 359 "llex.c"
    case 25: 
      var $133; //@line 359 "llex.c"
      var $134=$2; //@line 359 "llex.c"
      var $135=(($134)|0); //@line 359 "llex.c"
      HEAP32[(($135)>>2)]=$133; //@line 359 "llex.c"
      __label__ = 18; break; //@line 359 "llex.c"
    case 26: 
      __label__ = 3; break; //@line 360 "llex.c"
    case 27: 
      var $138=$2; //@line 363 "llex.c"
      var $139=__Z8skip_sepP8LexState($138); //@line 363 "llex.c"
      $sep1=$139; //@line 363 "llex.c"
      var $140=$sep1; //@line 364 "llex.c"
      var $141=(($140)|0) >= 0; //@line 364 "llex.c"
      if ($141) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 364 "llex.c"
    case 28: 
      var $143=$2; //@line 365 "llex.c"
      var $144=$3; //@line 365 "llex.c"
      var $145=$sep1; //@line 365 "llex.c"
      __Z16read_long_stringP8LexStateP7SemInfoi($143, $144, $145); //@line 365 "llex.c"
      $1=286; //@line 366 "llex.c"
      __label__ = 106; break; //@line 366 "llex.c"
    case 29: 
      var $147=$sep1; //@line 368 "llex.c"
      var $148=(($147)|0)==-1; //@line 368 "llex.c"
      if ($148) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 368 "llex.c"
    case 30: 
      $1=91; //@line 368 "llex.c"
      __label__ = 106; break; //@line 368 "llex.c"
    case 31: 
      var $151=$2; //@line 369 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($151, ((STRING_TABLE.__str35)|0), 286); //@line 369 "llex.c"
      __label__ = 32; break; //@line 369 "llex.c"
    case 32: 
      __label__ = 33; break; //@line 369 "llex.c"
    case 33: 
      __label__ = 34; break; //@line 370 "llex.c"
    case 34: 
      var $155=$2; //@line 372 "llex.c"
      var $156=(($155+44)|0); //@line 372 "llex.c"
      var $157=HEAP32[(($156)>>2)]; //@line 372 "llex.c"
      var $158=(($157)|0); //@line 372 "llex.c"
      var $159=HEAPU32[(($158)>>2)]; //@line 372 "llex.c"
      var $160=((($159)-(1))|0); //@line 372 "llex.c"
      HEAP32[(($158)>>2)]=$160; //@line 372 "llex.c"
      var $161=(($159)>>>0) > 0; //@line 372 "llex.c"
      if ($161) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 372 "llex.c"
    case 35: 
      var $163=$2; //@line 372 "llex.c"
      var $164=(($163+44)|0); //@line 372 "llex.c"
      var $165=HEAP32[(($164)>>2)]; //@line 372 "llex.c"
      var $166=(($165+4)|0); //@line 372 "llex.c"
      var $167=HEAP32[(($166)>>2)]; //@line 372 "llex.c"
      var $168=(($167+1)|0); //@line 372 "llex.c"
      HEAP32[(($166)>>2)]=$168; //@line 372 "llex.c"
      var $169=HEAPU8[($167)]; //@line 372 "llex.c"
      var $170=(($169)&255); //@line 372 "llex.c"
      var $177 = $170;__label__ = 37; break; //@line 372 "llex.c"
    case 36: 
      var $172=$2; //@line 372 "llex.c"
      var $173=(($172+44)|0); //@line 372 "llex.c"
      var $174=HEAP32[(($173)>>2)]; //@line 372 "llex.c"
      var $175=__Z9luaZ_fillP3Zio($174); //@line 372 "llex.c"
      var $177 = $175;__label__ = 37; break; //@line 372 "llex.c"
    case 37: 
      var $177; //@line 372 "llex.c"
      var $178=$2; //@line 372 "llex.c"
      var $179=(($178)|0); //@line 372 "llex.c"
      HEAP32[(($179)>>2)]=$177; //@line 372 "llex.c"
      var $180=$2; //@line 373 "llex.c"
      var $181=(($180)|0); //@line 373 "llex.c"
      var $182=HEAP32[(($181)>>2)]; //@line 373 "llex.c"
      var $183=(($182)|0)!=61; //@line 373 "llex.c"
      if ($183) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 373 "llex.c"
    case 38: 
      $1=61; //@line 373 "llex.c"
      __label__ = 106; break; //@line 373 "llex.c"
    case 39: 
      var $186=$2; //@line 374 "llex.c"
      var $187=(($186+44)|0); //@line 374 "llex.c"
      var $188=HEAP32[(($187)>>2)]; //@line 374 "llex.c"
      var $189=(($188)|0); //@line 374 "llex.c"
      var $190=HEAPU32[(($189)>>2)]; //@line 374 "llex.c"
      var $191=((($190)-(1))|0); //@line 374 "llex.c"
      HEAP32[(($189)>>2)]=$191; //@line 374 "llex.c"
      var $192=(($190)>>>0) > 0; //@line 374 "llex.c"
      if ($192) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 374 "llex.c"
    case 40: 
      var $194=$2; //@line 374 "llex.c"
      var $195=(($194+44)|0); //@line 374 "llex.c"
      var $196=HEAP32[(($195)>>2)]; //@line 374 "llex.c"
      var $197=(($196+4)|0); //@line 374 "llex.c"
      var $198=HEAP32[(($197)>>2)]; //@line 374 "llex.c"
      var $199=(($198+1)|0); //@line 374 "llex.c"
      HEAP32[(($197)>>2)]=$199; //@line 374 "llex.c"
      var $200=HEAPU8[($198)]; //@line 374 "llex.c"
      var $201=(($200)&255); //@line 374 "llex.c"
      var $208 = $201;__label__ = 42; break; //@line 374 "llex.c"
    case 41: 
      var $203=$2; //@line 374 "llex.c"
      var $204=(($203+44)|0); //@line 374 "llex.c"
      var $205=HEAP32[(($204)>>2)]; //@line 374 "llex.c"
      var $206=__Z9luaZ_fillP3Zio($205); //@line 374 "llex.c"
      var $208 = $206;__label__ = 42; break; //@line 374 "llex.c"
    case 42: 
      var $208; //@line 374 "llex.c"
      var $209=$2; //@line 374 "llex.c"
      var $210=(($209)|0); //@line 374 "llex.c"
      HEAP32[(($210)>>2)]=$208; //@line 374 "llex.c"
      $1=280; //@line 374 "llex.c"
      __label__ = 106; break; //@line 374 "llex.c"
    case 43: 
      var $212=$2; //@line 377 "llex.c"
      var $213=(($212+44)|0); //@line 377 "llex.c"
      var $214=HEAP32[(($213)>>2)]; //@line 377 "llex.c"
      var $215=(($214)|0); //@line 377 "llex.c"
      var $216=HEAPU32[(($215)>>2)]; //@line 377 "llex.c"
      var $217=((($216)-(1))|0); //@line 377 "llex.c"
      HEAP32[(($215)>>2)]=$217; //@line 377 "llex.c"
      var $218=(($216)>>>0) > 0; //@line 377 "llex.c"
      if ($218) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 377 "llex.c"
    case 44: 
      var $220=$2; //@line 377 "llex.c"
      var $221=(($220+44)|0); //@line 377 "llex.c"
      var $222=HEAP32[(($221)>>2)]; //@line 377 "llex.c"
      var $223=(($222+4)|0); //@line 377 "llex.c"
      var $224=HEAP32[(($223)>>2)]; //@line 377 "llex.c"
      var $225=(($224+1)|0); //@line 377 "llex.c"
      HEAP32[(($223)>>2)]=$225; //@line 377 "llex.c"
      var $226=HEAPU8[($224)]; //@line 377 "llex.c"
      var $227=(($226)&255); //@line 377 "llex.c"
      var $234 = $227;__label__ = 46; break; //@line 377 "llex.c"
    case 45: 
      var $229=$2; //@line 377 "llex.c"
      var $230=(($229+44)|0); //@line 377 "llex.c"
      var $231=HEAP32[(($230)>>2)]; //@line 377 "llex.c"
      var $232=__Z9luaZ_fillP3Zio($231); //@line 377 "llex.c"
      var $234 = $232;__label__ = 46; break; //@line 377 "llex.c"
    case 46: 
      var $234; //@line 377 "llex.c"
      var $235=$2; //@line 377 "llex.c"
      var $236=(($235)|0); //@line 377 "llex.c"
      HEAP32[(($236)>>2)]=$234; //@line 377 "llex.c"
      var $237=$2; //@line 378 "llex.c"
      var $238=(($237)|0); //@line 378 "llex.c"
      var $239=HEAP32[(($238)>>2)]; //@line 378 "llex.c"
      var $240=(($239)|0)!=61; //@line 378 "llex.c"
      if ($240) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 378 "llex.c"
    case 47: 
      $1=60; //@line 378 "llex.c"
      __label__ = 106; break; //@line 378 "llex.c"
    case 48: 
      var $243=$2; //@line 379 "llex.c"
      var $244=(($243+44)|0); //@line 379 "llex.c"
      var $245=HEAP32[(($244)>>2)]; //@line 379 "llex.c"
      var $246=(($245)|0); //@line 379 "llex.c"
      var $247=HEAPU32[(($246)>>2)]; //@line 379 "llex.c"
      var $248=((($247)-(1))|0); //@line 379 "llex.c"
      HEAP32[(($246)>>2)]=$248; //@line 379 "llex.c"
      var $249=(($247)>>>0) > 0; //@line 379 "llex.c"
      if ($249) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 379 "llex.c"
    case 49: 
      var $251=$2; //@line 379 "llex.c"
      var $252=(($251+44)|0); //@line 379 "llex.c"
      var $253=HEAP32[(($252)>>2)]; //@line 379 "llex.c"
      var $254=(($253+4)|0); //@line 379 "llex.c"
      var $255=HEAP32[(($254)>>2)]; //@line 379 "llex.c"
      var $256=(($255+1)|0); //@line 379 "llex.c"
      HEAP32[(($254)>>2)]=$256; //@line 379 "llex.c"
      var $257=HEAPU8[($255)]; //@line 379 "llex.c"
      var $258=(($257)&255); //@line 379 "llex.c"
      var $265 = $258;__label__ = 51; break; //@line 379 "llex.c"
    case 50: 
      var $260=$2; //@line 379 "llex.c"
      var $261=(($260+44)|0); //@line 379 "llex.c"
      var $262=HEAP32[(($261)>>2)]; //@line 379 "llex.c"
      var $263=__Z9luaZ_fillP3Zio($262); //@line 379 "llex.c"
      var $265 = $263;__label__ = 51; break; //@line 379 "llex.c"
    case 51: 
      var $265; //@line 379 "llex.c"
      var $266=$2; //@line 379 "llex.c"
      var $267=(($266)|0); //@line 379 "llex.c"
      HEAP32[(($267)>>2)]=$265; //@line 379 "llex.c"
      $1=282; //@line 379 "llex.c"
      __label__ = 106; break; //@line 379 "llex.c"
    case 52: 
      var $269=$2; //@line 382 "llex.c"
      var $270=(($269+44)|0); //@line 382 "llex.c"
      var $271=HEAP32[(($270)>>2)]; //@line 382 "llex.c"
      var $272=(($271)|0); //@line 382 "llex.c"
      var $273=HEAPU32[(($272)>>2)]; //@line 382 "llex.c"
      var $274=((($273)-(1))|0); //@line 382 "llex.c"
      HEAP32[(($272)>>2)]=$274; //@line 382 "llex.c"
      var $275=(($273)>>>0) > 0; //@line 382 "llex.c"
      if ($275) { __label__ = 53; break; } else { __label__ = 54; break; } //@line 382 "llex.c"
    case 53: 
      var $277=$2; //@line 382 "llex.c"
      var $278=(($277+44)|0); //@line 382 "llex.c"
      var $279=HEAP32[(($278)>>2)]; //@line 382 "llex.c"
      var $280=(($279+4)|0); //@line 382 "llex.c"
      var $281=HEAP32[(($280)>>2)]; //@line 382 "llex.c"
      var $282=(($281+1)|0); //@line 382 "llex.c"
      HEAP32[(($280)>>2)]=$282; //@line 382 "llex.c"
      var $283=HEAPU8[($281)]; //@line 382 "llex.c"
      var $284=(($283)&255); //@line 382 "llex.c"
      var $291 = $284;__label__ = 55; break; //@line 382 "llex.c"
    case 54: 
      var $286=$2; //@line 382 "llex.c"
      var $287=(($286+44)|0); //@line 382 "llex.c"
      var $288=HEAP32[(($287)>>2)]; //@line 382 "llex.c"
      var $289=__Z9luaZ_fillP3Zio($288); //@line 382 "llex.c"
      var $291 = $289;__label__ = 55; break; //@line 382 "llex.c"
    case 55: 
      var $291; //@line 382 "llex.c"
      var $292=$2; //@line 382 "llex.c"
      var $293=(($292)|0); //@line 382 "llex.c"
      HEAP32[(($293)>>2)]=$291; //@line 382 "llex.c"
      var $294=$2; //@line 383 "llex.c"
      var $295=(($294)|0); //@line 383 "llex.c"
      var $296=HEAP32[(($295)>>2)]; //@line 383 "llex.c"
      var $297=(($296)|0)!=61; //@line 383 "llex.c"
      if ($297) { __label__ = 56; break; } else { __label__ = 57; break; } //@line 383 "llex.c"
    case 56: 
      $1=62; //@line 383 "llex.c"
      __label__ = 106; break; //@line 383 "llex.c"
    case 57: 
      var $300=$2; //@line 384 "llex.c"
      var $301=(($300+44)|0); //@line 384 "llex.c"
      var $302=HEAP32[(($301)>>2)]; //@line 384 "llex.c"
      var $303=(($302)|0); //@line 384 "llex.c"
      var $304=HEAPU32[(($303)>>2)]; //@line 384 "llex.c"
      var $305=((($304)-(1))|0); //@line 384 "llex.c"
      HEAP32[(($303)>>2)]=$305; //@line 384 "llex.c"
      var $306=(($304)>>>0) > 0; //@line 384 "llex.c"
      if ($306) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 384 "llex.c"
    case 58: 
      var $308=$2; //@line 384 "llex.c"
      var $309=(($308+44)|0); //@line 384 "llex.c"
      var $310=HEAP32[(($309)>>2)]; //@line 384 "llex.c"
      var $311=(($310+4)|0); //@line 384 "llex.c"
      var $312=HEAP32[(($311)>>2)]; //@line 384 "llex.c"
      var $313=(($312+1)|0); //@line 384 "llex.c"
      HEAP32[(($311)>>2)]=$313; //@line 384 "llex.c"
      var $314=HEAPU8[($312)]; //@line 384 "llex.c"
      var $315=(($314)&255); //@line 384 "llex.c"
      var $322 = $315;__label__ = 60; break; //@line 384 "llex.c"
    case 59: 
      var $317=$2; //@line 384 "llex.c"
      var $318=(($317+44)|0); //@line 384 "llex.c"
      var $319=HEAP32[(($318)>>2)]; //@line 384 "llex.c"
      var $320=__Z9luaZ_fillP3Zio($319); //@line 384 "llex.c"
      var $322 = $320;__label__ = 60; break; //@line 384 "llex.c"
    case 60: 
      var $322; //@line 384 "llex.c"
      var $323=$2; //@line 384 "llex.c"
      var $324=(($323)|0); //@line 384 "llex.c"
      HEAP32[(($324)>>2)]=$322; //@line 384 "llex.c"
      $1=281; //@line 384 "llex.c"
      __label__ = 106; break; //@line 384 "llex.c"
    case 61: 
      var $326=$2; //@line 387 "llex.c"
      var $327=(($326+44)|0); //@line 387 "llex.c"
      var $328=HEAP32[(($327)>>2)]; //@line 387 "llex.c"
      var $329=(($328)|0); //@line 387 "llex.c"
      var $330=HEAPU32[(($329)>>2)]; //@line 387 "llex.c"
      var $331=((($330)-(1))|0); //@line 387 "llex.c"
      HEAP32[(($329)>>2)]=$331; //@line 387 "llex.c"
      var $332=(($330)>>>0) > 0; //@line 387 "llex.c"
      if ($332) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 387 "llex.c"
    case 62: 
      var $334=$2; //@line 387 "llex.c"
      var $335=(($334+44)|0); //@line 387 "llex.c"
      var $336=HEAP32[(($335)>>2)]; //@line 387 "llex.c"
      var $337=(($336+4)|0); //@line 387 "llex.c"
      var $338=HEAP32[(($337)>>2)]; //@line 387 "llex.c"
      var $339=(($338+1)|0); //@line 387 "llex.c"
      HEAP32[(($337)>>2)]=$339; //@line 387 "llex.c"
      var $340=HEAPU8[($338)]; //@line 387 "llex.c"
      var $341=(($340)&255); //@line 387 "llex.c"
      var $348 = $341;__label__ = 64; break; //@line 387 "llex.c"
    case 63: 
      var $343=$2; //@line 387 "llex.c"
      var $344=(($343+44)|0); //@line 387 "llex.c"
      var $345=HEAP32[(($344)>>2)]; //@line 387 "llex.c"
      var $346=__Z9luaZ_fillP3Zio($345); //@line 387 "llex.c"
      var $348 = $346;__label__ = 64; break; //@line 387 "llex.c"
    case 64: 
      var $348; //@line 387 "llex.c"
      var $349=$2; //@line 387 "llex.c"
      var $350=(($349)|0); //@line 387 "llex.c"
      HEAP32[(($350)>>2)]=$348; //@line 387 "llex.c"
      var $351=$2; //@line 388 "llex.c"
      var $352=(($351)|0); //@line 388 "llex.c"
      var $353=HEAP32[(($352)>>2)]; //@line 388 "llex.c"
      var $354=(($353)|0)!=61; //@line 388 "llex.c"
      if ($354) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 388 "llex.c"
    case 65: 
      $1=126; //@line 388 "llex.c"
      __label__ = 106; break; //@line 388 "llex.c"
    case 66: 
      var $357=$2; //@line 389 "llex.c"
      var $358=(($357+44)|0); //@line 389 "llex.c"
      var $359=HEAP32[(($358)>>2)]; //@line 389 "llex.c"
      var $360=(($359)|0); //@line 389 "llex.c"
      var $361=HEAPU32[(($360)>>2)]; //@line 389 "llex.c"
      var $362=((($361)-(1))|0); //@line 389 "llex.c"
      HEAP32[(($360)>>2)]=$362; //@line 389 "llex.c"
      var $363=(($361)>>>0) > 0; //@line 389 "llex.c"
      if ($363) { __label__ = 67; break; } else { __label__ = 68; break; } //@line 389 "llex.c"
    case 67: 
      var $365=$2; //@line 389 "llex.c"
      var $366=(($365+44)|0); //@line 389 "llex.c"
      var $367=HEAP32[(($366)>>2)]; //@line 389 "llex.c"
      var $368=(($367+4)|0); //@line 389 "llex.c"
      var $369=HEAP32[(($368)>>2)]; //@line 389 "llex.c"
      var $370=(($369+1)|0); //@line 389 "llex.c"
      HEAP32[(($368)>>2)]=$370; //@line 389 "llex.c"
      var $371=HEAPU8[($369)]; //@line 389 "llex.c"
      var $372=(($371)&255); //@line 389 "llex.c"
      var $379 = $372;__label__ = 69; break; //@line 389 "llex.c"
    case 68: 
      var $374=$2; //@line 389 "llex.c"
      var $375=(($374+44)|0); //@line 389 "llex.c"
      var $376=HEAP32[(($375)>>2)]; //@line 389 "llex.c"
      var $377=__Z9luaZ_fillP3Zio($376); //@line 389 "llex.c"
      var $379 = $377;__label__ = 69; break; //@line 389 "llex.c"
    case 69: 
      var $379; //@line 389 "llex.c"
      var $380=$2; //@line 389 "llex.c"
      var $381=(($380)|0); //@line 389 "llex.c"
      HEAP32[(($381)>>2)]=$379; //@line 389 "llex.c"
      $1=283; //@line 389 "llex.c"
      __label__ = 106; break; //@line 389 "llex.c"
    case 70: 
      var $383=$2; //@line 393 "llex.c"
      var $384=$2; //@line 393 "llex.c"
      var $385=(($384)|0); //@line 393 "llex.c"
      var $386=HEAP32[(($385)>>2)]; //@line 393 "llex.c"
      var $387=$3; //@line 393 "llex.c"
      __Z11read_stringP8LexStateiP7SemInfo($383, $386, $387); //@line 393 "llex.c"
      $1=286; //@line 394 "llex.c"
      __label__ = 106; break; //@line 394 "llex.c"
    case 71: 
      var $389=$2; //@line 397 "llex.c"
      var $390=$2; //@line 397 "llex.c"
      var $391=(($390)|0); //@line 397 "llex.c"
      var $392=HEAP32[(($391)>>2)]; //@line 397 "llex.c"
      __Z4saveP8LexStatei($389, $392); //@line 397 "llex.c"
      var $393=$2; //@line 397 "llex.c"
      var $394=(($393+44)|0); //@line 397 "llex.c"
      var $395=HEAP32[(($394)>>2)]; //@line 397 "llex.c"
      var $396=(($395)|0); //@line 397 "llex.c"
      var $397=HEAPU32[(($396)>>2)]; //@line 397 "llex.c"
      var $398=((($397)-(1))|0); //@line 397 "llex.c"
      HEAP32[(($396)>>2)]=$398; //@line 397 "llex.c"
      var $399=(($397)>>>0) > 0; //@line 397 "llex.c"
      if ($399) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 397 "llex.c"
    case 72: 
      var $401=$2; //@line 397 "llex.c"
      var $402=(($401+44)|0); //@line 397 "llex.c"
      var $403=HEAP32[(($402)>>2)]; //@line 397 "llex.c"
      var $404=(($403+4)|0); //@line 397 "llex.c"
      var $405=HEAP32[(($404)>>2)]; //@line 397 "llex.c"
      var $406=(($405+1)|0); //@line 397 "llex.c"
      HEAP32[(($404)>>2)]=$406; //@line 397 "llex.c"
      var $407=HEAPU8[($405)]; //@line 397 "llex.c"
      var $408=(($407)&255); //@line 397 "llex.c"
      var $415 = $408;__label__ = 74; break; //@line 397 "llex.c"
    case 73: 
      var $410=$2; //@line 397 "llex.c"
      var $411=(($410+44)|0); //@line 397 "llex.c"
      var $412=HEAP32[(($411)>>2)]; //@line 397 "llex.c"
      var $413=__Z9luaZ_fillP3Zio($412); //@line 397 "llex.c"
      var $415 = $413;__label__ = 74; break; //@line 397 "llex.c"
    case 74: 
      var $415; //@line 397 "llex.c"
      var $416=$2; //@line 397 "llex.c"
      var $417=(($416)|0); //@line 397 "llex.c"
      HEAP32[(($417)>>2)]=$415; //@line 397 "llex.c"
      var $418=$2; //@line 398 "llex.c"
      var $419=__Z10check_nextP8LexStatePKc($418, ((STRING_TABLE.__str36)|0)); //@line 398 "llex.c"
      var $420=(($419)|0)!=0; //@line 398 "llex.c"
      if ($420) { __label__ = 75; break; } else { __label__ = 78; break; } //@line 398 "llex.c"
    case 75: 
      var $422=$2; //@line 399 "llex.c"
      var $423=__Z10check_nextP8LexStatePKc($422, ((STRING_TABLE.__str36)|0)); //@line 399 "llex.c"
      var $424=(($423)|0)!=0; //@line 399 "llex.c"
      if ($424) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 399 "llex.c"
    case 76: 
      $1=279; //@line 400 "llex.c"
      __label__ = 106; break; //@line 400 "llex.c"
    case 77: 
      $1=278; //@line 401 "llex.c"
      __label__ = 106; break; //@line 401 "llex.c"
    case 78: 
      var $428=$2; //@line 403 "llex.c"
      var $429=(($428)|0); //@line 403 "llex.c"
      var $430=HEAP32[(($429)>>2)]; //@line 403 "llex.c"
      var $431=_isdigit($430); //@line 403 "llex.c"
      var $432=(($431)|0)!=0; //@line 403 "llex.c"
      if ($432) { __label__ = 80; break; } else { __label__ = 79; break; } //@line 403 "llex.c"
    case 79: 
      $1=46; //@line 403 "llex.c"
      __label__ = 106; break; //@line 403 "llex.c"
    case 80: 
      var $435=$2; //@line 405 "llex.c"
      var $436=$3; //@line 405 "llex.c"
      __Z12read_numeralP8LexStateP7SemInfo($435, $436); //@line 405 "llex.c"
      $1=284; //@line 406 "llex.c"
      __label__ = 106; break; //@line 406 "llex.c"
    case 81: 
      $1=287; //@line 410 "llex.c"
      __label__ = 106; break; //@line 410 "llex.c"
    case 82: 
      var $439=$2; //@line 413 "llex.c"
      var $440=(($439)|0); //@line 413 "llex.c"
      var $441=HEAP32[(($440)>>2)]; //@line 413 "llex.c"
      var $442=_isspace($441); //@line 413 "llex.c"
      var $443=(($442)|0)!=0; //@line 413 "llex.c"
      if ($443) { __label__ = 83; break; } else { __label__ = 87; break; } //@line 413 "llex.c"
    case 83: 
      var $445=$2; //@line 415 "llex.c"
      var $446=(($445+44)|0); //@line 415 "llex.c"
      var $447=HEAP32[(($446)>>2)]; //@line 415 "llex.c"
      var $448=(($447)|0); //@line 415 "llex.c"
      var $449=HEAPU32[(($448)>>2)]; //@line 415 "llex.c"
      var $450=((($449)-(1))|0); //@line 415 "llex.c"
      HEAP32[(($448)>>2)]=$450; //@line 415 "llex.c"
      var $451=(($449)>>>0) > 0; //@line 415 "llex.c"
      if ($451) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 415 "llex.c"
    case 84: 
      var $453=$2; //@line 415 "llex.c"
      var $454=(($453+44)|0); //@line 415 "llex.c"
      var $455=HEAP32[(($454)>>2)]; //@line 415 "llex.c"
      var $456=(($455+4)|0); //@line 415 "llex.c"
      var $457=HEAP32[(($456)>>2)]; //@line 415 "llex.c"
      var $458=(($457+1)|0); //@line 415 "llex.c"
      HEAP32[(($456)>>2)]=$458; //@line 415 "llex.c"
      var $459=HEAPU8[($457)]; //@line 415 "llex.c"
      var $460=(($459)&255); //@line 415 "llex.c"
      var $467 = $460;__label__ = 86; break; //@line 415 "llex.c"
    case 85: 
      var $462=$2; //@line 415 "llex.c"
      var $463=(($462+44)|0); //@line 415 "llex.c"
      var $464=HEAP32[(($463)>>2)]; //@line 415 "llex.c"
      var $465=__Z9luaZ_fillP3Zio($464); //@line 415 "llex.c"
      var $467 = $465;__label__ = 86; break; //@line 415 "llex.c"
    case 86: 
      var $467; //@line 415 "llex.c"
      var $468=$2; //@line 415 "llex.c"
      var $469=(($468)|0); //@line 415 "llex.c"
      HEAP32[(($469)>>2)]=$467; //@line 415 "llex.c"
      __label__ = 3; break; //@line 416 "llex.c"
    case 87: 
      var $471=$2; //@line 418 "llex.c"
      var $472=(($471)|0); //@line 418 "llex.c"
      var $473=HEAP32[(($472)>>2)]; //@line 418 "llex.c"
      var $474=_isdigit($473); //@line 418 "llex.c"
      var $475=(($474)|0)!=0; //@line 418 "llex.c"
      if ($475) { __label__ = 88; break; } else { __label__ = 89; break; } //@line 418 "llex.c"
    case 88: 
      var $477=$2; //@line 419 "llex.c"
      var $478=$3; //@line 419 "llex.c"
      __Z12read_numeralP8LexStateP7SemInfo($477, $478); //@line 419 "llex.c"
      $1=284; //@line 420 "llex.c"
      __label__ = 106; break; //@line 420 "llex.c"
    case 89: 
      var $480=$2; //@line 422 "llex.c"
      var $481=(($480)|0); //@line 422 "llex.c"
      var $482=HEAP32[(($481)>>2)]; //@line 422 "llex.c"
      var $483=_isalpha($482); //@line 422 "llex.c"
      var $484=(($483)|0)!=0; //@line 422 "llex.c"
      if ($484) { __label__ = 91; break; } else { __label__ = 90; break; } //@line 422 "llex.c"
    case 90: 
      var $486=$2; //@line 422 "llex.c"
      var $487=(($486)|0); //@line 422 "llex.c"
      var $488=HEAP32[(($487)>>2)]; //@line 422 "llex.c"
      var $489=(($488)|0)==95; //@line 422 "llex.c"
      if ($489) { __label__ = 91; break; } else { __label__ = 102; break; } //@line 422 "llex.c"
    case 91: 
      __label__ = 92; break; //@line 425 "llex.c"
    case 92: 
      var $492=$2; //@line 426 "llex.c"
      var $493=$2; //@line 426 "llex.c"
      var $494=(($493)|0); //@line 426 "llex.c"
      var $495=HEAP32[(($494)>>2)]; //@line 426 "llex.c"
      __Z4saveP8LexStatei($492, $495); //@line 426 "llex.c"
      var $496=$2; //@line 426 "llex.c"
      var $497=(($496+44)|0); //@line 426 "llex.c"
      var $498=HEAP32[(($497)>>2)]; //@line 426 "llex.c"
      var $499=(($498)|0); //@line 426 "llex.c"
      var $500=HEAPU32[(($499)>>2)]; //@line 426 "llex.c"
      var $501=((($500)-(1))|0); //@line 426 "llex.c"
      HEAP32[(($499)>>2)]=$501; //@line 426 "llex.c"
      var $502=(($500)>>>0) > 0; //@line 426 "llex.c"
      if ($502) { __label__ = 93; break; } else { __label__ = 94; break; } //@line 426 "llex.c"
    case 93: 
      var $504=$2; //@line 426 "llex.c"
      var $505=(($504+44)|0); //@line 426 "llex.c"
      var $506=HEAP32[(($505)>>2)]; //@line 426 "llex.c"
      var $507=(($506+4)|0); //@line 426 "llex.c"
      var $508=HEAP32[(($507)>>2)]; //@line 426 "llex.c"
      var $509=(($508+1)|0); //@line 426 "llex.c"
      HEAP32[(($507)>>2)]=$509; //@line 426 "llex.c"
      var $510=HEAPU8[($508)]; //@line 426 "llex.c"
      var $511=(($510)&255); //@line 426 "llex.c"
      var $518 = $511;__label__ = 95; break; //@line 426 "llex.c"
    case 94: 
      var $513=$2; //@line 426 "llex.c"
      var $514=(($513+44)|0); //@line 426 "llex.c"
      var $515=HEAP32[(($514)>>2)]; //@line 426 "llex.c"
      var $516=__Z9luaZ_fillP3Zio($515); //@line 426 "llex.c"
      var $518 = $516;__label__ = 95; break; //@line 426 "llex.c"
    case 95: 
      var $518; //@line 426 "llex.c"
      var $519=$2; //@line 426 "llex.c"
      var $520=(($519)|0); //@line 426 "llex.c"
      HEAP32[(($520)>>2)]=$518; //@line 426 "llex.c"
      __label__ = 96; break; //@line 427 "llex.c"
    case 96: 
      var $522=$2; //@line 427 "llex.c"
      var $523=(($522)|0); //@line 427 "llex.c"
      var $524=HEAP32[(($523)>>2)]; //@line 427 "llex.c"
      var $525=_isalnum($524); //@line 427 "llex.c"
      var $526=(($525)|0)!=0; //@line 427 "llex.c"
      if ($526) { var $533 = 1;__label__ = 98; break; } else { __label__ = 97; break; } //@line 427 "llex.c"
    case 97: 
      var $528=$2; //@line 427 "llex.c"
      var $529=(($528)|0); //@line 427 "llex.c"
      var $530=HEAP32[(($529)>>2)]; //@line 427 "llex.c"
      var $531=(($530)|0)==95; //@line 427 "llex.c"
      var $533 = $531;__label__ = 98; break; //@line 427 "llex.c"
    case 98: 
      var $533;
      if ($533) { __label__ = 92; break; } else { __label__ = 99; break; } //@line 427 "llex.c"
    case 99: 
      var $535=$2; //@line 428 "llex.c"
      var $536=$2; //@line 428 "llex.c"
      var $537=(($536+48)|0); //@line 428 "llex.c"
      var $538=HEAP32[(($537)>>2)]; //@line 428 "llex.c"
      var $539=(($538)|0); //@line 428 "llex.c"
      var $540=HEAP32[(($539)>>2)]; //@line 428 "llex.c"
      var $541=$2; //@line 428 "llex.c"
      var $542=(($541+48)|0); //@line 428 "llex.c"
      var $543=HEAP32[(($542)>>2)]; //@line 428 "llex.c"
      var $544=(($543+4)|0); //@line 428 "llex.c"
      var $545=HEAP32[(($544)>>2)]; //@line 428 "llex.c"
      var $546=__Z14luaX_newstringP8LexStatePKcj($535, $540, $545); //@line 428 "llex.c"
      $ts=$546; //@line 428 "llex.c"
      var $547=$ts; //@line 430 "llex.c"
      var $548=$547; //@line 430 "llex.c"
      var $549=(($548+6)|0); //@line 430 "llex.c"
      var $550=HEAPU8[($549)]; //@line 430 "llex.c"
      var $551=(($550)&255); //@line 430 "llex.c"
      var $552=(($551)|0) > 0; //@line 430 "llex.c"
      if ($552) { __label__ = 100; break; } else { __label__ = 101; break; } //@line 430 "llex.c"
    case 100: 
      var $554=$ts; //@line 431 "llex.c"
      var $555=$554; //@line 431 "llex.c"
      var $556=(($555+6)|0); //@line 431 "llex.c"
      var $557=HEAPU8[($556)]; //@line 431 "llex.c"
      var $558=(($557)&255); //@line 431 "llex.c"
      var $559=((($558)-(1))|0); //@line 431 "llex.c"
      var $560=((($559)+(257))|0); //@line 431 "llex.c"
      $1=$560; //@line 431 "llex.c"
      __label__ = 106; break; //@line 431 "llex.c"
    case 101: 
      var $562=$ts; //@line 433 "llex.c"
      var $563=$3; //@line 433 "llex.c"
      var $564=$563; //@line 433 "llex.c"
      HEAP32[(($564)>>2)]=$562; //@line 433 "llex.c"
      $1=285; //@line 434 "llex.c"
      __label__ = 106; break; //@line 434 "llex.c"
    case 102: 
      var $566=$2; //@line 438 "llex.c"
      var $567=(($566)|0); //@line 438 "llex.c"
      var $568=HEAP32[(($567)>>2)]; //@line 438 "llex.c"
      $c=$568; //@line 438 "llex.c"
      var $569=$2; //@line 439 "llex.c"
      var $570=(($569+44)|0); //@line 439 "llex.c"
      var $571=HEAP32[(($570)>>2)]; //@line 439 "llex.c"
      var $572=(($571)|0); //@line 439 "llex.c"
      var $573=HEAPU32[(($572)>>2)]; //@line 439 "llex.c"
      var $574=((($573)-(1))|0); //@line 439 "llex.c"
      HEAP32[(($572)>>2)]=$574; //@line 439 "llex.c"
      var $575=(($573)>>>0) > 0; //@line 439 "llex.c"
      if ($575) { __label__ = 103; break; } else { __label__ = 104; break; } //@line 439 "llex.c"
    case 103: 
      var $577=$2; //@line 439 "llex.c"
      var $578=(($577+44)|0); //@line 439 "llex.c"
      var $579=HEAP32[(($578)>>2)]; //@line 439 "llex.c"
      var $580=(($579+4)|0); //@line 439 "llex.c"
      var $581=HEAP32[(($580)>>2)]; //@line 439 "llex.c"
      var $582=(($581+1)|0); //@line 439 "llex.c"
      HEAP32[(($580)>>2)]=$582; //@line 439 "llex.c"
      var $583=HEAPU8[($581)]; //@line 439 "llex.c"
      var $584=(($583)&255); //@line 439 "llex.c"
      var $591 = $584;__label__ = 105; break; //@line 439 "llex.c"
    case 104: 
      var $586=$2; //@line 439 "llex.c"
      var $587=(($586+44)|0); //@line 439 "llex.c"
      var $588=HEAP32[(($587)>>2)]; //@line 439 "llex.c"
      var $589=__Z9luaZ_fillP3Zio($588); //@line 439 "llex.c"
      var $591 = $589;__label__ = 105; break; //@line 439 "llex.c"
    case 105: 
      var $591; //@line 439 "llex.c"
      var $592=$2; //@line 439 "llex.c"
      var $593=(($592)|0); //@line 439 "llex.c"
      HEAP32[(($593)>>2)]=$591; //@line 439 "llex.c"
      var $594=$c; //@line 440 "llex.c"
      $1=$594; //@line 440 "llex.c"
      __label__ = 106; break; //@line 440 "llex.c"
    case 106: 
      var $596=$1; //@line 445 "llex.c"
      ;
      return $596; //@line 445 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z4llexP8LexStateP7SemInfo["X"]=1;

function __Z14luaX_lookaheadP8LexState($ls) {
  ;
  var __label__;

  var $1;
  $1=$ls;
  var $2=$1; //@line 461 "llex.c"
  var $3=$1; //@line 461 "llex.c"
  var $4=(($3+24)|0); //@line 461 "llex.c"
  var $5=(($4+4)|0); //@line 461 "llex.c"
  var $6=__Z4llexP8LexStateP7SemInfo($2, $5); //@line 461 "llex.c"
  var $7=$1; //@line 461 "llex.c"
  var $8=(($7+24)|0); //@line 461 "llex.c"
  var $9=(($8)|0); //@line 461 "llex.c"
  HEAP32[(($9)>>2)]=$6; //@line 461 "llex.c"
  ;
  return; //@line 462 "llex.c"
}


function __Z13inclinenumberP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $old;
      $1=$ls;
      var $2=$1; //@line 130 "llex.c"
      var $3=(($2)|0); //@line 130 "llex.c"
      var $4=HEAP32[(($3)>>2)]; //@line 130 "llex.c"
      $old=$4; //@line 130 "llex.c"
      var $5=$1; //@line 132 "llex.c"
      var $6=(($5+44)|0); //@line 132 "llex.c"
      var $7=HEAP32[(($6)>>2)]; //@line 132 "llex.c"
      var $8=(($7)|0); //@line 132 "llex.c"
      var $9=HEAPU32[(($8)>>2)]; //@line 132 "llex.c"
      var $10=((($9)-(1))|0); //@line 132 "llex.c"
      HEAP32[(($8)>>2)]=$10; //@line 132 "llex.c"
      var $11=(($9)>>>0) > 0; //@line 132 "llex.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 132 "llex.c"
    case 3: 
      var $13=$1; //@line 132 "llex.c"
      var $14=(($13+44)|0); //@line 132 "llex.c"
      var $15=HEAP32[(($14)>>2)]; //@line 132 "llex.c"
      var $16=(($15+4)|0); //@line 132 "llex.c"
      var $17=HEAP32[(($16)>>2)]; //@line 132 "llex.c"
      var $18=(($17+1)|0); //@line 132 "llex.c"
      HEAP32[(($16)>>2)]=$18; //@line 132 "llex.c"
      var $19=HEAPU8[($17)]; //@line 132 "llex.c"
      var $20=(($19)&255); //@line 132 "llex.c"
      var $27 = $20;__label__ = 5; break; //@line 132 "llex.c"
    case 4: 
      var $22=$1; //@line 132 "llex.c"
      var $23=(($22+44)|0); //@line 132 "llex.c"
      var $24=HEAP32[(($23)>>2)]; //@line 132 "llex.c"
      var $25=__Z9luaZ_fillP3Zio($24); //@line 132 "llex.c"
      var $27 = $25;__label__ = 5; break; //@line 132 "llex.c"
    case 5: 
      var $27; //@line 132 "llex.c"
      var $28=$1; //@line 132 "llex.c"
      var $29=(($28)|0); //@line 132 "llex.c"
      HEAP32[(($29)>>2)]=$27; //@line 132 "llex.c"
      var $30=$1; //@line 133 "llex.c"
      var $31=(($30)|0); //@line 133 "llex.c"
      var $32=HEAP32[(($31)>>2)]; //@line 133 "llex.c"
      var $33=(($32)|0)==10; //@line 133 "llex.c"
      if ($33) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 133 "llex.c"
    case 6: 
      var $35=$1; //@line 133 "llex.c"
      var $36=(($35)|0); //@line 133 "llex.c"
      var $37=HEAP32[(($36)>>2)]; //@line 133 "llex.c"
      var $38=(($37)|0)==13; //@line 133 "llex.c"
      if ($38) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 133 "llex.c"
    case 7: 
      var $40=$1; //@line 133 "llex.c"
      var $41=(($40)|0); //@line 133 "llex.c"
      var $42=HEAP32[(($41)>>2)]; //@line 133 "llex.c"
      var $43=$old; //@line 133 "llex.c"
      var $44=(($42)|0)!=(($43)|0); //@line 133 "llex.c"
      if ($44) { __label__ = 8; break; } else { __label__ = 12; break; } //@line 133 "llex.c"
    case 8: 
      var $46=$1; //@line 134 "llex.c"
      var $47=(($46+44)|0); //@line 134 "llex.c"
      var $48=HEAP32[(($47)>>2)]; //@line 134 "llex.c"
      var $49=(($48)|0); //@line 134 "llex.c"
      var $50=HEAPU32[(($49)>>2)]; //@line 134 "llex.c"
      var $51=((($50)-(1))|0); //@line 134 "llex.c"
      HEAP32[(($49)>>2)]=$51; //@line 134 "llex.c"
      var $52=(($50)>>>0) > 0; //@line 134 "llex.c"
      if ($52) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 134 "llex.c"
    case 9: 
      var $54=$1; //@line 134 "llex.c"
      var $55=(($54+44)|0); //@line 134 "llex.c"
      var $56=HEAP32[(($55)>>2)]; //@line 134 "llex.c"
      var $57=(($56+4)|0); //@line 134 "llex.c"
      var $58=HEAP32[(($57)>>2)]; //@line 134 "llex.c"
      var $59=(($58+1)|0); //@line 134 "llex.c"
      HEAP32[(($57)>>2)]=$59; //@line 134 "llex.c"
      var $60=HEAPU8[($58)]; //@line 134 "llex.c"
      var $61=(($60)&255); //@line 134 "llex.c"
      var $68 = $61;__label__ = 11; break; //@line 134 "llex.c"
    case 10: 
      var $63=$1; //@line 134 "llex.c"
      var $64=(($63+44)|0); //@line 134 "llex.c"
      var $65=HEAP32[(($64)>>2)]; //@line 134 "llex.c"
      var $66=__Z9luaZ_fillP3Zio($65); //@line 134 "llex.c"
      var $68 = $66;__label__ = 11; break; //@line 134 "llex.c"
    case 11: 
      var $68; //@line 134 "llex.c"
      var $69=$1; //@line 134 "llex.c"
      var $70=(($69)|0); //@line 134 "llex.c"
      HEAP32[(($70)>>2)]=$68; //@line 134 "llex.c"
      __label__ = 12; break; //@line 134 "llex.c"
    case 12: 
      var $72=$1; //@line 135 "llex.c"
      var $73=(($72+4)|0); //@line 135 "llex.c"
      var $74=HEAP32[(($73)>>2)]; //@line 135 "llex.c"
      var $75=((($74)+(1))|0); //@line 135 "llex.c"
      HEAP32[(($73)>>2)]=$75; //@line 135 "llex.c"
      var $76=(($75)|0) >= 2147483645; //@line 135 "llex.c"
      if ($76) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 135 "llex.c"
    case 13: 
      var $78=$1; //@line 136 "llex.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($78, ((STRING_TABLE.__str46)|0)); //@line 136 "llex.c"
      __label__ = 14; break; //@line 136 "llex.c"
    case 14: 
      ;
      return; //@line 137 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13inclinenumberP8LexState["X"]=1;

function __Z8skip_sepP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $count;
      var $s;
      $1=$ls;
      $count=0; //@line 211 "llex.c"
      var $2=$1; //@line 212 "llex.c"
      var $3=(($2)|0); //@line 212 "llex.c"
      var $4=HEAP32[(($3)>>2)]; //@line 212 "llex.c"
      $s=$4; //@line 212 "llex.c"
      var $5=$1; //@line 214 "llex.c"
      var $6=$1; //@line 214 "llex.c"
      var $7=(($6)|0); //@line 214 "llex.c"
      var $8=HEAP32[(($7)>>2)]; //@line 214 "llex.c"
      __Z4saveP8LexStatei($5, $8); //@line 214 "llex.c"
      var $9=$1; //@line 214 "llex.c"
      var $10=(($9+44)|0); //@line 214 "llex.c"
      var $11=HEAP32[(($10)>>2)]; //@line 214 "llex.c"
      var $12=(($11)|0); //@line 214 "llex.c"
      var $13=HEAPU32[(($12)>>2)]; //@line 214 "llex.c"
      var $14=((($13)-(1))|0); //@line 214 "llex.c"
      HEAP32[(($12)>>2)]=$14; //@line 214 "llex.c"
      var $15=(($13)>>>0) > 0; //@line 214 "llex.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 214 "llex.c"
    case 3: 
      var $17=$1; //@line 214 "llex.c"
      var $18=(($17+44)|0); //@line 214 "llex.c"
      var $19=HEAP32[(($18)>>2)]; //@line 214 "llex.c"
      var $20=(($19+4)|0); //@line 214 "llex.c"
      var $21=HEAP32[(($20)>>2)]; //@line 214 "llex.c"
      var $22=(($21+1)|0); //@line 214 "llex.c"
      HEAP32[(($20)>>2)]=$22; //@line 214 "llex.c"
      var $23=HEAPU8[($21)]; //@line 214 "llex.c"
      var $24=(($23)&255); //@line 214 "llex.c"
      var $31 = $24;__label__ = 5; break; //@line 214 "llex.c"
    case 4: 
      var $26=$1; //@line 214 "llex.c"
      var $27=(($26+44)|0); //@line 214 "llex.c"
      var $28=HEAP32[(($27)>>2)]; //@line 214 "llex.c"
      var $29=__Z9luaZ_fillP3Zio($28); //@line 214 "llex.c"
      var $31 = $29;__label__ = 5; break; //@line 214 "llex.c"
    case 5: 
      var $31; //@line 214 "llex.c"
      var $32=$1; //@line 214 "llex.c"
      var $33=(($32)|0); //@line 214 "llex.c"
      HEAP32[(($33)>>2)]=$31; //@line 214 "llex.c"
      __label__ = 6; break; //@line 215 "llex.c"
    case 6: 
      var $35=$1; //@line 215 "llex.c"
      var $36=(($35)|0); //@line 215 "llex.c"
      var $37=HEAP32[(($36)>>2)]; //@line 215 "llex.c"
      var $38=(($37)|0)==61; //@line 215 "llex.c"
      if ($38) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 215 "llex.c"
    case 7: 
      var $40=$1; //@line 216 "llex.c"
      var $41=$1; //@line 216 "llex.c"
      var $42=(($41)|0); //@line 216 "llex.c"
      var $43=HEAP32[(($42)>>2)]; //@line 216 "llex.c"
      __Z4saveP8LexStatei($40, $43); //@line 216 "llex.c"
      var $44=$1; //@line 216 "llex.c"
      var $45=(($44+44)|0); //@line 216 "llex.c"
      var $46=HEAP32[(($45)>>2)]; //@line 216 "llex.c"
      var $47=(($46)|0); //@line 216 "llex.c"
      var $48=HEAPU32[(($47)>>2)]; //@line 216 "llex.c"
      var $49=((($48)-(1))|0); //@line 216 "llex.c"
      HEAP32[(($47)>>2)]=$49; //@line 216 "llex.c"
      var $50=(($48)>>>0) > 0; //@line 216 "llex.c"
      if ($50) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 216 "llex.c"
    case 8: 
      var $52=$1; //@line 216 "llex.c"
      var $53=(($52+44)|0); //@line 216 "llex.c"
      var $54=HEAP32[(($53)>>2)]; //@line 216 "llex.c"
      var $55=(($54+4)|0); //@line 216 "llex.c"
      var $56=HEAP32[(($55)>>2)]; //@line 216 "llex.c"
      var $57=(($56+1)|0); //@line 216 "llex.c"
      HEAP32[(($55)>>2)]=$57; //@line 216 "llex.c"
      var $58=HEAPU8[($56)]; //@line 216 "llex.c"
      var $59=(($58)&255); //@line 216 "llex.c"
      var $66 = $59;__label__ = 10; break; //@line 216 "llex.c"
    case 9: 
      var $61=$1; //@line 216 "llex.c"
      var $62=(($61+44)|0); //@line 216 "llex.c"
      var $63=HEAP32[(($62)>>2)]; //@line 216 "llex.c"
      var $64=__Z9luaZ_fillP3Zio($63); //@line 216 "llex.c"
      var $66 = $64;__label__ = 10; break; //@line 216 "llex.c"
    case 10: 
      var $66; //@line 216 "llex.c"
      var $67=$1; //@line 216 "llex.c"
      var $68=(($67)|0); //@line 216 "llex.c"
      HEAP32[(($68)>>2)]=$66; //@line 216 "llex.c"
      var $69=$count; //@line 217 "llex.c"
      var $70=((($69)+(1))|0); //@line 217 "llex.c"
      $count=$70; //@line 217 "llex.c"
      __label__ = 6; break; //@line 218 "llex.c"
    case 11: 
      var $72=$1; //@line 219 "llex.c"
      var $73=(($72)|0); //@line 219 "llex.c"
      var $74=HEAP32[(($73)>>2)]; //@line 219 "llex.c"
      var $75=$s; //@line 219 "llex.c"
      var $76=(($74)|0)==(($75)|0); //@line 219 "llex.c"
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 219 "llex.c"
    case 12: 
      var $78=$count; //@line 219 "llex.c"
      var $84 = $78;__label__ = 14; break; //@line 219 "llex.c"
    case 13: 
      var $80=$count; //@line 219 "llex.c"
      var $81=(((-$80))|0); //@line 219 "llex.c"
      var $82=((($81)-(1))|0); //@line 219 "llex.c"
      var $84 = $82;__label__ = 14; break; //@line 219 "llex.c"
    case 14: 
      var $84; //@line 219 "llex.c"
      ;
      return $84; //@line 219 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8skip_sepP8LexState["X"]=1;

function __Z16read_long_stringP8LexStateP7SemInfoi($ls, $seminfo, $sep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $cont;
      $1=$ls;
      $2=$seminfo;
      $3=$sep;
      $cont=0; //@line 224 "llex.c"
      var $4=$1; //@line 226 "llex.c"
      var $5=$1; //@line 226 "llex.c"
      var $6=(($5)|0); //@line 226 "llex.c"
      var $7=HEAP32[(($6)>>2)]; //@line 226 "llex.c"
      __Z4saveP8LexStatei($4, $7); //@line 226 "llex.c"
      var $8=$1; //@line 226 "llex.c"
      var $9=(($8+44)|0); //@line 226 "llex.c"
      var $10=HEAP32[(($9)>>2)]; //@line 226 "llex.c"
      var $11=(($10)|0); //@line 226 "llex.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 226 "llex.c"
      var $13=((($12)-(1))|0); //@line 226 "llex.c"
      HEAP32[(($11)>>2)]=$13; //@line 226 "llex.c"
      var $14=(($12)>>>0) > 0; //@line 226 "llex.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 226 "llex.c"
    case 3: 
      var $16=$1; //@line 226 "llex.c"
      var $17=(($16+44)|0); //@line 226 "llex.c"
      var $18=HEAP32[(($17)>>2)]; //@line 226 "llex.c"
      var $19=(($18+4)|0); //@line 226 "llex.c"
      var $20=HEAP32[(($19)>>2)]; //@line 226 "llex.c"
      var $21=(($20+1)|0); //@line 226 "llex.c"
      HEAP32[(($19)>>2)]=$21; //@line 226 "llex.c"
      var $22=HEAPU8[($20)]; //@line 226 "llex.c"
      var $23=(($22)&255); //@line 226 "llex.c"
      var $30 = $23;__label__ = 5; break; //@line 226 "llex.c"
    case 4: 
      var $25=$1; //@line 226 "llex.c"
      var $26=(($25+44)|0); //@line 226 "llex.c"
      var $27=HEAP32[(($26)>>2)]; //@line 226 "llex.c"
      var $28=__Z9luaZ_fillP3Zio($27); //@line 226 "llex.c"
      var $30 = $28;__label__ = 5; break; //@line 226 "llex.c"
    case 5: 
      var $30; //@line 226 "llex.c"
      var $31=$1; //@line 226 "llex.c"
      var $32=(($31)|0); //@line 226 "llex.c"
      HEAP32[(($32)>>2)]=$30; //@line 226 "llex.c"
      var $33=$1; //@line 227 "llex.c"
      var $34=(($33)|0); //@line 227 "llex.c"
      var $35=HEAP32[(($34)>>2)]; //@line 227 "llex.c"
      var $36=(($35)|0)==10; //@line 227 "llex.c"
      if ($36) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 227 "llex.c"
    case 6: 
      var $38=$1; //@line 227 "llex.c"
      var $39=(($38)|0); //@line 227 "llex.c"
      var $40=HEAP32[(($39)>>2)]; //@line 227 "llex.c"
      var $41=(($40)|0)==13; //@line 227 "llex.c"
      if ($41) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 227 "llex.c"
    case 7: 
      var $43=$1; //@line 228 "llex.c"
      __Z13inclinenumberP8LexState($43); //@line 228 "llex.c"
      __label__ = 8; break; //@line 228 "llex.c"
    case 8: 
      __label__ = 9; break; //@line 229 "llex.c"
    case 9: 
      var $46=$1; //@line 230 "llex.c"
      var $47=(($46)|0); //@line 230 "llex.c"
      var $48=HEAP32[(($47)>>2)]; //@line 230 "llex.c"
      if ((($48)|0) == -1) {
        __label__ = 10; break;
      }
      else if ((($48)|0) == 91) {
        __label__ = 14; break;
      }
      else if ((($48)|0) == 93) {
        __label__ = 22; break;
      }
      else if ((($48)|0) == 10 || (($48)|0) == 13) {
        __label__ = 28; break;
      }
      else {
      __label__ = 31; break;
      }
      
    case 10: 
      var $50=$1; //@line 232 "llex.c"
      var $51=$2; //@line 232 "llex.c"
      var $52=(($51)|0)!=0; //@line 232 "llex.c"
      if ($52) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 232 "llex.c"
    case 11: 
      var $56 = ((STRING_TABLE.__str43)|0);__label__ = 13; break; //@line 232 "llex.c"
    case 12: 
      var $56 = ((STRING_TABLE.__str44)|0);__label__ = 13; break; //@line 232 "llex.c"
    case 13: 
      var $56; //@line 232 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($50, $56, 287); //@line 232 "llex.c"
      __label__ = 41; break; //@line 234 "llex.c"
    case 14: 
      var $58=$1; //@line 237 "llex.c"
      var $59=__Z8skip_sepP8LexState($58); //@line 237 "llex.c"
      var $60=$3; //@line 237 "llex.c"
      var $61=(($59)|0)==(($60)|0); //@line 237 "llex.c"
      if ($61) { __label__ = 15; break; } else { __label__ = 21; break; } //@line 237 "llex.c"
    case 15: 
      var $63=$1; //@line 238 "llex.c"
      var $64=$1; //@line 238 "llex.c"
      var $65=(($64)|0); //@line 238 "llex.c"
      var $66=HEAP32[(($65)>>2)]; //@line 238 "llex.c"
      __Z4saveP8LexStatei($63, $66); //@line 238 "llex.c"
      var $67=$1; //@line 238 "llex.c"
      var $68=(($67+44)|0); //@line 238 "llex.c"
      var $69=HEAP32[(($68)>>2)]; //@line 238 "llex.c"
      var $70=(($69)|0); //@line 238 "llex.c"
      var $71=HEAPU32[(($70)>>2)]; //@line 238 "llex.c"
      var $72=((($71)-(1))|0); //@line 238 "llex.c"
      HEAP32[(($70)>>2)]=$72; //@line 238 "llex.c"
      var $73=(($71)>>>0) > 0; //@line 238 "llex.c"
      if ($73) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 238 "llex.c"
    case 16: 
      var $75=$1; //@line 238 "llex.c"
      var $76=(($75+44)|0); //@line 238 "llex.c"
      var $77=HEAP32[(($76)>>2)]; //@line 238 "llex.c"
      var $78=(($77+4)|0); //@line 238 "llex.c"
      var $79=HEAP32[(($78)>>2)]; //@line 238 "llex.c"
      var $80=(($79+1)|0); //@line 238 "llex.c"
      HEAP32[(($78)>>2)]=$80; //@line 238 "llex.c"
      var $81=HEAPU8[($79)]; //@line 238 "llex.c"
      var $82=(($81)&255); //@line 238 "llex.c"
      var $89 = $82;__label__ = 18; break; //@line 238 "llex.c"
    case 17: 
      var $84=$1; //@line 238 "llex.c"
      var $85=(($84+44)|0); //@line 238 "llex.c"
      var $86=HEAP32[(($85)>>2)]; //@line 238 "llex.c"
      var $87=__Z9luaZ_fillP3Zio($86); //@line 238 "llex.c"
      var $89 = $87;__label__ = 18; break; //@line 238 "llex.c"
    case 18: 
      var $89; //@line 238 "llex.c"
      var $90=$1; //@line 238 "llex.c"
      var $91=(($90)|0); //@line 238 "llex.c"
      HEAP32[(($91)>>2)]=$89; //@line 238 "llex.c"
      var $92=$cont; //@line 239 "llex.c"
      var $93=((($92)+(1))|0); //@line 239 "llex.c"
      $cont=$93; //@line 239 "llex.c"
      var $94=$3; //@line 241 "llex.c"
      var $95=(($94)|0)==0; //@line 241 "llex.c"
      if ($95) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 241 "llex.c"
    case 19: 
      var $97=$1; //@line 242 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($97, ((STRING_TABLE.__str45)|0), 91); //@line 242 "llex.c"
      __label__ = 20; break; //@line 242 "llex.c"
    case 20: 
      __label__ = 21; break; //@line 244 "llex.c"
    case 21: 
      __label__ = 41; break; //@line 245 "llex.c"
    case 22: 
      var $101=$1; //@line 249 "llex.c"
      var $102=__Z8skip_sepP8LexState($101); //@line 249 "llex.c"
      var $103=$3; //@line 249 "llex.c"
      var $104=(($102)|0)==(($103)|0); //@line 249 "llex.c"
      if ($104) { __label__ = 23; break; } else { __label__ = 27; break; } //@line 249 "llex.c"
    case 23: 
      var $106=$1; //@line 250 "llex.c"
      var $107=$1; //@line 250 "llex.c"
      var $108=(($107)|0); //@line 250 "llex.c"
      var $109=HEAP32[(($108)>>2)]; //@line 250 "llex.c"
      __Z4saveP8LexStatei($106, $109); //@line 250 "llex.c"
      var $110=$1; //@line 250 "llex.c"
      var $111=(($110+44)|0); //@line 250 "llex.c"
      var $112=HEAP32[(($111)>>2)]; //@line 250 "llex.c"
      var $113=(($112)|0); //@line 250 "llex.c"
      var $114=HEAPU32[(($113)>>2)]; //@line 250 "llex.c"
      var $115=((($114)-(1))|0); //@line 250 "llex.c"
      HEAP32[(($113)>>2)]=$115; //@line 250 "llex.c"
      var $116=(($114)>>>0) > 0; //@line 250 "llex.c"
      if ($116) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 250 "llex.c"
    case 24: 
      var $118=$1; //@line 250 "llex.c"
      var $119=(($118+44)|0); //@line 250 "llex.c"
      var $120=HEAP32[(($119)>>2)]; //@line 250 "llex.c"
      var $121=(($120+4)|0); //@line 250 "llex.c"
      var $122=HEAP32[(($121)>>2)]; //@line 250 "llex.c"
      var $123=(($122+1)|0); //@line 250 "llex.c"
      HEAP32[(($121)>>2)]=$123; //@line 250 "llex.c"
      var $124=HEAPU8[($122)]; //@line 250 "llex.c"
      var $125=(($124)&255); //@line 250 "llex.c"
      var $132 = $125;__label__ = 26; break; //@line 250 "llex.c"
    case 25: 
      var $127=$1; //@line 250 "llex.c"
      var $128=(($127+44)|0); //@line 250 "llex.c"
      var $129=HEAP32[(($128)>>2)]; //@line 250 "llex.c"
      var $130=__Z9luaZ_fillP3Zio($129); //@line 250 "llex.c"
      var $132 = $130;__label__ = 26; break; //@line 250 "llex.c"
    case 26: 
      var $132; //@line 250 "llex.c"
      var $133=$1; //@line 250 "llex.c"
      var $134=(($133)|0); //@line 250 "llex.c"
      HEAP32[(($134)>>2)]=$132; //@line 250 "llex.c"
      __label__ = 42; break; //@line 255 "llex.c"
    case 27: 
      __label__ = 41; break; //@line 257 "llex.c"
    case 28: 
      var $137=$1; //@line 261 "llex.c"
      __Z4saveP8LexStatei($137, 10); //@line 261 "llex.c"
      var $138=$1; //@line 262 "llex.c"
      __Z13inclinenumberP8LexState($138); //@line 262 "llex.c"
      var $139=$2; //@line 263 "llex.c"
      var $140=(($139)|0)!=0; //@line 263 "llex.c"
      if ($140) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 263 "llex.c"
    case 29: 
      var $142=$1; //@line 263 "llex.c"
      var $143=(($142+48)|0); //@line 263 "llex.c"
      var $144=HEAP32[(($143)>>2)]; //@line 263 "llex.c"
      var $145=(($144+4)|0); //@line 263 "llex.c"
      HEAP32[(($145)>>2)]=0; //@line 263 "llex.c"
      __label__ = 30; break; //@line 263 "llex.c"
    case 30: 
      __label__ = 41; break; //@line 264 "llex.c"
    case 31: 
      var $148=$2; //@line 267 "llex.c"
      var $149=(($148)|0)!=0; //@line 267 "llex.c"
      if ($149) { __label__ = 32; break; } else { __label__ = 36; break; } //@line 267 "llex.c"
    case 32: 
      var $151=$1; //@line 267 "llex.c"
      var $152=$1; //@line 267 "llex.c"
      var $153=(($152)|0); //@line 267 "llex.c"
      var $154=HEAP32[(($153)>>2)]; //@line 267 "llex.c"
      __Z4saveP8LexStatei($151, $154); //@line 267 "llex.c"
      var $155=$1; //@line 267 "llex.c"
      var $156=(($155+44)|0); //@line 267 "llex.c"
      var $157=HEAP32[(($156)>>2)]; //@line 267 "llex.c"
      var $158=(($157)|0); //@line 267 "llex.c"
      var $159=HEAPU32[(($158)>>2)]; //@line 267 "llex.c"
      var $160=((($159)-(1))|0); //@line 267 "llex.c"
      HEAP32[(($158)>>2)]=$160; //@line 267 "llex.c"
      var $161=(($159)>>>0) > 0; //@line 267 "llex.c"
      if ($161) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 267 "llex.c"
    case 33: 
      var $163=$1; //@line 267 "llex.c"
      var $164=(($163+44)|0); //@line 267 "llex.c"
      var $165=HEAP32[(($164)>>2)]; //@line 267 "llex.c"
      var $166=(($165+4)|0); //@line 267 "llex.c"
      var $167=HEAP32[(($166)>>2)]; //@line 267 "llex.c"
      var $168=(($167+1)|0); //@line 267 "llex.c"
      HEAP32[(($166)>>2)]=$168; //@line 267 "llex.c"
      var $169=HEAPU8[($167)]; //@line 267 "llex.c"
      var $170=(($169)&255); //@line 267 "llex.c"
      var $177 = $170;__label__ = 35; break; //@line 267 "llex.c"
    case 34: 
      var $172=$1; //@line 267 "llex.c"
      var $173=(($172+44)|0); //@line 267 "llex.c"
      var $174=HEAP32[(($173)>>2)]; //@line 267 "llex.c"
      var $175=__Z9luaZ_fillP3Zio($174); //@line 267 "llex.c"
      var $177 = $175;__label__ = 35; break; //@line 267 "llex.c"
    case 35: 
      var $177; //@line 267 "llex.c"
      var $178=$1; //@line 267 "llex.c"
      var $179=(($178)|0); //@line 267 "llex.c"
      HEAP32[(($179)>>2)]=$177; //@line 267 "llex.c"
      __label__ = 40; break; //@line 267 "llex.c"
    case 36: 
      var $181=$1; //@line 268 "llex.c"
      var $182=(($181+44)|0); //@line 268 "llex.c"
      var $183=HEAP32[(($182)>>2)]; //@line 268 "llex.c"
      var $184=(($183)|0); //@line 268 "llex.c"
      var $185=HEAPU32[(($184)>>2)]; //@line 268 "llex.c"
      var $186=((($185)-(1))|0); //@line 268 "llex.c"
      HEAP32[(($184)>>2)]=$186; //@line 268 "llex.c"
      var $187=(($185)>>>0) > 0; //@line 268 "llex.c"
      if ($187) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 268 "llex.c"
    case 37: 
      var $189=$1; //@line 268 "llex.c"
      var $190=(($189+44)|0); //@line 268 "llex.c"
      var $191=HEAP32[(($190)>>2)]; //@line 268 "llex.c"
      var $192=(($191+4)|0); //@line 268 "llex.c"
      var $193=HEAP32[(($192)>>2)]; //@line 268 "llex.c"
      var $194=(($193+1)|0); //@line 268 "llex.c"
      HEAP32[(($192)>>2)]=$194; //@line 268 "llex.c"
      var $195=HEAPU8[($193)]; //@line 268 "llex.c"
      var $196=(($195)&255); //@line 268 "llex.c"
      var $203 = $196;__label__ = 39; break; //@line 268 "llex.c"
    case 38: 
      var $198=$1; //@line 268 "llex.c"
      var $199=(($198+44)|0); //@line 268 "llex.c"
      var $200=HEAP32[(($199)>>2)]; //@line 268 "llex.c"
      var $201=__Z9luaZ_fillP3Zio($200); //@line 268 "llex.c"
      var $203 = $201;__label__ = 39; break; //@line 268 "llex.c"
    case 39: 
      var $203; //@line 268 "llex.c"
      var $204=$1; //@line 268 "llex.c"
      var $205=(($204)|0); //@line 268 "llex.c"
      HEAP32[(($205)>>2)]=$203; //@line 268 "llex.c"
      __label__ = 40; break; //@line 268 "llex.c"
    case 40: 
      __label__ = 41; break; //@line 270 "llex.c"
    case 41: 
      __label__ = 9; break; //@line 271 "llex.c"
    case 42: 
      var $209=$2; //@line 272 "llex.c"
      var $210=(($209)|0)!=0; //@line 272 "llex.c"
      if ($210) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 272 "llex.c"
    case 43: 
      var $212=$1; //@line 273 "llex.c"
      var $213=$1; //@line 273 "llex.c"
      var $214=(($213+48)|0); //@line 273 "llex.c"
      var $215=HEAP32[(($214)>>2)]; //@line 273 "llex.c"
      var $216=(($215)|0); //@line 273 "llex.c"
      var $217=HEAP32[(($216)>>2)]; //@line 273 "llex.c"
      var $218=$3; //@line 273 "llex.c"
      var $219=((($218)+(2))|0); //@line 273 "llex.c"
      var $220=(($217+$219)|0); //@line 273 "llex.c"
      var $221=$1; //@line 273 "llex.c"
      var $222=(($221+48)|0); //@line 273 "llex.c"
      var $223=HEAP32[(($222)>>2)]; //@line 273 "llex.c"
      var $224=(($223+4)|0); //@line 273 "llex.c"
      var $225=HEAP32[(($224)>>2)]; //@line 273 "llex.c"
      var $226=$3; //@line 273 "llex.c"
      var $227=((($226)+(2))|0); //@line 273 "llex.c"
      var $228=((($227<<1))|0); //@line 273 "llex.c"
      var $229=((($225)-($228))|0); //@line 273 "llex.c"
      var $230=__Z14luaX_newstringP8LexStatePKcj($212, $220, $229); //@line 273 "llex.c"
      var $231=$2; //@line 273 "llex.c"
      var $232=$231; //@line 273 "llex.c"
      HEAP32[(($232)>>2)]=$230; //@line 273 "llex.c"
      __label__ = 44; break; //@line 273 "llex.c"
    case 44: 
      ;
      return; //@line 275 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z16read_long_stringP8LexStateP7SemInfoi["X"]=1;

function __Z11buffreplaceP8LexStatecc($ls, $from, $to) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $p;
      $1=$ls;
      $2=$from;
      $3=$to;
      var $4=$1; //@line 172 "llex.c"
      var $5=(($4+48)|0); //@line 172 "llex.c"
      var $6=HEAP32[(($5)>>2)]; //@line 172 "llex.c"
      var $7=(($6+4)|0); //@line 172 "llex.c"
      var $8=HEAP32[(($7)>>2)]; //@line 172 "llex.c"
      $n=$8; //@line 172 "llex.c"
      var $9=$1; //@line 173 "llex.c"
      var $10=(($9+48)|0); //@line 173 "llex.c"
      var $11=HEAP32[(($10)>>2)]; //@line 173 "llex.c"
      var $12=(($11)|0); //@line 173 "llex.c"
      var $13=HEAP32[(($12)>>2)]; //@line 173 "llex.c"
      $p=$13; //@line 173 "llex.c"
      __label__ = 3; break; //@line 174 "llex.c"
    case 3: 
      var $15=$n; //@line 174 "llex.c"
      var $16=((($15)-(1))|0); //@line 174 "llex.c"
      $n=$16; //@line 174 "llex.c"
      var $17=(($15)|0)!=0; //@line 174 "llex.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 174 "llex.c"
    case 4: 
      var $19=$n; //@line 175 "llex.c"
      var $20=$p; //@line 175 "llex.c"
      var $21=(($20+$19)|0); //@line 175 "llex.c"
      var $22=HEAP8[($21)]; //@line 175 "llex.c"
      var $23=(($22 << 24) >> 24); //@line 175 "llex.c"
      var $24=$2; //@line 175 "llex.c"
      var $25=(($24 << 24) >> 24); //@line 175 "llex.c"
      var $26=(($23)|0)==(($25)|0); //@line 175 "llex.c"
      if ($26) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 175 "llex.c"
    case 5: 
      var $28=$3; //@line 175 "llex.c"
      var $29=$n; //@line 175 "llex.c"
      var $30=$p; //@line 175 "llex.c"
      var $31=(($30+$29)|0); //@line 175 "llex.c"
      HEAP8[($31)]=$28; //@line 175 "llex.c"
      __label__ = 6; break; //@line 175 "llex.c"
    case 6: 
      __label__ = 3; break; //@line 175 "llex.c"
    case 7: 
      ;
      return; //@line 176 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11read_stringP8LexStateiP7SemInfo($ls, $del, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $c;
      var $i;
      $1=$ls;
      $2=$del;
      $3=$seminfo;
      var $4=$1; //@line 279 "llex.c"
      var $5=$1; //@line 279 "llex.c"
      var $6=(($5)|0); //@line 279 "llex.c"
      var $7=HEAP32[(($6)>>2)]; //@line 279 "llex.c"
      __Z4saveP8LexStatei($4, $7); //@line 279 "llex.c"
      var $8=$1; //@line 279 "llex.c"
      var $9=(($8+44)|0); //@line 279 "llex.c"
      var $10=HEAP32[(($9)>>2)]; //@line 279 "llex.c"
      var $11=(($10)|0); //@line 279 "llex.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 279 "llex.c"
      var $13=((($12)-(1))|0); //@line 279 "llex.c"
      HEAP32[(($11)>>2)]=$13; //@line 279 "llex.c"
      var $14=(($12)>>>0) > 0; //@line 279 "llex.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 279 "llex.c"
    case 3: 
      var $16=$1; //@line 279 "llex.c"
      var $17=(($16+44)|0); //@line 279 "llex.c"
      var $18=HEAP32[(($17)>>2)]; //@line 279 "llex.c"
      var $19=(($18+4)|0); //@line 279 "llex.c"
      var $20=HEAP32[(($19)>>2)]; //@line 279 "llex.c"
      var $21=(($20+1)|0); //@line 279 "llex.c"
      HEAP32[(($19)>>2)]=$21; //@line 279 "llex.c"
      var $22=HEAPU8[($20)]; //@line 279 "llex.c"
      var $23=(($22)&255); //@line 279 "llex.c"
      var $30 = $23;__label__ = 5; break; //@line 279 "llex.c"
    case 4: 
      var $25=$1; //@line 279 "llex.c"
      var $26=(($25+44)|0); //@line 279 "llex.c"
      var $27=HEAP32[(($26)>>2)]; //@line 279 "llex.c"
      var $28=__Z9luaZ_fillP3Zio($27); //@line 279 "llex.c"
      var $30 = $28;__label__ = 5; break; //@line 279 "llex.c"
    case 5: 
      var $30; //@line 279 "llex.c"
      var $31=$1; //@line 279 "llex.c"
      var $32=(($31)|0); //@line 279 "llex.c"
      HEAP32[(($32)>>2)]=$30; //@line 279 "llex.c"
      __label__ = 6; break; //@line 280 "llex.c"
    case 6: 
      var $34=$1; //@line 280 "llex.c"
      var $35=(($34)|0); //@line 280 "llex.c"
      var $36=HEAP32[(($35)>>2)]; //@line 280 "llex.c"
      var $37=$2; //@line 280 "llex.c"
      var $38=(($36)|0)!=(($37)|0); //@line 280 "llex.c"
      if ($38) { __label__ = 7; break; } else { __label__ = 49; break; } //@line 280 "llex.c"
    case 7: 
      var $40=$1; //@line 281 "llex.c"
      var $41=(($40)|0); //@line 281 "llex.c"
      var $42=HEAP32[(($41)>>2)]; //@line 281 "llex.c"
      if ((($42)|0) == -1) {
        __label__ = 8; break;
      }
      else if ((($42)|0) == 10 || (($42)|0) == 13) {
        __label__ = 9; break;
      }
      else if ((($42)|0) == 92) {
        __label__ = 10; break;
      }
      else {
      __label__ = 44; break;
      }
      
    case 8: 
      var $44=$1; //@line 283 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($44, ((STRING_TABLE.__str41)|0), 287); //@line 283 "llex.c"
      __label__ = 6; break; //@line 284 "llex.c"
    case 9: 
      var $46=$1; //@line 287 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($46, ((STRING_TABLE.__str41)|0), 286); //@line 287 "llex.c"
      __label__ = 6; break; //@line 288 "llex.c"
    case 10: 
      var $48=$1; //@line 291 "llex.c"
      var $49=(($48+44)|0); //@line 291 "llex.c"
      var $50=HEAP32[(($49)>>2)]; //@line 291 "llex.c"
      var $51=(($50)|0); //@line 291 "llex.c"
      var $52=HEAPU32[(($51)>>2)]; //@line 291 "llex.c"
      var $53=((($52)-(1))|0); //@line 291 "llex.c"
      HEAP32[(($51)>>2)]=$53; //@line 291 "llex.c"
      var $54=(($52)>>>0) > 0; //@line 291 "llex.c"
      if ($54) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 291 "llex.c"
    case 11: 
      var $56=$1; //@line 291 "llex.c"
      var $57=(($56+44)|0); //@line 291 "llex.c"
      var $58=HEAP32[(($57)>>2)]; //@line 291 "llex.c"
      var $59=(($58+4)|0); //@line 291 "llex.c"
      var $60=HEAP32[(($59)>>2)]; //@line 291 "llex.c"
      var $61=(($60+1)|0); //@line 291 "llex.c"
      HEAP32[(($59)>>2)]=$61; //@line 291 "llex.c"
      var $62=HEAPU8[($60)]; //@line 291 "llex.c"
      var $63=(($62)&255); //@line 291 "llex.c"
      var $70 = $63;__label__ = 13; break; //@line 291 "llex.c"
    case 12: 
      var $65=$1; //@line 291 "llex.c"
      var $66=(($65+44)|0); //@line 291 "llex.c"
      var $67=HEAP32[(($66)>>2)]; //@line 291 "llex.c"
      var $68=__Z9luaZ_fillP3Zio($67); //@line 291 "llex.c"
      var $70 = $68;__label__ = 13; break; //@line 291 "llex.c"
    case 13: 
      var $70; //@line 291 "llex.c"
      var $71=$1; //@line 291 "llex.c"
      var $72=(($71)|0); //@line 291 "llex.c"
      HEAP32[(($72)>>2)]=$70; //@line 291 "llex.c"
      var $73=$1; //@line 292 "llex.c"
      var $74=(($73)|0); //@line 292 "llex.c"
      var $75=HEAP32[(($74)>>2)]; //@line 292 "llex.c"
      if ((($75)|0) == 97) {
        __label__ = 14; break;
      }
      else if ((($75)|0) == 98) {
        __label__ = 15; break;
      }
      else if ((($75)|0) == 102) {
        __label__ = 16; break;
      }
      else if ((($75)|0) == 110) {
        __label__ = 17; break;
      }
      else if ((($75)|0) == 114) {
        __label__ = 18; break;
      }
      else if ((($75)|0) == 116) {
        __label__ = 19; break;
      }
      else if ((($75)|0) == 118) {
        __label__ = 20; break;
      }
      else if ((($75)|0) == 10 || (($75)|0) == 13) {
        __label__ = 21; break;
      }
      else if ((($75)|0) == -1) {
        __label__ = 22; break;
      }
      else {
      __label__ = 23; break;
      }
      
    case 14: 
      $c=7; //@line 293 "llex.c"
      __label__ = 40; break; //@line 293 "llex.c"
    case 15: 
      $c=8; //@line 294 "llex.c"
      __label__ = 40; break; //@line 294 "llex.c"
    case 16: 
      $c=12; //@line 295 "llex.c"
      __label__ = 40; break; //@line 295 "llex.c"
    case 17: 
      $c=10; //@line 296 "llex.c"
      __label__ = 40; break; //@line 296 "llex.c"
    case 18: 
      $c=13; //@line 297 "llex.c"
      __label__ = 40; break; //@line 297 "llex.c"
    case 19: 
      $c=9; //@line 298 "llex.c"
      __label__ = 40; break; //@line 298 "llex.c"
    case 20: 
      $c=11; //@line 299 "llex.c"
      __label__ = 40; break; //@line 299 "llex.c"
    case 21: 
      var $84=$1; //@line 301 "llex.c"
      __Z4saveP8LexStatei($84, 10); //@line 301 "llex.c"
      var $85=$1; //@line 301 "llex.c"
      __Z13inclinenumberP8LexState($85); //@line 301 "llex.c"
      __label__ = 6; break; //@line 301 "llex.c"
    case 22: 
      __label__ = 6; break; //@line 302 "llex.c"
    case 23: 
      var $88=$1; //@line 304 "llex.c"
      var $89=(($88)|0); //@line 304 "llex.c"
      var $90=HEAP32[(($89)>>2)]; //@line 304 "llex.c"
      var $91=_isdigit($90); //@line 304 "llex.c"
      var $92=(($91)|0)!=0; //@line 304 "llex.c"
      if ($92) { __label__ = 28; break; } else { __label__ = 24; break; } //@line 304 "llex.c"
    case 24: 
      var $94=$1; //@line 305 "llex.c"
      var $95=$1; //@line 305 "llex.c"
      var $96=(($95)|0); //@line 305 "llex.c"
      var $97=HEAP32[(($96)>>2)]; //@line 305 "llex.c"
      __Z4saveP8LexStatei($94, $97); //@line 305 "llex.c"
      var $98=$1; //@line 305 "llex.c"
      var $99=(($98+44)|0); //@line 305 "llex.c"
      var $100=HEAP32[(($99)>>2)]; //@line 305 "llex.c"
      var $101=(($100)|0); //@line 305 "llex.c"
      var $102=HEAPU32[(($101)>>2)]; //@line 305 "llex.c"
      var $103=((($102)-(1))|0); //@line 305 "llex.c"
      HEAP32[(($101)>>2)]=$103; //@line 305 "llex.c"
      var $104=(($102)>>>0) > 0; //@line 305 "llex.c"
      if ($104) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 305 "llex.c"
    case 25: 
      var $106=$1; //@line 305 "llex.c"
      var $107=(($106+44)|0); //@line 305 "llex.c"
      var $108=HEAP32[(($107)>>2)]; //@line 305 "llex.c"
      var $109=(($108+4)|0); //@line 305 "llex.c"
      var $110=HEAP32[(($109)>>2)]; //@line 305 "llex.c"
      var $111=(($110+1)|0); //@line 305 "llex.c"
      HEAP32[(($109)>>2)]=$111; //@line 305 "llex.c"
      var $112=HEAPU8[($110)]; //@line 305 "llex.c"
      var $113=(($112)&255); //@line 305 "llex.c"
      var $120 = $113;__label__ = 27; break; //@line 305 "llex.c"
    case 26: 
      var $115=$1; //@line 305 "llex.c"
      var $116=(($115+44)|0); //@line 305 "llex.c"
      var $117=HEAP32[(($116)>>2)]; //@line 305 "llex.c"
      var $118=__Z9luaZ_fillP3Zio($117); //@line 305 "llex.c"
      var $120 = $118;__label__ = 27; break; //@line 305 "llex.c"
    case 27: 
      var $120; //@line 305 "llex.c"
      var $121=$1; //@line 305 "llex.c"
      var $122=(($121)|0); //@line 305 "llex.c"
      HEAP32[(($122)>>2)]=$120; //@line 305 "llex.c"
      __label__ = 39; break; //@line 305 "llex.c"
    case 28: 
      $i=0; //@line 307 "llex.c"
      $c=0; //@line 308 "llex.c"
      __label__ = 29; break; //@line 309 "llex.c"
    case 29: 
      var $125=$c; //@line 310 "llex.c"
      var $126=((($125)*(10))|0); //@line 310 "llex.c"
      var $127=$1; //@line 310 "llex.c"
      var $128=(($127)|0); //@line 310 "llex.c"
      var $129=HEAP32[(($128)>>2)]; //@line 310 "llex.c"
      var $130=((($129)-(48))|0); //@line 310 "llex.c"
      var $131=((($126)+($130))|0); //@line 310 "llex.c"
      $c=$131; //@line 310 "llex.c"
      var $132=$1; //@line 311 "llex.c"
      var $133=(($132+44)|0); //@line 311 "llex.c"
      var $134=HEAP32[(($133)>>2)]; //@line 311 "llex.c"
      var $135=(($134)|0); //@line 311 "llex.c"
      var $136=HEAPU32[(($135)>>2)]; //@line 311 "llex.c"
      var $137=((($136)-(1))|0); //@line 311 "llex.c"
      HEAP32[(($135)>>2)]=$137; //@line 311 "llex.c"
      var $138=(($136)>>>0) > 0; //@line 311 "llex.c"
      if ($138) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 311 "llex.c"
    case 30: 
      var $140=$1; //@line 311 "llex.c"
      var $141=(($140+44)|0); //@line 311 "llex.c"
      var $142=HEAP32[(($141)>>2)]; //@line 311 "llex.c"
      var $143=(($142+4)|0); //@line 311 "llex.c"
      var $144=HEAP32[(($143)>>2)]; //@line 311 "llex.c"
      var $145=(($144+1)|0); //@line 311 "llex.c"
      HEAP32[(($143)>>2)]=$145; //@line 311 "llex.c"
      var $146=HEAPU8[($144)]; //@line 311 "llex.c"
      var $147=(($146)&255); //@line 311 "llex.c"
      var $154 = $147;__label__ = 32; break; //@line 311 "llex.c"
    case 31: 
      var $149=$1; //@line 311 "llex.c"
      var $150=(($149+44)|0); //@line 311 "llex.c"
      var $151=HEAP32[(($150)>>2)]; //@line 311 "llex.c"
      var $152=__Z9luaZ_fillP3Zio($151); //@line 311 "llex.c"
      var $154 = $152;__label__ = 32; break; //@line 311 "llex.c"
    case 32: 
      var $154; //@line 311 "llex.c"
      var $155=$1; //@line 311 "llex.c"
      var $156=(($155)|0); //@line 311 "llex.c"
      HEAP32[(($156)>>2)]=$154; //@line 311 "llex.c"
      __label__ = 33; break; //@line 312 "llex.c"
    case 33: 
      var $158=$i; //@line 312 "llex.c"
      var $159=((($158)+(1))|0); //@line 312 "llex.c"
      $i=$159; //@line 312 "llex.c"
      var $160=(($159)|0) < 3; //@line 312 "llex.c"
      if ($160) { __label__ = 34; break; } else { var $168 = 0;__label__ = 35; break; } //@line 312 "llex.c"
    case 34: 
      var $162=$1; //@line 312 "llex.c"
      var $163=(($162)|0); //@line 312 "llex.c"
      var $164=HEAP32[(($163)>>2)]; //@line 312 "llex.c"
      var $165=_isdigit($164); //@line 312 "llex.c"
      var $166=(($165)|0)!=0; //@line 312 "llex.c"
      var $168 = $166;__label__ = 35; break; //@line 312 "llex.c"
    case 35: 
      var $168;
      if ($168) { __label__ = 29; break; } else { __label__ = 36; break; } //@line 312 "llex.c"
    case 36: 
      var $170=$c; //@line 313 "llex.c"
      var $171=(($170)|0) > 255; //@line 313 "llex.c"
      if ($171) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 313 "llex.c"
    case 37: 
      var $173=$1; //@line 314 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($173, ((STRING_TABLE.__str42)|0), 286); //@line 314 "llex.c"
      __label__ = 38; break; //@line 314 "llex.c"
    case 38: 
      var $175=$1; //@line 315 "llex.c"
      var $176=$c; //@line 315 "llex.c"
      __Z4saveP8LexStatei($175, $176); //@line 315 "llex.c"
      __label__ = 39; break; //@line 316 "llex.c"
    case 39: 
      __label__ = 6; break; //@line 317 "llex.c"
    case 40: 
      var $179=$1; //@line 320 "llex.c"
      var $180=$c; //@line 320 "llex.c"
      __Z4saveP8LexStatei($179, $180); //@line 320 "llex.c"
      var $181=$1; //@line 321 "llex.c"
      var $182=(($181+44)|0); //@line 321 "llex.c"
      var $183=HEAP32[(($182)>>2)]; //@line 321 "llex.c"
      var $184=(($183)|0); //@line 321 "llex.c"
      var $185=HEAPU32[(($184)>>2)]; //@line 321 "llex.c"
      var $186=((($185)-(1))|0); //@line 321 "llex.c"
      HEAP32[(($184)>>2)]=$186; //@line 321 "llex.c"
      var $187=(($185)>>>0) > 0; //@line 321 "llex.c"
      if ($187) { __label__ = 41; break; } else { __label__ = 42; break; } //@line 321 "llex.c"
    case 41: 
      var $189=$1; //@line 321 "llex.c"
      var $190=(($189+44)|0); //@line 321 "llex.c"
      var $191=HEAP32[(($190)>>2)]; //@line 321 "llex.c"
      var $192=(($191+4)|0); //@line 321 "llex.c"
      var $193=HEAP32[(($192)>>2)]; //@line 321 "llex.c"
      var $194=(($193+1)|0); //@line 321 "llex.c"
      HEAP32[(($192)>>2)]=$194; //@line 321 "llex.c"
      var $195=HEAPU8[($193)]; //@line 321 "llex.c"
      var $196=(($195)&255); //@line 321 "llex.c"
      var $203 = $196;__label__ = 43; break; //@line 321 "llex.c"
    case 42: 
      var $198=$1; //@line 321 "llex.c"
      var $199=(($198+44)|0); //@line 321 "llex.c"
      var $200=HEAP32[(($199)>>2)]; //@line 321 "llex.c"
      var $201=__Z9luaZ_fillP3Zio($200); //@line 321 "llex.c"
      var $203 = $201;__label__ = 43; break; //@line 321 "llex.c"
    case 43: 
      var $203; //@line 321 "llex.c"
      var $204=$1; //@line 321 "llex.c"
      var $205=(($204)|0); //@line 321 "llex.c"
      HEAP32[(($205)>>2)]=$203; //@line 321 "llex.c"
      __label__ = 6; break; //@line 322 "llex.c"
    case 44: 
      var $207=$1; //@line 325 "llex.c"
      var $208=$1; //@line 325 "llex.c"
      var $209=(($208)|0); //@line 325 "llex.c"
      var $210=HEAP32[(($209)>>2)]; //@line 325 "llex.c"
      __Z4saveP8LexStatei($207, $210); //@line 325 "llex.c"
      var $211=$1; //@line 325 "llex.c"
      var $212=(($211+44)|0); //@line 325 "llex.c"
      var $213=HEAP32[(($212)>>2)]; //@line 325 "llex.c"
      var $214=(($213)|0); //@line 325 "llex.c"
      var $215=HEAPU32[(($214)>>2)]; //@line 325 "llex.c"
      var $216=((($215)-(1))|0); //@line 325 "llex.c"
      HEAP32[(($214)>>2)]=$216; //@line 325 "llex.c"
      var $217=(($215)>>>0) > 0; //@line 325 "llex.c"
      if ($217) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 325 "llex.c"
    case 45: 
      var $219=$1; //@line 325 "llex.c"
      var $220=(($219+44)|0); //@line 325 "llex.c"
      var $221=HEAP32[(($220)>>2)]; //@line 325 "llex.c"
      var $222=(($221+4)|0); //@line 325 "llex.c"
      var $223=HEAP32[(($222)>>2)]; //@line 325 "llex.c"
      var $224=(($223+1)|0); //@line 325 "llex.c"
      HEAP32[(($222)>>2)]=$224; //@line 325 "llex.c"
      var $225=HEAPU8[($223)]; //@line 325 "llex.c"
      var $226=(($225)&255); //@line 325 "llex.c"
      var $233 = $226;__label__ = 47; break; //@line 325 "llex.c"
    case 46: 
      var $228=$1; //@line 325 "llex.c"
      var $229=(($228+44)|0); //@line 325 "llex.c"
      var $230=HEAP32[(($229)>>2)]; //@line 325 "llex.c"
      var $231=__Z9luaZ_fillP3Zio($230); //@line 325 "llex.c"
      var $233 = $231;__label__ = 47; break; //@line 325 "llex.c"
    case 47: 
      var $233; //@line 325 "llex.c"
      var $234=$1; //@line 325 "llex.c"
      var $235=(($234)|0); //@line 325 "llex.c"
      HEAP32[(($235)>>2)]=$233; //@line 325 "llex.c"
      __label__ = 48; break; //@line 326 "llex.c"
    case 48: 
      __label__ = 6; break; //@line 327 "llex.c"
    case 49: 
      var $238=$1; //@line 328 "llex.c"
      var $239=$1; //@line 328 "llex.c"
      var $240=(($239)|0); //@line 328 "llex.c"
      var $241=HEAP32[(($240)>>2)]; //@line 328 "llex.c"
      __Z4saveP8LexStatei($238, $241); //@line 328 "llex.c"
      var $242=$1; //@line 328 "llex.c"
      var $243=(($242+44)|0); //@line 328 "llex.c"
      var $244=HEAP32[(($243)>>2)]; //@line 328 "llex.c"
      var $245=(($244)|0); //@line 328 "llex.c"
      var $246=HEAPU32[(($245)>>2)]; //@line 328 "llex.c"
      var $247=((($246)-(1))|0); //@line 328 "llex.c"
      HEAP32[(($245)>>2)]=$247; //@line 328 "llex.c"
      var $248=(($246)>>>0) > 0; //@line 328 "llex.c"
      if ($248) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 328 "llex.c"
    case 50: 
      var $250=$1; //@line 328 "llex.c"
      var $251=(($250+44)|0); //@line 328 "llex.c"
      var $252=HEAP32[(($251)>>2)]; //@line 328 "llex.c"
      var $253=(($252+4)|0); //@line 328 "llex.c"
      var $254=HEAP32[(($253)>>2)]; //@line 328 "llex.c"
      var $255=(($254+1)|0); //@line 328 "llex.c"
      HEAP32[(($253)>>2)]=$255; //@line 328 "llex.c"
      var $256=HEAPU8[($254)]; //@line 328 "llex.c"
      var $257=(($256)&255); //@line 328 "llex.c"
      var $264 = $257;__label__ = 52; break; //@line 328 "llex.c"
    case 51: 
      var $259=$1; //@line 328 "llex.c"
      var $260=(($259+44)|0); //@line 328 "llex.c"
      var $261=HEAP32[(($260)>>2)]; //@line 328 "llex.c"
      var $262=__Z9luaZ_fillP3Zio($261); //@line 328 "llex.c"
      var $264 = $262;__label__ = 52; break; //@line 328 "llex.c"
    case 52: 
      var $264; //@line 328 "llex.c"
      var $265=$1; //@line 328 "llex.c"
      var $266=(($265)|0); //@line 328 "llex.c"
      HEAP32[(($266)>>2)]=$264; //@line 328 "llex.c"
      var $267=$1; //@line 329 "llex.c"
      var $268=$1; //@line 329 "llex.c"
      var $269=(($268+48)|0); //@line 329 "llex.c"
      var $270=HEAP32[(($269)>>2)]; //@line 329 "llex.c"
      var $271=(($270)|0); //@line 329 "llex.c"
      var $272=HEAP32[(($271)>>2)]; //@line 329 "llex.c"
      var $273=(($272+1)|0); //@line 329 "llex.c"
      var $274=$1; //@line 329 "llex.c"
      var $275=(($274+48)|0); //@line 329 "llex.c"
      var $276=HEAP32[(($275)>>2)]; //@line 329 "llex.c"
      var $277=(($276+4)|0); //@line 329 "llex.c"
      var $278=HEAP32[(($277)>>2)]; //@line 329 "llex.c"
      var $279=((($278)-(2))|0); //@line 329 "llex.c"
      var $280=__Z14luaX_newstringP8LexStatePKcj($267, $273, $279); //@line 329 "llex.c"
      var $281=$3; //@line 329 "llex.c"
      var $282=$281; //@line 329 "llex.c"
      HEAP32[(($282)>>2)]=$280; //@line 329 "llex.c"
      ;
      return; //@line 331 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11read_stringP8LexStateiP7SemInfo["X"]=1;

function __Z4saveP8LexStatei($ls, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $b;
      var $newsize;
      $1=$ls;
      $2=$c;
      var $3=$1; //@line 52 "llex.c"
      var $4=(($3+48)|0); //@line 52 "llex.c"
      var $5=HEAP32[(($4)>>2)]; //@line 52 "llex.c"
      $b=$5; //@line 52 "llex.c"
      var $6=$b; //@line 53 "llex.c"
      var $7=(($6+4)|0); //@line 53 "llex.c"
      var $8=HEAP32[(($7)>>2)]; //@line 53 "llex.c"
      var $9=((($8)+(1))|0); //@line 53 "llex.c"
      var $10=$b; //@line 53 "llex.c"
      var $11=(($10+8)|0); //@line 53 "llex.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 53 "llex.c"
      var $13=(($9)>>>0) > (($12)>>>0); //@line 53 "llex.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 53 "llex.c"
    case 3: 
      var $15=$b; //@line 55 "llex.c"
      var $16=(($15+8)|0); //@line 55 "llex.c"
      var $17=HEAPU32[(($16)>>2)]; //@line 55 "llex.c"
      var $18=(($17)>>>0) >= 2147483646; //@line 55 "llex.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 55 "llex.c"
    case 4: 
      var $20=$1; //@line 56 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($20, ((STRING_TABLE.__str40)|0), 0); //@line 56 "llex.c"
      __label__ = 5; break; //@line 56 "llex.c"
    case 5: 
      var $22=$b; //@line 57 "llex.c"
      var $23=(($22+8)|0); //@line 57 "llex.c"
      var $24=HEAP32[(($23)>>2)]; //@line 57 "llex.c"
      var $25=((($24<<1))|0); //@line 57 "llex.c"
      $newsize=$25; //@line 57 "llex.c"
      var $26=$newsize; //@line 58 "llex.c"
      var $27=((($26)+(1))|0); //@line 58 "llex.c"
      var $28=(($27)>>>0) <= 4294967293; //@line 58 "llex.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 58 "llex.c"
    case 6: 
      var $30=$1; //@line 58 "llex.c"
      var $31=(($30+40)|0); //@line 58 "llex.c"
      var $32=HEAP32[(($31)>>2)]; //@line 58 "llex.c"
      var $33=$b; //@line 58 "llex.c"
      var $34=(($33)|0); //@line 58 "llex.c"
      var $35=HEAP32[(($34)>>2)]; //@line 58 "llex.c"
      var $36=$b; //@line 58 "llex.c"
      var $37=(($36+8)|0); //@line 58 "llex.c"
      var $38=HEAP32[(($37)>>2)]; //@line 58 "llex.c"
      var $39=(($38)|0); //@line 58 "llex.c"
      var $40=$newsize; //@line 58 "llex.c"
      var $41=(($40)|0); //@line 58 "llex.c"
      var $42=__Z13luaM_realloc_P9lua_StatePvjj($32, $35, $39, $41); //@line 58 "llex.c"
      var $49 = $42;__label__ = 8; break; //@line 58 "llex.c"
    case 7: 
      var $44=$1; //@line 58 "llex.c"
      var $45=(($44+40)|0); //@line 58 "llex.c"
      var $46=HEAP32[(($45)>>2)]; //@line 58 "llex.c"
      var $47=__Z11luaM_toobigP9lua_State($46); //@line 58 "llex.c"
      var $49 = $47;__label__ = 8; break; //@line 58 "llex.c"
    case 8: 
      var $49; //@line 58 "llex.c"
      var $50=$b; //@line 58 "llex.c"
      var $51=(($50)|0); //@line 58 "llex.c"
      HEAP32[(($51)>>2)]=$49; //@line 58 "llex.c"
      var $52=$newsize; //@line 58 "llex.c"
      var $53=$b; //@line 58 "llex.c"
      var $54=(($53+8)|0); //@line 58 "llex.c"
      HEAP32[(($54)>>2)]=$52; //@line 58 "llex.c"
      __label__ = 9; break; //@line 59 "llex.c"
    case 9: 
      var $56=$2; //@line 60 "llex.c"
      var $57=(($56) & 255); //@line 60 "llex.c"
      var $58=$b; //@line 60 "llex.c"
      var $59=(($58+4)|0); //@line 60 "llex.c"
      var $60=HEAP32[(($59)>>2)]; //@line 60 "llex.c"
      var $61=((($60)+(1))|0); //@line 60 "llex.c"
      HEAP32[(($59)>>2)]=$61; //@line 60 "llex.c"
      var $62=$b; //@line 60 "llex.c"
      var $63=(($62)|0); //@line 60 "llex.c"
      var $64=HEAP32[(($63)>>2)]; //@line 60 "llex.c"
      var $65=(($64+$60)|0); //@line 60 "llex.c"
      HEAP8[($65)]=$57; //@line 60 "llex.c"
      ;
      return; //@line 61 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z4saveP8LexStatei["X"]=1;

function __Z10check_nextP8LexStatePKc($ls, $set) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$set;
      var $4=$3; //@line 164 "llex.c"
      var $5=$2; //@line 164 "llex.c"
      var $6=(($5)|0); //@line 164 "llex.c"
      var $7=HEAP32[(($6)>>2)]; //@line 164 "llex.c"
      var $8=_strchr($4, $7); //@line 164 "llex.c"
      var $9=(($8)|0)!=0; //@line 164 "llex.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 164 "llex.c"
    case 3: 
      $1=0; //@line 165 "llex.c"
      __label__ = 8; break; //@line 165 "llex.c"
    case 4: 
      var $12=$2; //@line 166 "llex.c"
      var $13=$2; //@line 166 "llex.c"
      var $14=(($13)|0); //@line 166 "llex.c"
      var $15=HEAP32[(($14)>>2)]; //@line 166 "llex.c"
      __Z4saveP8LexStatei($12, $15); //@line 166 "llex.c"
      var $16=$2; //@line 166 "llex.c"
      var $17=(($16+44)|0); //@line 166 "llex.c"
      var $18=HEAP32[(($17)>>2)]; //@line 166 "llex.c"
      var $19=(($18)|0); //@line 166 "llex.c"
      var $20=HEAPU32[(($19)>>2)]; //@line 166 "llex.c"
      var $21=((($20)-(1))|0); //@line 166 "llex.c"
      HEAP32[(($19)>>2)]=$21; //@line 166 "llex.c"
      var $22=(($20)>>>0) > 0; //@line 166 "llex.c"
      if ($22) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 166 "llex.c"
    case 5: 
      var $24=$2; //@line 166 "llex.c"
      var $25=(($24+44)|0); //@line 166 "llex.c"
      var $26=HEAP32[(($25)>>2)]; //@line 166 "llex.c"
      var $27=(($26+4)|0); //@line 166 "llex.c"
      var $28=HEAP32[(($27)>>2)]; //@line 166 "llex.c"
      var $29=(($28+1)|0); //@line 166 "llex.c"
      HEAP32[(($27)>>2)]=$29; //@line 166 "llex.c"
      var $30=HEAPU8[($28)]; //@line 166 "llex.c"
      var $31=(($30)&255); //@line 166 "llex.c"
      var $38 = $31;__label__ = 7; break; //@line 166 "llex.c"
    case 6: 
      var $33=$2; //@line 166 "llex.c"
      var $34=(($33+44)|0); //@line 166 "llex.c"
      var $35=HEAP32[(($34)>>2)]; //@line 166 "llex.c"
      var $36=__Z9luaZ_fillP3Zio($35); //@line 166 "llex.c"
      var $38 = $36;__label__ = 7; break; //@line 166 "llex.c"
    case 7: 
      var $38; //@line 166 "llex.c"
      var $39=$2; //@line 166 "llex.c"
      var $40=(($39)|0); //@line 166 "llex.c"
      HEAP32[(($40)>>2)]=$38; //@line 166 "llex.c"
      $1=1; //@line 167 "llex.c"
      __label__ = 8; break; //@line 167 "llex.c"
    case 8: 
      var $42=$1; //@line 168 "llex.c"
      ;
      return $42; //@line 168 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10check_nextP8LexStatePKc["X"]=1;

function __Z12read_numeralP8LexStateP7SemInfo($ls, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ls;
      $2=$seminfo;
      __label__ = 3; break; //@line 196 "llex.c"
    case 3: 
      var $4=$1; //@line 197 "llex.c"
      var $5=$1; //@line 197 "llex.c"
      var $6=(($5)|0); //@line 197 "llex.c"
      var $7=HEAP32[(($6)>>2)]; //@line 197 "llex.c"
      __Z4saveP8LexStatei($4, $7); //@line 197 "llex.c"
      var $8=$1; //@line 197 "llex.c"
      var $9=(($8+44)|0); //@line 197 "llex.c"
      var $10=HEAP32[(($9)>>2)]; //@line 197 "llex.c"
      var $11=(($10)|0); //@line 197 "llex.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 197 "llex.c"
      var $13=((($12)-(1))|0); //@line 197 "llex.c"
      HEAP32[(($11)>>2)]=$13; //@line 197 "llex.c"
      var $14=(($12)>>>0) > 0; //@line 197 "llex.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 197 "llex.c"
    case 4: 
      var $16=$1; //@line 197 "llex.c"
      var $17=(($16+44)|0); //@line 197 "llex.c"
      var $18=HEAP32[(($17)>>2)]; //@line 197 "llex.c"
      var $19=(($18+4)|0); //@line 197 "llex.c"
      var $20=HEAP32[(($19)>>2)]; //@line 197 "llex.c"
      var $21=(($20+1)|0); //@line 197 "llex.c"
      HEAP32[(($19)>>2)]=$21; //@line 197 "llex.c"
      var $22=HEAPU8[($20)]; //@line 197 "llex.c"
      var $23=(($22)&255); //@line 197 "llex.c"
      var $30 = $23;__label__ = 6; break; //@line 197 "llex.c"
    case 5: 
      var $25=$1; //@line 197 "llex.c"
      var $26=(($25+44)|0); //@line 197 "llex.c"
      var $27=HEAP32[(($26)>>2)]; //@line 197 "llex.c"
      var $28=__Z9luaZ_fillP3Zio($27); //@line 197 "llex.c"
      var $30 = $28;__label__ = 6; break; //@line 197 "llex.c"
    case 6: 
      var $30; //@line 197 "llex.c"
      var $31=$1; //@line 197 "llex.c"
      var $32=(($31)|0); //@line 197 "llex.c"
      HEAP32[(($32)>>2)]=$30; //@line 197 "llex.c"
      __label__ = 7; break; //@line 198 "llex.c"
    case 7: 
      var $34=$1; //@line 198 "llex.c"
      var $35=(($34)|0); //@line 198 "llex.c"
      var $36=HEAP32[(($35)>>2)]; //@line 198 "llex.c"
      var $37=_isdigit($36); //@line 198 "llex.c"
      var $38=(($37)|0)!=0; //@line 198 "llex.c"
      if ($38) { var $45 = 1;__label__ = 9; break; } else { __label__ = 8; break; } //@line 198 "llex.c"
    case 8: 
      var $40=$1; //@line 198 "llex.c"
      var $41=(($40)|0); //@line 198 "llex.c"
      var $42=HEAP32[(($41)>>2)]; //@line 198 "llex.c"
      var $43=(($42)|0)==46; //@line 198 "llex.c"
      var $45 = $43;__label__ = 9; break; //@line 198 "llex.c"
    case 9: 
      var $45;
      if ($45) { __label__ = 3; break; } else { __label__ = 10; break; } //@line 198 "llex.c"
    case 10: 
      var $47=$1; //@line 199 "llex.c"
      var $48=__Z10check_nextP8LexStatePKc($47, ((STRING_TABLE.__str3770)|0)); //@line 199 "llex.c"
      var $49=(($48)|0)!=0; //@line 199 "llex.c"
      if ($49) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 199 "llex.c"
    case 11: 
      var $51=$1; //@line 200 "llex.c"
      var $52=__Z10check_nextP8LexStatePKc($51, ((STRING_TABLE.__str38)|0)); //@line 200 "llex.c"
      __label__ = 12; break; //@line 200 "llex.c"
    case 12: 
      __label__ = 13; break; //@line 201 "llex.c"
    case 13: 
      var $55=$1; //@line 201 "llex.c"
      var $56=(($55)|0); //@line 201 "llex.c"
      var $57=HEAP32[(($56)>>2)]; //@line 201 "llex.c"
      var $58=_isalnum($57); //@line 201 "llex.c"
      var $59=(($58)|0)!=0; //@line 201 "llex.c"
      if ($59) { var $66 = 1;__label__ = 15; break; } else { __label__ = 14; break; } //@line 201 "llex.c"
    case 14: 
      var $61=$1; //@line 201 "llex.c"
      var $62=(($61)|0); //@line 201 "llex.c"
      var $63=HEAP32[(($62)>>2)]; //@line 201 "llex.c"
      var $64=(($63)|0)==95; //@line 201 "llex.c"
      var $66 = $64;__label__ = 15; break; //@line 201 "llex.c"
    case 15: 
      var $66;
      if ($66) { __label__ = 16; break; } else { __label__ = 20; break; } //@line 201 "llex.c"
    case 16: 
      var $68=$1; //@line 202 "llex.c"
      var $69=$1; //@line 202 "llex.c"
      var $70=(($69)|0); //@line 202 "llex.c"
      var $71=HEAP32[(($70)>>2)]; //@line 202 "llex.c"
      __Z4saveP8LexStatei($68, $71); //@line 202 "llex.c"
      var $72=$1; //@line 202 "llex.c"
      var $73=(($72+44)|0); //@line 202 "llex.c"
      var $74=HEAP32[(($73)>>2)]; //@line 202 "llex.c"
      var $75=(($74)|0); //@line 202 "llex.c"
      var $76=HEAPU32[(($75)>>2)]; //@line 202 "llex.c"
      var $77=((($76)-(1))|0); //@line 202 "llex.c"
      HEAP32[(($75)>>2)]=$77; //@line 202 "llex.c"
      var $78=(($76)>>>0) > 0; //@line 202 "llex.c"
      if ($78) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 202 "llex.c"
    case 17: 
      var $80=$1; //@line 202 "llex.c"
      var $81=(($80+44)|0); //@line 202 "llex.c"
      var $82=HEAP32[(($81)>>2)]; //@line 202 "llex.c"
      var $83=(($82+4)|0); //@line 202 "llex.c"
      var $84=HEAP32[(($83)>>2)]; //@line 202 "llex.c"
      var $85=(($84+1)|0); //@line 202 "llex.c"
      HEAP32[(($83)>>2)]=$85; //@line 202 "llex.c"
      var $86=HEAPU8[($84)]; //@line 202 "llex.c"
      var $87=(($86)&255); //@line 202 "llex.c"
      var $94 = $87;__label__ = 19; break; //@line 202 "llex.c"
    case 18: 
      var $89=$1; //@line 202 "llex.c"
      var $90=(($89+44)|0); //@line 202 "llex.c"
      var $91=HEAP32[(($90)>>2)]; //@line 202 "llex.c"
      var $92=__Z9luaZ_fillP3Zio($91); //@line 202 "llex.c"
      var $94 = $92;__label__ = 19; break; //@line 202 "llex.c"
    case 19: 
      var $94; //@line 202 "llex.c"
      var $95=$1; //@line 202 "llex.c"
      var $96=(($95)|0); //@line 202 "llex.c"
      HEAP32[(($96)>>2)]=$94; //@line 202 "llex.c"
      __label__ = 13; break; //@line 202 "llex.c"
    case 20: 
      var $98=$1; //@line 203 "llex.c"
      __Z4saveP8LexStatei($98, 0); //@line 203 "llex.c"
      var $99=$1; //@line 204 "llex.c"
      var $100=$1; //@line 204 "llex.c"
      var $101=(($100+56)|0); //@line 204 "llex.c"
      var $102=HEAP8[($101)]; //@line 204 "llex.c"
      __Z11buffreplaceP8LexStatecc($99, 46, $102); //@line 204 "llex.c"
      var $103=$1; //@line 205 "llex.c"
      var $104=(($103+48)|0); //@line 205 "llex.c"
      var $105=HEAP32[(($104)>>2)]; //@line 205 "llex.c"
      var $106=(($105)|0); //@line 205 "llex.c"
      var $107=HEAP32[(($106)>>2)]; //@line 205 "llex.c"
      var $108=$2; //@line 205 "llex.c"
      var $109=$108; //@line 205 "llex.c"
      var $110=__Z10luaO_str2dPKcPd($107, $109); //@line 205 "llex.c"
      var $111=(($110)|0)!=0; //@line 205 "llex.c"
      if ($111) { __label__ = 22; break; } else { __label__ = 21; break; } //@line 205 "llex.c"
    case 21: 
      var $113=$1; //@line 206 "llex.c"
      var $114=$2; //@line 206 "llex.c"
      __Z11trydecpointP8LexStateP7SemInfo($113, $114); //@line 206 "llex.c"
      __label__ = 22; break; //@line 206 "llex.c"
    case 22: 
      ;
      return; //@line 207 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12read_numeralP8LexStateP7SemInfo["X"]=1;

function __Z11trydecpointP8LexStateP7SemInfo($ls, $seminfo) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $cv;
      var $old;
      $1=$ls;
      $2=$seminfo;
      var $3=_localeconv(); //@line 181 "llex.c"
      $cv=$3; //@line 181 "llex.c"
      var $4=$1; //@line 182 "llex.c"
      var $5=(($4+56)|0); //@line 182 "llex.c"
      var $6=HEAP8[($5)]; //@line 182 "llex.c"
      $old=$6; //@line 182 "llex.c"
      var $7=$cv; //@line 183 "llex.c"
      var $8=(($7)|0)!=0; //@line 183 "llex.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 183 "llex.c"
    case 3: 
      var $10=$cv; //@line 183 "llex.c"
      var $11=(($10)|0); //@line 183 "llex.c"
      var $12=HEAP32[(($11)>>2)]; //@line 183 "llex.c"
      var $13=(($12)|0); //@line 183 "llex.c"
      var $14=HEAP8[($13)]; //@line 183 "llex.c"
      var $17 = $14;__label__ = 5; break; //@line 183 "llex.c"
    case 4: 
      var $17 = 46;__label__ = 5; break; //@line 183 "llex.c"
    case 5: 
      var $17; //@line 183 "llex.c"
      var $18=$1; //@line 183 "llex.c"
      var $19=(($18+56)|0); //@line 183 "llex.c"
      HEAP8[($19)]=$17; //@line 183 "llex.c"
      var $20=$1; //@line 184 "llex.c"
      var $21=$old; //@line 184 "llex.c"
      var $22=$1; //@line 184 "llex.c"
      var $23=(($22+56)|0); //@line 184 "llex.c"
      var $24=HEAP8[($23)]; //@line 184 "llex.c"
      __Z11buffreplaceP8LexStatecc($20, $21, $24); //@line 184 "llex.c"
      var $25=$1; //@line 185 "llex.c"
      var $26=(($25+48)|0); //@line 185 "llex.c"
      var $27=HEAP32[(($26)>>2)]; //@line 185 "llex.c"
      var $28=(($27)|0); //@line 185 "llex.c"
      var $29=HEAP32[(($28)>>2)]; //@line 185 "llex.c"
      var $30=$2; //@line 185 "llex.c"
      var $31=$30; //@line 185 "llex.c"
      var $32=__Z10luaO_str2dPKcPd($29, $31); //@line 185 "llex.c"
      var $33=(($32)|0)!=0; //@line 185 "llex.c"
      if ($33) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 185 "llex.c"
    case 6: 
      var $35=$1; //@line 187 "llex.c"
      var $36=$1; //@line 187 "llex.c"
      var $37=(($36+56)|0); //@line 187 "llex.c"
      var $38=HEAP8[($37)]; //@line 187 "llex.c"
      __Z11buffreplaceP8LexStatecc($35, $38, 46); //@line 187 "llex.c"
      var $39=$1; //@line 188 "llex.c"
      __Z13luaX_lexerrorP8LexStatePKci($39, ((STRING_TABLE.__str39)|0), 284); //@line 188 "llex.c"
      __label__ = 7; break; //@line 189 "llex.c"
    case 7: 
      ;
      return; //@line 190 "llex.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11trydecpointP8LexStateP7SemInfo["X"]=1;

function __Z11luaO_int2fbj($x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      $2=$x;
      $e=0; //@line 36 "lobject.c"
      __label__ = 3; break; //@line 37 "lobject.c"
    case 3: 
      var $4=$2; //@line 37 "lobject.c"
      var $5=(($4)>>>0) >= 16; //@line 37 "lobject.c"
      if ($5) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 37 "lobject.c"
    case 4: 
      var $7=$2; //@line 38 "lobject.c"
      var $8=((($7)+(1))|0); //@line 38 "lobject.c"
      var $9=$8 >>> 1; //@line 38 "lobject.c"
      $2=$9; //@line 38 "lobject.c"
      var $10=$e; //@line 39 "lobject.c"
      var $11=((($10)+(1))|0); //@line 39 "lobject.c"
      $e=$11; //@line 39 "lobject.c"
      __label__ = 3; break; //@line 40 "lobject.c"
    case 5: 
      var $13=$2; //@line 41 "lobject.c"
      var $14=(($13)>>>0) < 8; //@line 41 "lobject.c"
      if ($14) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 41 "lobject.c"
    case 6: 
      var $16=$2; //@line 41 "lobject.c"
      $1=$16; //@line 41 "lobject.c"
      __label__ = 8; break; //@line 41 "lobject.c"
    case 7: 
      var $18=$e; //@line 42 "lobject.c"
      var $19=((($18)+(1))|0); //@line 42 "lobject.c"
      var $20=$19 << 3; //@line 42 "lobject.c"
      var $21=$2; //@line 42 "lobject.c"
      var $22=((($21)-(8))|0); //@line 42 "lobject.c"
      var $23=$20 | $22; //@line 42 "lobject.c"
      $1=$23; //@line 42 "lobject.c"
      __label__ = 8; break; //@line 42 "lobject.c"
    case 8: 
      var $25=$1; //@line 43 "lobject.c"
      ;
      return $25; //@line 43 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaO_fb2inti($x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      $2=$x;
      var $3=$2; //@line 48 "lobject.c"
      var $4=$3 >> 3; //@line 48 "lobject.c"
      var $5=$4 & 31; //@line 48 "lobject.c"
      $e=$5; //@line 48 "lobject.c"
      var $6=$e; //@line 49 "lobject.c"
      var $7=(($6)|0)==0; //@line 49 "lobject.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 49 "lobject.c"
    case 3: 
      var $9=$2; //@line 49 "lobject.c"
      $1=$9; //@line 49 "lobject.c"
      __label__ = 5; break; //@line 49 "lobject.c"
    case 4: 
      var $11=$2; //@line 50 "lobject.c"
      var $12=$11 & 7; //@line 50 "lobject.c"
      var $13=((($12)+(8))|0); //@line 50 "lobject.c"
      var $14=$e; //@line 50 "lobject.c"
      var $15=((($14)-(1))|0); //@line 50 "lobject.c"
      var $16=$13 << $15; //@line 50 "lobject.c"
      $1=$16; //@line 50 "lobject.c"
      __label__ = 5; break; //@line 50 "lobject.c"
    case 5: 
      var $18=$1; //@line 51 "lobject.c"
      ;
      return $18; //@line 51 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9luaO_log2j($x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l;
      $1=$x;
      $l=-1; //@line 65 "lobject.c"
      __label__ = 3; break; //@line 66 "lobject.c"
    case 3: 
      var $3=$1; //@line 66 "lobject.c"
      var $4=(($3)>>>0) >= 256; //@line 66 "lobject.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 66 "lobject.c"
    case 4: 
      var $6=$l; //@line 66 "lobject.c"
      var $7=((($6)+(8))|0); //@line 66 "lobject.c"
      $l=$7; //@line 66 "lobject.c"
      var $8=$1; //@line 66 "lobject.c"
      var $9=$8 >>> 8; //@line 66 "lobject.c"
      $1=$9; //@line 66 "lobject.c"
      __label__ = 3; break; //@line 66 "lobject.c"
    case 5: 
      var $11=$l; //@line 67 "lobject.c"
      var $12=$1; //@line 67 "lobject.c"
      var $13=((STRING_TABLE.__ZZ9luaO_log2jE5log_2+$12)|0); //@line 67 "lobject.c"
      var $14=HEAPU8[($13)]; //@line 67 "lobject.c"
      var $15=(($14)&255); //@line 67 "lobject.c"
      var $16=((($11)+($15))|0); //@line 67 "lobject.c"
      ;
      return $16; //@line 67 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16luaO_rawequalObjPK10lua_TValueS1_($t1, $t2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$t1;
      $3=$t2;
      var $4=$2; //@line 73 "lobject.c"
      var $5=(($4+8)|0); //@line 73 "lobject.c"
      var $6=HEAP32[(($5)>>2)]; //@line 73 "lobject.c"
      var $7=$3; //@line 73 "lobject.c"
      var $8=(($7+8)|0); //@line 73 "lobject.c"
      var $9=HEAP32[(($8)>>2)]; //@line 73 "lobject.c"
      var $10=(($6)|0)!=(($9)|0); //@line 73 "lobject.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 73 "lobject.c"
    case 3: 
      $1=0; //@line 73 "lobject.c"
      __label__ = 10; break; //@line 73 "lobject.c"
    case 4: 
      var $13=$2; //@line 74 "lobject.c"
      var $14=(($13+8)|0); //@line 74 "lobject.c"
      var $15=HEAP32[(($14)>>2)]; //@line 74 "lobject.c"
      if ((($15)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($15)|0) == 3) {
        __label__ = 6; break;
      }
      else if ((($15)|0) == 1) {
        __label__ = 7; break;
      }
      else if ((($15)|0) == 2) {
        __label__ = 8; break;
      }
      else {
      __label__ = 9; break;
      }
      
    case 5: 
      $1=1; //@line 76 "lobject.c"
      __label__ = 10; break; //@line 76 "lobject.c"
    case 6: 
      var $18=$2; //@line 78 "lobject.c"
      var $19=(($18)|0); //@line 78 "lobject.c"
      var $20=$19; //@line 78 "lobject.c"
      var $21=(tempDoubleI32[0]=HEAP32[(($20)>>2)],tempDoubleI32[1]=HEAP32[((($20)+(4))>>2)],tempDoubleF64[0]); //@line 78 "lobject.c"
      var $22=$3; //@line 78 "lobject.c"
      var $23=(($22)|0); //@line 78 "lobject.c"
      var $24=$23; //@line 78 "lobject.c"
      var $25=(tempDoubleI32[0]=HEAP32[(($24)>>2)],tempDoubleI32[1]=HEAP32[((($24)+(4))>>2)],tempDoubleF64[0]); //@line 78 "lobject.c"
      var $26=$21 == $25; //@line 78 "lobject.c"
      var $27=(($26)&1); //@line 78 "lobject.c"
      $1=$27; //@line 78 "lobject.c"
      __label__ = 10; break; //@line 78 "lobject.c"
    case 7: 
      var $29=$2; //@line 80 "lobject.c"
      var $30=(($29)|0); //@line 80 "lobject.c"
      var $31=$30; //@line 80 "lobject.c"
      var $32=HEAP32[(($31)>>2)]; //@line 80 "lobject.c"
      var $33=$3; //@line 80 "lobject.c"
      var $34=(($33)|0); //@line 80 "lobject.c"
      var $35=$34; //@line 80 "lobject.c"
      var $36=HEAP32[(($35)>>2)]; //@line 80 "lobject.c"
      var $37=(($32)|0)==(($36)|0); //@line 80 "lobject.c"
      var $38=(($37)&1); //@line 80 "lobject.c"
      $1=$38; //@line 80 "lobject.c"
      __label__ = 10; break; //@line 80 "lobject.c"
    case 8: 
      var $40=$2; //@line 82 "lobject.c"
      var $41=(($40)|0); //@line 82 "lobject.c"
      var $42=$41; //@line 82 "lobject.c"
      var $43=HEAP32[(($42)>>2)]; //@line 82 "lobject.c"
      var $44=$3; //@line 82 "lobject.c"
      var $45=(($44)|0); //@line 82 "lobject.c"
      var $46=$45; //@line 82 "lobject.c"
      var $47=HEAP32[(($46)>>2)]; //@line 82 "lobject.c"
      var $48=(($43)|0)==(($47)|0); //@line 82 "lobject.c"
      var $49=(($48)&1); //@line 82 "lobject.c"
      $1=$49; //@line 82 "lobject.c"
      __label__ = 10; break; //@line 82 "lobject.c"
    case 9: 
      var $51=$2; //@line 85 "lobject.c"
      var $52=(($51)|0); //@line 85 "lobject.c"
      var $53=$52; //@line 85 "lobject.c"
      var $54=HEAP32[(($53)>>2)]; //@line 85 "lobject.c"
      var $55=$3; //@line 85 "lobject.c"
      var $56=(($55)|0); //@line 85 "lobject.c"
      var $57=$56; //@line 85 "lobject.c"
      var $58=HEAP32[(($57)>>2)]; //@line 85 "lobject.c"
      var $59=(($54)|0)==(($58)|0); //@line 85 "lobject.c"
      var $60=(($59)&1); //@line 85 "lobject.c"
      $1=$60; //@line 85 "lobject.c"
      __label__ = 10; break; //@line 85 "lobject.c"
    case 10: 
      var $62=$1; //@line 87 "lobject.c"
      ;
      return $62; //@line 87 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z16luaO_rawequalObjPK10lua_TValueS1_["X"]=1;

function __Z13luaM_growaux_P9lua_StatePvPijiPKc($L, $block, $size, $size_elems, $limit, $errormsg) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $newblock;
      var $newsize;
      $1=$L;
      $2=$block;
      $3=$size;
      $4=$size_elems;
      $5=$limit;
      $6=$errormsg;
      var $7=$3; //@line 50 "lmem.c"
      var $8=HEAP32[(($7)>>2)]; //@line 50 "lmem.c"
      var $9=$5; //@line 50 "lmem.c"
      var $10=((((($9)|0))/(2))&-1); //@line 50 "lmem.c"
      var $11=(($8)|0) >= (($10)|0); //@line 50 "lmem.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 50 "lmem.c"
    case 3: 
      var $13=$3; //@line 51 "lmem.c"
      var $14=HEAP32[(($13)>>2)]; //@line 51 "lmem.c"
      var $15=$5; //@line 51 "lmem.c"
      var $16=(($14)|0) >= (($15)|0); //@line 51 "lmem.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 51 "lmem.c"
    case 4: 
      var $18=$1; //@line 52 "lmem.c"
      var $19=$6; //@line 52 "lmem.c"
      __Z13luaG_runerrorP9lua_StatePKcz($18, $19, (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 52 "lmem.c"
      __label__ = 5; break; //@line 52 "lmem.c"
    case 5: 
      var $21=$5; //@line 53 "lmem.c"
      $newsize=$21; //@line 53 "lmem.c"
      __label__ = 9; break; //@line 54 "lmem.c"
    case 6: 
      var $23=$3; //@line 56 "lmem.c"
      var $24=HEAP32[(($23)>>2)]; //@line 56 "lmem.c"
      var $25=((($24<<1))|0); //@line 56 "lmem.c"
      $newsize=$25; //@line 56 "lmem.c"
      var $26=$newsize; //@line 57 "lmem.c"
      var $27=(($26)|0) < 4; //@line 57 "lmem.c"
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 57 "lmem.c"
    case 7: 
      $newsize=4; //@line 58 "lmem.c"
      __label__ = 8; break; //@line 58 "lmem.c"
    case 8: 
      __label__ = 9; break; //@line 59 "lmem.c"
    case 9: 
      var $31=$newsize; //@line 60 "lmem.c"
      var $32=((($31)+(1))|0); //@line 60 "lmem.c"
      var $33=$4; //@line 60 "lmem.c"
      var $34=Math.floor((4294967293)/((($33)>>>0))); //@line 60 "lmem.c"
      var $35=(($32)>>>0) <= (($34)>>>0); //@line 60 "lmem.c"
      if ($35) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 60 "lmem.c"
    case 10: 
      var $37=$1; //@line 60 "lmem.c"
      var $38=$2; //@line 60 "lmem.c"
      var $39=$3; //@line 60 "lmem.c"
      var $40=HEAP32[(($39)>>2)]; //@line 60 "lmem.c"
      var $41=$4; //@line 60 "lmem.c"
      var $42=((($40)*($41))|0); //@line 60 "lmem.c"
      var $43=$newsize; //@line 60 "lmem.c"
      var $44=$4; //@line 60 "lmem.c"
      var $45=((($43)*($44))|0); //@line 60 "lmem.c"
      var $46=__Z13luaM_realloc_P9lua_StatePvjj($37, $38, $42, $45); //@line 60 "lmem.c"
      var $51 = $46;__label__ = 12; break; //@line 60 "lmem.c"
    case 11: 
      var $48=$1; //@line 60 "lmem.c"
      var $49=__Z11luaM_toobigP9lua_State($48); //@line 60 "lmem.c"
      var $51 = $49;__label__ = 12; break; //@line 60 "lmem.c"
    case 12: 
      var $51; //@line 60 "lmem.c"
      $newblock=$51; //@line 60 "lmem.c"
      var $52=$newsize; //@line 61 "lmem.c"
      var $53=$3; //@line 61 "lmem.c"
      HEAP32[(($53)>>2)]=$52; //@line 61 "lmem.c"
      var $54=$newblock; //@line 62 "lmem.c"
      STACKTOP = __stackBase__;
      return $54; //@line 62 "lmem.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaM_growaux_P9lua_StatePvPijiPKc["X"]=1;

function __Z13luaM_realloc_P9lua_StatePvjj($L, $block, $osize, $nsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $g;
      $1=$L;
      $2=$block;
      $3=$osize;
      $4=$nsize;
      var $5=$1; //@line 77 "lmem.c"
      var $6=(($5+16)|0); //@line 77 "lmem.c"
      var $7=HEAP32[(($6)>>2)]; //@line 77 "lmem.c"
      $g=$7; //@line 77 "lmem.c"
      var $8=$g; //@line 79 "lmem.c"
      var $9=(($8+12)|0); //@line 79 "lmem.c"
      var $10=HEAP32[(($9)>>2)]; //@line 79 "lmem.c"
      var $11=$g; //@line 79 "lmem.c"
      var $12=(($11+16)|0); //@line 79 "lmem.c"
      var $13=HEAP32[(($12)>>2)]; //@line 79 "lmem.c"
      var $14=$2; //@line 79 "lmem.c"
      var $15=$3; //@line 79 "lmem.c"
      var $16=$4; //@line 79 "lmem.c"
      var $17=FUNCTION_TABLE[$10]($13, $14, $15, $16); //@line 79 "lmem.c"
      $2=$17; //@line 79 "lmem.c"
      var $18=$2; //@line 80 "lmem.c"
      var $19=(($18)|0)==0; //@line 80 "lmem.c"
      if ($19) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 80 "lmem.c"
    case 3: 
      var $21=$4; //@line 80 "lmem.c"
      var $22=(($21)>>>0) > 0; //@line 80 "lmem.c"
      if ($22) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 80 "lmem.c"
    case 4: 
      var $24=$1; //@line 81 "lmem.c"
      __Z10luaD_throwP9lua_Statei($24, 4); //@line 81 "lmem.c"
      __label__ = 5; break; //@line 81 "lmem.c"
    case 5: 
      var $26=$g; //@line 83 "lmem.c"
      var $27=(($26+68)|0); //@line 83 "lmem.c"
      var $28=HEAP32[(($27)>>2)]; //@line 83 "lmem.c"
      var $29=$3; //@line 83 "lmem.c"
      var $30=((($28)-($29))|0); //@line 83 "lmem.c"
      var $31=$4; //@line 83 "lmem.c"
      var $32=((($30)+($31))|0); //@line 83 "lmem.c"
      var $33=$g; //@line 83 "lmem.c"
      var $34=(($33+68)|0); //@line 83 "lmem.c"
      HEAP32[(($34)>>2)]=$32; //@line 83 "lmem.c"
      var $35=$2; //@line 84 "lmem.c"
      ;
      return $35; //@line 84 "lmem.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaM_toobigP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 67 "lmem.c"
  __Z13luaG_runerrorP9lua_StatePKcz($2, ((STRING_TABLE.__str72)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 67 "lmem.c"
  STACKTOP = __stackBase__;
  return 0; //@line 68 "lmem.c"
}


function __Z10luaO_str2dPKcPd($s, $result) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $endptr=__stackBase__;
      $2=$s;
      $3=$result;
      var $4=$2; //@line 92 "lobject.c"
      var $5=_strtod($4, $endptr); //@line 92 "lobject.c"
      var $6=$3; //@line 92 "lobject.c"
      (tempDoubleF64[0]=$5,HEAP32[(($6)>>2)]=tempDoubleI32[0],HEAP32[((($6)+(4))>>2)]=tempDoubleI32[1]); //@line 92 "lobject.c"
      var $7=HEAP32[(($endptr)>>2)]; //@line 93 "lobject.c"
      var $8=$2; //@line 93 "lobject.c"
      var $9=(($7)|0)==(($8)|0); //@line 93 "lobject.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 93 "lobject.c"
    case 3: 
      $1=0; //@line 93 "lobject.c"
      __label__ = 15; break; //@line 93 "lobject.c"
    case 4: 
      var $12=HEAP32[(($endptr)>>2)]; //@line 94 "lobject.c"
      var $13=HEAP8[($12)]; //@line 94 "lobject.c"
      var $14=(($13 << 24) >> 24); //@line 94 "lobject.c"
      var $15=(($14)|0)==120; //@line 94 "lobject.c"
      if ($15) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 94 "lobject.c"
    case 5: 
      var $17=HEAP32[(($endptr)>>2)]; //@line 94 "lobject.c"
      var $18=HEAP8[($17)]; //@line 94 "lobject.c"
      var $19=(($18 << 24) >> 24); //@line 94 "lobject.c"
      var $20=(($19)|0)==88; //@line 94 "lobject.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 94 "lobject.c"
    case 6: 
      var $22=$2; //@line 95 "lobject.c"
      var $23=_strtoul($22, $endptr, 16); //@line 95 "lobject.c"
      var $24=(($23)>>>0); //@line 95 "lobject.c"
      var $25=$3; //@line 95 "lobject.c"
      (tempDoubleF64[0]=$24,HEAP32[(($25)>>2)]=tempDoubleI32[0],HEAP32[((($25)+(4))>>2)]=tempDoubleI32[1]); //@line 95 "lobject.c"
      __label__ = 7; break; //@line 95 "lobject.c"
    case 7: 
      var $27=HEAP32[(($endptr)>>2)]; //@line 96 "lobject.c"
      var $28=HEAP8[($27)]; //@line 96 "lobject.c"
      var $29=(($28 << 24) >> 24); //@line 96 "lobject.c"
      var $30=(($29)|0)==0; //@line 96 "lobject.c"
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 96 "lobject.c"
    case 8: 
      $1=1; //@line 96 "lobject.c"
      __label__ = 15; break; //@line 96 "lobject.c"
    case 9: 
      __label__ = 10; break; //@line 97 "lobject.c"
    case 10: 
      var $34=HEAP32[(($endptr)>>2)]; //@line 97 "lobject.c"
      var $35=HEAPU8[($34)]; //@line 97 "lobject.c"
      var $36=(($35)&255); //@line 97 "lobject.c"
      var $37=_isspace($36); //@line 97 "lobject.c"
      var $38=(($37)|0)!=0; //@line 97 "lobject.c"
      if ($38) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 97 "lobject.c"
    case 11: 
      var $40=HEAP32[(($endptr)>>2)]; //@line 97 "lobject.c"
      var $41=(($40+1)|0); //@line 97 "lobject.c"
      HEAP32[(($endptr)>>2)]=$41; //@line 97 "lobject.c"
      __label__ = 10; break; //@line 97 "lobject.c"
    case 12: 
      var $43=HEAP32[(($endptr)>>2)]; //@line 98 "lobject.c"
      var $44=HEAP8[($43)]; //@line 98 "lobject.c"
      var $45=(($44 << 24) >> 24); //@line 98 "lobject.c"
      var $46=(($45)|0)!=0; //@line 98 "lobject.c"
      if ($46) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 98 "lobject.c"
    case 13: 
      $1=0; //@line 98 "lobject.c"
      __label__ = 15; break; //@line 98 "lobject.c"
    case 14: 
      $1=1; //@line 99 "lobject.c"
      __label__ = 15; break; //@line 99 "lobject.c"
    case 15: 
      var $50=$1; //@line 100 "lobject.c"
      STACKTOP = __stackBase__;
      return $50; //@line 100 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10luaO_str2dPKcPd["X"]=1;

function __Z17luaO_pushvfstringP9lua_StatePKcPc($L, $fmt, $argp) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; _memset(__stackBase__, 0, 32);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $e;
      var $i_o;
      var $s;
      var $buff=__stackBase__;
      var $i_o1;
      var $i_o2;
      var $buff3=(__stackBase__)+(4);
      var $buff4=(__stackBase__)+(28);
      $1=$L;
      $2=$fmt;
      $3=$argp;
      $n=1; //@line 112 "lobject.c"
      var $4=$1; //@line 113 "lobject.c"
      __Z7pushstrP9lua_StatePKc($4, ((__str77)|0)); //@line 113 "lobject.c"
      __label__ = 3; break; //@line 114 "lobject.c"
    case 3: 
      var $6=$2; //@line 115 "lobject.c"
      var $7=_strchr($6, 37); //@line 115 "lobject.c"
      $e=$7; //@line 115 "lobject.c"
      var $8=$e; //@line 116 "lobject.c"
      var $9=(($8)|0)==0; //@line 116 "lobject.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 116 "lobject.c"
    case 4: 
      __label__ = 25; break; //@line 116 "lobject.c"
    case 5: 
      var $12=$1; //@line 117 "lobject.c"
      var $13=(($12+8)|0); //@line 117 "lobject.c"
      var $14=HEAP32[(($13)>>2)]; //@line 117 "lobject.c"
      $i_o=$14; //@line 117 "lobject.c"
      var $15=$1; //@line 117 "lobject.c"
      var $16=$2; //@line 117 "lobject.c"
      var $17=$e; //@line 117 "lobject.c"
      var $18=$2; //@line 117 "lobject.c"
      var $19=$17; //@line 117 "lobject.c"
      var $20=$18; //@line 117 "lobject.c"
      var $21=((($19)-($20))|0); //@line 117 "lobject.c"
      var $22=__Z12luaS_newlstrP9lua_StatePKcj($15, $16, $21); //@line 117 "lobject.c"
      var $23=$22; //@line 117 "lobject.c"
      var $24=$i_o; //@line 117 "lobject.c"
      var $25=(($24)|0); //@line 117 "lobject.c"
      var $26=$25; //@line 117 "lobject.c"
      HEAP32[(($26)>>2)]=$23; //@line 117 "lobject.c"
      var $27=$i_o; //@line 117 "lobject.c"
      var $28=(($27+8)|0); //@line 117 "lobject.c"
      HEAP32[(($28)>>2)]=4; //@line 117 "lobject.c"
      var $29=$1; //@line 118 "lobject.c"
      var $30=(($29+28)|0); //@line 118 "lobject.c"
      var $31=HEAP32[(($30)>>2)]; //@line 118 "lobject.c"
      var $32=$31; //@line 118 "lobject.c"
      var $33=$1; //@line 118 "lobject.c"
      var $34=(($33+8)|0); //@line 118 "lobject.c"
      var $35=HEAP32[(($34)>>2)]; //@line 118 "lobject.c"
      var $36=$35; //@line 118 "lobject.c"
      var $37=$32; //@line 118 "lobject.c"
      var $38=$36; //@line 118 "lobject.c"
      var $39=((($37)-($38))|0); //@line 118 "lobject.c"
      var $40=(($39)|0) <= 12; //@line 118 "lobject.c"
      if ($40) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 118 "lobject.c"
    case 6: 
      var $42=$1; //@line 118 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($42, 1); //@line 118 "lobject.c"
      __label__ = 8; break; //@line 118 "lobject.c"
    case 7: 
      __label__ = 8; break; //@line 118 "lobject.c"
    case 8: 
      var $45=$1; //@line 118 "lobject.c"
      var $46=(($45+8)|0); //@line 118 "lobject.c"
      var $47=HEAP32[(($46)>>2)]; //@line 118 "lobject.c"
      var $48=(($47+12)|0); //@line 118 "lobject.c"
      HEAP32[(($46)>>2)]=$48; //@line 118 "lobject.c"
      var $49=$e; //@line 119 "lobject.c"
      var $50=(($49+1)|0); //@line 119 "lobject.c"
      var $51=HEAP8[($50)]; //@line 119 "lobject.c"
      var $52=(($51 << 24) >> 24); //@line 119 "lobject.c"
      if ((($52)|0) == 115) {
        __label__ = 9; break;
      }
      else if ((($52)|0) == 99) {
        __label__ = 12; break;
      }
      else if ((($52)|0) == 100) {
        __label__ = 13; break;
      }
      else if ((($52)|0) == 102) {
        __label__ = 17; break;
      }
      else if ((($52)|0) == 112) {
        __label__ = 21; break;
      }
      else if ((($52)|0) == 37) {
        __label__ = 22; break;
      }
      else {
      __label__ = 23; break;
      }
      
    case 9: 
      var $54=$3; //@line 121 "lobject.c"
      var $55=$54; //@line 121 "lobject.c"
      var $56=(($54+4)|0); //@line 121 "lobject.c"
      $3=$56; //@line 121 "lobject.c"
      var $57=HEAP32[(($55)>>2)]; //@line 121 "lobject.c"
      $s=$57; //@line 121 "lobject.c"
      var $58=$s; //@line 122 "lobject.c"
      var $59=(($58)|0)==0; //@line 122 "lobject.c"
      if ($59) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 122 "lobject.c"
    case 10: 
      $s=((STRING_TABLE.__str178)|0); //@line 122 "lobject.c"
      __label__ = 11; break; //@line 122 "lobject.c"
    case 11: 
      var $62=$1; //@line 123 "lobject.c"
      var $63=$s; //@line 123 "lobject.c"
      __Z7pushstrP9lua_StatePKc($62, $63); //@line 123 "lobject.c"
      __label__ = 24; break; //@line 124 "lobject.c"
    case 12: 
      var $65=$3; //@line 128 "lobject.c"
      var $66=$65; //@line 128 "lobject.c"
      var $67=(($65+4)|0); //@line 128 "lobject.c"
      $3=$67; //@line 128 "lobject.c"
      var $68=HEAP32[(($66)>>2)]; //@line 128 "lobject.c"
      var $69=(($68) & 255); //@line 128 "lobject.c"
      var $70=(($buff)|0); //@line 128 "lobject.c"
      HEAP8[($70)]=$69; //@line 128 "lobject.c"
      var $71=(($buff+1)|0); //@line 129 "lobject.c"
      HEAP8[($71)]=0; //@line 129 "lobject.c"
      var $72=$1; //@line 130 "lobject.c"
      var $73=(($buff)|0); //@line 130 "lobject.c"
      __Z7pushstrP9lua_StatePKc($72, $73); //@line 130 "lobject.c"
      __label__ = 24; break; //@line 131 "lobject.c"
    case 13: 
      var $75=$1; //@line 134 "lobject.c"
      var $76=(($75+8)|0); //@line 134 "lobject.c"
      var $77=HEAP32[(($76)>>2)]; //@line 134 "lobject.c"
      $i_o1=$77; //@line 134 "lobject.c"
      var $78=$3; //@line 134 "lobject.c"
      var $79=$78; //@line 134 "lobject.c"
      var $80=(($78+4)|0); //@line 134 "lobject.c"
      $3=$80; //@line 134 "lobject.c"
      var $81=HEAP32[(($79)>>2)]; //@line 134 "lobject.c"
      var $82=(($81)|0); //@line 134 "lobject.c"
      var $83=$i_o1; //@line 134 "lobject.c"
      var $84=(($83)|0); //@line 134 "lobject.c"
      var $85=$84; //@line 134 "lobject.c"
      (tempDoubleF64[0]=$82,HEAP32[(($85)>>2)]=tempDoubleI32[0],HEAP32[((($85)+(4))>>2)]=tempDoubleI32[1]); //@line 134 "lobject.c"
      var $86=$i_o1; //@line 134 "lobject.c"
      var $87=(($86+8)|0); //@line 134 "lobject.c"
      HEAP32[(($87)>>2)]=3; //@line 134 "lobject.c"
      var $88=$1; //@line 135 "lobject.c"
      var $89=(($88+28)|0); //@line 135 "lobject.c"
      var $90=HEAP32[(($89)>>2)]; //@line 135 "lobject.c"
      var $91=$90; //@line 135 "lobject.c"
      var $92=$1; //@line 135 "lobject.c"
      var $93=(($92+8)|0); //@line 135 "lobject.c"
      var $94=HEAP32[(($93)>>2)]; //@line 135 "lobject.c"
      var $95=$94; //@line 135 "lobject.c"
      var $96=$91; //@line 135 "lobject.c"
      var $97=$95; //@line 135 "lobject.c"
      var $98=((($96)-($97))|0); //@line 135 "lobject.c"
      var $99=(($98)|0) <= 12; //@line 135 "lobject.c"
      if ($99) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 135 "lobject.c"
    case 14: 
      var $101=$1; //@line 135 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($101, 1); //@line 135 "lobject.c"
      __label__ = 16; break; //@line 135 "lobject.c"
    case 15: 
      __label__ = 16; break; //@line 135 "lobject.c"
    case 16: 
      var $104=$1; //@line 135 "lobject.c"
      var $105=(($104+8)|0); //@line 135 "lobject.c"
      var $106=HEAP32[(($105)>>2)]; //@line 135 "lobject.c"
      var $107=(($106+12)|0); //@line 135 "lobject.c"
      HEAP32[(($105)>>2)]=$107; //@line 135 "lobject.c"
      __label__ = 24; break; //@line 136 "lobject.c"
    case 17: 
      var $109=$1; //@line 139 "lobject.c"
      var $110=(($109+8)|0); //@line 139 "lobject.c"
      var $111=HEAP32[(($110)>>2)]; //@line 139 "lobject.c"
      $i_o2=$111; //@line 139 "lobject.c"
      var $112=$3; //@line 139 "lobject.c"
      var $113=$112; //@line 139 "lobject.c"
      var $114=(($112+8)|0); //@line 139 "lobject.c"
      $3=$114; //@line 139 "lobject.c"
      var $115=(tempDoubleI32[0]=HEAP32[(($113)>>2)],tempDoubleI32[1]=HEAP32[((($113)+(4))>>2)],tempDoubleF64[0]); //@line 139 "lobject.c"
      var $116=$i_o2; //@line 139 "lobject.c"
      var $117=(($116)|0); //@line 139 "lobject.c"
      var $118=$117; //@line 139 "lobject.c"
      (tempDoubleF64[0]=$115,HEAP32[(($118)>>2)]=tempDoubleI32[0],HEAP32[((($118)+(4))>>2)]=tempDoubleI32[1]); //@line 139 "lobject.c"
      var $119=$i_o2; //@line 139 "lobject.c"
      var $120=(($119+8)|0); //@line 139 "lobject.c"
      HEAP32[(($120)>>2)]=3; //@line 139 "lobject.c"
      var $121=$1; //@line 140 "lobject.c"
      var $122=(($121+28)|0); //@line 140 "lobject.c"
      var $123=HEAP32[(($122)>>2)]; //@line 140 "lobject.c"
      var $124=$123; //@line 140 "lobject.c"
      var $125=$1; //@line 140 "lobject.c"
      var $126=(($125+8)|0); //@line 140 "lobject.c"
      var $127=HEAP32[(($126)>>2)]; //@line 140 "lobject.c"
      var $128=$127; //@line 140 "lobject.c"
      var $129=$124; //@line 140 "lobject.c"
      var $130=$128; //@line 140 "lobject.c"
      var $131=((($129)-($130))|0); //@line 140 "lobject.c"
      var $132=(($131)|0) <= 12; //@line 140 "lobject.c"
      if ($132) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 140 "lobject.c"
    case 18: 
      var $134=$1; //@line 140 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($134, 1); //@line 140 "lobject.c"
      __label__ = 20; break; //@line 140 "lobject.c"
    case 19: 
      __label__ = 20; break; //@line 140 "lobject.c"
    case 20: 
      var $137=$1; //@line 140 "lobject.c"
      var $138=(($137+8)|0); //@line 140 "lobject.c"
      var $139=HEAP32[(($138)>>2)]; //@line 140 "lobject.c"
      var $140=(($139+12)|0); //@line 140 "lobject.c"
      HEAP32[(($138)>>2)]=$140; //@line 140 "lobject.c"
      __label__ = 24; break; //@line 141 "lobject.c"
    case 21: 
      var $142=(($buff3)|0); //@line 145 "lobject.c"
      var $143=$3; //@line 145 "lobject.c"
      var $144=$143; //@line 145 "lobject.c"
      var $145=(($143+4)|0); //@line 145 "lobject.c"
      $3=$145; //@line 145 "lobject.c"
      var $146=HEAP32[(($144)>>2)]; //@line 145 "lobject.c"
      var $147=_sprintf($142, ((STRING_TABLE.__str279)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$146,tempInt)); //@line 145 "lobject.c"
      var $148=$1; //@line 146 "lobject.c"
      var $149=(($buff3)|0); //@line 146 "lobject.c"
      __Z7pushstrP9lua_StatePKc($148, $149); //@line 146 "lobject.c"
      __label__ = 24; break; //@line 147 "lobject.c"
    case 22: 
      var $151=$1; //@line 150 "lobject.c"
      __Z7pushstrP9lua_StatePKc($151, ((STRING_TABLE.__str380)|0)); //@line 150 "lobject.c"
      __label__ = 24; break; //@line 151 "lobject.c"
    case 23: 
      var $153=(($buff4)|0); //@line 155 "lobject.c"
      HEAP8[($153)]=37; //@line 155 "lobject.c"
      var $154=$e; //@line 156 "lobject.c"
      var $155=(($154+1)|0); //@line 156 "lobject.c"
      var $156=HEAP8[($155)]; //@line 156 "lobject.c"
      var $157=(($buff4+1)|0); //@line 156 "lobject.c"
      HEAP8[($157)]=$156; //@line 156 "lobject.c"
      var $158=(($buff4+2)|0); //@line 157 "lobject.c"
      HEAP8[($158)]=0; //@line 157 "lobject.c"
      var $159=$1; //@line 158 "lobject.c"
      var $160=(($buff4)|0); //@line 158 "lobject.c"
      __Z7pushstrP9lua_StatePKc($159, $160); //@line 158 "lobject.c"
      __label__ = 24; break; //@line 159 "lobject.c"
    case 24: 
      var $162=$n; //@line 162 "lobject.c"
      var $163=((($162)+(2))|0); //@line 162 "lobject.c"
      $n=$163; //@line 162 "lobject.c"
      var $164=$e; //@line 163 "lobject.c"
      var $165=(($164+2)|0); //@line 163 "lobject.c"
      $2=$165; //@line 163 "lobject.c"
      __label__ = 3; break; //@line 164 "lobject.c"
    case 25: 
      var $167=$1; //@line 165 "lobject.c"
      var $168=$2; //@line 165 "lobject.c"
      __Z7pushstrP9lua_StatePKc($167, $168); //@line 165 "lobject.c"
      var $169=$1; //@line 166 "lobject.c"
      var $170=$n; //@line 166 "lobject.c"
      var $171=((($170)+(1))|0); //@line 166 "lobject.c"
      var $172=$1; //@line 166 "lobject.c"
      var $173=(($172+8)|0); //@line 166 "lobject.c"
      var $174=HEAP32[(($173)>>2)]; //@line 166 "lobject.c"
      var $175=$1; //@line 166 "lobject.c"
      var $176=(($175+12)|0); //@line 166 "lobject.c"
      var $177=HEAP32[(($176)>>2)]; //@line 166 "lobject.c"
      var $178=$174; //@line 166 "lobject.c"
      var $179=$177; //@line 166 "lobject.c"
      var $180=((($178)-($179))|0); //@line 166 "lobject.c"
      var $181=((((($180)|0))/(12))&-1); //@line 166 "lobject.c"
      var $182=((($181)-(1))|0); //@line 166 "lobject.c"
      __Z11luaV_concatP9lua_Stateii($169, $171, $182); //@line 166 "lobject.c"
      var $183=$n; //@line 167 "lobject.c"
      var $184=$1; //@line 167 "lobject.c"
      var $185=(($184+8)|0); //@line 167 "lobject.c"
      var $186=HEAP32[(($185)>>2)]; //@line 167 "lobject.c"
      var $187=(((-$183))|0); //@line 167 "lobject.c"
      var $188=(($186+($187)*(12))|0); //@line 167 "lobject.c"
      HEAP32[(($185)>>2)]=$188; //@line 167 "lobject.c"
      var $189=$1; //@line 168 "lobject.c"
      var $190=(($189+8)|0); //@line 168 "lobject.c"
      var $191=HEAP32[(($190)>>2)]; //@line 168 "lobject.c"
      var $192=((($191)-(12))|0); //@line 168 "lobject.c"
      var $193=(($192)|0); //@line 168 "lobject.c"
      var $194=$193; //@line 168 "lobject.c"
      var $195=HEAP32[(($194)>>2)]; //@line 168 "lobject.c"
      var $196=$195; //@line 168 "lobject.c"
      var $197=(($196+16)|0); //@line 168 "lobject.c"
      var $198=$197; //@line 168 "lobject.c"
      STACKTOP = __stackBase__;
      return $198; //@line 168 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z17luaO_pushvfstringP9lua_StatePKcPc["X"]=1;

function __Z7pushstrP9lua_StatePKc($L, $str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i_o;
      $1=$L;
      $2=$str;
      var $3=$1; //@line 105 "lobject.c"
      var $4=(($3+8)|0); //@line 105 "lobject.c"
      var $5=HEAP32[(($4)>>2)]; //@line 105 "lobject.c"
      $i_o=$5; //@line 105 "lobject.c"
      var $6=$1; //@line 105 "lobject.c"
      var $7=$2; //@line 105 "lobject.c"
      var $8=$2; //@line 105 "lobject.c"
      var $9=_strlen($8); //@line 105 "lobject.c"
      var $10=__Z12luaS_newlstrP9lua_StatePKcj($6, $7, $9); //@line 105 "lobject.c"
      var $11=$10; //@line 105 "lobject.c"
      var $12=$i_o; //@line 105 "lobject.c"
      var $13=(($12)|0); //@line 105 "lobject.c"
      var $14=$13; //@line 105 "lobject.c"
      HEAP32[(($14)>>2)]=$11; //@line 105 "lobject.c"
      var $15=$i_o; //@line 105 "lobject.c"
      var $16=(($15+8)|0); //@line 105 "lobject.c"
      HEAP32[(($16)>>2)]=4; //@line 105 "lobject.c"
      var $17=$1; //@line 106 "lobject.c"
      var $18=(($17+28)|0); //@line 106 "lobject.c"
      var $19=HEAP32[(($18)>>2)]; //@line 106 "lobject.c"
      var $20=$19; //@line 106 "lobject.c"
      var $21=$1; //@line 106 "lobject.c"
      var $22=(($21+8)|0); //@line 106 "lobject.c"
      var $23=HEAP32[(($22)>>2)]; //@line 106 "lobject.c"
      var $24=$23; //@line 106 "lobject.c"
      var $25=$20; //@line 106 "lobject.c"
      var $26=$24; //@line 106 "lobject.c"
      var $27=((($25)-($26))|0); //@line 106 "lobject.c"
      var $28=(($27)|0) <= 12; //@line 106 "lobject.c"
      if ($28) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 106 "lobject.c"
    case 3: 
      var $30=$1; //@line 106 "lobject.c"
      __Z14luaD_growstackP9lua_Statei($30, 1); //@line 106 "lobject.c"
      __label__ = 5; break; //@line 106 "lobject.c"
    case 4: 
      __label__ = 5; break; //@line 106 "lobject.c"
    case 5: 
      var $33=$1; //@line 106 "lobject.c"
      var $34=(($33+8)|0); //@line 106 "lobject.c"
      var $35=HEAP32[(($34)>>2)]; //@line 106 "lobject.c"
      var $36=(($35+12)|0); //@line 106 "lobject.c"
      HEAP32[(($34)>>2)]=$36; //@line 106 "lobject.c"
      ;
      return; //@line 107 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16luaO_pushfstringP9lua_StatePKcz($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $2;
  var $msg;
  var $argp=__stackBase__;
  $1=$L;
  $2=$fmt;
  var $3=$argp; //@line 175 "lobject.c"
  HEAP32[(($3)>>2)]=arguments[__Z16luaO_pushfstringP9lua_StatePKcz.length]; //@line 175 "lobject.c"
  var $4=$1; //@line 176 "lobject.c"
  var $5=$2; //@line 176 "lobject.c"
  var $6=HEAP32[(($argp)>>2)]; //@line 176 "lobject.c"
  var $7=__Z17luaO_pushvfstringP9lua_StatePKcPc($4, $5, $6); //@line 176 "lobject.c"
  $msg=$7; //@line 176 "lobject.c"
  var $8=$argp; //@line 177 "lobject.c"
  ; //@line 177 "lobject.c"
  var $9=$msg; //@line 178 "lobject.c"
  STACKTOP = __stackBase__;
  return $9; //@line 178 "lobject.c"
}


function __Z12luaO_chunkidPcPKcj($out, $source, $bufflen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $len;
      $1=$out;
      $2=$source;
      $3=$bufflen;
      var $4=$2; //@line 183 "lobject.c"
      var $5=HEAP8[($4)]; //@line 183 "lobject.c"
      var $6=(($5 << 24) >> 24); //@line 183 "lobject.c"
      var $7=(($6)|0)==61; //@line 183 "lobject.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 183 "lobject.c"
    case 3: 
      var $9=$1; //@line 184 "lobject.c"
      var $10=$2; //@line 184 "lobject.c"
      var $11=(($10+1)|0); //@line 184 "lobject.c"
      var $12=$3; //@line 184 "lobject.c"
      var $13=_strncpy($9, $11, $12); //@line 184 "lobject.c"
      var $14=$3; //@line 185 "lobject.c"
      var $15=((($14)-(1))|0); //@line 185 "lobject.c"
      var $16=$1; //@line 185 "lobject.c"
      var $17=(($16+$15)|0); //@line 185 "lobject.c"
      HEAP8[($17)]=0; //@line 185 "lobject.c"
      __label__ = 15; break; //@line 186 "lobject.c"
    case 4: 
      var $19=$2; //@line 188 "lobject.c"
      var $20=HEAP8[($19)]; //@line 188 "lobject.c"
      var $21=(($20 << 24) >> 24); //@line 188 "lobject.c"
      var $22=(($21)|0)==64; //@line 188 "lobject.c"
      if ($22) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 188 "lobject.c"
    case 5: 
      var $24=$2; //@line 190 "lobject.c"
      var $25=(($24+1)|0); //@line 190 "lobject.c"
      $2=$25; //@line 190 "lobject.c"
      var $26=$3; //@line 191 "lobject.c"
      var $27=((($26)-(8))|0); //@line 191 "lobject.c"
      $3=$27; //@line 191 "lobject.c"
      var $28=$2; //@line 192 "lobject.c"
      var $29=_strlen($28); //@line 192 "lobject.c"
      $l=$29; //@line 192 "lobject.c"
      var $30=$1; //@line 193 "lobject.c"
      var $31=_strcpy($30, ((__str77)|0)); //@line 193 "lobject.c"
      var $32=$l; //@line 194 "lobject.c"
      var $33=$3; //@line 194 "lobject.c"
      var $34=(($32)>>>0) > (($33)>>>0); //@line 194 "lobject.c"
      if ($34) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 194 "lobject.c"
    case 6: 
      var $36=$l; //@line 195 "lobject.c"
      var $37=$3; //@line 195 "lobject.c"
      var $38=((($36)-($37))|0); //@line 195 "lobject.c"
      var $39=$2; //@line 195 "lobject.c"
      var $40=(($39+$38)|0); //@line 195 "lobject.c"
      $2=$40; //@line 195 "lobject.c"
      var $41=$1; //@line 196 "lobject.c"
      var $42=_strcat($41, ((STRING_TABLE.__str481)|0)); //@line 196 "lobject.c"
      __label__ = 7; break; //@line 197 "lobject.c"
    case 7: 
      var $44=$1; //@line 198 "lobject.c"
      var $45=$2; //@line 198 "lobject.c"
      var $46=_strcat($44, $45); //@line 198 "lobject.c"
      __label__ = 14; break; //@line 199 "lobject.c"
    case 8: 
      var $48=$2; //@line 201 "lobject.c"
      var $49=_strcspn($48, ((STRING_TABLE.__str582)|0)); //@line 201 "lobject.c"
      $len=$49; //@line 201 "lobject.c"
      var $50=$3; //@line 202 "lobject.c"
      var $51=((($50)-(17))|0); //@line 202 "lobject.c"
      $3=$51; //@line 202 "lobject.c"
      var $52=$len; //@line 203 "lobject.c"
      var $53=$3; //@line 203 "lobject.c"
      var $54=(($52)>>>0) > (($53)>>>0); //@line 203 "lobject.c"
      if ($54) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 203 "lobject.c"
    case 9: 
      var $56=$3; //@line 203 "lobject.c"
      $len=$56; //@line 203 "lobject.c"
      __label__ = 10; break; //@line 203 "lobject.c"
    case 10: 
      var $58=$1; //@line 204 "lobject.c"
      var $59=_strcpy($58, ((STRING_TABLE.__str683)|0)); //@line 204 "lobject.c"
      var $60=$len; //@line 205 "lobject.c"
      var $61=$2; //@line 205 "lobject.c"
      var $62=(($61+$60)|0); //@line 205 "lobject.c"
      var $63=HEAP8[($62)]; //@line 205 "lobject.c"
      var $64=(($63 << 24) >> 24); //@line 205 "lobject.c"
      var $65=(($64)|0)!=0; //@line 205 "lobject.c"
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 205 "lobject.c"
    case 11: 
      var $67=$1; //@line 206 "lobject.c"
      var $68=$2; //@line 206 "lobject.c"
      var $69=$len; //@line 206 "lobject.c"
      var $70=_strncat($67, $68, $69); //@line 206 "lobject.c"
      var $71=$1; //@line 207 "lobject.c"
      var $72=_strcat($71, ((STRING_TABLE.__str481)|0)); //@line 207 "lobject.c"
      __label__ = 13; break; //@line 208 "lobject.c"
    case 12: 
      var $74=$1; //@line 210 "lobject.c"
      var $75=$2; //@line 210 "lobject.c"
      var $76=_strcat($74, $75); //@line 210 "lobject.c"
      __label__ = 13; break; //@line 210 "lobject.c"
    case 13: 
      var $78=$1; //@line 211 "lobject.c"
      var $79=_strcat($78, ((STRING_TABLE.__str784)|0)); //@line 211 "lobject.c"
      __label__ = 14; break; //@line 212 "lobject.c"
    case 14: 
      __label__ = 15; break; //@line 213 "lobject.c"
    case 15: 
      ;
      return; //@line 214 "lobject.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12luaO_chunkidPcPKcj["X"]=1;

function __Z12block_followi($token) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$token;
      var $3=$2; //@line 872 "lparser.c"
      if ((($3)|0) == 260 || (($3)|0) == 261 || (($3)|0) == 262 || (($3)|0) == 276 || (($3)|0) == 287) {
        __label__ = 3; break;
      }
      else {
      __label__ = 4; break;
      }
      
    case 3: 
      $1=1; //@line 875 "lparser.c"
      __label__ = 5; break; //@line 875 "lparser.c"
    case 4: 
      $1=0; //@line 876 "lparser.c"
      __label__ = 5; break; //@line 876 "lparser.c"
    case 5: 
      var $7=$1; //@line 878 "lparser.c"
      ;
      return $7; //@line 878 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaY_parserP9lua_StateP3ZioP7MbufferPKc($L, $z, $buff, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 632; _memset(__stackBase__, 0, 632);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $lexstate=__stackBase__;
  var $funcstate=(__stackBase__)+(60);
  $1=$L;
  $2=$z;
  $3=$buff;
  $4=$name;
  var $5=$3; //@line 386 "lparser.c"
  var $6=(($lexstate+48)|0); //@line 386 "lparser.c"
  HEAP32[(($6)>>2)]=$5; //@line 386 "lparser.c"
  var $7=$1; //@line 387 "lparser.c"
  var $8=$2; //@line 387 "lparser.c"
  var $9=$1; //@line 387 "lparser.c"
  var $10=$4; //@line 387 "lparser.c"
  var $11=$4; //@line 387 "lparser.c"
  var $12=_strlen($11); //@line 387 "lparser.c"
  var $13=__Z12luaS_newlstrP9lua_StatePKcj($9, $10, $12); //@line 387 "lparser.c"
  __Z13luaX_setinputP9lua_StateP8LexStateP3ZioP7TString($7, $lexstate, $8, $13); //@line 387 "lparser.c"
  __Z9open_funcP8LexStateP9FuncState($lexstate, $funcstate); //@line 388 "lparser.c"
  var $14=(($funcstate)|0); //@line 389 "lparser.c"
  var $15=HEAP32[(($14)>>2)]; //@line 389 "lparser.c"
  var $16=(($15+74)|0); //@line 389 "lparser.c"
  HEAP8[($16)]=2; //@line 389 "lparser.c"
  __Z9luaX_nextP8LexState($lexstate); //@line 390 "lparser.c"
  __Z5chunkP8LexState($lexstate); //@line 391 "lparser.c"
  __Z5checkP8LexStatei($lexstate, 287); //@line 392 "lparser.c"
  __Z10close_funcP8LexState($lexstate); //@line 393 "lparser.c"
  var $17=(($funcstate)|0); //@line 397 "lparser.c"
  var $18=HEAP32[(($17)>>2)]; //@line 397 "lparser.c"
  STACKTOP = __stackBase__;
  return $18; //@line 397 "lparser.c"
}


function __Z9open_funcP8LexStateP9FuncState($ls, $fs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $L;
      var $f;
      var $i_o;
      var $i_o1;
      $1=$ls;
      $2=$fs;
      var $3=$1; //@line 329 "lparser.c"
      var $4=(($3+40)|0); //@line 329 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 329 "lparser.c"
      $L=$5; //@line 329 "lparser.c"
      var $6=$L; //@line 330 "lparser.c"
      var $7=__Z13luaF_newprotoP9lua_State($6); //@line 330 "lparser.c"
      $f=$7; //@line 330 "lparser.c"
      var $8=$f; //@line 331 "lparser.c"
      var $9=$2; //@line 331 "lparser.c"
      var $10=(($9)|0); //@line 331 "lparser.c"
      HEAP32[(($10)>>2)]=$8; //@line 331 "lparser.c"
      var $11=$1; //@line 332 "lparser.c"
      var $12=(($11+36)|0); //@line 332 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 332 "lparser.c"
      var $14=$2; //@line 332 "lparser.c"
      var $15=(($14+8)|0); //@line 332 "lparser.c"
      HEAP32[(($15)>>2)]=$13; //@line 332 "lparser.c"
      var $16=$1; //@line 333 "lparser.c"
      var $17=$2; //@line 333 "lparser.c"
      var $18=(($17+12)|0); //@line 333 "lparser.c"
      HEAP32[(($18)>>2)]=$16; //@line 333 "lparser.c"
      var $19=$L; //@line 334 "lparser.c"
      var $20=$2; //@line 334 "lparser.c"
      var $21=(($20+16)|0); //@line 334 "lparser.c"
      HEAP32[(($21)>>2)]=$19; //@line 334 "lparser.c"
      var $22=$2; //@line 335 "lparser.c"
      var $23=$1; //@line 335 "lparser.c"
      var $24=(($23+36)|0); //@line 335 "lparser.c"
      HEAP32[(($24)>>2)]=$22; //@line 335 "lparser.c"
      var $25=$2; //@line 336 "lparser.c"
      var $26=(($25+24)|0); //@line 336 "lparser.c"
      HEAP32[(($26)>>2)]=0; //@line 336 "lparser.c"
      var $27=$2; //@line 337 "lparser.c"
      var $28=(($27+28)|0); //@line 337 "lparser.c"
      HEAP32[(($28)>>2)]=-1; //@line 337 "lparser.c"
      var $29=$2; //@line 338 "lparser.c"
      var $30=(($29+32)|0); //@line 338 "lparser.c"
      HEAP32[(($30)>>2)]=-1; //@line 338 "lparser.c"
      var $31=$2; //@line 339 "lparser.c"
      var $32=(($31+36)|0); //@line 339 "lparser.c"
      HEAP32[(($32)>>2)]=0; //@line 339 "lparser.c"
      var $33=$2; //@line 340 "lparser.c"
      var $34=(($33+40)|0); //@line 340 "lparser.c"
      HEAP32[(($34)>>2)]=0; //@line 340 "lparser.c"
      var $35=$2; //@line 341 "lparser.c"
      var $36=(($35+44)|0); //@line 341 "lparser.c"
      HEAP32[(($36)>>2)]=0; //@line 341 "lparser.c"
      var $37=$2; //@line 342 "lparser.c"
      var $38=(($37+48)|0); //@line 342 "lparser.c"
      HEAP16[(($38)>>1)]=0; //@line 342 "lparser.c"
      var $39=$2; //@line 343 "lparser.c"
      var $40=(($39+50)|0); //@line 343 "lparser.c"
      HEAP8[($40)]=0; //@line 343 "lparser.c"
      var $41=$2; //@line 344 "lparser.c"
      var $42=(($41+20)|0); //@line 344 "lparser.c"
      HEAP32[(($42)>>2)]=0; //@line 344 "lparser.c"
      var $43=$1; //@line 345 "lparser.c"
      var $44=(($43+52)|0); //@line 345 "lparser.c"
      var $45=HEAP32[(($44)>>2)]; //@line 345 "lparser.c"
      var $46=$f; //@line 345 "lparser.c"
      var $47=(($46+32)|0); //@line 345 "lparser.c"
      HEAP32[(($47)>>2)]=$45; //@line 345 "lparser.c"
      var $48=$f; //@line 346 "lparser.c"
      var $49=(($48+75)|0); //@line 346 "lparser.c"
      HEAP8[($49)]=2; //@line 346 "lparser.c"
      var $50=$L; //@line 347 "lparser.c"
      var $51=__Z8luaH_newP9lua_Stateii($50, 0, 0); //@line 347 "lparser.c"
      var $52=$2; //@line 347 "lparser.c"
      var $53=(($52+4)|0); //@line 347 "lparser.c"
      HEAP32[(($53)>>2)]=$51; //@line 347 "lparser.c"
      var $54=$L; //@line 349 "lparser.c"
      var $55=(($54+8)|0); //@line 349 "lparser.c"
      var $56=HEAP32[(($55)>>2)]; //@line 349 "lparser.c"
      $i_o=$56; //@line 349 "lparser.c"
      var $57=$2; //@line 349 "lparser.c"
      var $58=(($57+4)|0); //@line 349 "lparser.c"
      var $59=HEAP32[(($58)>>2)]; //@line 349 "lparser.c"
      var $60=$59; //@line 349 "lparser.c"
      var $61=$i_o; //@line 349 "lparser.c"
      var $62=(($61)|0); //@line 349 "lparser.c"
      var $63=$62; //@line 349 "lparser.c"
      HEAP32[(($63)>>2)]=$60; //@line 349 "lparser.c"
      var $64=$i_o; //@line 349 "lparser.c"
      var $65=(($64+8)|0); //@line 349 "lparser.c"
      HEAP32[(($65)>>2)]=5; //@line 349 "lparser.c"
      var $66=$L; //@line 350 "lparser.c"
      var $67=(($66+28)|0); //@line 350 "lparser.c"
      var $68=HEAP32[(($67)>>2)]; //@line 350 "lparser.c"
      var $69=$68; //@line 350 "lparser.c"
      var $70=$L; //@line 350 "lparser.c"
      var $71=(($70+8)|0); //@line 350 "lparser.c"
      var $72=HEAP32[(($71)>>2)]; //@line 350 "lparser.c"
      var $73=$72; //@line 350 "lparser.c"
      var $74=$69; //@line 350 "lparser.c"
      var $75=$73; //@line 350 "lparser.c"
      var $76=((($74)-($75))|0); //@line 350 "lparser.c"
      var $77=(($76)|0) <= 12; //@line 350 "lparser.c"
      if ($77) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 350 "lparser.c"
    case 3: 
      var $79=$L; //@line 350 "lparser.c"
      __Z14luaD_growstackP9lua_Statei($79, 1); //@line 350 "lparser.c"
      __label__ = 5; break; //@line 350 "lparser.c"
    case 4: 
      __label__ = 5; break; //@line 350 "lparser.c"
    case 5: 
      var $82=$L; //@line 350 "lparser.c"
      var $83=(($82+8)|0); //@line 350 "lparser.c"
      var $84=HEAP32[(($83)>>2)]; //@line 350 "lparser.c"
      var $85=(($84+12)|0); //@line 350 "lparser.c"
      HEAP32[(($83)>>2)]=$85; //@line 350 "lparser.c"
      var $86=$L; //@line 351 "lparser.c"
      var $87=(($86+8)|0); //@line 351 "lparser.c"
      var $88=HEAP32[(($87)>>2)]; //@line 351 "lparser.c"
      $i_o1=$88; //@line 351 "lparser.c"
      var $89=$f; //@line 351 "lparser.c"
      var $90=$89; //@line 351 "lparser.c"
      var $91=$i_o1; //@line 351 "lparser.c"
      var $92=(($91)|0); //@line 351 "lparser.c"
      var $93=$92; //@line 351 "lparser.c"
      HEAP32[(($93)>>2)]=$90; //@line 351 "lparser.c"
      var $94=$i_o1; //@line 351 "lparser.c"
      var $95=(($94+8)|0); //@line 351 "lparser.c"
      HEAP32[(($95)>>2)]=9; //@line 351 "lparser.c"
      var $96=$L; //@line 352 "lparser.c"
      var $97=(($96+28)|0); //@line 352 "lparser.c"
      var $98=HEAP32[(($97)>>2)]; //@line 352 "lparser.c"
      var $99=$98; //@line 352 "lparser.c"
      var $100=$L; //@line 352 "lparser.c"
      var $101=(($100+8)|0); //@line 352 "lparser.c"
      var $102=HEAP32[(($101)>>2)]; //@line 352 "lparser.c"
      var $103=$102; //@line 352 "lparser.c"
      var $104=$99; //@line 352 "lparser.c"
      var $105=$103; //@line 352 "lparser.c"
      var $106=((($104)-($105))|0); //@line 352 "lparser.c"
      var $107=(($106)|0) <= 12; //@line 352 "lparser.c"
      if ($107) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 352 "lparser.c"
    case 6: 
      var $109=$L; //@line 352 "lparser.c"
      __Z14luaD_growstackP9lua_Statei($109, 1); //@line 352 "lparser.c"
      __label__ = 8; break; //@line 352 "lparser.c"
    case 7: 
      __label__ = 8; break; //@line 352 "lparser.c"
    case 8: 
      var $112=$L; //@line 352 "lparser.c"
      var $113=(($112+8)|0); //@line 352 "lparser.c"
      var $114=HEAP32[(($113)>>2)]; //@line 352 "lparser.c"
      var $115=(($114+12)|0); //@line 352 "lparser.c"
      HEAP32[(($113)>>2)]=$115; //@line 352 "lparser.c"
      ;
      return; //@line 353 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9open_funcP8LexStateP9FuncState["X"]=1;

function __Z5chunkP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $islast;
      $1=$ls;
      $islast=0; //@line 1327 "lparser.c"
      var $2=$1; //@line 1328 "lparser.c"
      __Z10enterlevelP8LexState($2); //@line 1328 "lparser.c"
      __label__ = 3; break; //@line 1329 "lparser.c"
    case 3: 
      var $4=$islast; //@line 1329 "lparser.c"
      var $5=(($4)|0)!=0; //@line 1329 "lparser.c"
      if ($5) { var $15 = 0;__label__ = 5; break; } else { __label__ = 4; break; } //@line 1329 "lparser.c"
    case 4: 
      var $7=$1; //@line 1329 "lparser.c"
      var $8=(($7+12)|0); //@line 1329 "lparser.c"
      var $9=(($8)|0); //@line 1329 "lparser.c"
      var $10=HEAP32[(($9)>>2)]; //@line 1329 "lparser.c"
      var $11=__Z12block_followi($10); //@line 1329 "lparser.c"
      var $12=(($11)|0)!=0; //@line 1329 "lparser.c"
      var $13=$12 ^ 1; //@line 1329 "lparser.c"
      var $15 = $13;__label__ = 5; break; //@line 1329 "lparser.c"
    case 5: 
      var $15;
      if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1329 "lparser.c"
    case 6: 
      var $17=$1; //@line 1330 "lparser.c"
      var $18=__Z9statementP8LexState($17); //@line 1330 "lparser.c"
      $islast=$18; //@line 1330 "lparser.c"
      var $19=$1; //@line 1331 "lparser.c"
      var $20=__Z8testnextP8LexStatei($19, 59); //@line 1331 "lparser.c"
      var $21=$1; //@line 1334 "lparser.c"
      var $22=(($21+36)|0); //@line 1334 "lparser.c"
      var $23=HEAP32[(($22)>>2)]; //@line 1334 "lparser.c"
      var $24=(($23+50)|0); //@line 1334 "lparser.c"
      var $25=HEAPU8[($24)]; //@line 1334 "lparser.c"
      var $26=(($25)&255); //@line 1334 "lparser.c"
      var $27=$1; //@line 1334 "lparser.c"
      var $28=(($27+36)|0); //@line 1334 "lparser.c"
      var $29=HEAP32[(($28)>>2)]; //@line 1334 "lparser.c"
      var $30=(($29+36)|0); //@line 1334 "lparser.c"
      HEAP32[(($30)>>2)]=$26; //@line 1334 "lparser.c"
      __label__ = 3; break; //@line 1335 "lparser.c"
    case 7: 
      var $32=$1; //@line 1336 "lparser.c"
      var $33=(($32+40)|0); //@line 1336 "lparser.c"
      var $34=HEAP32[(($33)>>2)]; //@line 1336 "lparser.c"
      var $35=(($34+52)|0); //@line 1336 "lparser.c"
      var $36=HEAP16[(($35)>>1)]; //@line 1336 "lparser.c"
      var $37=((($36)-(1))&65535); //@line 1336 "lparser.c"
      HEAP16[(($35)>>1)]=$37; //@line 1336 "lparser.c"
      ;
      return; //@line 1337 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5checkP8LexStatei($ls, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ls;
      $2=$c;
      var $3=$1; //@line 90 "lparser.c"
      var $4=(($3+12)|0); //@line 90 "lparser.c"
      var $5=(($4)|0); //@line 90 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 90 "lparser.c"
      var $7=$2; //@line 90 "lparser.c"
      var $8=(($6)|0)!=(($7)|0); //@line 90 "lparser.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 90 "lparser.c"
    case 3: 
      var $10=$1; //@line 91 "lparser.c"
      var $11=$2; //@line 91 "lparser.c"
      __Z14error_expectedP8LexStatei($10, $11); //@line 91 "lparser.c"
      __label__ = 4; break; //@line 91 "lparser.c"
    case 4: 
      ;
      return; //@line 92 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10close_funcP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $fs;
      var $f;
      $1=$ls;
      var $2=$1; //@line 357 "lparser.c"
      var $3=(($2+40)|0); //@line 357 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 357 "lparser.c"
      $L=$4; //@line 357 "lparser.c"
      var $5=$1; //@line 358 "lparser.c"
      var $6=(($5+36)|0); //@line 358 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 358 "lparser.c"
      $fs=$7; //@line 358 "lparser.c"
      var $8=$fs; //@line 359 "lparser.c"
      var $9=(($8)|0); //@line 359 "lparser.c"
      var $10=HEAP32[(($9)>>2)]; //@line 359 "lparser.c"
      $f=$10; //@line 359 "lparser.c"
      var $11=$1; //@line 360 "lparser.c"
      __Z10removevarsP8LexStatei($11, 0); //@line 360 "lparser.c"
      var $12=$fs; //@line 361 "lparser.c"
      __Z8luaK_retP9FuncStateii($12, 0, 0); //@line 361 "lparser.c"
      var $13=$fs; //@line 362 "lparser.c"
      var $14=(($13+24)|0); //@line 362 "lparser.c"
      var $15=HEAP32[(($14)>>2)]; //@line 362 "lparser.c"
      var $16=((($15)+(1))|0); //@line 362 "lparser.c"
      var $17=(($16)>>>0) <= 1073741823; //@line 362 "lparser.c"
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 362 "lparser.c"
    case 3: 
      var $19=$L; //@line 362 "lparser.c"
      var $20=$f; //@line 362 "lparser.c"
      var $21=(($20+12)|0); //@line 362 "lparser.c"
      var $22=HEAP32[(($21)>>2)]; //@line 362 "lparser.c"
      var $23=$22; //@line 362 "lparser.c"
      var $24=$f; //@line 362 "lparser.c"
      var $25=(($24+44)|0); //@line 362 "lparser.c"
      var $26=HEAP32[(($25)>>2)]; //@line 362 "lparser.c"
      var $27=((($26<<2))|0); //@line 362 "lparser.c"
      var $28=$fs; //@line 362 "lparser.c"
      var $29=(($28+24)|0); //@line 362 "lparser.c"
      var $30=HEAP32[(($29)>>2)]; //@line 362 "lparser.c"
      var $31=((($30<<2))|0); //@line 362 "lparser.c"
      var $32=__Z13luaM_realloc_P9lua_StatePvjj($19, $23, $27, $31); //@line 362 "lparser.c"
      var $37 = $32;__label__ = 5; break; //@line 362 "lparser.c"
    case 4: 
      var $34=$L; //@line 362 "lparser.c"
      var $35=__Z11luaM_toobigP9lua_State($34); //@line 362 "lparser.c"
      var $37 = $35;__label__ = 5; break; //@line 362 "lparser.c"
    case 5: 
      var $37; //@line 362 "lparser.c"
      var $38=$37; //@line 362 "lparser.c"
      var $39=$f; //@line 362 "lparser.c"
      var $40=(($39+12)|0); //@line 362 "lparser.c"
      HEAP32[(($40)>>2)]=$38; //@line 362 "lparser.c"
      var $41=$fs; //@line 363 "lparser.c"
      var $42=(($41+24)|0); //@line 363 "lparser.c"
      var $43=HEAP32[(($42)>>2)]; //@line 363 "lparser.c"
      var $44=$f; //@line 363 "lparser.c"
      var $45=(($44+44)|0); //@line 363 "lparser.c"
      HEAP32[(($45)>>2)]=$43; //@line 363 "lparser.c"
      var $46=$fs; //@line 364 "lparser.c"
      var $47=(($46+24)|0); //@line 364 "lparser.c"
      var $48=HEAP32[(($47)>>2)]; //@line 364 "lparser.c"
      var $49=((($48)+(1))|0); //@line 364 "lparser.c"
      var $50=(($49)>>>0) <= 1073741823; //@line 364 "lparser.c"
      if ($50) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 364 "lparser.c"
    case 6: 
      var $52=$L; //@line 364 "lparser.c"
      var $53=$f; //@line 364 "lparser.c"
      var $54=(($53+20)|0); //@line 364 "lparser.c"
      var $55=HEAP32[(($54)>>2)]; //@line 364 "lparser.c"
      var $56=$55; //@line 364 "lparser.c"
      var $57=$f; //@line 364 "lparser.c"
      var $58=(($57+48)|0); //@line 364 "lparser.c"
      var $59=HEAP32[(($58)>>2)]; //@line 364 "lparser.c"
      var $60=((($59<<2))|0); //@line 364 "lparser.c"
      var $61=$fs; //@line 364 "lparser.c"
      var $62=(($61+24)|0); //@line 364 "lparser.c"
      var $63=HEAP32[(($62)>>2)]; //@line 364 "lparser.c"
      var $64=((($63<<2))|0); //@line 364 "lparser.c"
      var $65=__Z13luaM_realloc_P9lua_StatePvjj($52, $56, $60, $64); //@line 364 "lparser.c"
      var $70 = $65;__label__ = 8; break; //@line 364 "lparser.c"
    case 7: 
      var $67=$L; //@line 364 "lparser.c"
      var $68=__Z11luaM_toobigP9lua_State($67); //@line 364 "lparser.c"
      var $70 = $68;__label__ = 8; break; //@line 364 "lparser.c"
    case 8: 
      var $70; //@line 364 "lparser.c"
      var $71=$70; //@line 364 "lparser.c"
      var $72=$f; //@line 364 "lparser.c"
      var $73=(($72+20)|0); //@line 364 "lparser.c"
      HEAP32[(($73)>>2)]=$71; //@line 364 "lparser.c"
      var $74=$fs; //@line 365 "lparser.c"
      var $75=(($74+24)|0); //@line 365 "lparser.c"
      var $76=HEAP32[(($75)>>2)]; //@line 365 "lparser.c"
      var $77=$f; //@line 365 "lparser.c"
      var $78=(($77+48)|0); //@line 365 "lparser.c"
      HEAP32[(($78)>>2)]=$76; //@line 365 "lparser.c"
      var $79=$fs; //@line 366 "lparser.c"
      var $80=(($79+40)|0); //@line 366 "lparser.c"
      var $81=HEAP32[(($80)>>2)]; //@line 366 "lparser.c"
      var $82=((($81)+(1))|0); //@line 366 "lparser.c"
      var $83=(($82)>>>0) <= 357913941; //@line 366 "lparser.c"
      if ($83) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 366 "lparser.c"
    case 9: 
      var $85=$L; //@line 366 "lparser.c"
      var $86=$f; //@line 366 "lparser.c"
      var $87=(($86+8)|0); //@line 366 "lparser.c"
      var $88=HEAP32[(($87)>>2)]; //@line 366 "lparser.c"
      var $89=$88; //@line 366 "lparser.c"
      var $90=$f; //@line 366 "lparser.c"
      var $91=(($90+40)|0); //@line 366 "lparser.c"
      var $92=HEAP32[(($91)>>2)]; //@line 366 "lparser.c"
      var $93=((($92)*(12))|0); //@line 366 "lparser.c"
      var $94=$fs; //@line 366 "lparser.c"
      var $95=(($94+40)|0); //@line 366 "lparser.c"
      var $96=HEAP32[(($95)>>2)]; //@line 366 "lparser.c"
      var $97=((($96)*(12))|0); //@line 366 "lparser.c"
      var $98=__Z13luaM_realloc_P9lua_StatePvjj($85, $89, $93, $97); //@line 366 "lparser.c"
      var $103 = $98;__label__ = 11; break; //@line 366 "lparser.c"
    case 10: 
      var $100=$L; //@line 366 "lparser.c"
      var $101=__Z11luaM_toobigP9lua_State($100); //@line 366 "lparser.c"
      var $103 = $101;__label__ = 11; break; //@line 366 "lparser.c"
    case 11: 
      var $103; //@line 366 "lparser.c"
      var $104=$103; //@line 366 "lparser.c"
      var $105=$f; //@line 366 "lparser.c"
      var $106=(($105+8)|0); //@line 366 "lparser.c"
      HEAP32[(($106)>>2)]=$104; //@line 366 "lparser.c"
      var $107=$fs; //@line 367 "lparser.c"
      var $108=(($107+40)|0); //@line 367 "lparser.c"
      var $109=HEAP32[(($108)>>2)]; //@line 367 "lparser.c"
      var $110=$f; //@line 367 "lparser.c"
      var $111=(($110+40)|0); //@line 367 "lparser.c"
      HEAP32[(($111)>>2)]=$109; //@line 367 "lparser.c"
      var $112=$fs; //@line 368 "lparser.c"
      var $113=(($112+44)|0); //@line 368 "lparser.c"
      var $114=HEAP32[(($113)>>2)]; //@line 368 "lparser.c"
      var $115=((($114)+(1))|0); //@line 368 "lparser.c"
      var $116=(($115)>>>0) <= 1073741823; //@line 368 "lparser.c"
      if ($116) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 368 "lparser.c"
    case 12: 
      var $118=$L; //@line 368 "lparser.c"
      var $119=$f; //@line 368 "lparser.c"
      var $120=(($119+16)|0); //@line 368 "lparser.c"
      var $121=HEAP32[(($120)>>2)]; //@line 368 "lparser.c"
      var $122=$121; //@line 368 "lparser.c"
      var $123=$f; //@line 368 "lparser.c"
      var $124=(($123+52)|0); //@line 368 "lparser.c"
      var $125=HEAP32[(($124)>>2)]; //@line 368 "lparser.c"
      var $126=((($125<<2))|0); //@line 368 "lparser.c"
      var $127=$fs; //@line 368 "lparser.c"
      var $128=(($127+44)|0); //@line 368 "lparser.c"
      var $129=HEAP32[(($128)>>2)]; //@line 368 "lparser.c"
      var $130=((($129<<2))|0); //@line 368 "lparser.c"
      var $131=__Z13luaM_realloc_P9lua_StatePvjj($118, $122, $126, $130); //@line 368 "lparser.c"
      var $136 = $131;__label__ = 14; break; //@line 368 "lparser.c"
    case 13: 
      var $133=$L; //@line 368 "lparser.c"
      var $134=__Z11luaM_toobigP9lua_State($133); //@line 368 "lparser.c"
      var $136 = $134;__label__ = 14; break; //@line 368 "lparser.c"
    case 14: 
      var $136; //@line 368 "lparser.c"
      var $137=$136; //@line 368 "lparser.c"
      var $138=$f; //@line 368 "lparser.c"
      var $139=(($138+16)|0); //@line 368 "lparser.c"
      HEAP32[(($139)>>2)]=$137; //@line 368 "lparser.c"
      var $140=$fs; //@line 369 "lparser.c"
      var $141=(($140+44)|0); //@line 369 "lparser.c"
      var $142=HEAP32[(($141)>>2)]; //@line 369 "lparser.c"
      var $143=$f; //@line 369 "lparser.c"
      var $144=(($143+52)|0); //@line 369 "lparser.c"
      HEAP32[(($144)>>2)]=$142; //@line 369 "lparser.c"
      var $145=$fs; //@line 370 "lparser.c"
      var $146=(($145+48)|0); //@line 370 "lparser.c"
      var $147=HEAP16[(($146)>>1)]; //@line 370 "lparser.c"
      var $148=(($147 << 16) >> 16); //@line 370 "lparser.c"
      var $149=((($148)+(1))|0); //@line 370 "lparser.c"
      var $150=(($149)>>>0) <= 357913941; //@line 370 "lparser.c"
      if ($150) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 370 "lparser.c"
    case 15: 
      var $152=$L; //@line 370 "lparser.c"
      var $153=$f; //@line 370 "lparser.c"
      var $154=(($153+24)|0); //@line 370 "lparser.c"
      var $155=HEAP32[(($154)>>2)]; //@line 370 "lparser.c"
      var $156=$155; //@line 370 "lparser.c"
      var $157=$f; //@line 370 "lparser.c"
      var $158=(($157+56)|0); //@line 370 "lparser.c"
      var $159=HEAP32[(($158)>>2)]; //@line 370 "lparser.c"
      var $160=((($159)*(12))|0); //@line 370 "lparser.c"
      var $161=$fs; //@line 370 "lparser.c"
      var $162=(($161+48)|0); //@line 370 "lparser.c"
      var $163=HEAP16[(($162)>>1)]; //@line 370 "lparser.c"
      var $164=(($163 << 16) >> 16); //@line 370 "lparser.c"
      var $165=((($164)*(12))|0); //@line 370 "lparser.c"
      var $166=__Z13luaM_realloc_P9lua_StatePvjj($152, $156, $160, $165); //@line 370 "lparser.c"
      var $171 = $166;__label__ = 17; break; //@line 370 "lparser.c"
    case 16: 
      var $168=$L; //@line 370 "lparser.c"
      var $169=__Z11luaM_toobigP9lua_State($168); //@line 370 "lparser.c"
      var $171 = $169;__label__ = 17; break; //@line 370 "lparser.c"
    case 17: 
      var $171; //@line 370 "lparser.c"
      var $172=$171; //@line 370 "lparser.c"
      var $173=$f; //@line 370 "lparser.c"
      var $174=(($173+24)|0); //@line 370 "lparser.c"
      HEAP32[(($174)>>2)]=$172; //@line 370 "lparser.c"
      var $175=$fs; //@line 371 "lparser.c"
      var $176=(($175+48)|0); //@line 371 "lparser.c"
      var $177=HEAP16[(($176)>>1)]; //@line 371 "lparser.c"
      var $178=(($177 << 16) >> 16); //@line 371 "lparser.c"
      var $179=$f; //@line 371 "lparser.c"
      var $180=(($179+56)|0); //@line 371 "lparser.c"
      HEAP32[(($180)>>2)]=$178; //@line 371 "lparser.c"
      var $181=$f; //@line 372 "lparser.c"
      var $182=(($181+72)|0); //@line 372 "lparser.c"
      var $183=HEAPU8[($182)]; //@line 372 "lparser.c"
      var $184=(($183)&255); //@line 372 "lparser.c"
      var $185=((($184)+(1))|0); //@line 372 "lparser.c"
      var $186=(($185)>>>0) <= 1073741823; //@line 372 "lparser.c"
      if ($186) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 372 "lparser.c"
    case 18: 
      var $188=$L; //@line 372 "lparser.c"
      var $189=$f; //@line 372 "lparser.c"
      var $190=(($189+28)|0); //@line 372 "lparser.c"
      var $191=HEAP32[(($190)>>2)]; //@line 372 "lparser.c"
      var $192=$191; //@line 372 "lparser.c"
      var $193=$f; //@line 372 "lparser.c"
      var $194=(($193+36)|0); //@line 372 "lparser.c"
      var $195=HEAP32[(($194)>>2)]; //@line 372 "lparser.c"
      var $196=((($195<<2))|0); //@line 372 "lparser.c"
      var $197=$f; //@line 372 "lparser.c"
      var $198=(($197+72)|0); //@line 372 "lparser.c"
      var $199=HEAPU8[($198)]; //@line 372 "lparser.c"
      var $200=(($199)&255); //@line 372 "lparser.c"
      var $201=((($200<<2))|0); //@line 372 "lparser.c"
      var $202=__Z13luaM_realloc_P9lua_StatePvjj($188, $192, $196, $201); //@line 372 "lparser.c"
      var $207 = $202;__label__ = 20; break; //@line 372 "lparser.c"
    case 19: 
      var $204=$L; //@line 372 "lparser.c"
      var $205=__Z11luaM_toobigP9lua_State($204); //@line 372 "lparser.c"
      var $207 = $205;__label__ = 20; break; //@line 372 "lparser.c"
    case 20: 
      var $207; //@line 372 "lparser.c"
      var $208=$207; //@line 372 "lparser.c"
      var $209=$f; //@line 372 "lparser.c"
      var $210=(($209+28)|0); //@line 372 "lparser.c"
      HEAP32[(($210)>>2)]=$208; //@line 372 "lparser.c"
      var $211=$f; //@line 373 "lparser.c"
      var $212=(($211+72)|0); //@line 373 "lparser.c"
      var $213=HEAPU8[($212)]; //@line 373 "lparser.c"
      var $214=(($213)&255); //@line 373 "lparser.c"
      var $215=$f; //@line 373 "lparser.c"
      var $216=(($215+36)|0); //@line 373 "lparser.c"
      HEAP32[(($216)>>2)]=$214; //@line 373 "lparser.c"
      var $217=$fs; //@line 376 "lparser.c"
      var $218=(($217+8)|0); //@line 376 "lparser.c"
      var $219=HEAP32[(($218)>>2)]; //@line 376 "lparser.c"
      var $220=$1; //@line 376 "lparser.c"
      var $221=(($220+36)|0); //@line 376 "lparser.c"
      HEAP32[(($221)>>2)]=$219; //@line 376 "lparser.c"
      var $222=$L; //@line 377 "lparser.c"
      var $223=(($222+8)|0); //@line 377 "lparser.c"
      var $224=HEAP32[(($223)>>2)]; //@line 377 "lparser.c"
      var $225=((($224)-(24))|0); //@line 377 "lparser.c"
      HEAP32[(($223)>>2)]=$225; //@line 377 "lparser.c"
      var $226=$fs; //@line 379 "lparser.c"
      var $227=(($226)|0)!=0; //@line 379 "lparser.c"
      if ($227) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 379 "lparser.c"
    case 21: 
      var $229=$1; //@line 379 "lparser.c"
      __Z12anchor_tokenP8LexState($229); //@line 379 "lparser.c"
      __label__ = 22; break; //@line 379 "lparser.c"
    case 22: 
      ;
      return; //@line 380 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10close_funcP8LexState["X"]=1;

function __Z10enterlevelP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$ls;
      var $2=$1; //@line 277 "lparser.c"
      var $3=(($2+40)|0); //@line 277 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 277 "lparser.c"
      var $5=(($4+52)|0); //@line 277 "lparser.c"
      var $6=HEAP16[(($5)>>1)]; //@line 277 "lparser.c"
      var $7=((($6)+(1))&65535); //@line 277 "lparser.c"
      HEAP16[(($5)>>1)]=$7; //@line 277 "lparser.c"
      var $8=(($7)&65535); //@line 277 "lparser.c"
      var $9=(($8)|0) > 200; //@line 277 "lparser.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 277 "lparser.c"
    case 3: 
      var $11=$1; //@line 278 "lparser.c"
      __Z13luaX_lexerrorP8LexStatePKci($11, ((STRING_TABLE.__str27156)|0), 0); //@line 278 "lparser.c"
      __label__ = 4; break; //@line 278 "lparser.c"
    case 4: 
      ;
      return; //@line 279 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9statementP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $line;
      $2=$ls;
      var $3=$2; //@line 1272 "lparser.c"
      var $4=(($3+4)|0); //@line 1272 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 1272 "lparser.c"
      $line=$5; //@line 1272 "lparser.c"
      var $6=$2; //@line 1273 "lparser.c"
      var $7=(($6+12)|0); //@line 1273 "lparser.c"
      var $8=(($7)|0); //@line 1273 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 1273 "lparser.c"
      if ((($9)|0) == 266) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 277) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 259) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 264) {
        __label__ = 6; break;
      }
      else if ((($9)|0) == 272) {
        __label__ = 7; break;
      }
      else if ((($9)|0) == 265) {
        __label__ = 8; break;
      }
      else if ((($9)|0) == 268) {
        __label__ = 9; break;
      }
      else if ((($9)|0) == 273) {
        __label__ = 13; break;
      }
      else if ((($9)|0) == 258) {
        __label__ = 14; break;
      }
      else {
      __label__ = 15; break;
      }
      
    case 3: 
      var $11=$2; //@line 1275 "lparser.c"
      var $12=$line; //@line 1275 "lparser.c"
      __Z6ifstatP8LexStatei($11, $12); //@line 1275 "lparser.c"
      $1=0; //@line 1276 "lparser.c"
      __label__ = 16; break; //@line 1276 "lparser.c"
    case 4: 
      var $14=$2; //@line 1279 "lparser.c"
      var $15=$line; //@line 1279 "lparser.c"
      __Z9whilestatP8LexStatei($14, $15); //@line 1279 "lparser.c"
      $1=0; //@line 1280 "lparser.c"
      __label__ = 16; break; //@line 1280 "lparser.c"
    case 5: 
      var $17=$2; //@line 1283 "lparser.c"
      __Z9luaX_nextP8LexState($17); //@line 1283 "lparser.c"
      var $18=$2; //@line 1284 "lparser.c"
      __Z5blockP8LexState($18); //@line 1284 "lparser.c"
      var $19=$2; //@line 1285 "lparser.c"
      var $20=$line; //@line 1285 "lparser.c"
      __Z11check_matchP8LexStateiii($19, 262, 259, $20); //@line 1285 "lparser.c"
      $1=0; //@line 1286 "lparser.c"
      __label__ = 16; break; //@line 1286 "lparser.c"
    case 6: 
      var $22=$2; //@line 1289 "lparser.c"
      var $23=$line; //@line 1289 "lparser.c"
      __Z7forstatP8LexStatei($22, $23); //@line 1289 "lparser.c"
      $1=0; //@line 1290 "lparser.c"
      __label__ = 16; break; //@line 1290 "lparser.c"
    case 7: 
      var $25=$2; //@line 1293 "lparser.c"
      var $26=$line; //@line 1293 "lparser.c"
      __Z10repeatstatP8LexStatei($25, $26); //@line 1293 "lparser.c"
      $1=0; //@line 1294 "lparser.c"
      __label__ = 16; break; //@line 1294 "lparser.c"
    case 8: 
      var $28=$2; //@line 1297 "lparser.c"
      var $29=$line; //@line 1297 "lparser.c"
      __Z8funcstatP8LexStatei($28, $29); //@line 1297 "lparser.c"
      $1=0; //@line 1298 "lparser.c"
      __label__ = 16; break; //@line 1298 "lparser.c"
    case 9: 
      var $31=$2; //@line 1301 "lparser.c"
      __Z9luaX_nextP8LexState($31); //@line 1301 "lparser.c"
      var $32=$2; //@line 1302 "lparser.c"
      var $33=__Z8testnextP8LexStatei($32, 265); //@line 1302 "lparser.c"
      var $34=(($33)|0)!=0; //@line 1302 "lparser.c"
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 1302 "lparser.c"
    case 10: 
      var $36=$2; //@line 1303 "lparser.c"
      __Z9localfuncP8LexState($36); //@line 1303 "lparser.c"
      __label__ = 12; break; //@line 1303 "lparser.c"
    case 11: 
      var $38=$2; //@line 1305 "lparser.c"
      __Z9localstatP8LexState($38); //@line 1305 "lparser.c"
      __label__ = 12; break; //@line 1305 "lparser.c"
    case 12: 
      $1=0; //@line 1306 "lparser.c"
      __label__ = 16; break; //@line 1306 "lparser.c"
    case 13: 
      var $41=$2; //@line 1309 "lparser.c"
      __Z7retstatP8LexState($41); //@line 1309 "lparser.c"
      $1=1; //@line 1310 "lparser.c"
      __label__ = 16; break; //@line 1310 "lparser.c"
    case 14: 
      var $43=$2; //@line 1313 "lparser.c"
      __Z9luaX_nextP8LexState($43); //@line 1313 "lparser.c"
      var $44=$2; //@line 1314 "lparser.c"
      __Z9breakstatP8LexState($44); //@line 1314 "lparser.c"
      $1=1; //@line 1315 "lparser.c"
      __label__ = 16; break; //@line 1315 "lparser.c"
    case 15: 
      var $46=$2; //@line 1318 "lparser.c"
      __Z8exprstatP8LexState($46); //@line 1318 "lparser.c"
      $1=0; //@line 1319 "lparser.c"
      __label__ = 16; break; //@line 1319 "lparser.c"
    case 16: 
      var $48=$1; //@line 1322 "lparser.c"
      ;
      return $48; //@line 1322 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9statementP8LexState["X"]=1;

function __Z8testnextP8LexStatei($ls, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ls;
      $3=$c;
      var $4=$2; //@line 81 "lparser.c"
      var $5=(($4+12)|0); //@line 81 "lparser.c"
      var $6=(($5)|0); //@line 81 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 81 "lparser.c"
      var $8=$3; //@line 81 "lparser.c"
      var $9=(($7)|0)==(($8)|0); //@line 81 "lparser.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 81 "lparser.c"
    case 3: 
      var $11=$2; //@line 82 "lparser.c"
      __Z9luaX_nextP8LexState($11); //@line 82 "lparser.c"
      $1=1; //@line 83 "lparser.c"
      __label__ = 5; break; //@line 83 "lparser.c"
    case 4: 
      $1=0; //@line 85 "lparser.c"
      __label__ = 5; break; //@line 85 "lparser.c"
    case 5: 
      var $14=$1; //@line 86 "lparser.c"
      ;
      return $14; //@line 86 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z6ifstatP8LexStatei($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $flist;
      var $escapelist=__stackBase__;
      $1=$ls;
      $2=$line;
      var $3=$1; //@line 1143 "lparser.c"
      var $4=(($3+36)|0); //@line 1143 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 1143 "lparser.c"
      $fs=$5; //@line 1143 "lparser.c"
      HEAP32[(($escapelist)>>2)]=-1; //@line 1145 "lparser.c"
      var $6=$1; //@line 1146 "lparser.c"
      var $7=__Z15test_then_blockP8LexState($6); //@line 1146 "lparser.c"
      $flist=$7; //@line 1146 "lparser.c"
      __label__ = 3; break; //@line 1147 "lparser.c"
    case 3: 
      var $9=$1; //@line 1147 "lparser.c"
      var $10=(($9+12)|0); //@line 1147 "lparser.c"
      var $11=(($10)|0); //@line 1147 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 1147 "lparser.c"
      var $13=(($12)|0)==261; //@line 1147 "lparser.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1147 "lparser.c"
    case 4: 
      var $15=$fs; //@line 1148 "lparser.c"
      var $16=$fs; //@line 1148 "lparser.c"
      var $17=__Z9luaK_jumpP9FuncState($16); //@line 1148 "lparser.c"
      __Z11luaK_concatP9FuncStatePii($15, $escapelist, $17); //@line 1148 "lparser.c"
      var $18=$fs; //@line 1149 "lparser.c"
      var $19=$flist; //@line 1149 "lparser.c"
      __Z16luaK_patchtohereP9FuncStatei($18, $19); //@line 1149 "lparser.c"
      var $20=$1; //@line 1150 "lparser.c"
      var $21=__Z15test_then_blockP8LexState($20); //@line 1150 "lparser.c"
      $flist=$21; //@line 1150 "lparser.c"
      __label__ = 3; break; //@line 1151 "lparser.c"
    case 5: 
      var $23=$1; //@line 1152 "lparser.c"
      var $24=(($23+12)|0); //@line 1152 "lparser.c"
      var $25=(($24)|0); //@line 1152 "lparser.c"
      var $26=HEAP32[(($25)>>2)]; //@line 1152 "lparser.c"
      var $27=(($26)|0)==260; //@line 1152 "lparser.c"
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1152 "lparser.c"
    case 6: 
      var $29=$fs; //@line 1153 "lparser.c"
      var $30=$fs; //@line 1153 "lparser.c"
      var $31=__Z9luaK_jumpP9FuncState($30); //@line 1153 "lparser.c"
      __Z11luaK_concatP9FuncStatePii($29, $escapelist, $31); //@line 1153 "lparser.c"
      var $32=$fs; //@line 1154 "lparser.c"
      var $33=$flist; //@line 1154 "lparser.c"
      __Z16luaK_patchtohereP9FuncStatei($32, $33); //@line 1154 "lparser.c"
      var $34=$1; //@line 1155 "lparser.c"
      __Z9luaX_nextP8LexState($34); //@line 1155 "lparser.c"
      var $35=$1; //@line 1156 "lparser.c"
      __Z5blockP8LexState($35); //@line 1156 "lparser.c"
      __label__ = 8; break; //@line 1157 "lparser.c"
    case 7: 
      var $37=$fs; //@line 1159 "lparser.c"
      var $38=$flist; //@line 1159 "lparser.c"
      __Z11luaK_concatP9FuncStatePii($37, $escapelist, $38); //@line 1159 "lparser.c"
      __label__ = 8; break; //@line 1159 "lparser.c"
    case 8: 
      var $40=$fs; //@line 1160 "lparser.c"
      var $41=HEAP32[(($escapelist)>>2)]; //@line 1160 "lparser.c"
      __Z16luaK_patchtohereP9FuncStatei($40, $41); //@line 1160 "lparser.c"
      var $42=$1; //@line 1161 "lparser.c"
      var $43=$2; //@line 1161 "lparser.c"
      __Z11check_matchP8LexStateiii($42, 262, 266, $43); //@line 1161 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1162 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6ifstatP8LexStatei["X"]=1;

function __Z9whilestatP8LexStatei($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $2;
  var $fs;
  var $whileinit;
  var $condexit;
  var $bl=__stackBase__;
  $1=$ls;
  $2=$line;
  var $3=$1; //@line 993 "lparser.c"
  var $4=(($3+36)|0); //@line 993 "lparser.c"
  var $5=HEAP32[(($4)>>2)]; //@line 993 "lparser.c"
  $fs=$5; //@line 993 "lparser.c"
  var $6=$1; //@line 997 "lparser.c"
  __Z9luaX_nextP8LexState($6); //@line 997 "lparser.c"
  var $7=$fs; //@line 998 "lparser.c"
  var $8=__Z13luaK_getlabelP9FuncState($7); //@line 998 "lparser.c"
  $whileinit=$8; //@line 998 "lparser.c"
  var $9=$1; //@line 999 "lparser.c"
  var $10=__Z4condP8LexState($9); //@line 999 "lparser.c"
  $condexit=$10; //@line 999 "lparser.c"
  var $11=$fs; //@line 1000 "lparser.c"
  __Z10enterblockP9FuncStateP8BlockCnth($11, $bl, 1); //@line 1000 "lparser.c"
  var $12=$1; //@line 1001 "lparser.c"
  __Z9checknextP8LexStatei($12, 259); //@line 1001 "lparser.c"
  var $13=$1; //@line 1002 "lparser.c"
  __Z5blockP8LexState($13); //@line 1002 "lparser.c"
  var $14=$fs; //@line 1003 "lparser.c"
  var $15=$fs; //@line 1003 "lparser.c"
  var $16=__Z9luaK_jumpP9FuncState($15); //@line 1003 "lparser.c"
  var $17=$whileinit; //@line 1003 "lparser.c"
  __Z14luaK_patchlistP9FuncStateii($14, $16, $17); //@line 1003 "lparser.c"
  var $18=$1; //@line 1004 "lparser.c"
  var $19=$2; //@line 1004 "lparser.c"
  __Z11check_matchP8LexStateiii($18, 262, 277, $19); //@line 1004 "lparser.c"
  var $20=$fs; //@line 1005 "lparser.c"
  __Z10leaveblockP9FuncState($20); //@line 1005 "lparser.c"
  var $21=$fs; //@line 1006 "lparser.c"
  var $22=$condexit; //@line 1006 "lparser.c"
  __Z16luaK_patchtohereP9FuncStatei($21, $22); //@line 1006 "lparser.c"
  STACKTOP = __stackBase__;
  return; //@line 1007 "lparser.c"
}


function __Z5blockP8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;

  var $1;
  var $fs;
  var $bl=__stackBase__;
  $1=$ls;
  var $2=$1; //@line 883 "lparser.c"
  var $3=(($2+36)|0); //@line 883 "lparser.c"
  var $4=HEAP32[(($3)>>2)]; //@line 883 "lparser.c"
  $fs=$4; //@line 883 "lparser.c"
  var $5=$fs; //@line 885 "lparser.c"
  __Z10enterblockP9FuncStateP8BlockCnth($5, $bl, 0); //@line 885 "lparser.c"
  var $6=$1; //@line 886 "lparser.c"
  __Z5chunkP8LexState($6); //@line 886 "lparser.c"
  var $7=$fs; //@line 888 "lparser.c"
  __Z10leaveblockP9FuncState($7); //@line 888 "lparser.c"
  STACKTOP = __stackBase__;
  return; //@line 889 "lparser.c"
}


function __Z11check_matchP8LexStateiii($ls, $what, $who, $where) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$ls;
      $2=$what;
      $3=$who;
      $4=$where;
      var $5=$1; //@line 105 "lparser.c"
      var $6=$2; //@line 105 "lparser.c"
      var $7=__Z8testnextP8LexStatei($5, $6); //@line 105 "lparser.c"
      var $8=(($7)|0)!=0; //@line 105 "lparser.c"
      if ($8) { __label__ = 7; break; } else { __label__ = 3; break; } //@line 105 "lparser.c"
    case 3: 
      var $10=$4; //@line 106 "lparser.c"
      var $11=$1; //@line 106 "lparser.c"
      var $12=(($11+4)|0); //@line 106 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 106 "lparser.c"
      var $14=(($10)|0)==(($13)|0); //@line 106 "lparser.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 106 "lparser.c"
    case 4: 
      var $16=$1; //@line 107 "lparser.c"
      var $17=$2; //@line 107 "lparser.c"
      __Z14error_expectedP8LexStatei($16, $17); //@line 107 "lparser.c"
      __label__ = 6; break; //@line 107 "lparser.c"
    case 5: 
      var $19=$1; //@line 109 "lparser.c"
      var $20=$1; //@line 109 "lparser.c"
      var $21=(($20+40)|0); //@line 109 "lparser.c"
      var $22=HEAP32[(($21)>>2)]; //@line 109 "lparser.c"
      var $23=$1; //@line 111 "lparser.c"
      var $24=$2; //@line 111 "lparser.c"
      var $25=__Z14luaX_token2strP8LexStatei($23, $24); //@line 111 "lparser.c"
      var $26=$1; //@line 111 "lparser.c"
      var $27=$3; //@line 111 "lparser.c"
      var $28=__Z14luaX_token2strP8LexStatei($26, $27); //@line 111 "lparser.c"
      var $29=$4; //@line 111 "lparser.c"
      var $30=__Z16luaO_pushfstringP9lua_StatePKcz($22, ((STRING_TABLE.__str25154)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$28,HEAP32[(((tempInt)+(8))>>2)]=$29,tempInt)); //@line 111 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($19, $30); //@line 111 "lparser.c"
      __label__ = 6; break; //@line 112 "lparser.c"
    case 6: 
      __label__ = 7; break; //@line 113 "lparser.c"
    case 7: 
      STACKTOP = __stackBase__;
      return; //@line 114 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7forstatP8LexStatei($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $varname;
      var $bl=__stackBase__;
      $1=$ls;
      $2=$line;
      var $3=$1; //@line 1114 "lparser.c"
      var $4=(($3+36)|0); //@line 1114 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 1114 "lparser.c"
      $fs=$5; //@line 1114 "lparser.c"
      var $6=$fs; //@line 1117 "lparser.c"
      __Z10enterblockP9FuncStateP8BlockCnth($6, $bl, 1); //@line 1117 "lparser.c"
      var $7=$1; //@line 1118 "lparser.c"
      __Z9luaX_nextP8LexState($7); //@line 1118 "lparser.c"
      var $8=$1; //@line 1119 "lparser.c"
      var $9=__Z13str_checknameP8LexState($8); //@line 1119 "lparser.c"
      $varname=$9; //@line 1119 "lparser.c"
      var $10=$1; //@line 1120 "lparser.c"
      var $11=(($10+12)|0); //@line 1120 "lparser.c"
      var $12=(($11)|0); //@line 1120 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 1120 "lparser.c"
      if ((($13)|0) == 61) {
        __label__ = 3; break;
      }
      else if ((($13)|0) == 44 || (($13)|0) == 267) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $15=$1; //@line 1121 "lparser.c"
      var $16=$varname; //@line 1121 "lparser.c"
      var $17=$2; //@line 1121 "lparser.c"
      __Z6fornumP8LexStateP7TStringi($15, $16, $17); //@line 1121 "lparser.c"
      __label__ = 6; break; //@line 1121 "lparser.c"
    case 4: 
      var $19=$1; //@line 1122 "lparser.c"
      var $20=$varname; //@line 1122 "lparser.c"
      __Z7forlistP8LexStateP7TString($19, $20); //@line 1122 "lparser.c"
      __label__ = 6; break; //@line 1122 "lparser.c"
    case 5: 
      var $22=$1; //@line 1123 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($22, ((STRING_TABLE.__str18147)|0)); //@line 1123 "lparser.c"
      __label__ = 6; break; //@line 1124 "lparser.c"
    case 6: 
      var $24=$1; //@line 1125 "lparser.c"
      var $25=$2; //@line 1125 "lparser.c"
      __Z11check_matchP8LexStateiii($24, 262, 264, $25); //@line 1125 "lparser.c"
      var $26=$fs; //@line 1126 "lparser.c"
      __Z10leaveblockP9FuncState($26); //@line 1126 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1127 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10repeatstatP8LexStatei($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $condexit;
      var $fs;
      var $repeat_init;
      var $bl1=__stackBase__;
      var $bl2=(__stackBase__)+(12);
      $1=$ls;
      $2=$line;
      var $3=$1; //@line 1013 "lparser.c"
      var $4=(($3+36)|0); //@line 1013 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 1013 "lparser.c"
      $fs=$5; //@line 1013 "lparser.c"
      var $6=$fs; //@line 1014 "lparser.c"
      var $7=__Z13luaK_getlabelP9FuncState($6); //@line 1014 "lparser.c"
      $repeat_init=$7; //@line 1014 "lparser.c"
      var $8=$fs; //@line 1016 "lparser.c"
      __Z10enterblockP9FuncStateP8BlockCnth($8, $bl1, 1); //@line 1016 "lparser.c"
      var $9=$fs; //@line 1017 "lparser.c"
      __Z10enterblockP9FuncStateP8BlockCnth($9, $bl2, 0); //@line 1017 "lparser.c"
      var $10=$1; //@line 1018 "lparser.c"
      __Z9luaX_nextP8LexState($10); //@line 1018 "lparser.c"
      var $11=$1; //@line 1019 "lparser.c"
      __Z5chunkP8LexState($11); //@line 1019 "lparser.c"
      var $12=$1; //@line 1020 "lparser.c"
      var $13=$2; //@line 1020 "lparser.c"
      __Z11check_matchP8LexStateiii($12, 276, 272, $13); //@line 1020 "lparser.c"
      var $14=$1; //@line 1021 "lparser.c"
      var $15=__Z4condP8LexState($14); //@line 1021 "lparser.c"
      $condexit=$15; //@line 1021 "lparser.c"
      var $16=(($bl2+9)|0); //@line 1022 "lparser.c"
      var $17=HEAP8[($16)]; //@line 1022 "lparser.c"
      var $18=(($17 << 24) >> 24)!=0; //@line 1022 "lparser.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1022 "lparser.c"
    case 3: 
      var $20=$fs; //@line 1023 "lparser.c"
      __Z10leaveblockP9FuncState($20); //@line 1023 "lparser.c"
      var $21=$1; //@line 1024 "lparser.c"
      var $22=(($21+36)|0); //@line 1024 "lparser.c"
      var $23=HEAP32[(($22)>>2)]; //@line 1024 "lparser.c"
      var $24=$condexit; //@line 1024 "lparser.c"
      var $25=$repeat_init; //@line 1024 "lparser.c"
      __Z14luaK_patchlistP9FuncStateii($23, $24, $25); //@line 1024 "lparser.c"
      __label__ = 5; break; //@line 1025 "lparser.c"
    case 4: 
      var $27=$1; //@line 1027 "lparser.c"
      __Z9breakstatP8LexState($27); //@line 1027 "lparser.c"
      var $28=$1; //@line 1028 "lparser.c"
      var $29=(($28+36)|0); //@line 1028 "lparser.c"
      var $30=HEAP32[(($29)>>2)]; //@line 1028 "lparser.c"
      var $31=$condexit; //@line 1028 "lparser.c"
      __Z16luaK_patchtohereP9FuncStatei($30, $31); //@line 1028 "lparser.c"
      var $32=$fs; //@line 1029 "lparser.c"
      __Z10leaveblockP9FuncState($32); //@line 1029 "lparser.c"
      var $33=$1; //@line 1030 "lparser.c"
      var $34=(($33+36)|0); //@line 1030 "lparser.c"
      var $35=HEAP32[(($34)>>2)]; //@line 1030 "lparser.c"
      var $36=$fs; //@line 1030 "lparser.c"
      var $37=__Z9luaK_jumpP9FuncState($36); //@line 1030 "lparser.c"
      var $38=$repeat_init; //@line 1030 "lparser.c"
      __Z14luaK_patchlistP9FuncStateii($35, $37, $38); //@line 1030 "lparser.c"
      __label__ = 5; break; //@line 1031 "lparser.c"
    case 5: 
      var $40=$fs; //@line 1032 "lparser.c"
      __Z10leaveblockP9FuncState($40); //@line 1032 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1033 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10repeatstatP8LexStatei["X"]=1;

function __Z8funcstatP8LexStatei($ls, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; _memset(__stackBase__, 0, 40);
  var __label__;

  var $1;
  var $2;
  var $needself;
  var $v=__stackBase__;
  var $b=(__stackBase__)+(20);
  $1=$ls;
  $2=$line;
  var $3=$1; //@line 1216 "lparser.c"
  __Z9luaX_nextP8LexState($3); //@line 1216 "lparser.c"
  var $4=$1; //@line 1217 "lparser.c"
  var $5=__Z8funcnameP8LexStateP7expdesc($4, $v); //@line 1217 "lparser.c"
  $needself=$5; //@line 1217 "lparser.c"
  var $6=$1; //@line 1218 "lparser.c"
  var $7=$needself; //@line 1218 "lparser.c"
  var $8=$2; //@line 1218 "lparser.c"
  __Z4bodyP8LexStateP7expdescii($6, $b, $7, $8); //@line 1218 "lparser.c"
  var $9=$1; //@line 1219 "lparser.c"
  var $10=(($9+36)|0); //@line 1219 "lparser.c"
  var $11=HEAP32[(($10)>>2)]; //@line 1219 "lparser.c"
  __Z13luaK_storevarP9FuncStateP7expdescS2_($11, $v, $b); //@line 1219 "lparser.c"
  var $12=$1; //@line 1220 "lparser.c"
  var $13=(($12+36)|0); //@line 1220 "lparser.c"
  var $14=HEAP32[(($13)>>2)]; //@line 1220 "lparser.c"
  var $15=$2; //@line 1220 "lparser.c"
  __Z12luaK_fixlineP9FuncStatei($14, $15); //@line 1220 "lparser.c"
  STACKTOP = __stackBase__;
  return; //@line 1221 "lparser.c"
}


function __Z9localfuncP8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; _memset(__stackBase__, 0, 40);
  var __label__;

  var $1;
  var $v=__stackBase__;
  var $b=(__stackBase__)+(20);
  var $fs;
  $1=$ls;
  var $2=$1; //@line 1167 "lparser.c"
  var $3=(($2+36)|0); //@line 1167 "lparser.c"
  var $4=HEAP32[(($3)>>2)]; //@line 1167 "lparser.c"
  $fs=$4; //@line 1167 "lparser.c"
  var $5=$1; //@line 1168 "lparser.c"
  var $6=$1; //@line 1168 "lparser.c"
  var $7=__Z13str_checknameP8LexState($6); //@line 1168 "lparser.c"
  __Z12new_localvarP8LexStateP7TStringi($5, $7, 0); //@line 1168 "lparser.c"
  var $8=$fs; //@line 1169 "lparser.c"
  var $9=(($8+36)|0); //@line 1169 "lparser.c"
  var $10=HEAP32[(($9)>>2)]; //@line 1169 "lparser.c"
  __Z8init_expP7expdesc7expkindi($v, 6, $10); //@line 1169 "lparser.c"
  var $11=$fs; //@line 1170 "lparser.c"
  __Z16luaK_reserveregsP9FuncStatei($11, 1); //@line 1170 "lparser.c"
  var $12=$1; //@line 1171 "lparser.c"
  __Z15adjustlocalvarsP8LexStatei($12, 1); //@line 1171 "lparser.c"
  var $13=$1; //@line 1172 "lparser.c"
  var $14=$1; //@line 1172 "lparser.c"
  var $15=(($14+4)|0); //@line 1172 "lparser.c"
  var $16=HEAP32[(($15)>>2)]; //@line 1172 "lparser.c"
  __Z4bodyP8LexStateP7expdescii($13, $b, 0, $16); //@line 1172 "lparser.c"
  var $17=$fs; //@line 1173 "lparser.c"
  __Z13luaK_storevarP9FuncStateP7expdescS2_($17, $v, $b); //@line 1173 "lparser.c"
  var $18=$fs; //@line 1175 "lparser.c"
  var $19=(($18+24)|0); //@line 1175 "lparser.c"
  var $20=HEAP32[(($19)>>2)]; //@line 1175 "lparser.c"
  var $21=$fs; //@line 1175 "lparser.c"
  var $22=(($21+50)|0); //@line 1175 "lparser.c"
  var $23=HEAPU8[($22)]; //@line 1175 "lparser.c"
  var $24=(($23)&255); //@line 1175 "lparser.c"
  var $25=((($24)-(1))|0); //@line 1175 "lparser.c"
  var $26=$fs; //@line 1175 "lparser.c"
  var $27=(($26+172)|0); //@line 1175 "lparser.c"
  var $28=(($27+($25<<1))|0); //@line 1175 "lparser.c"
  var $29=HEAPU16[(($28)>>1)]; //@line 1175 "lparser.c"
  var $30=(($29)&65535); //@line 1175 "lparser.c"
  var $31=$fs; //@line 1175 "lparser.c"
  var $32=(($31)|0); //@line 1175 "lparser.c"
  var $33=HEAP32[(($32)>>2)]; //@line 1175 "lparser.c"
  var $34=(($33+24)|0); //@line 1175 "lparser.c"
  var $35=HEAP32[(($34)>>2)]; //@line 1175 "lparser.c"
  var $36=(($35+($30)*(12))|0); //@line 1175 "lparser.c"
  var $37=(($36+4)|0); //@line 1175 "lparser.c"
  HEAP32[(($37)>>2)]=$20; //@line 1175 "lparser.c"
  STACKTOP = __stackBase__;
  return; //@line 1176 "lparser.c"
}
__Z9localfuncP8LexState["X"]=1;

function __Z9localstatP8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $nvars;
      var $nexps;
      var $e=__stackBase__;
      $1=$ls;
      $nvars=0; //@line 1181 "lparser.c"
      __label__ = 3; break; //@line 1184 "lparser.c"
    case 3: 
      var $3=$1; //@line 1185 "lparser.c"
      var $4=$1; //@line 1185 "lparser.c"
      var $5=__Z13str_checknameP8LexState($4); //@line 1185 "lparser.c"
      var $6=$nvars; //@line 1185 "lparser.c"
      var $7=((($6)+(1))|0); //@line 1185 "lparser.c"
      $nvars=$7; //@line 1185 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($3, $5, $6); //@line 1185 "lparser.c"
      __label__ = 4; break; //@line 1186 "lparser.c"
    case 4: 
      var $9=$1; //@line 1186 "lparser.c"
      var $10=__Z8testnextP8LexStatei($9, 44); //@line 1186 "lparser.c"
      var $11=(($10)|0)!=0; //@line 1186 "lparser.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 1186 "lparser.c"
    case 5: 
      var $13=$1; //@line 1187 "lparser.c"
      var $14=__Z8testnextP8LexStatei($13, 61); //@line 1187 "lparser.c"
      var $15=(($14)|0)!=0; //@line 1187 "lparser.c"
      if ($15) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1187 "lparser.c"
    case 6: 
      var $17=$1; //@line 1188 "lparser.c"
      var $18=__Z8explist1P8LexStateP7expdesc($17, $e); //@line 1188 "lparser.c"
      $nexps=$18; //@line 1188 "lparser.c"
      __label__ = 8; break; //@line 1188 "lparser.c"
    case 7: 
      var $20=(($e)|0); //@line 1190 "lparser.c"
      HEAP32[(($20)>>2)]=0; //@line 1190 "lparser.c"
      $nexps=0; //@line 1191 "lparser.c"
      __label__ = 8; break; //@line 1192 "lparser.c"
    case 8: 
      var $22=$1; //@line 1193 "lparser.c"
      var $23=$nvars; //@line 1193 "lparser.c"
      var $24=$nexps; //@line 1193 "lparser.c"
      __Z13adjust_assignP8LexStateiiP7expdesc($22, $23, $24, $e); //@line 1193 "lparser.c"
      var $25=$1; //@line 1194 "lparser.c"
      var $26=$nvars; //@line 1194 "lparser.c"
      __Z15adjustlocalvarsP8LexStatei($25, $26); //@line 1194 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1195 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7retstatP8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $e=__stackBase__;
      var $first;
      var $nret;
      $1=$ls;
      var $2=$1; //@line 1240 "lparser.c"
      var $3=(($2+36)|0); //@line 1240 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 1240 "lparser.c"
      $fs=$4; //@line 1240 "lparser.c"
      var $5=$1; //@line 1243 "lparser.c"
      __Z9luaX_nextP8LexState($5); //@line 1243 "lparser.c"
      var $6=$1; //@line 1244 "lparser.c"
      var $7=(($6+12)|0); //@line 1244 "lparser.c"
      var $8=(($7)|0); //@line 1244 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 1244 "lparser.c"
      var $10=__Z12block_followi($9); //@line 1244 "lparser.c"
      var $11=(($10)|0)!=0; //@line 1244 "lparser.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 1244 "lparser.c"
    case 3: 
      var $13=$1; //@line 1244 "lparser.c"
      var $14=(($13+12)|0); //@line 1244 "lparser.c"
      var $15=(($14)|0); //@line 1244 "lparser.c"
      var $16=HEAP32[(($15)>>2)]; //@line 1244 "lparser.c"
      var $17=(($16)|0)==59; //@line 1244 "lparser.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1244 "lparser.c"
    case 4: 
      $nret=0; //@line 1245 "lparser.c"
      $first=0; //@line 1245 "lparser.c"
      __label__ = 16; break; //@line 1245 "lparser.c"
    case 5: 
      var $20=$1; //@line 1247 "lparser.c"
      var $21=__Z8explist1P8LexStateP7expdesc($20, $e); //@line 1247 "lparser.c"
      $nret=$21; //@line 1247 "lparser.c"
      var $22=(($e)|0); //@line 1248 "lparser.c"
      var $23=HEAP32[(($22)>>2)]; //@line 1248 "lparser.c"
      var $24=(($23)|0)==13; //@line 1248 "lparser.c"
      if ($24) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 1248 "lparser.c"
    case 6: 
      var $26=(($e)|0); //@line 1248 "lparser.c"
      var $27=HEAP32[(($26)>>2)]; //@line 1248 "lparser.c"
      var $28=(($27)|0)==14; //@line 1248 "lparser.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 1248 "lparser.c"
    case 7: 
      var $30=$fs; //@line 1249 "lparser.c"
      __Z15luaK_setreturnsP9FuncStateP7expdesci($30, $e, -1); //@line 1249 "lparser.c"
      var $31=(($e)|0); //@line 1250 "lparser.c"
      var $32=HEAP32[(($31)>>2)]; //@line 1250 "lparser.c"
      var $33=(($32)|0)==13; //@line 1250 "lparser.c"
      if ($33) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 1250 "lparser.c"
    case 8: 
      var $35=$nret; //@line 1250 "lparser.c"
      var $36=(($35)|0)==1; //@line 1250 "lparser.c"
      if ($36) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1250 "lparser.c"
    case 9: 
      var $38=(($e+4)|0); //@line 1251 "lparser.c"
      var $39=$38; //@line 1251 "lparser.c"
      var $40=(($39)|0); //@line 1251 "lparser.c"
      var $41=HEAP32[(($40)>>2)]; //@line 1251 "lparser.c"
      var $42=$fs; //@line 1251 "lparser.c"
      var $43=(($42)|0); //@line 1251 "lparser.c"
      var $44=HEAP32[(($43)>>2)]; //@line 1251 "lparser.c"
      var $45=(($44+12)|0); //@line 1251 "lparser.c"
      var $46=HEAP32[(($45)>>2)]; //@line 1251 "lparser.c"
      var $47=(($46+($41<<2))|0); //@line 1251 "lparser.c"
      var $48=HEAP32[(($47)>>2)]; //@line 1251 "lparser.c"
      var $49=$48 & -64; //@line 1251 "lparser.c"
      var $50=$49 | 29; //@line 1251 "lparser.c"
      var $51=(($e+4)|0); //@line 1251 "lparser.c"
      var $52=$51; //@line 1251 "lparser.c"
      var $53=(($52)|0); //@line 1251 "lparser.c"
      var $54=HEAP32[(($53)>>2)]; //@line 1251 "lparser.c"
      var $55=$fs; //@line 1251 "lparser.c"
      var $56=(($55)|0); //@line 1251 "lparser.c"
      var $57=HEAP32[(($56)>>2)]; //@line 1251 "lparser.c"
      var $58=(($57+12)|0); //@line 1251 "lparser.c"
      var $59=HEAP32[(($58)>>2)]; //@line 1251 "lparser.c"
      var $60=(($59+($54<<2))|0); //@line 1251 "lparser.c"
      HEAP32[(($60)>>2)]=$50; //@line 1251 "lparser.c"
      __label__ = 10; break; //@line 1253 "lparser.c"
    case 10: 
      var $62=$fs; //@line 1254 "lparser.c"
      var $63=(($62+50)|0); //@line 1254 "lparser.c"
      var $64=HEAPU8[($63)]; //@line 1254 "lparser.c"
      var $65=(($64)&255); //@line 1254 "lparser.c"
      $first=$65; //@line 1254 "lparser.c"
      $nret=-1; //@line 1255 "lparser.c"
      __label__ = 15; break; //@line 1256 "lparser.c"
    case 11: 
      var $67=$nret; //@line 1258 "lparser.c"
      var $68=(($67)|0)==1; //@line 1258 "lparser.c"
      if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 1258 "lparser.c"
    case 12: 
      var $70=$fs; //@line 1259 "lparser.c"
      var $71=__Z15luaK_exp2anyregP9FuncStateP7expdesc($70, $e); //@line 1259 "lparser.c"
      $first=$71; //@line 1259 "lparser.c"
      __label__ = 14; break; //@line 1259 "lparser.c"
    case 13: 
      var $73=$fs; //@line 1261 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($73, $e); //@line 1261 "lparser.c"
      var $74=$fs; //@line 1262 "lparser.c"
      var $75=(($74+50)|0); //@line 1262 "lparser.c"
      var $76=HEAPU8[($75)]; //@line 1262 "lparser.c"
      var $77=(($76)&255); //@line 1262 "lparser.c"
      $first=$77; //@line 1262 "lparser.c"
      __label__ = 14; break; //@line 1264 "lparser.c"
    case 14: 
      __label__ = 15; break; //@line 1265 "lparser.c"
    case 15: 
      __label__ = 16; break; //@line 1266 "lparser.c"
    case 16: 
      var $81=$fs; //@line 1267 "lparser.c"
      var $82=$first; //@line 1267 "lparser.c"
      var $83=$nret; //@line 1267 "lparser.c"
      __Z8luaK_retP9FuncStateii($81, $82, $83); //@line 1267 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1268 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7retstatP8LexState["X"]=1;

function __Z9breakstatP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $bl;
      var $upval;
      $1=$ls;
      var $2=$1; //@line 976 "lparser.c"
      var $3=(($2+36)|0); //@line 976 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 976 "lparser.c"
      $fs=$4; //@line 976 "lparser.c"
      var $5=$fs; //@line 977 "lparser.c"
      var $6=(($5+20)|0); //@line 977 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 977 "lparser.c"
      $bl=$7; //@line 977 "lparser.c"
      $upval=0; //@line 978 "lparser.c"
      __label__ = 3; break; //@line 979 "lparser.c"
    case 3: 
      var $9=$bl; //@line 979 "lparser.c"
      var $10=(($9)|0)!=0; //@line 979 "lparser.c"
      if ($10) { __label__ = 4; break; } else { var $18 = 0;__label__ = 5; break; } //@line 979 "lparser.c"
    case 4: 
      var $12=$bl; //@line 979 "lparser.c"
      var $13=(($12+10)|0); //@line 979 "lparser.c"
      var $14=HEAP8[($13)]; //@line 979 "lparser.c"
      var $15=(($14 << 24) >> 24)!=0; //@line 979 "lparser.c"
      var $16=$15 ^ 1; //@line 979 "lparser.c"
      var $18 = $16;__label__ = 5; break; //@line 979 "lparser.c"
    case 5: 
      var $18;
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 979 "lparser.c"
    case 6: 
      var $20=$bl; //@line 980 "lparser.c"
      var $21=(($20+9)|0); //@line 980 "lparser.c"
      var $22=HEAPU8[($21)]; //@line 980 "lparser.c"
      var $23=(($22)&255); //@line 980 "lparser.c"
      var $24=$upval; //@line 980 "lparser.c"
      var $25=$24 | $23; //@line 980 "lparser.c"
      $upval=$25; //@line 980 "lparser.c"
      var $26=$bl; //@line 981 "lparser.c"
      var $27=(($26)|0); //@line 981 "lparser.c"
      var $28=HEAP32[(($27)>>2)]; //@line 981 "lparser.c"
      $bl=$28; //@line 981 "lparser.c"
      __label__ = 3; break; //@line 982 "lparser.c"
    case 7: 
      var $30=$bl; //@line 983 "lparser.c"
      var $31=(($30)|0)!=0; //@line 983 "lparser.c"
      if ($31) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 983 "lparser.c"
    case 8: 
      var $33=$1; //@line 984 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($33, ((STRING_TABLE.__str17146)|0)); //@line 984 "lparser.c"
      __label__ = 9; break; //@line 984 "lparser.c"
    case 9: 
      var $35=$upval; //@line 985 "lparser.c"
      var $36=(($35)|0)!=0; //@line 985 "lparser.c"
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 985 "lparser.c"
    case 10: 
      var $38=$fs; //@line 986 "lparser.c"
      var $39=$bl; //@line 986 "lparser.c"
      var $40=(($39+8)|0); //@line 986 "lparser.c"
      var $41=HEAPU8[($40)]; //@line 986 "lparser.c"
      var $42=(($41)&255); //@line 986 "lparser.c"
      var $43=__Z12luaK_codeABCP9FuncState6OpCodeiii($38, 35, $42, 0, 0); //@line 986 "lparser.c"
      __label__ = 11; break; //@line 986 "lparser.c"
    case 11: 
      var $45=$fs; //@line 987 "lparser.c"
      var $46=$bl; //@line 987 "lparser.c"
      var $47=(($46+4)|0); //@line 987 "lparser.c"
      var $48=$fs; //@line 987 "lparser.c"
      var $49=__Z9luaK_jumpP9FuncState($48); //@line 987 "lparser.c"
      __Z11luaK_concatP9FuncStatePii($45, $47, $49); //@line 987 "lparser.c"
      ;
      return; //@line 988 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9breakstatP8LexState["X"]=1;

function __Z8exprstatP8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $v=__stackBase__;
      $1=$ls;
      var $2=$1; //@line 1226 "lparser.c"
      var $3=(($2+36)|0); //@line 1226 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 1226 "lparser.c"
      $fs=$4; //@line 1226 "lparser.c"
      var $5=$1; //@line 1228 "lparser.c"
      var $6=(($v+4)|0); //@line 1228 "lparser.c"
      __Z10primaryexpP8LexStateP7expdesc($5, $6); //@line 1228 "lparser.c"
      var $7=(($v+4)|0); //@line 1229 "lparser.c"
      var $8=(($7)|0); //@line 1229 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 1229 "lparser.c"
      var $10=(($9)|0)==13; //@line 1229 "lparser.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1229 "lparser.c"
    case 3: 
      var $12=(($v+4)|0); //@line 1230 "lparser.c"
      var $13=(($12+4)|0); //@line 1230 "lparser.c"
      var $14=$13; //@line 1230 "lparser.c"
      var $15=(($14)|0); //@line 1230 "lparser.c"
      var $16=HEAP32[(($15)>>2)]; //@line 1230 "lparser.c"
      var $17=$fs; //@line 1230 "lparser.c"
      var $18=(($17)|0); //@line 1230 "lparser.c"
      var $19=HEAP32[(($18)>>2)]; //@line 1230 "lparser.c"
      var $20=(($19+12)|0); //@line 1230 "lparser.c"
      var $21=HEAP32[(($20)>>2)]; //@line 1230 "lparser.c"
      var $22=(($21+($16<<2))|0); //@line 1230 "lparser.c"
      var $23=HEAP32[(($22)>>2)]; //@line 1230 "lparser.c"
      var $24=$23 & -8372225; //@line 1230 "lparser.c"
      var $25=$24 | 16384; //@line 1230 "lparser.c"
      var $26=(($v+4)|0); //@line 1230 "lparser.c"
      var $27=(($26+4)|0); //@line 1230 "lparser.c"
      var $28=$27; //@line 1230 "lparser.c"
      var $29=(($28)|0); //@line 1230 "lparser.c"
      var $30=HEAP32[(($29)>>2)]; //@line 1230 "lparser.c"
      var $31=$fs; //@line 1230 "lparser.c"
      var $32=(($31)|0); //@line 1230 "lparser.c"
      var $33=HEAP32[(($32)>>2)]; //@line 1230 "lparser.c"
      var $34=(($33+12)|0); //@line 1230 "lparser.c"
      var $35=HEAP32[(($34)>>2)]; //@line 1230 "lparser.c"
      var $36=(($35+($30<<2))|0); //@line 1230 "lparser.c"
      HEAP32[(($36)>>2)]=$25; //@line 1230 "lparser.c"
      __label__ = 5; break; //@line 1230 "lparser.c"
    case 4: 
      var $38=(($v)|0); //@line 1232 "lparser.c"
      HEAP32[(($38)>>2)]=0; //@line 1232 "lparser.c"
      var $39=$1; //@line 1233 "lparser.c"
      __Z10assignmentP8LexStateP10LHS_assigni($39, $v, 1); //@line 1233 "lparser.c"
      __label__ = 5; break; //@line 1234 "lparser.c"
    case 5: 
      STACKTOP = __stackBase__;
      return; //@line 1235 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10primaryexpP8LexStateP7expdesc($ls, $v) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; _memset(__stackBase__, 0, 40);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $key=__stackBase__;
      var $key1=(__stackBase__)+(20);
      $1=$ls;
      $2=$v;
      var $3=$1; //@line 693 "lparser.c"
      var $4=(($3+36)|0); //@line 693 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 693 "lparser.c"
      $fs=$5; //@line 693 "lparser.c"
      var $6=$1; //@line 694 "lparser.c"
      var $7=$2; //@line 694 "lparser.c"
      __Z9prefixexpP8LexStateP7expdesc($6, $7); //@line 694 "lparser.c"
      __label__ = 3; break; //@line 695 "lparser.c"
    case 3: 
      var $9=$1; //@line 696 "lparser.c"
      var $10=(($9+12)|0); //@line 696 "lparser.c"
      var $11=(($10)|0); //@line 696 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 696 "lparser.c"
      if ((($12)|0) == 46) {
        __label__ = 4; break;
      }
      else if ((($12)|0) == 91) {
        __label__ = 5; break;
      }
      else if ((($12)|0) == 58) {
        __label__ = 6; break;
      }
      else if ((($12)|0) == 40 || (($12)|0) == 286 || (($12)|0) == 123) {
        __label__ = 7; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 4: 
      var $14=$1; //@line 698 "lparser.c"
      var $15=$2; //@line 698 "lparser.c"
      __Z5fieldP8LexStateP7expdesc($14, $15); //@line 698 "lparser.c"
      __label__ = 9; break; //@line 699 "lparser.c"
    case 5: 
      var $17=$fs; //@line 703 "lparser.c"
      var $18=$2; //@line 703 "lparser.c"
      var $19=__Z15luaK_exp2anyregP9FuncStateP7expdesc($17, $18); //@line 703 "lparser.c"
      var $20=$1; //@line 704 "lparser.c"
      __Z6yindexP8LexStateP7expdesc($20, $key); //@line 704 "lparser.c"
      var $21=$fs; //@line 705 "lparser.c"
      var $22=$2; //@line 705 "lparser.c"
      __Z12luaK_indexedP9FuncStateP7expdescS2_($21, $22, $key); //@line 705 "lparser.c"
      __label__ = 9; break; //@line 706 "lparser.c"
    case 6: 
      var $24=$1; //@line 710 "lparser.c"
      __Z9luaX_nextP8LexState($24); //@line 710 "lparser.c"
      var $25=$1; //@line 711 "lparser.c"
      __Z9checknameP8LexStateP7expdesc($25, $key1); //@line 711 "lparser.c"
      var $26=$fs; //@line 712 "lparser.c"
      var $27=$2; //@line 712 "lparser.c"
      __Z9luaK_selfP9FuncStateP7expdescS2_($26, $27, $key1); //@line 712 "lparser.c"
      var $28=$1; //@line 713 "lparser.c"
      var $29=$2; //@line 713 "lparser.c"
      __Z8funcargsP8LexStateP7expdesc($28, $29); //@line 713 "lparser.c"
      __label__ = 9; break; //@line 714 "lparser.c"
    case 7: 
      var $31=$fs; //@line 717 "lparser.c"
      var $32=$2; //@line 717 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($31, $32); //@line 717 "lparser.c"
      var $33=$1; //@line 718 "lparser.c"
      var $34=$2; //@line 718 "lparser.c"
      __Z8funcargsP8LexStateP7expdesc($33, $34); //@line 718 "lparser.c"
      __label__ = 9; break; //@line 719 "lparser.c"
    case 8: 
      STACKTOP = __stackBase__;
      return; //@line 724 "lparser.c"
    case 9: 
      __label__ = 3; break; //@line 723 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10primaryexpP8LexStateP7expdesc["X"]=1;

function __Z10assignmentP8LexStateP10LHS_assigni($ls, $lh, $nvars) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; _memset(__stackBase__, 0, 44);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e=__stackBase__;
      var $nv=(__stackBase__)+(20);
      var $nexps;
      $1=$ls;
      $2=$lh;
      $3=$nvars;
      var $4=$2; //@line 933 "lparser.c"
      var $5=(($4+4)|0); //@line 933 "lparser.c"
      var $6=(($5)|0); //@line 933 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 933 "lparser.c"
      var $8=6 <= (($7)|0); //@line 933 "lparser.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 933 "lparser.c"
    case 3: 
      var $10=$2; //@line 933 "lparser.c"
      var $11=(($10+4)|0); //@line 933 "lparser.c"
      var $12=(($11)|0); //@line 933 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 933 "lparser.c"
      var $14=(($13)|0) <= 9; //@line 933 "lparser.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 933 "lparser.c"
    case 4: 
      var $16=$1; //@line 933 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($16, ((STRING_TABLE.__str129)|0)); //@line 933 "lparser.c"
      __label__ = 5; break; //@line 933 "lparser.c"
    case 5: 
      var $18=$1; //@line 935 "lparser.c"
      var $19=__Z8testnextP8LexStatei($18, 44); //@line 935 "lparser.c"
      var $20=(($19)|0)!=0; //@line 935 "lparser.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 11; break; } //@line 935 "lparser.c"
    case 6: 
      var $22=$2; //@line 937 "lparser.c"
      var $23=(($nv)|0); //@line 937 "lparser.c"
      HEAP32[(($23)>>2)]=$22; //@line 937 "lparser.c"
      var $24=$1; //@line 938 "lparser.c"
      var $25=(($nv+4)|0); //@line 938 "lparser.c"
      __Z10primaryexpP8LexStateP7expdesc($24, $25); //@line 938 "lparser.c"
      var $26=(($nv+4)|0); //@line 939 "lparser.c"
      var $27=(($26)|0); //@line 939 "lparser.c"
      var $28=HEAP32[(($27)>>2)]; //@line 939 "lparser.c"
      var $29=(($28)|0)==6; //@line 939 "lparser.c"
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 939 "lparser.c"
    case 7: 
      var $31=$1; //@line 940 "lparser.c"
      var $32=$2; //@line 940 "lparser.c"
      var $33=(($nv+4)|0); //@line 940 "lparser.c"
      __Z14check_conflictP8LexStateP10LHS_assignP7expdesc($31, $32, $33); //@line 940 "lparser.c"
      __label__ = 8; break; //@line 940 "lparser.c"
    case 8: 
      var $35=$3; //@line 941 "lparser.c"
      var $36=$1; //@line 941 "lparser.c"
      var $37=(($36+40)|0); //@line 941 "lparser.c"
      var $38=HEAP32[(($37)>>2)]; //@line 941 "lparser.c"
      var $39=(($38+52)|0); //@line 941 "lparser.c"
      var $40=HEAPU16[(($39)>>1)]; //@line 941 "lparser.c"
      var $41=(($40)&65535); //@line 941 "lparser.c"
      var $42=(((200)-($41))|0); //@line 941 "lparser.c"
      var $43=(($35)|0) > (($42)|0); //@line 941 "lparser.c"
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 941 "lparser.c"
    case 9: 
      var $45=$1; //@line 941 "lparser.c"
      var $46=(($45+36)|0); //@line 941 "lparser.c"
      var $47=HEAP32[(($46)>>2)]; //@line 941 "lparser.c"
      var $48=$1; //@line 941 "lparser.c"
      var $49=(($48+40)|0); //@line 941 "lparser.c"
      var $50=HEAP32[(($49)>>2)]; //@line 941 "lparser.c"
      var $51=(($50+52)|0); //@line 941 "lparser.c"
      var $52=HEAPU16[(($51)>>1)]; //@line 941 "lparser.c"
      var $53=(($52)&65535); //@line 941 "lparser.c"
      var $54=(((200)-($53))|0); //@line 941 "lparser.c"
      __Z10errorlimitP9FuncStateiPKc($47, $54, ((STRING_TABLE.__str1130)|0)); //@line 941 "lparser.c"
      __label__ = 10; break; //@line 941 "lparser.c"
    case 10: 
      var $56=$1; //@line 943 "lparser.c"
      var $57=$3; //@line 943 "lparser.c"
      var $58=((($57)+(1))|0); //@line 943 "lparser.c"
      __Z10assignmentP8LexStateP10LHS_assigni($56, $nv, $58); //@line 943 "lparser.c"
      __label__ = 17; break; //@line 944 "lparser.c"
    case 11: 
      var $60=$1; //@line 947 "lparser.c"
      __Z9checknextP8LexStatei($60, 61); //@line 947 "lparser.c"
      var $61=$1; //@line 948 "lparser.c"
      var $62=__Z8explist1P8LexStateP7expdesc($61, $e); //@line 948 "lparser.c"
      $nexps=$62; //@line 948 "lparser.c"
      var $63=$nexps; //@line 949 "lparser.c"
      var $64=$3; //@line 949 "lparser.c"
      var $65=(($63)|0)!=(($64)|0); //@line 949 "lparser.c"
      if ($65) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 949 "lparser.c"
    case 12: 
      var $67=$1; //@line 950 "lparser.c"
      var $68=$3; //@line 950 "lparser.c"
      var $69=$nexps; //@line 950 "lparser.c"
      __Z13adjust_assignP8LexStateiiP7expdesc($67, $68, $69, $e); //@line 950 "lparser.c"
      var $70=$nexps; //@line 951 "lparser.c"
      var $71=$3; //@line 951 "lparser.c"
      var $72=(($70)|0) > (($71)|0); //@line 951 "lparser.c"
      if ($72) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 951 "lparser.c"
    case 13: 
      var $74=$nexps; //@line 952 "lparser.c"
      var $75=$3; //@line 952 "lparser.c"
      var $76=((($74)-($75))|0); //@line 952 "lparser.c"
      var $77=$1; //@line 952 "lparser.c"
      var $78=(($77+36)|0); //@line 952 "lparser.c"
      var $79=HEAP32[(($78)>>2)]; //@line 952 "lparser.c"
      var $80=(($79+36)|0); //@line 952 "lparser.c"
      var $81=HEAP32[(($80)>>2)]; //@line 952 "lparser.c"
      var $82=((($81)-($76))|0); //@line 952 "lparser.c"
      HEAP32[(($80)>>2)]=$82; //@line 952 "lparser.c"
      __label__ = 14; break; //@line 952 "lparser.c"
    case 14: 
      __label__ = 16; break; //@line 953 "lparser.c"
    case 15: 
      var $85=$1; //@line 955 "lparser.c"
      var $86=(($85+36)|0); //@line 955 "lparser.c"
      var $87=HEAP32[(($86)>>2)]; //@line 955 "lparser.c"
      __Z14luaK_setoneretP9FuncStateP7expdesc($87, $e); //@line 955 "lparser.c"
      var $88=$1; //@line 956 "lparser.c"
      var $89=(($88+36)|0); //@line 956 "lparser.c"
      var $90=HEAP32[(($89)>>2)]; //@line 956 "lparser.c"
      var $91=$2; //@line 956 "lparser.c"
      var $92=(($91+4)|0); //@line 956 "lparser.c"
      __Z13luaK_storevarP9FuncStateP7expdescS2_($90, $92, $e); //@line 956 "lparser.c"
      __label__ = 18; break; //@line 957 "lparser.c"
    case 16: 
      __label__ = 17; break; //@line 959 "lparser.c"
    case 17: 
      var $95=$1; //@line 960 "lparser.c"
      var $96=(($95+36)|0); //@line 960 "lparser.c"
      var $97=HEAP32[(($96)>>2)]; //@line 960 "lparser.c"
      var $98=(($97+36)|0); //@line 960 "lparser.c"
      var $99=HEAP32[(($98)>>2)]; //@line 960 "lparser.c"
      var $100=((($99)-(1))|0); //@line 960 "lparser.c"
      __Z8init_expP7expdesc7expkindi($e, 12, $100); //@line 960 "lparser.c"
      var $101=$1; //@line 961 "lparser.c"
      var $102=(($101+36)|0); //@line 961 "lparser.c"
      var $103=HEAP32[(($102)>>2)]; //@line 961 "lparser.c"
      var $104=$2; //@line 961 "lparser.c"
      var $105=(($104+4)|0); //@line 961 "lparser.c"
      __Z13luaK_storevarP9FuncStateP7expdescS2_($103, $105, $e); //@line 961 "lparser.c"
      __label__ = 18; break; //@line 962 "lparser.c"
    case 18: 
      STACKTOP = __stackBase__;
      return; //@line 962 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10assignmentP8LexStateP10LHS_assigni["X"]=1;

function __Z14check_conflictP8LexStateP10LHS_assignP7expdesc($ls, $lh, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      var $extra;
      var $conflict;
      $1=$ls;
      $2=$lh;
      $3=$v;
      var $4=$1; //@line 909 "lparser.c"
      var $5=(($4+36)|0); //@line 909 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 909 "lparser.c"
      $fs=$6; //@line 909 "lparser.c"
      var $7=$fs; //@line 910 "lparser.c"
      var $8=(($7+36)|0); //@line 910 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 910 "lparser.c"
      $extra=$9; //@line 910 "lparser.c"
      $conflict=0; //@line 911 "lparser.c"
      __label__ = 3; break; //@line 912 "lparser.c"
    case 3: 
      var $11=$2; //@line 912 "lparser.c"
      var $12=(($11)|0)!=0; //@line 912 "lparser.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 912 "lparser.c"
    case 4: 
      var $14=$2; //@line 913 "lparser.c"
      var $15=(($14+4)|0); //@line 913 "lparser.c"
      var $16=(($15)|0); //@line 913 "lparser.c"
      var $17=HEAP32[(($16)>>2)]; //@line 913 "lparser.c"
      var $18=(($17)|0)==9; //@line 913 "lparser.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 913 "lparser.c"
    case 5: 
      var $20=$2; //@line 914 "lparser.c"
      var $21=(($20+4)|0); //@line 914 "lparser.c"
      var $22=(($21+4)|0); //@line 914 "lparser.c"
      var $23=$22; //@line 914 "lparser.c"
      var $24=(($23)|0); //@line 914 "lparser.c"
      var $25=HEAP32[(($24)>>2)]; //@line 914 "lparser.c"
      var $26=$3; //@line 914 "lparser.c"
      var $27=(($26+4)|0); //@line 914 "lparser.c"
      var $28=$27; //@line 914 "lparser.c"
      var $29=(($28)|0); //@line 914 "lparser.c"
      var $30=HEAP32[(($29)>>2)]; //@line 914 "lparser.c"
      var $31=(($25)|0)==(($30)|0); //@line 914 "lparser.c"
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 914 "lparser.c"
    case 6: 
      $conflict=1; //@line 915 "lparser.c"
      var $33=$extra; //@line 916 "lparser.c"
      var $34=$2; //@line 916 "lparser.c"
      var $35=(($34+4)|0); //@line 916 "lparser.c"
      var $36=(($35+4)|0); //@line 916 "lparser.c"
      var $37=$36; //@line 916 "lparser.c"
      var $38=(($37)|0); //@line 916 "lparser.c"
      HEAP32[(($38)>>2)]=$33; //@line 916 "lparser.c"
      __label__ = 7; break; //@line 917 "lparser.c"
    case 7: 
      var $40=$2; //@line 918 "lparser.c"
      var $41=(($40+4)|0); //@line 918 "lparser.c"
      var $42=(($41+4)|0); //@line 918 "lparser.c"
      var $43=$42; //@line 918 "lparser.c"
      var $44=(($43+4)|0); //@line 918 "lparser.c"
      var $45=HEAP32[(($44)>>2)]; //@line 918 "lparser.c"
      var $46=$3; //@line 918 "lparser.c"
      var $47=(($46+4)|0); //@line 918 "lparser.c"
      var $48=$47; //@line 918 "lparser.c"
      var $49=(($48)|0); //@line 918 "lparser.c"
      var $50=HEAP32[(($49)>>2)]; //@line 918 "lparser.c"
      var $51=(($45)|0)==(($50)|0); //@line 918 "lparser.c"
      if ($51) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 918 "lparser.c"
    case 8: 
      $conflict=1; //@line 919 "lparser.c"
      var $53=$extra; //@line 920 "lparser.c"
      var $54=$2; //@line 920 "lparser.c"
      var $55=(($54+4)|0); //@line 920 "lparser.c"
      var $56=(($55+4)|0); //@line 920 "lparser.c"
      var $57=$56; //@line 920 "lparser.c"
      var $58=(($57+4)|0); //@line 920 "lparser.c"
      HEAP32[(($58)>>2)]=$53; //@line 920 "lparser.c"
      __label__ = 9; break; //@line 921 "lparser.c"
    case 9: 
      __label__ = 10; break; //@line 922 "lparser.c"
    case 10: 
      __label__ = 11; break; //@line 923 "lparser.c"
    case 11: 
      var $62=$2; //@line 912 "lparser.c"
      var $63=(($62)|0); //@line 912 "lparser.c"
      var $64=HEAP32[(($63)>>2)]; //@line 912 "lparser.c"
      $2=$64; //@line 912 "lparser.c"
      __label__ = 3; break; //@line 912 "lparser.c"
    case 12: 
      var $66=$conflict; //@line 924 "lparser.c"
      var $67=(($66)|0)!=0; //@line 924 "lparser.c"
      if ($67) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 924 "lparser.c"
    case 13: 
      var $69=$fs; //@line 925 "lparser.c"
      var $70=$fs; //@line 925 "lparser.c"
      var $71=(($70+36)|0); //@line 925 "lparser.c"
      var $72=HEAP32[(($71)>>2)]; //@line 925 "lparser.c"
      var $73=$3; //@line 925 "lparser.c"
      var $74=(($73+4)|0); //@line 925 "lparser.c"
      var $75=$74; //@line 925 "lparser.c"
      var $76=(($75)|0); //@line 925 "lparser.c"
      var $77=HEAP32[(($76)>>2)]; //@line 925 "lparser.c"
      var $78=__Z12luaK_codeABCP9FuncState6OpCodeiii($69, 0, $72, $77, 0); //@line 925 "lparser.c"
      var $79=$fs; //@line 926 "lparser.c"
      __Z16luaK_reserveregsP9FuncStatei($79, 1); //@line 926 "lparser.c"
      __label__ = 14; break; //@line 927 "lparser.c"
    case 14: 
      ;
      return; //@line 928 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14check_conflictP8LexStateP10LHS_assignP7expdesc["X"]=1;

function __Z10errorlimitP9FuncStateiPKc($fs, $limit, $what) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $msg;
      $1=$fs;
      $2=$limit;
      $3=$what;
      var $4=$1; //@line 75 "lparser.c"
      var $5=(($4)|0); //@line 75 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 75 "lparser.c"
      var $7=(($6+60)|0); //@line 75 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 75 "lparser.c"
      var $9=(($8)|0)==0; //@line 75 "lparser.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 75 "lparser.c"
    case 3: 
      var $11=$1; //@line 73 "lparser.c"
      var $12=(($11+16)|0); //@line 73 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 73 "lparser.c"
      var $14=$2; //@line 73 "lparser.c"
      var $15=$3; //@line 73 "lparser.c"
      var $16=__Z16luaO_pushfstringP9lua_StatePKcz($13, ((STRING_TABLE.__str10139)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt)); //@line 73 "lparser.c"
      var $30 = $16;__label__ = 5; break; //@line 73 "lparser.c"
    case 4: 
      var $18=$1; //@line 74 "lparser.c"
      var $19=(($18+16)|0); //@line 74 "lparser.c"
      var $20=HEAP32[(($19)>>2)]; //@line 74 "lparser.c"
      var $21=$1; //@line 74 "lparser.c"
      var $22=(($21)|0); //@line 74 "lparser.c"
      var $23=HEAP32[(($22)>>2)]; //@line 74 "lparser.c"
      var $24=(($23+60)|0); //@line 74 "lparser.c"
      var $25=HEAP32[(($24)>>2)]; //@line 74 "lparser.c"
      var $26=$2; //@line 74 "lparser.c"
      var $27=$3; //@line 74 "lparser.c"
      var $28=__Z16luaO_pushfstringP9lua_StatePKcz($20, ((STRING_TABLE.__str11140)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$25,HEAP32[(((tempInt)+(4))>>2)]=$26,HEAP32[(((tempInt)+(8))>>2)]=$27,tempInt)); //@line 74 "lparser.c"
      var $30 = $28;__label__ = 5; break; //@line 74 "lparser.c"
    case 5: 
      var $30; //@line 74 "lparser.c"
      $msg=$30; //@line 74 "lparser.c"
      var $31=$1; //@line 76 "lparser.c"
      var $32=(($31+12)|0); //@line 76 "lparser.c"
      var $33=HEAP32[(($32)>>2)]; //@line 76 "lparser.c"
      var $34=$msg; //@line 76 "lparser.c"
      __Z13luaX_lexerrorP8LexStatePKci($33, $34, 0); //@line 76 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 77 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8getunopri($op) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$op;
      var $3=$2; //@line 779 "lparser.c"
      if ((($3)|0) == 270) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 45) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 35) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      $1=1; //@line 780 "lparser.c"
      __label__ = 7; break; //@line 780 "lparser.c"
    case 4: 
      $1=0; //@line 781 "lparser.c"
      __label__ = 7; break; //@line 781 "lparser.c"
    case 5: 
      $1=2; //@line 782 "lparser.c"
      __label__ = 7; break; //@line 782 "lparser.c"
    case 6: 
      $1=3; //@line 783 "lparser.c"
      __label__ = 7; break; //@line 783 "lparser.c"
    case 7: 
      var $9=$1; //@line 785 "lparser.c"
      ;
      return $9; //@line 785 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9getbinopri($op) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$op;
      var $3=$2; //@line 789 "lparser.c"
      if ((($3)|0) == 43) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 45) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 42) {
        __label__ = 5; break;
      }
      else if ((($3)|0) == 47) {
        __label__ = 6; break;
      }
      else if ((($3)|0) == 37) {
        __label__ = 7; break;
      }
      else if ((($3)|0) == 94) {
        __label__ = 8; break;
      }
      else if ((($3)|0) == 278) {
        __label__ = 9; break;
      }
      else if ((($3)|0) == 283) {
        __label__ = 10; break;
      }
      else if ((($3)|0) == 280) {
        __label__ = 11; break;
      }
      else if ((($3)|0) == 60) {
        __label__ = 12; break;
      }
      else if ((($3)|0) == 282) {
        __label__ = 13; break;
      }
      else if ((($3)|0) == 62) {
        __label__ = 14; break;
      }
      else if ((($3)|0) == 281) {
        __label__ = 15; break;
      }
      else if ((($3)|0) == 257) {
        __label__ = 16; break;
      }
      else if ((($3)|0) == 271) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 3: 
      $1=0; //@line 790 "lparser.c"
      __label__ = 19; break; //@line 790 "lparser.c"
    case 4: 
      $1=1; //@line 791 "lparser.c"
      __label__ = 19; break; //@line 791 "lparser.c"
    case 5: 
      $1=2; //@line 792 "lparser.c"
      __label__ = 19; break; //@line 792 "lparser.c"
    case 6: 
      $1=3; //@line 793 "lparser.c"
      __label__ = 19; break; //@line 793 "lparser.c"
    case 7: 
      $1=4; //@line 794 "lparser.c"
      __label__ = 19; break; //@line 794 "lparser.c"
    case 8: 
      $1=5; //@line 795 "lparser.c"
      __label__ = 19; break; //@line 795 "lparser.c"
    case 9: 
      $1=6; //@line 796 "lparser.c"
      __label__ = 19; break; //@line 796 "lparser.c"
    case 10: 
      $1=7; //@line 797 "lparser.c"
      __label__ = 19; break; //@line 797 "lparser.c"
    case 11: 
      $1=8; //@line 798 "lparser.c"
      __label__ = 19; break; //@line 798 "lparser.c"
    case 12: 
      $1=9; //@line 799 "lparser.c"
      __label__ = 19; break; //@line 799 "lparser.c"
    case 13: 
      $1=10; //@line 800 "lparser.c"
      __label__ = 19; break; //@line 800 "lparser.c"
    case 14: 
      $1=11; //@line 801 "lparser.c"
      __label__ = 19; break; //@line 801 "lparser.c"
    case 15: 
      $1=12; //@line 802 "lparser.c"
      __label__ = 19; break; //@line 802 "lparser.c"
    case 16: 
      $1=13; //@line 803 "lparser.c"
      __label__ = 19; break; //@line 803 "lparser.c"
    case 17: 
      $1=14; //@line 804 "lparser.c"
      __label__ = 19; break; //@line 804 "lparser.c"
    case 18: 
      $1=15; //@line 805 "lparser.c"
      __label__ = 19; break; //@line 805 "lparser.c"
    case 19: 
      var $21=$1; //@line 807 "lparser.c"
      ;
      return $21; //@line 807 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8init_expP7expdesc7expkindi($e, $k, $i) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$e;
  $2=$k;
  $3=$i;
  var $4=$1; //@line 127 "lparser.c"
  var $5=(($4+12)|0); //@line 127 "lparser.c"
  HEAP32[(($5)>>2)]=-1; //@line 127 "lparser.c"
  var $6=$1; //@line 127 "lparser.c"
  var $7=(($6+16)|0); //@line 127 "lparser.c"
  HEAP32[(($7)>>2)]=-1; //@line 127 "lparser.c"
  var $8=$2; //@line 128 "lparser.c"
  var $9=$1; //@line 128 "lparser.c"
  var $10=(($9)|0); //@line 128 "lparser.c"
  HEAP32[(($10)>>2)]=$8; //@line 128 "lparser.c"
  var $11=$3; //@line 129 "lparser.c"
  var $12=$1; //@line 129 "lparser.c"
  var $13=(($12+4)|0); //@line 129 "lparser.c"
  var $14=$13; //@line 129 "lparser.c"
  var $15=(($14)|0); //@line 129 "lparser.c"
  HEAP32[(($15)>>2)]=$11; //@line 129 "lparser.c"
  ;
  return; //@line 130 "lparser.c"
}


function __Z15adjustlocalvarsP8LexStatei($ls, $nvars) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      $1=$ls;
      $2=$nvars;
      var $3=$1; //@line 168 "lparser.c"
      var $4=(($3+36)|0); //@line 168 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 168 "lparser.c"
      $fs=$5; //@line 168 "lparser.c"
      var $6=$fs; //@line 169 "lparser.c"
      var $7=(($6+50)|0); //@line 169 "lparser.c"
      var $8=HEAPU8[($7)]; //@line 169 "lparser.c"
      var $9=(($8)&255); //@line 169 "lparser.c"
      var $10=$2; //@line 169 "lparser.c"
      var $11=((($9)+($10))|0); //@line 169 "lparser.c"
      var $12=(($11) & 255); //@line 169 "lparser.c"
      var $13=$fs; //@line 169 "lparser.c"
      var $14=(($13+50)|0); //@line 169 "lparser.c"
      HEAP8[($14)]=$12; //@line 169 "lparser.c"
      __label__ = 3; break; //@line 170 "lparser.c"
    case 3: 
      var $16=$2; //@line 170 "lparser.c"
      var $17=(($16)|0)!=0; //@line 170 "lparser.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 170 "lparser.c"
    case 4: 
      var $19=$fs; //@line 171 "lparser.c"
      var $20=(($19+24)|0); //@line 171 "lparser.c"
      var $21=HEAP32[(($20)>>2)]; //@line 171 "lparser.c"
      var $22=$fs; //@line 171 "lparser.c"
      var $23=(($22+50)|0); //@line 171 "lparser.c"
      var $24=HEAPU8[($23)]; //@line 171 "lparser.c"
      var $25=(($24)&255); //@line 171 "lparser.c"
      var $26=$2; //@line 171 "lparser.c"
      var $27=((($25)-($26))|0); //@line 171 "lparser.c"
      var $28=$fs; //@line 171 "lparser.c"
      var $29=(($28+172)|0); //@line 171 "lparser.c"
      var $30=(($29+($27<<1))|0); //@line 171 "lparser.c"
      var $31=HEAPU16[(($30)>>1)]; //@line 171 "lparser.c"
      var $32=(($31)&65535); //@line 171 "lparser.c"
      var $33=$fs; //@line 171 "lparser.c"
      var $34=(($33)|0); //@line 171 "lparser.c"
      var $35=HEAP32[(($34)>>2)]; //@line 171 "lparser.c"
      var $36=(($35+24)|0); //@line 171 "lparser.c"
      var $37=HEAP32[(($36)>>2)]; //@line 171 "lparser.c"
      var $38=(($37+($32)*(12))|0); //@line 171 "lparser.c"
      var $39=(($38+4)|0); //@line 171 "lparser.c"
      HEAP32[(($39)>>2)]=$21; //@line 171 "lparser.c"
      __label__ = 5; break; //@line 172 "lparser.c"
    case 5: 
      var $41=$2; //@line 170 "lparser.c"
      var $42=((($41)-(1))|0); //@line 170 "lparser.c"
      $2=$42; //@line 170 "lparser.c"
      __label__ = 3; break; //@line 170 "lparser.c"
    case 6: 
      ;
      return; //@line 173 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15adjustlocalvarsP8LexStatei["X"]=1;

function __Z9checknextP8LexStatei($ls, $c) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$c;
  var $3=$1; //@line 95 "lparser.c"
  var $4=$2; //@line 95 "lparser.c"
  __Z5checkP8LexStatei($3, $4); //@line 95 "lparser.c"
  var $5=$1; //@line 96 "lparser.c"
  __Z9luaX_nextP8LexState($5); //@line 96 "lparser.c"
  ;
  return; //@line 97 "lparser.c"
}


function __Z8explist1P8LexStateP7expdesc($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      $1=$ls;
      $2=$v;
      $n=1; //@line 598 "lparser.c"
      var $3=$1; //@line 599 "lparser.c"
      var $4=$2; //@line 599 "lparser.c"
      __Z4exprP8LexStateP7expdesc($3, $4); //@line 599 "lparser.c"
      __label__ = 3; break; //@line 600 "lparser.c"
    case 3: 
      var $6=$1; //@line 600 "lparser.c"
      var $7=__Z8testnextP8LexStatei($6, 44); //@line 600 "lparser.c"
      var $8=(($7)|0)!=0; //@line 600 "lparser.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 600 "lparser.c"
    case 4: 
      var $10=$1; //@line 601 "lparser.c"
      var $11=(($10+36)|0); //@line 601 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 601 "lparser.c"
      var $13=$2; //@line 601 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($12, $13); //@line 601 "lparser.c"
      var $14=$1; //@line 602 "lparser.c"
      var $15=$2; //@line 602 "lparser.c"
      __Z4exprP8LexStateP7expdesc($14, $15); //@line 602 "lparser.c"
      var $16=$n; //@line 603 "lparser.c"
      var $17=((($16)+(1))|0); //@line 603 "lparser.c"
      $n=$17; //@line 603 "lparser.c"
      __label__ = 3; break; //@line 604 "lparser.c"
    case 5: 
      var $19=$n; //@line 605 "lparser.c"
      ;
      return $19; //@line 605 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13adjust_assignP8LexStateiiP7expdesc($ls, $nvars, $nexps, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $fs;
      var $extra;
      var $reg;
      $1=$ls;
      $2=$nvars;
      $3=$nexps;
      $4=$e;
      var $5=$1; //@line 257 "lparser.c"
      var $6=(($5+36)|0); //@line 257 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 257 "lparser.c"
      $fs=$7; //@line 257 "lparser.c"
      var $8=$2; //@line 258 "lparser.c"
      var $9=$3; //@line 258 "lparser.c"
      var $10=((($8)-($9))|0); //@line 258 "lparser.c"
      $extra=$10; //@line 258 "lparser.c"
      var $11=$4; //@line 259 "lparser.c"
      var $12=(($11)|0); //@line 259 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 259 "lparser.c"
      var $14=(($13)|0)==13; //@line 259 "lparser.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 259 "lparser.c"
    case 3: 
      var $16=$4; //@line 259 "lparser.c"
      var $17=(($16)|0); //@line 259 "lparser.c"
      var $18=HEAP32[(($17)>>2)]; //@line 259 "lparser.c"
      var $19=(($18)|0)==14; //@line 259 "lparser.c"
      if ($19) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 259 "lparser.c"
    case 4: 
      var $21=$extra; //@line 260 "lparser.c"
      var $22=((($21)+(1))|0); //@line 260 "lparser.c"
      $extra=$22; //@line 260 "lparser.c"
      var $23=$extra; //@line 261 "lparser.c"
      var $24=(($23)|0) < 0; //@line 261 "lparser.c"
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 261 "lparser.c"
    case 5: 
      $extra=0; //@line 261 "lparser.c"
      __label__ = 6; break; //@line 261 "lparser.c"
    case 6: 
      var $27=$fs; //@line 262 "lparser.c"
      var $28=$4; //@line 262 "lparser.c"
      var $29=$extra; //@line 262 "lparser.c"
      __Z15luaK_setreturnsP9FuncStateP7expdesci($27, $28, $29); //@line 262 "lparser.c"
      var $30=$extra; //@line 263 "lparser.c"
      var $31=(($30)|0) > 1; //@line 263 "lparser.c"
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 263 "lparser.c"
    case 7: 
      var $33=$fs; //@line 263 "lparser.c"
      var $34=$extra; //@line 263 "lparser.c"
      var $35=((($34)-(1))|0); //@line 263 "lparser.c"
      __Z16luaK_reserveregsP9FuncStatei($33, $35); //@line 263 "lparser.c"
      __label__ = 8; break; //@line 263 "lparser.c"
    case 8: 
      __label__ = 14; break; //@line 264 "lparser.c"
    case 9: 
      var $38=$4; //@line 266 "lparser.c"
      var $39=(($38)|0); //@line 266 "lparser.c"
      var $40=HEAP32[(($39)>>2)]; //@line 266 "lparser.c"
      var $41=(($40)|0)!=0; //@line 266 "lparser.c"
      if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 266 "lparser.c"
    case 10: 
      var $43=$fs; //@line 266 "lparser.c"
      var $44=$4; //@line 266 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($43, $44); //@line 266 "lparser.c"
      __label__ = 11; break; //@line 266 "lparser.c"
    case 11: 
      var $46=$extra; //@line 267 "lparser.c"
      var $47=(($46)|0) > 0; //@line 267 "lparser.c"
      if ($47) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 267 "lparser.c"
    case 12: 
      var $49=$fs; //@line 268 "lparser.c"
      var $50=(($49+36)|0); //@line 268 "lparser.c"
      var $51=HEAP32[(($50)>>2)]; //@line 268 "lparser.c"
      $reg=$51; //@line 268 "lparser.c"
      var $52=$fs; //@line 269 "lparser.c"
      var $53=$extra; //@line 269 "lparser.c"
      __Z16luaK_reserveregsP9FuncStatei($52, $53); //@line 269 "lparser.c"
      var $54=$fs; //@line 270 "lparser.c"
      var $55=$reg; //@line 270 "lparser.c"
      var $56=$extra; //@line 270 "lparser.c"
      __Z8luaK_nilP9FuncStateii($54, $55, $56); //@line 270 "lparser.c"
      __label__ = 13; break; //@line 271 "lparser.c"
    case 13: 
      __label__ = 14; break; //@line 272 "lparser.c"
    case 14: 
      ;
      return; //@line 273 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13adjust_assignP8LexStateiiP7expdesc["X"]=1;

function __Z4exprP8LexStateP7expdesc($ls, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$v;
  var $3=$1; //@line 857 "lparser.c"
  var $4=$2; //@line 857 "lparser.c"
  var $5=__Z7subexprP8LexStateP7expdescj($3, $4, 0); //@line 857 "lparser.c"
  ;
  return; //@line 858 "lparser.c"
}


function __Z7subexprP8LexStateP7expdescj($ls, $v, $limit) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $op;
      var $uop;
      var $v2=__stackBase__;
      var $nextop;
      $1=$ls;
      $2=$v;
      $3=$limit;
      var $4=$1; //@line 831 "lparser.c"
      __Z10enterlevelP8LexState($4); //@line 831 "lparser.c"
      var $5=$1; //@line 832 "lparser.c"
      var $6=(($5+12)|0); //@line 832 "lparser.c"
      var $7=(($6)|0); //@line 832 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 832 "lparser.c"
      var $9=__Z8getunopri($8); //@line 832 "lparser.c"
      $uop=$9; //@line 832 "lparser.c"
      var $10=$uop; //@line 833 "lparser.c"
      var $11=(($10)|0)!=3; //@line 833 "lparser.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 833 "lparser.c"
    case 3: 
      var $13=$1; //@line 834 "lparser.c"
      __Z9luaX_nextP8LexState($13); //@line 834 "lparser.c"
      var $14=$1; //@line 835 "lparser.c"
      var $15=$2; //@line 835 "lparser.c"
      var $16=__Z7subexprP8LexStateP7expdescj($14, $15, 8); //@line 835 "lparser.c"
      var $17=$1; //@line 836 "lparser.c"
      var $18=(($17+36)|0); //@line 836 "lparser.c"
      var $19=HEAP32[(($18)>>2)]; //@line 836 "lparser.c"
      var $20=$uop; //@line 836 "lparser.c"
      var $21=$2; //@line 836 "lparser.c"
      __Z11luaK_prefixP9FuncState5UnOprP7expdesc($19, $20, $21); //@line 836 "lparser.c"
      __label__ = 5; break; //@line 837 "lparser.c"
    case 4: 
      var $23=$1; //@line 838 "lparser.c"
      var $24=$2; //@line 838 "lparser.c"
      __Z9simpleexpP8LexStateP7expdesc($23, $24); //@line 838 "lparser.c"
      __label__ = 5; break; //@line 838 "lparser.c"
    case 5: 
      var $26=$1; //@line 840 "lparser.c"
      var $27=(($26+12)|0); //@line 840 "lparser.c"
      var $28=(($27)|0); //@line 840 "lparser.c"
      var $29=HEAP32[(($28)>>2)]; //@line 840 "lparser.c"
      var $30=__Z9getbinopri($29); //@line 840 "lparser.c"
      $op=$30; //@line 840 "lparser.c"
      __label__ = 6; break; //@line 841 "lparser.c"
    case 6: 
      var $32=$op; //@line 841 "lparser.c"
      var $33=(($32)|0)!=15; //@line 841 "lparser.c"
      if ($33) { __label__ = 7; break; } else { var $43 = 0;__label__ = 8; break; } //@line 841 "lparser.c"
    case 7: 
      var $35=$op; //@line 841 "lparser.c"
      var $36=((__ZL8priority+($35<<1))|0); //@line 841 "lparser.c"
      var $37=(($36)|0); //@line 841 "lparser.c"
      var $38=HEAPU8[($37)]; //@line 841 "lparser.c"
      var $39=(($38)&255); //@line 841 "lparser.c"
      var $40=$3; //@line 841 "lparser.c"
      var $41=(($39)>>>0) > (($40)>>>0); //@line 841 "lparser.c"
      var $43 = $41;__label__ = 8; break; //@line 841 "lparser.c"
    case 8: 
      var $43;
      if ($43) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 841 "lparser.c"
    case 9: 
      var $45=$1; //@line 844 "lparser.c"
      __Z9luaX_nextP8LexState($45); //@line 844 "lparser.c"
      var $46=$1; //@line 845 "lparser.c"
      var $47=(($46+36)|0); //@line 845 "lparser.c"
      var $48=HEAP32[(($47)>>2)]; //@line 845 "lparser.c"
      var $49=$op; //@line 845 "lparser.c"
      var $50=$2; //@line 845 "lparser.c"
      __Z10luaK_infixP9FuncState6BinOprP7expdesc($48, $49, $50); //@line 845 "lparser.c"
      var $51=$1; //@line 847 "lparser.c"
      var $52=$op; //@line 847 "lparser.c"
      var $53=((__ZL8priority+($52<<1))|0); //@line 847 "lparser.c"
      var $54=(($53+1)|0); //@line 847 "lparser.c"
      var $55=HEAPU8[($54)]; //@line 847 "lparser.c"
      var $56=(($55)&255); //@line 847 "lparser.c"
      var $57=__Z7subexprP8LexStateP7expdescj($51, $v2, $56); //@line 847 "lparser.c"
      $nextop=$57; //@line 847 "lparser.c"
      var $58=$1; //@line 848 "lparser.c"
      var $59=(($58+36)|0); //@line 848 "lparser.c"
      var $60=HEAP32[(($59)>>2)]; //@line 848 "lparser.c"
      var $61=$op; //@line 848 "lparser.c"
      var $62=$2; //@line 848 "lparser.c"
      __Z11luaK_posfixP9FuncState6BinOprP7expdescS3_($60, $61, $62, $v2); //@line 848 "lparser.c"
      var $63=$nextop; //@line 849 "lparser.c"
      $op=$63; //@line 849 "lparser.c"
      __label__ = 6; break; //@line 850 "lparser.c"
    case 10: 
      var $65=$1; //@line 851 "lparser.c"
      var $66=(($65+40)|0); //@line 851 "lparser.c"
      var $67=HEAP32[(($66)>>2)]; //@line 851 "lparser.c"
      var $68=(($67+52)|0); //@line 851 "lparser.c"
      var $69=HEAP16[(($68)>>1)]; //@line 851 "lparser.c"
      var $70=((($69)-(1))&65535); //@line 851 "lparser.c"
      HEAP16[(($68)>>1)]=$70; //@line 851 "lparser.c"
      var $71=$op; //@line 852 "lparser.c"
      STACKTOP = __stackBase__;
      return $71; //@line 852 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7subexprP8LexStateP7expdescj["X"]=1;

function __Z9simpleexpP8LexStateP7expdesc($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      $1=$ls;
      $2=$v;
      var $3=$1; //@line 730 "lparser.c"
      var $4=(($3+12)|0); //@line 730 "lparser.c"
      var $5=(($4)|0); //@line 730 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 730 "lparser.c"
      if ((($6)|0) == 284) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 286) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 269) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == 275) {
        __label__ = 6; break;
      }
      else if ((($6)|0) == 263) {
        __label__ = 7; break;
      }
      else if ((($6)|0) == 279) {
        __label__ = 8; break;
      }
      else if ((($6)|0) == 123) {
        __label__ = 11; break;
      }
      else if ((($6)|0) == 265) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 3: 
      var $8=$2; //@line 732 "lparser.c"
      __Z8init_expP7expdesc7expkindi($8, 5, 0); //@line 732 "lparser.c"
      var $9=$1; //@line 733 "lparser.c"
      var $10=(($9+12)|0); //@line 733 "lparser.c"
      var $11=(($10+4)|0); //@line 733 "lparser.c"
      var $12=$11; //@line 733 "lparser.c"
      var $13=(tempDoubleI32[0]=HEAP32[(($12)>>2)],tempDoubleI32[1]=HEAP32[((($12)+(4))>>2)],tempDoubleF64[0]); //@line 733 "lparser.c"
      var $14=$2; //@line 733 "lparser.c"
      var $15=(($14+4)|0); //@line 733 "lparser.c"
      var $16=$15; //@line 733 "lparser.c"
      (tempDoubleF64[0]=$13,HEAP32[(($16)>>2)]=tempDoubleI32[0],HEAP32[((($16)+(4))>>2)]=tempDoubleI32[1]); //@line 733 "lparser.c"
      __label__ = 14; break; //@line 734 "lparser.c"
    case 4: 
      var $18=$1; //@line 737 "lparser.c"
      var $19=$2; //@line 737 "lparser.c"
      var $20=$1; //@line 737 "lparser.c"
      var $21=(($20+12)|0); //@line 737 "lparser.c"
      var $22=(($21+4)|0); //@line 737 "lparser.c"
      var $23=$22; //@line 737 "lparser.c"
      var $24=HEAP32[(($23)>>2)]; //@line 737 "lparser.c"
      __Z10codestringP8LexStateP7expdescP7TString($18, $19, $24); //@line 737 "lparser.c"
      __label__ = 14; break; //@line 738 "lparser.c"
    case 5: 
      var $26=$2; //@line 741 "lparser.c"
      __Z8init_expP7expdesc7expkindi($26, 1, 0); //@line 741 "lparser.c"
      __label__ = 14; break; //@line 742 "lparser.c"
    case 6: 
      var $28=$2; //@line 745 "lparser.c"
      __Z8init_expP7expdesc7expkindi($28, 2, 0); //@line 745 "lparser.c"
      __label__ = 14; break; //@line 746 "lparser.c"
    case 7: 
      var $30=$2; //@line 749 "lparser.c"
      __Z8init_expP7expdesc7expkindi($30, 3, 0); //@line 749 "lparser.c"
      __label__ = 14; break; //@line 750 "lparser.c"
    case 8: 
      var $32=$1; //@line 753 "lparser.c"
      var $33=(($32+36)|0); //@line 753 "lparser.c"
      var $34=HEAP32[(($33)>>2)]; //@line 753 "lparser.c"
      $fs=$34; //@line 753 "lparser.c"
      var $35=$fs; //@line 754 "lparser.c"
      var $36=(($35)|0); //@line 754 "lparser.c"
      var $37=HEAP32[(($36)>>2)]; //@line 754 "lparser.c"
      var $38=(($37+74)|0); //@line 754 "lparser.c"
      var $39=HEAP8[($38)]; //@line 754 "lparser.c"
      var $40=(($39 << 24) >> 24)!=0; //@line 754 "lparser.c"
      if ($40) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 754 "lparser.c"
    case 9: 
      var $42=$1; //@line 754 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($42, ((STRING_TABLE.__str2131)|0)); //@line 754 "lparser.c"
      __label__ = 10; break; //@line 754 "lparser.c"
    case 10: 
      var $44=$fs; //@line 756 "lparser.c"
      var $45=(($44)|0); //@line 756 "lparser.c"
      var $46=HEAP32[(($45)>>2)]; //@line 756 "lparser.c"
      var $47=(($46+74)|0); //@line 756 "lparser.c"
      var $48=HEAPU8[($47)]; //@line 756 "lparser.c"
      var $49=(($48)&255); //@line 756 "lparser.c"
      var $50=$49 & -5; //@line 756 "lparser.c"
      var $51=(($50) & 255); //@line 756 "lparser.c"
      HEAP8[($47)]=$51; //@line 756 "lparser.c"
      var $52=$2; //@line 757 "lparser.c"
      var $53=$fs; //@line 757 "lparser.c"
      var $54=__Z12luaK_codeABCP9FuncState6OpCodeiii($53, 37, 0, 1, 0); //@line 757 "lparser.c"
      __Z8init_expP7expdesc7expkindi($52, 14, $54); //@line 757 "lparser.c"
      __label__ = 14; break; //@line 758 "lparser.c"
    case 11: 
      var $56=$1; //@line 761 "lparser.c"
      var $57=$2; //@line 761 "lparser.c"
      __Z11constructorP8LexStateP7expdesc($56, $57); //@line 761 "lparser.c"
      __label__ = 15; break; //@line 762 "lparser.c"
    case 12: 
      var $59=$1; //@line 765 "lparser.c"
      __Z9luaX_nextP8LexState($59); //@line 765 "lparser.c"
      var $60=$1; //@line 766 "lparser.c"
      var $61=$2; //@line 766 "lparser.c"
      var $62=$1; //@line 766 "lparser.c"
      var $63=(($62+4)|0); //@line 766 "lparser.c"
      var $64=HEAP32[(($63)>>2)]; //@line 766 "lparser.c"
      __Z4bodyP8LexStateP7expdescii($60, $61, 0, $64); //@line 766 "lparser.c"
      __label__ = 15; break; //@line 767 "lparser.c"
    case 13: 
      var $66=$1; //@line 770 "lparser.c"
      var $67=$2; //@line 770 "lparser.c"
      __Z10primaryexpP8LexStateP7expdesc($66, $67); //@line 770 "lparser.c"
      __label__ = 15; break; //@line 771 "lparser.c"
    case 14: 
      var $69=$1; //@line 774 "lparser.c"
      __Z9luaX_nextP8LexState($69); //@line 774 "lparser.c"
      __label__ = 15; break; //@line 775 "lparser.c"
    case 15: 
      ;
      return; //@line 775 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9simpleexpP8LexStateP7expdesc["X"]=1;

function __Z10codestringP8LexStateP7expdescP7TString($ls, $e, $s) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$ls;
  $2=$e;
  $3=$s;
  var $4=$2; //@line 134 "lparser.c"
  var $5=$1; //@line 134 "lparser.c"
  var $6=(($5+36)|0); //@line 134 "lparser.c"
  var $7=HEAP32[(($6)>>2)]; //@line 134 "lparser.c"
  var $8=$3; //@line 134 "lparser.c"
  var $9=__Z12luaK_stringKP9FuncStateP7TString($7, $8); //@line 134 "lparser.c"
  __Z8init_expP7expdesc7expkindi($4, 4, $9); //@line 134 "lparser.c"
  ;
  return; //@line 135 "lparser.c"
}


function __Z11constructorP8LexStateP7expdesc($ls, $t) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; _memset(__stackBase__, 0, 36);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $line;
      var $pc;
      var $cc=__stackBase__;
      $1=$ls;
      $2=$t;
      var $3=$1; //@line 500 "lparser.c"
      var $4=(($3+36)|0); //@line 500 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 500 "lparser.c"
      $fs=$5; //@line 500 "lparser.c"
      var $6=$1; //@line 501 "lparser.c"
      var $7=(($6+4)|0); //@line 501 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 501 "lparser.c"
      $line=$8; //@line 501 "lparser.c"
      var $9=$fs; //@line 502 "lparser.c"
      var $10=__Z12luaK_codeABCP9FuncState6OpCodeiii($9, 10, 0, 0, 0); //@line 502 "lparser.c"
      $pc=$10; //@line 502 "lparser.c"
      var $11=(($cc+32)|0); //@line 504 "lparser.c"
      HEAP32[(($11)>>2)]=0; //@line 504 "lparser.c"
      var $12=(($cc+24)|0); //@line 504 "lparser.c"
      HEAP32[(($12)>>2)]=0; //@line 504 "lparser.c"
      var $13=(($cc+28)|0); //@line 504 "lparser.c"
      HEAP32[(($13)>>2)]=0; //@line 504 "lparser.c"
      var $14=$2; //@line 505 "lparser.c"
      var $15=(($cc+20)|0); //@line 505 "lparser.c"
      HEAP32[(($15)>>2)]=$14; //@line 505 "lparser.c"
      var $16=$2; //@line 506 "lparser.c"
      var $17=$pc; //@line 506 "lparser.c"
      __Z8init_expP7expdesc7expkindi($16, 11, $17); //@line 506 "lparser.c"
      var $18=(($cc)|0); //@line 507 "lparser.c"
      __Z8init_expP7expdesc7expkindi($18, 0, 0); //@line 507 "lparser.c"
      var $19=$1; //@line 508 "lparser.c"
      var $20=(($19+36)|0); //@line 508 "lparser.c"
      var $21=HEAP32[(($20)>>2)]; //@line 508 "lparser.c"
      var $22=$2; //@line 508 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($21, $22); //@line 508 "lparser.c"
      var $23=$1; //@line 509 "lparser.c"
      __Z9checknextP8LexStatei($23, 123); //@line 509 "lparser.c"
      __label__ = 3; break; //@line 510 "lparser.c"
    case 3: 
      var $25=$1; //@line 512 "lparser.c"
      var $26=(($25+12)|0); //@line 512 "lparser.c"
      var $27=(($26)|0); //@line 512 "lparser.c"
      var $28=HEAP32[(($27)>>2)]; //@line 512 "lparser.c"
      var $29=(($28)|0)==125; //@line 512 "lparser.c"
      if ($29) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 512 "lparser.c"
    case 4: 
      __label__ = 16; break; //@line 512 "lparser.c"
    case 5: 
      var $32=$fs; //@line 513 "lparser.c"
      __Z14closelistfieldP9FuncStateP11ConsControl($32, $cc); //@line 513 "lparser.c"
      var $33=$1; //@line 514 "lparser.c"
      var $34=(($33+12)|0); //@line 514 "lparser.c"
      var $35=(($34)|0); //@line 514 "lparser.c"
      var $36=HEAP32[(($35)>>2)]; //@line 514 "lparser.c"
      if ((($36)|0) == 285) {
        __label__ = 6; break;
      }
      else if ((($36)|0) == 91) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 6: 
      var $38=$1; //@line 516 "lparser.c"
      __Z14luaX_lookaheadP8LexState($38); //@line 516 "lparser.c"
      var $39=$1; //@line 517 "lparser.c"
      var $40=(($39+24)|0); //@line 517 "lparser.c"
      var $41=(($40)|0); //@line 517 "lparser.c"
      var $42=HEAP32[(($41)>>2)]; //@line 517 "lparser.c"
      var $43=(($42)|0)!=61; //@line 517 "lparser.c"
      if ($43) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 517 "lparser.c"
    case 7: 
      var $45=$1; //@line 518 "lparser.c"
      __Z9listfieldP8LexStateP11ConsControl($45, $cc); //@line 518 "lparser.c"
      __label__ = 9; break; //@line 518 "lparser.c"
    case 8: 
      var $47=$1; //@line 520 "lparser.c"
      __Z8recfieldP8LexStateP11ConsControl($47, $cc); //@line 520 "lparser.c"
      __label__ = 9; break; //@line 520 "lparser.c"
    case 9: 
      __label__ = 12; break; //@line 521 "lparser.c"
    case 10: 
      var $50=$1; //@line 524 "lparser.c"
      __Z8recfieldP8LexStateP11ConsControl($50, $cc); //@line 524 "lparser.c"
      __label__ = 12; break; //@line 525 "lparser.c"
    case 11: 
      var $52=$1; //@line 528 "lparser.c"
      __Z9listfieldP8LexStateP11ConsControl($52, $cc); //@line 528 "lparser.c"
      __label__ = 12; break; //@line 529 "lparser.c"
    case 12: 
      __label__ = 13; break; //@line 532 "lparser.c"
    case 13: 
      var $55=$1; //@line 532 "lparser.c"
      var $56=__Z8testnextP8LexStatei($55, 44); //@line 532 "lparser.c"
      var $57=(($56)|0)!=0; //@line 532 "lparser.c"
      if ($57) { var $63 = 1;__label__ = 15; break; } else { __label__ = 14; break; } //@line 532 "lparser.c"
    case 14: 
      var $59=$1; //@line 532 "lparser.c"
      var $60=__Z8testnextP8LexStatei($59, 59); //@line 532 "lparser.c"
      var $61=(($60)|0)!=0; //@line 532 "lparser.c"
      var $63 = $61;__label__ = 15; break; //@line 532 "lparser.c"
    case 15: 
      var $63;
      if ($63) { __label__ = 3; break; } else { __label__ = 16; break; } //@line 532 "lparser.c"
    case 16: 
      var $65=$1; //@line 533 "lparser.c"
      var $66=$line; //@line 533 "lparser.c"
      __Z11check_matchP8LexStateiii($65, 125, 123, $66); //@line 533 "lparser.c"
      var $67=$fs; //@line 534 "lparser.c"
      __Z13lastlistfieldP9FuncStateP11ConsControl($67, $cc); //@line 534 "lparser.c"
      var $68=$pc; //@line 535 "lparser.c"
      var $69=$fs; //@line 535 "lparser.c"
      var $70=(($69)|0); //@line 535 "lparser.c"
      var $71=HEAP32[(($70)>>2)]; //@line 535 "lparser.c"
      var $72=(($71+12)|0); //@line 535 "lparser.c"
      var $73=HEAP32[(($72)>>2)]; //@line 535 "lparser.c"
      var $74=(($73+($68<<2))|0); //@line 535 "lparser.c"
      var $75=HEAP32[(($74)>>2)]; //@line 535 "lparser.c"
      var $76=$75 & 8388607; //@line 535 "lparser.c"
      var $77=(($cc+28)|0); //@line 535 "lparser.c"
      var $78=HEAP32[(($77)>>2)]; //@line 535 "lparser.c"
      var $79=__Z11luaO_int2fbj($78); //@line 535 "lparser.c"
      var $80=$79 << 23; //@line 535 "lparser.c"
      var $81=$80 & -8388608; //@line 535 "lparser.c"
      var $82=$76 | $81; //@line 535 "lparser.c"
      var $83=$pc; //@line 535 "lparser.c"
      var $84=$fs; //@line 535 "lparser.c"
      var $85=(($84)|0); //@line 535 "lparser.c"
      var $86=HEAP32[(($85)>>2)]; //@line 535 "lparser.c"
      var $87=(($86+12)|0); //@line 535 "lparser.c"
      var $88=HEAP32[(($87)>>2)]; //@line 535 "lparser.c"
      var $89=(($88+($83<<2))|0); //@line 535 "lparser.c"
      HEAP32[(($89)>>2)]=$82; //@line 535 "lparser.c"
      var $90=$pc; //@line 536 "lparser.c"
      var $91=$fs; //@line 536 "lparser.c"
      var $92=(($91)|0); //@line 536 "lparser.c"
      var $93=HEAP32[(($92)>>2)]; //@line 536 "lparser.c"
      var $94=(($93+12)|0); //@line 536 "lparser.c"
      var $95=HEAP32[(($94)>>2)]; //@line 536 "lparser.c"
      var $96=(($95+($90<<2))|0); //@line 536 "lparser.c"
      var $97=HEAP32[(($96)>>2)]; //@line 536 "lparser.c"
      var $98=$97 & -8372225; //@line 536 "lparser.c"
      var $99=(($cc+24)|0); //@line 536 "lparser.c"
      var $100=HEAP32[(($99)>>2)]; //@line 536 "lparser.c"
      var $101=__Z11luaO_int2fbj($100); //@line 536 "lparser.c"
      var $102=$101 << 14; //@line 536 "lparser.c"
      var $103=$102 & 8372224; //@line 536 "lparser.c"
      var $104=$98 | $103; //@line 536 "lparser.c"
      var $105=$pc; //@line 536 "lparser.c"
      var $106=$fs; //@line 536 "lparser.c"
      var $107=(($106)|0); //@line 536 "lparser.c"
      var $108=HEAP32[(($107)>>2)]; //@line 536 "lparser.c"
      var $109=(($108+12)|0); //@line 536 "lparser.c"
      var $110=HEAP32[(($109)>>2)]; //@line 536 "lparser.c"
      var $111=(($110+($105<<2))|0); //@line 536 "lparser.c"
      HEAP32[(($111)>>2)]=$104; //@line 536 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 537 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11constructorP8LexStateP7expdesc["X"]=1;

function __Z4bodyP8LexStateP7expdescii($ls, $e, $needself, $line) {
  var __stackBase__  = STACKTOP; STACKTOP += 572; _memset(__stackBase__, 0, 572);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $new_fs=__stackBase__;
      $1=$ls;
      $2=$e;
      $3=$needself;
      $4=$line;
      var $5=$1; //@line 579 "lparser.c"
      __Z9open_funcP8LexStateP9FuncState($5, $new_fs); //@line 579 "lparser.c"
      var $6=$4; //@line 580 "lparser.c"
      var $7=(($new_fs)|0); //@line 580 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 580 "lparser.c"
      var $9=(($8+60)|0); //@line 580 "lparser.c"
      HEAP32[(($9)>>2)]=$6; //@line 580 "lparser.c"
      var $10=$1; //@line 581 "lparser.c"
      __Z9checknextP8LexStatei($10, 40); //@line 581 "lparser.c"
      var $11=$3; //@line 582 "lparser.c"
      var $12=(($11)|0)!=0; //@line 582 "lparser.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 582 "lparser.c"
    case 3: 
      var $14=$1; //@line 583 "lparser.c"
      var $15=$1; //@line 583 "lparser.c"
      var $16=__Z14luaX_newstringP8LexStatePKcj($15, ((STRING_TABLE.__str3132)|0), 4); //@line 583 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($14, $16, 0); //@line 583 "lparser.c"
      var $17=$1; //@line 584 "lparser.c"
      __Z15adjustlocalvarsP8LexStatei($17, 1); //@line 584 "lparser.c"
      __label__ = 4; break; //@line 585 "lparser.c"
    case 4: 
      var $19=$1; //@line 586 "lparser.c"
      __Z7parlistP8LexState($19); //@line 586 "lparser.c"
      var $20=$1; //@line 587 "lparser.c"
      __Z9checknextP8LexStatei($20, 41); //@line 587 "lparser.c"
      var $21=$1; //@line 588 "lparser.c"
      __Z5chunkP8LexState($21); //@line 588 "lparser.c"
      var $22=$1; //@line 589 "lparser.c"
      var $23=(($22+4)|0); //@line 589 "lparser.c"
      var $24=HEAP32[(($23)>>2)]; //@line 589 "lparser.c"
      var $25=(($new_fs)|0); //@line 589 "lparser.c"
      var $26=HEAP32[(($25)>>2)]; //@line 589 "lparser.c"
      var $27=(($26+64)|0); //@line 589 "lparser.c"
      HEAP32[(($27)>>2)]=$24; //@line 589 "lparser.c"
      var $28=$1; //@line 590 "lparser.c"
      var $29=$4; //@line 590 "lparser.c"
      __Z11check_matchP8LexStateiii($28, 262, 265, $29); //@line 590 "lparser.c"
      var $30=$1; //@line 591 "lparser.c"
      __Z10close_funcP8LexState($30); //@line 591 "lparser.c"
      var $31=$1; //@line 592 "lparser.c"
      var $32=$2; //@line 592 "lparser.c"
      __Z11pushclosureP8LexStateP9FuncStateP7expdesc($31, $new_fs, $32); //@line 592 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 593 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z4bodyP8LexStateP7expdescii["X"]=1;

function __Z12new_localvarP8LexStateP7TStringi($ls, $name, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      $1=$ls;
      $2=$name;
      $3=$n;
      var $4=$1; //@line 161 "lparser.c"
      var $5=(($4+36)|0); //@line 161 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 161 "lparser.c"
      $fs=$6; //@line 161 "lparser.c"
      var $7=$fs; //@line 162 "lparser.c"
      var $8=(($7+50)|0); //@line 162 "lparser.c"
      var $9=HEAPU8[($8)]; //@line 162 "lparser.c"
      var $10=(($9)&255); //@line 162 "lparser.c"
      var $11=$3; //@line 162 "lparser.c"
      var $12=((($10)+($11))|0); //@line 162 "lparser.c"
      var $13=((($12)+(1))|0); //@line 162 "lparser.c"
      var $14=(($13)|0) > 200; //@line 162 "lparser.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 162 "lparser.c"
    case 3: 
      var $16=$fs; //@line 162 "lparser.c"
      __Z10errorlimitP9FuncStateiPKc($16, 200, ((STRING_TABLE.__str7136)|0)); //@line 162 "lparser.c"
      __label__ = 4; break; //@line 162 "lparser.c"
    case 4: 
      var $18=$1; //@line 163 "lparser.c"
      var $19=$2; //@line 163 "lparser.c"
      var $20=__Z16registerlocalvarP8LexStateP7TString($18, $19); //@line 163 "lparser.c"
      var $21=(($20) & 65535); //@line 163 "lparser.c"
      var $22=$fs; //@line 163 "lparser.c"
      var $23=(($22+50)|0); //@line 163 "lparser.c"
      var $24=HEAPU8[($23)]; //@line 163 "lparser.c"
      var $25=(($24)&255); //@line 163 "lparser.c"
      var $26=$3; //@line 163 "lparser.c"
      var $27=((($25)+($26))|0); //@line 163 "lparser.c"
      var $28=$fs; //@line 163 "lparser.c"
      var $29=(($28+172)|0); //@line 163 "lparser.c"
      var $30=(($29+($27<<1))|0); //@line 163 "lparser.c"
      HEAP16[(($30)>>1)]=$21; //@line 163 "lparser.c"
      ;
      return; //@line 164 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7parlistP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fs;
      var $f;
      var $nparams;
      $1=$ls;
      var $2=$1; //@line 545 "lparser.c"
      var $3=(($2+36)|0); //@line 545 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 545 "lparser.c"
      $fs=$4; //@line 545 "lparser.c"
      var $5=$fs; //@line 546 "lparser.c"
      var $6=(($5)|0); //@line 546 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 546 "lparser.c"
      $f=$7; //@line 546 "lparser.c"
      $nparams=0; //@line 547 "lparser.c"
      var $8=$f; //@line 548 "lparser.c"
      var $9=(($8+74)|0); //@line 548 "lparser.c"
      HEAP8[($9)]=0; //@line 548 "lparser.c"
      var $10=$1; //@line 549 "lparser.c"
      var $11=(($10+12)|0); //@line 549 "lparser.c"
      var $12=(($11)|0); //@line 549 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 549 "lparser.c"
      var $14=(($13)|0)!=41; //@line 549 "lparser.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 13; break; } //@line 549 "lparser.c"
    case 3: 
      __label__ = 4; break; //@line 550 "lparser.c"
    case 4: 
      var $17=$1; //@line 551 "lparser.c"
      var $18=(($17+12)|0); //@line 551 "lparser.c"
      var $19=(($18)|0); //@line 551 "lparser.c"
      var $20=HEAP32[(($19)>>2)]; //@line 551 "lparser.c"
      if ((($20)|0) == 285) {
        __label__ = 5; break;
      }
      else if ((($20)|0) == 279) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 5: 
      var $22=$1; //@line 553 "lparser.c"
      var $23=$1; //@line 553 "lparser.c"
      var $24=__Z13str_checknameP8LexState($23); //@line 553 "lparser.c"
      var $25=$nparams; //@line 553 "lparser.c"
      var $26=((($25)+(1))|0); //@line 553 "lparser.c"
      $nparams=$26; //@line 553 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($22, $24, $25); //@line 553 "lparser.c"
      __label__ = 8; break; //@line 554 "lparser.c"
    case 6: 
      var $28=$1; //@line 557 "lparser.c"
      __Z9luaX_nextP8LexState($28); //@line 557 "lparser.c"
      var $29=$1; //@line 560 "lparser.c"
      var $30=$1; //@line 560 "lparser.c"
      var $31=__Z14luaX_newstringP8LexStatePKcj($30, ((STRING_TABLE.__str5134)|0), 3); //@line 560 "lparser.c"
      var $32=$nparams; //@line 560 "lparser.c"
      var $33=((($32)+(1))|0); //@line 560 "lparser.c"
      $nparams=$33; //@line 560 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($29, $31, $32); //@line 560 "lparser.c"
      var $34=$f; //@line 561 "lparser.c"
      var $35=(($34+74)|0); //@line 561 "lparser.c"
      HEAP8[($35)]=5; //@line 561 "lparser.c"
      var $36=$f; //@line 563 "lparser.c"
      var $37=(($36+74)|0); //@line 563 "lparser.c"
      var $38=HEAPU8[($37)]; //@line 563 "lparser.c"
      var $39=(($38)&255); //@line 563 "lparser.c"
      var $40=$39 | 2; //@line 563 "lparser.c"
      var $41=(($40) & 255); //@line 563 "lparser.c"
      HEAP8[($37)]=$41; //@line 563 "lparser.c"
      __label__ = 8; break; //@line 564 "lparser.c"
    case 7: 
      var $43=$1; //@line 566 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($43, ((STRING_TABLE.__str6135)|0)); //@line 566 "lparser.c"
      __label__ = 8; break; //@line 567 "lparser.c"
    case 8: 
      __label__ = 9; break; //@line 568 "lparser.c"
    case 9: 
      var $46=$f; //@line 568 "lparser.c"
      var $47=(($46+74)|0); //@line 568 "lparser.c"
      var $48=HEAP8[($47)]; //@line 568 "lparser.c"
      var $49=(($48 << 24) >> 24)!=0; //@line 568 "lparser.c"
      if ($49) { var $55 = 0;__label__ = 11; break; } else { __label__ = 10; break; } //@line 568 "lparser.c"
    case 10: 
      var $51=$1; //@line 568 "lparser.c"
      var $52=__Z8testnextP8LexStatei($51, 44); //@line 568 "lparser.c"
      var $53=(($52)|0)!=0; //@line 568 "lparser.c"
      var $55 = $53;__label__ = 11; break; //@line 568 "lparser.c"
    case 11: 
      var $55;
      if ($55) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 568 "lparser.c"
    case 12: 
      __label__ = 13; break; //@line 569 "lparser.c"
    case 13: 
      var $58=$1; //@line 570 "lparser.c"
      var $59=$nparams; //@line 570 "lparser.c"
      __Z15adjustlocalvarsP8LexStatei($58, $59); //@line 570 "lparser.c"
      var $60=$fs; //@line 571 "lparser.c"
      var $61=(($60+50)|0); //@line 571 "lparser.c"
      var $62=HEAPU8[($61)]; //@line 571 "lparser.c"
      var $63=(($62)&255); //@line 571 "lparser.c"
      var $64=$f; //@line 571 "lparser.c"
      var $65=(($64+74)|0); //@line 571 "lparser.c"
      var $66=HEAPU8[($65)]; //@line 571 "lparser.c"
      var $67=(($66)&255); //@line 571 "lparser.c"
      var $68=$67 & 1; //@line 571 "lparser.c"
      var $69=((($63)-($68))|0); //@line 571 "lparser.c"
      var $70=(($69) & 255); //@line 571 "lparser.c"
      var $71=$f; //@line 571 "lparser.c"
      var $72=(($71+73)|0); //@line 571 "lparser.c"
      HEAP8[($72)]=$70; //@line 571 "lparser.c"
      var $73=$fs; //@line 572 "lparser.c"
      var $74=$fs; //@line 572 "lparser.c"
      var $75=(($74+50)|0); //@line 572 "lparser.c"
      var $76=HEAPU8[($75)]; //@line 572 "lparser.c"
      var $77=(($76)&255); //@line 572 "lparser.c"
      __Z16luaK_reserveregsP9FuncStatei($73, $77); //@line 572 "lparser.c"
      ;
      return; //@line 573 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7parlistP8LexState["X"]=1;

function __Z11pushclosureP8LexStateP9FuncStateP7expdesc($ls, $func, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      var $f;
      var $oldsize;
      var $i;
      var $o;
      $1=$ls;
      $2=$func;
      $3=$v;
      var $4=$1; //@line 311 "lparser.c"
      var $5=(($4+36)|0); //@line 311 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 311 "lparser.c"
      $fs=$6; //@line 311 "lparser.c"
      var $7=$fs; //@line 312 "lparser.c"
      var $8=(($7)|0); //@line 312 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 312 "lparser.c"
      $f=$9; //@line 312 "lparser.c"
      var $10=$f; //@line 313 "lparser.c"
      var $11=(($10+52)|0); //@line 313 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 313 "lparser.c"
      $oldsize=$12; //@line 313 "lparser.c"
      var $13=$fs; //@line 315 "lparser.c"
      var $14=(($13+44)|0); //@line 315 "lparser.c"
      var $15=HEAP32[(($14)>>2)]; //@line 315 "lparser.c"
      var $16=((($15)+(1))|0); //@line 315 "lparser.c"
      var $17=$f; //@line 315 "lparser.c"
      var $18=(($17+52)|0); //@line 315 "lparser.c"
      var $19=HEAP32[(($18)>>2)]; //@line 315 "lparser.c"
      var $20=(($16)|0) > (($19)|0); //@line 315 "lparser.c"
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 315 "lparser.c"
    case 3: 
      var $22=$1; //@line 315 "lparser.c"
      var $23=(($22+40)|0); //@line 315 "lparser.c"
      var $24=HEAP32[(($23)>>2)]; //@line 315 "lparser.c"
      var $25=$f; //@line 315 "lparser.c"
      var $26=(($25+16)|0); //@line 315 "lparser.c"
      var $27=HEAP32[(($26)>>2)]; //@line 315 "lparser.c"
      var $28=$27; //@line 315 "lparser.c"
      var $29=$f; //@line 315 "lparser.c"
      var $30=(($29+52)|0); //@line 315 "lparser.c"
      var $31=__Z13luaM_growaux_P9lua_StatePvPijiPKc($24, $28, $30, 4, 262143, ((STRING_TABLE.__str4133)|0)); //@line 315 "lparser.c"
      var $32=$31; //@line 315 "lparser.c"
      var $33=$f; //@line 315 "lparser.c"
      var $34=(($33+16)|0); //@line 315 "lparser.c"
      HEAP32[(($34)>>2)]=$32; //@line 315 "lparser.c"
      __label__ = 4; break; //@line 315 "lparser.c"
    case 4: 
      __label__ = 5; break; //@line 317 "lparser.c"
    case 5: 
      var $37=$oldsize; //@line 317 "lparser.c"
      var $38=$f; //@line 317 "lparser.c"
      var $39=(($38+52)|0); //@line 317 "lparser.c"
      var $40=HEAP32[(($39)>>2)]; //@line 317 "lparser.c"
      var $41=(($37)|0) < (($40)|0); //@line 317 "lparser.c"
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 317 "lparser.c"
    case 6: 
      var $43=$oldsize; //@line 317 "lparser.c"
      var $44=((($43)+(1))|0); //@line 317 "lparser.c"
      $oldsize=$44; //@line 317 "lparser.c"
      var $45=$f; //@line 317 "lparser.c"
      var $46=(($45+16)|0); //@line 317 "lparser.c"
      var $47=HEAP32[(($46)>>2)]; //@line 317 "lparser.c"
      var $48=(($47+($43<<2))|0); //@line 317 "lparser.c"
      HEAP32[(($48)>>2)]=0; //@line 317 "lparser.c"
      __label__ = 5; break; //@line 317 "lparser.c"
    case 7: 
      var $50=$2; //@line 318 "lparser.c"
      var $51=(($50)|0); //@line 318 "lparser.c"
      var $52=HEAP32[(($51)>>2)]; //@line 318 "lparser.c"
      var $53=$fs; //@line 318 "lparser.c"
      var $54=(($53+44)|0); //@line 318 "lparser.c"
      var $55=HEAP32[(($54)>>2)]; //@line 318 "lparser.c"
      var $56=((($55)+(1))|0); //@line 318 "lparser.c"
      HEAP32[(($54)>>2)]=$56; //@line 318 "lparser.c"
      var $57=$f; //@line 318 "lparser.c"
      var $58=(($57+16)|0); //@line 318 "lparser.c"
      var $59=HEAP32[(($58)>>2)]; //@line 318 "lparser.c"
      var $60=(($59+($55<<2))|0); //@line 318 "lparser.c"
      HEAP32[(($60)>>2)]=$52; //@line 318 "lparser.c"
      var $61=$2; //@line 319 "lparser.c"
      var $62=(($61)|0); //@line 319 "lparser.c"
      var $63=HEAP32[(($62)>>2)]; //@line 319 "lparser.c"
      var $64=$63; //@line 319 "lparser.c"
      var $65=$64; //@line 319 "lparser.c"
      var $66=(($65+5)|0); //@line 319 "lparser.c"
      var $67=HEAPU8[($66)]; //@line 319 "lparser.c"
      var $68=(($67)&255); //@line 319 "lparser.c"
      var $69=$68 & 3; //@line 319 "lparser.c"
      var $70=(($69)|0)!=0; //@line 319 "lparser.c"
      if ($70) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 319 "lparser.c"
    case 8: 
      var $72=$f; //@line 319 "lparser.c"
      var $73=$72; //@line 319 "lparser.c"
      var $74=$73; //@line 319 "lparser.c"
      var $75=(($74+5)|0); //@line 319 "lparser.c"
      var $76=HEAPU8[($75)]; //@line 319 "lparser.c"
      var $77=(($76)&255); //@line 319 "lparser.c"
      var $78=$77 & 4; //@line 319 "lparser.c"
      var $79=(($78)|0)!=0; //@line 319 "lparser.c"
      if ($79) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 319 "lparser.c"
    case 9: 
      var $81=$1; //@line 319 "lparser.c"
      var $82=(($81+40)|0); //@line 319 "lparser.c"
      var $83=HEAP32[(($82)>>2)]; //@line 319 "lparser.c"
      var $84=$f; //@line 319 "lparser.c"
      var $85=$84; //@line 319 "lparser.c"
      var $86=$2; //@line 319 "lparser.c"
      var $87=(($86)|0); //@line 319 "lparser.c"
      var $88=HEAP32[(($87)>>2)]; //@line 319 "lparser.c"
      var $89=$88; //@line 319 "lparser.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($83, $85, $89); //@line 319 "lparser.c"
      __label__ = 10; break; //@line 319 "lparser.c"
    case 10: 
      var $91=$3; //@line 320 "lparser.c"
      var $92=$fs; //@line 320 "lparser.c"
      var $93=$fs; //@line 320 "lparser.c"
      var $94=(($93+44)|0); //@line 320 "lparser.c"
      var $95=HEAP32[(($94)>>2)]; //@line 320 "lparser.c"
      var $96=((($95)-(1))|0); //@line 320 "lparser.c"
      var $97=__Z12luaK_codeABxP9FuncState6OpCodeij($92, 36, 0, $96); //@line 320 "lparser.c"
      __Z8init_expP7expdesc7expkindi($91, 11, $97); //@line 320 "lparser.c"
      $i=0; //@line 321 "lparser.c"
      __label__ = 11; break; //@line 321 "lparser.c"
    case 11: 
      var $99=$i; //@line 321 "lparser.c"
      var $100=$2; //@line 321 "lparser.c"
      var $101=(($100)|0); //@line 321 "lparser.c"
      var $102=HEAP32[(($101)>>2)]; //@line 321 "lparser.c"
      var $103=(($102+72)|0); //@line 321 "lparser.c"
      var $104=HEAPU8[($103)]; //@line 321 "lparser.c"
      var $105=(($104)&255); //@line 321 "lparser.c"
      var $106=(($99)|0) < (($105)|0); //@line 321 "lparser.c"
      if ($106) { __label__ = 12; break; } else { __label__ = 17; break; } //@line 321 "lparser.c"
    case 12: 
      var $108=$i; //@line 322 "lparser.c"
      var $109=$2; //@line 322 "lparser.c"
      var $110=(($109+51)|0); //@line 322 "lparser.c"
      var $111=(($110+($108<<1))|0); //@line 322 "lparser.c"
      var $112=(($111)|0); //@line 322 "lparser.c"
      var $113=HEAPU8[($112)]; //@line 322 "lparser.c"
      var $114=(($113)&255); //@line 322 "lparser.c"
      var $115=(($114)|0)==6; //@line 322 "lparser.c"
      if ($115) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 322 "lparser.c"
    case 13: 
      var $119 = 0;__label__ = 15; break; //@line 322 "lparser.c"
    case 14: 
      var $119 = 4;__label__ = 15; break; //@line 322 "lparser.c"
    case 15: 
      var $119; //@line 322 "lparser.c"
      $o=$119; //@line 322 "lparser.c"
      var $120=$fs; //@line 323 "lparser.c"
      var $121=$o; //@line 323 "lparser.c"
      var $122=$i; //@line 323 "lparser.c"
      var $123=$2; //@line 323 "lparser.c"
      var $124=(($123+51)|0); //@line 323 "lparser.c"
      var $125=(($124+($122<<1))|0); //@line 323 "lparser.c"
      var $126=(($125+1)|0); //@line 323 "lparser.c"
      var $127=HEAPU8[($126)]; //@line 323 "lparser.c"
      var $128=(($127)&255); //@line 323 "lparser.c"
      var $129=__Z12luaK_codeABCP9FuncState6OpCodeiii($120, $121, 0, $128, 0); //@line 323 "lparser.c"
      __label__ = 16; break; //@line 324 "lparser.c"
    case 16: 
      var $131=$i; //@line 321 "lparser.c"
      var $132=((($131)+(1))|0); //@line 321 "lparser.c"
      $i=$132; //@line 321 "lparser.c"
      __label__ = 11; break; //@line 321 "lparser.c"
    case 17: 
      ;
      return; //@line 325 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11pushclosureP8LexStateP9FuncStateP7expdesc["X"]=1;

function __Z13str_checknameP8LexState($ls) {
  ;
  var __label__;

  var $1;
  var $ts;
  $1=$ls;
  var $2=$1; //@line 119 "lparser.c"
  __Z5checkP8LexStatei($2, 285); //@line 119 "lparser.c"
  var $3=$1; //@line 120 "lparser.c"
  var $4=(($3+12)|0); //@line 120 "lparser.c"
  var $5=(($4+4)|0); //@line 120 "lparser.c"
  var $6=$5; //@line 120 "lparser.c"
  var $7=HEAP32[(($6)>>2)]; //@line 120 "lparser.c"
  $ts=$7; //@line 120 "lparser.c"
  var $8=$1; //@line 121 "lparser.c"
  __Z9luaX_nextP8LexState($8); //@line 121 "lparser.c"
  var $9=$ts; //@line 122 "lparser.c"
  ;
  return $9; //@line 122 "lparser.c"
}


function __Z16registerlocalvarP8LexStateP7TString($ls, $varname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $f;
      var $oldsize;
      $1=$ls;
      $2=$varname;
      var $3=$1; //@line 144 "lparser.c"
      var $4=(($3+36)|0); //@line 144 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 144 "lparser.c"
      $fs=$5; //@line 144 "lparser.c"
      var $6=$fs; //@line 145 "lparser.c"
      var $7=(($6)|0); //@line 145 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 145 "lparser.c"
      $f=$8; //@line 145 "lparser.c"
      var $9=$f; //@line 146 "lparser.c"
      var $10=(($9+56)|0); //@line 146 "lparser.c"
      var $11=HEAP32[(($10)>>2)]; //@line 146 "lparser.c"
      $oldsize=$11; //@line 146 "lparser.c"
      var $12=$fs; //@line 147 "lparser.c"
      var $13=(($12+48)|0); //@line 147 "lparser.c"
      var $14=HEAP16[(($13)>>1)]; //@line 147 "lparser.c"
      var $15=(($14 << 16) >> 16); //@line 147 "lparser.c"
      var $16=((($15)+(1))|0); //@line 147 "lparser.c"
      var $17=$f; //@line 147 "lparser.c"
      var $18=(($17+56)|0); //@line 147 "lparser.c"
      var $19=HEAP32[(($18)>>2)]; //@line 147 "lparser.c"
      var $20=(($16)|0) > (($19)|0); //@line 147 "lparser.c"
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 147 "lparser.c"
    case 3: 
      var $22=$1; //@line 147 "lparser.c"
      var $23=(($22+40)|0); //@line 147 "lparser.c"
      var $24=HEAP32[(($23)>>2)]; //@line 147 "lparser.c"
      var $25=$f; //@line 147 "lparser.c"
      var $26=(($25+24)|0); //@line 147 "lparser.c"
      var $27=HEAP32[(($26)>>2)]; //@line 147 "lparser.c"
      var $28=$27; //@line 147 "lparser.c"
      var $29=$f; //@line 147 "lparser.c"
      var $30=(($29+56)|0); //@line 147 "lparser.c"
      var $31=__Z13luaM_growaux_P9lua_StatePvPijiPKc($24, $28, $30, 12, 32767, ((STRING_TABLE.__str8137)|0)); //@line 147 "lparser.c"
      var $32=$31; //@line 147 "lparser.c"
      var $33=$f; //@line 147 "lparser.c"
      var $34=(($33+24)|0); //@line 147 "lparser.c"
      HEAP32[(($34)>>2)]=$32; //@line 147 "lparser.c"
      __label__ = 4; break; //@line 147 "lparser.c"
    case 4: 
      __label__ = 5; break; //@line 149 "lparser.c"
    case 5: 
      var $37=$oldsize; //@line 149 "lparser.c"
      var $38=$f; //@line 149 "lparser.c"
      var $39=(($38+56)|0); //@line 149 "lparser.c"
      var $40=HEAP32[(($39)>>2)]; //@line 149 "lparser.c"
      var $41=(($37)|0) < (($40)|0); //@line 149 "lparser.c"
      if ($41) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 149 "lparser.c"
    case 6: 
      var $43=$oldsize; //@line 149 "lparser.c"
      var $44=((($43)+(1))|0); //@line 149 "lparser.c"
      $oldsize=$44; //@line 149 "lparser.c"
      var $45=$f; //@line 149 "lparser.c"
      var $46=(($45+24)|0); //@line 149 "lparser.c"
      var $47=HEAP32[(($46)>>2)]; //@line 149 "lparser.c"
      var $48=(($47+($43)*(12))|0); //@line 149 "lparser.c"
      var $49=(($48)|0); //@line 149 "lparser.c"
      HEAP32[(($49)>>2)]=0; //@line 149 "lparser.c"
      __label__ = 5; break; //@line 149 "lparser.c"
    case 7: 
      var $51=$2; //@line 150 "lparser.c"
      var $52=$fs; //@line 150 "lparser.c"
      var $53=(($52+48)|0); //@line 150 "lparser.c"
      var $54=HEAP16[(($53)>>1)]; //@line 150 "lparser.c"
      var $55=(($54 << 16) >> 16); //@line 150 "lparser.c"
      var $56=$f; //@line 150 "lparser.c"
      var $57=(($56+24)|0); //@line 150 "lparser.c"
      var $58=HEAP32[(($57)>>2)]; //@line 150 "lparser.c"
      var $59=(($58+($55)*(12))|0); //@line 150 "lparser.c"
      var $60=(($59)|0); //@line 150 "lparser.c"
      HEAP32[(($60)>>2)]=$51; //@line 150 "lparser.c"
      var $61=$2; //@line 151 "lparser.c"
      var $62=$61; //@line 151 "lparser.c"
      var $63=$62; //@line 151 "lparser.c"
      var $64=(($63+5)|0); //@line 151 "lparser.c"
      var $65=HEAPU8[($64)]; //@line 151 "lparser.c"
      var $66=(($65)&255); //@line 151 "lparser.c"
      var $67=$66 & 3; //@line 151 "lparser.c"
      var $68=(($67)|0)!=0; //@line 151 "lparser.c"
      if ($68) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 151 "lparser.c"
    case 8: 
      var $70=$f; //@line 151 "lparser.c"
      var $71=$70; //@line 151 "lparser.c"
      var $72=$71; //@line 151 "lparser.c"
      var $73=(($72+5)|0); //@line 151 "lparser.c"
      var $74=HEAPU8[($73)]; //@line 151 "lparser.c"
      var $75=(($74)&255); //@line 151 "lparser.c"
      var $76=$75 & 4; //@line 151 "lparser.c"
      var $77=(($76)|0)!=0; //@line 151 "lparser.c"
      if ($77) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 151 "lparser.c"
    case 9: 
      var $79=$1; //@line 151 "lparser.c"
      var $80=(($79+40)|0); //@line 151 "lparser.c"
      var $81=HEAP32[(($80)>>2)]; //@line 151 "lparser.c"
      var $82=$f; //@line 151 "lparser.c"
      var $83=$82; //@line 151 "lparser.c"
      var $84=$2; //@line 151 "lparser.c"
      var $85=$84; //@line 151 "lparser.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($81, $83, $85); //@line 151 "lparser.c"
      __label__ = 10; break; //@line 151 "lparser.c"
    case 10: 
      var $87=$fs; //@line 152 "lparser.c"
      var $88=(($87+48)|0); //@line 152 "lparser.c"
      var $89=HEAP16[(($88)>>1)]; //@line 152 "lparser.c"
      var $90=((($89)+(1))&65535); //@line 152 "lparser.c"
      HEAP16[(($88)>>1)]=$90; //@line 152 "lparser.c"
      var $91=(($89 << 16) >> 16); //@line 152 "lparser.c"
      ;
      return $91; //@line 152 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z16registerlocalvarP8LexStateP7TString["X"]=1;

function __Z14closelistfieldP9FuncStateP11ConsControl($fs, $cc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$cc;
      var $3=$2; //@line 465 "lparser.c"
      var $4=(($3)|0); //@line 465 "lparser.c"
      var $5=(($4)|0); //@line 465 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 465 "lparser.c"
      var $7=(($6)|0)==0; //@line 465 "lparser.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 465 "lparser.c"
    case 3: 
      __label__ = 6; break; //@line 465 "lparser.c"
    case 4: 
      var $10=$1; //@line 466 "lparser.c"
      var $11=$2; //@line 466 "lparser.c"
      var $12=(($11)|0); //@line 466 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($10, $12); //@line 466 "lparser.c"
      var $13=$2; //@line 467 "lparser.c"
      var $14=(($13)|0); //@line 467 "lparser.c"
      var $15=(($14)|0); //@line 467 "lparser.c"
      HEAP32[(($15)>>2)]=0; //@line 467 "lparser.c"
      var $16=$2; //@line 468 "lparser.c"
      var $17=(($16+32)|0); //@line 468 "lparser.c"
      var $18=HEAP32[(($17)>>2)]; //@line 468 "lparser.c"
      var $19=(($18)|0)==50; //@line 468 "lparser.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 468 "lparser.c"
    case 5: 
      var $21=$1; //@line 469 "lparser.c"
      var $22=$2; //@line 469 "lparser.c"
      var $23=(($22+20)|0); //@line 469 "lparser.c"
      var $24=HEAP32[(($23)>>2)]; //@line 469 "lparser.c"
      var $25=(($24+4)|0); //@line 469 "lparser.c"
      var $26=$25; //@line 469 "lparser.c"
      var $27=(($26)|0); //@line 469 "lparser.c"
      var $28=HEAP32[(($27)>>2)]; //@line 469 "lparser.c"
      var $29=$2; //@line 469 "lparser.c"
      var $30=(($29+28)|0); //@line 469 "lparser.c"
      var $31=HEAP32[(($30)>>2)]; //@line 469 "lparser.c"
      var $32=$2; //@line 469 "lparser.c"
      var $33=(($32+32)|0); //@line 469 "lparser.c"
      var $34=HEAP32[(($33)>>2)]; //@line 469 "lparser.c"
      __Z12luaK_setlistP9FuncStateiii($21, $28, $31, $34); //@line 469 "lparser.c"
      var $35=$2; //@line 470 "lparser.c"
      var $36=(($35+32)|0); //@line 470 "lparser.c"
      HEAP32[(($36)>>2)]=0; //@line 470 "lparser.c"
      __label__ = 6; break; //@line 471 "lparser.c"
    case 6: 
      ;
      return; //@line 472 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9listfieldP8LexStateP11ConsControl($ls, $cc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$ls;
      $2=$cc;
      var $3=$1; //@line 491 "lparser.c"
      var $4=$2; //@line 491 "lparser.c"
      var $5=(($4)|0); //@line 491 "lparser.c"
      __Z4exprP8LexStateP7expdesc($3, $5); //@line 491 "lparser.c"
      var $6=$2; //@line 492 "lparser.c"
      var $7=(($6+28)|0); //@line 492 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 492 "lparser.c"
      var $9=(($8)|0) > 2147483645; //@line 492 "lparser.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 492 "lparser.c"
    case 3: 
      var $11=$1; //@line 492 "lparser.c"
      var $12=(($11+36)|0); //@line 492 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 492 "lparser.c"
      __Z10errorlimitP9FuncStateiPKc($13, 2147483645, ((STRING_TABLE.__str9138)|0)); //@line 492 "lparser.c"
      __label__ = 4; break; //@line 492 "lparser.c"
    case 4: 
      var $15=$2; //@line 493 "lparser.c"
      var $16=(($15+28)|0); //@line 493 "lparser.c"
      var $17=HEAP32[(($16)>>2)]; //@line 493 "lparser.c"
      var $18=((($17)+(1))|0); //@line 493 "lparser.c"
      HEAP32[(($16)>>2)]=$18; //@line 493 "lparser.c"
      var $19=$2; //@line 494 "lparser.c"
      var $20=(($19+32)|0); //@line 494 "lparser.c"
      var $21=HEAP32[(($20)>>2)]; //@line 494 "lparser.c"
      var $22=((($21)+(1))|0); //@line 494 "lparser.c"
      HEAP32[(($20)>>2)]=$22; //@line 494 "lparser.c"
      ;
      return; //@line 495 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8recfieldP8LexStateP11ConsControl($ls, $cc) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; _memset(__stackBase__, 0, 40);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $reg;
      var $key=__stackBase__;
      var $val=(__stackBase__)+(20);
      var $rkkey;
      $1=$ls;
      $2=$cc;
      var $3=$1; //@line 445 "lparser.c"
      var $4=(($3+36)|0); //@line 445 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 445 "lparser.c"
      $fs=$5; //@line 445 "lparser.c"
      var $6=$1; //@line 446 "lparser.c"
      var $7=(($6+36)|0); //@line 446 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 446 "lparser.c"
      var $9=(($8+36)|0); //@line 446 "lparser.c"
      var $10=HEAP32[(($9)>>2)]; //@line 446 "lparser.c"
      $reg=$10; //@line 446 "lparser.c"
      var $11=$1; //@line 449 "lparser.c"
      var $12=(($11+12)|0); //@line 449 "lparser.c"
      var $13=(($12)|0); //@line 449 "lparser.c"
      var $14=HEAP32[(($13)>>2)]; //@line 449 "lparser.c"
      var $15=(($14)|0)==285; //@line 449 "lparser.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 449 "lparser.c"
    case 3: 
      var $17=$2; //@line 450 "lparser.c"
      var $18=(($17+24)|0); //@line 450 "lparser.c"
      var $19=HEAP32[(($18)>>2)]; //@line 450 "lparser.c"
      var $20=(($19)|0) > 2147483645; //@line 450 "lparser.c"
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 450 "lparser.c"
    case 4: 
      var $22=$fs; //@line 450 "lparser.c"
      __Z10errorlimitP9FuncStateiPKc($22, 2147483645, ((STRING_TABLE.__str9138)|0)); //@line 450 "lparser.c"
      __label__ = 5; break; //@line 450 "lparser.c"
    case 5: 
      var $24=$1; //@line 451 "lparser.c"
      __Z9checknameP8LexStateP7expdesc($24, $key); //@line 451 "lparser.c"
      __label__ = 7; break; //@line 452 "lparser.c"
    case 6: 
      var $26=$1; //@line 454 "lparser.c"
      __Z6yindexP8LexStateP7expdesc($26, $key); //@line 454 "lparser.c"
      __label__ = 7; break; //@line 454 "lparser.c"
    case 7: 
      var $28=$2; //@line 455 "lparser.c"
      var $29=(($28+24)|0); //@line 455 "lparser.c"
      var $30=HEAP32[(($29)>>2)]; //@line 455 "lparser.c"
      var $31=((($30)+(1))|0); //@line 455 "lparser.c"
      HEAP32[(($29)>>2)]=$31; //@line 455 "lparser.c"
      var $32=$1; //@line 456 "lparser.c"
      __Z9checknextP8LexStatei($32, 61); //@line 456 "lparser.c"
      var $33=$fs; //@line 457 "lparser.c"
      var $34=__Z11luaK_exp2RKP9FuncStateP7expdesc($33, $key); //@line 457 "lparser.c"
      $rkkey=$34; //@line 457 "lparser.c"
      var $35=$1; //@line 458 "lparser.c"
      __Z4exprP8LexStateP7expdesc($35, $val); //@line 458 "lparser.c"
      var $36=$fs; //@line 459 "lparser.c"
      var $37=$2; //@line 459 "lparser.c"
      var $38=(($37+20)|0); //@line 459 "lparser.c"
      var $39=HEAP32[(($38)>>2)]; //@line 459 "lparser.c"
      var $40=(($39+4)|0); //@line 459 "lparser.c"
      var $41=$40; //@line 459 "lparser.c"
      var $42=(($41)|0); //@line 459 "lparser.c"
      var $43=HEAP32[(($42)>>2)]; //@line 459 "lparser.c"
      var $44=$rkkey; //@line 459 "lparser.c"
      var $45=$fs; //@line 459 "lparser.c"
      var $46=__Z11luaK_exp2RKP9FuncStateP7expdesc($45, $val); //@line 459 "lparser.c"
      var $47=__Z12luaK_codeABCP9FuncState6OpCodeiii($36, 9, $43, $44, $46); //@line 459 "lparser.c"
      var $48=$reg; //@line 460 "lparser.c"
      var $49=$fs; //@line 460 "lparser.c"
      var $50=(($49+36)|0); //@line 460 "lparser.c"
      HEAP32[(($50)>>2)]=$48; //@line 460 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 461 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8recfieldP8LexStateP11ConsControl["X"]=1;

function __Z13lastlistfieldP9FuncStateP11ConsControl($fs, $cc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$fs;
      $2=$cc;
      var $3=$2; //@line 476 "lparser.c"
      var $4=(($3+32)|0); //@line 476 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 476 "lparser.c"
      var $6=(($5)|0)==0; //@line 476 "lparser.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 476 "lparser.c"
    case 3: 
      __label__ = 10; break; //@line 476 "lparser.c"
    case 4: 
      var $9=$2; //@line 477 "lparser.c"
      var $10=(($9)|0); //@line 477 "lparser.c"
      var $11=(($10)|0); //@line 477 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 477 "lparser.c"
      var $13=(($12)|0)==13; //@line 477 "lparser.c"
      if ($13) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 477 "lparser.c"
    case 5: 
      var $15=$2; //@line 477 "lparser.c"
      var $16=(($15)|0); //@line 477 "lparser.c"
      var $17=(($16)|0); //@line 477 "lparser.c"
      var $18=HEAP32[(($17)>>2)]; //@line 477 "lparser.c"
      var $19=(($18)|0)==14; //@line 477 "lparser.c"
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 477 "lparser.c"
    case 6: 
      var $21=$1; //@line 478 "lparser.c"
      var $22=$2; //@line 478 "lparser.c"
      var $23=(($22)|0); //@line 478 "lparser.c"
      __Z15luaK_setreturnsP9FuncStateP7expdesci($21, $23, -1); //@line 478 "lparser.c"
      var $24=$1; //@line 479 "lparser.c"
      var $25=$2; //@line 479 "lparser.c"
      var $26=(($25+20)|0); //@line 479 "lparser.c"
      var $27=HEAP32[(($26)>>2)]; //@line 479 "lparser.c"
      var $28=(($27+4)|0); //@line 479 "lparser.c"
      var $29=$28; //@line 479 "lparser.c"
      var $30=(($29)|0); //@line 479 "lparser.c"
      var $31=HEAP32[(($30)>>2)]; //@line 479 "lparser.c"
      var $32=$2; //@line 479 "lparser.c"
      var $33=(($32+28)|0); //@line 479 "lparser.c"
      var $34=HEAP32[(($33)>>2)]; //@line 479 "lparser.c"
      __Z12luaK_setlistP9FuncStateiii($24, $31, $34, -1); //@line 479 "lparser.c"
      var $35=$2; //@line 480 "lparser.c"
      var $36=(($35+28)|0); //@line 480 "lparser.c"
      var $37=HEAP32[(($36)>>2)]; //@line 480 "lparser.c"
      var $38=((($37)-(1))|0); //@line 480 "lparser.c"
      HEAP32[(($36)>>2)]=$38; //@line 480 "lparser.c"
      __label__ = 10; break; //@line 481 "lparser.c"
    case 7: 
      var $40=$2; //@line 483 "lparser.c"
      var $41=(($40)|0); //@line 483 "lparser.c"
      var $42=(($41)|0); //@line 483 "lparser.c"
      var $43=HEAP32[(($42)>>2)]; //@line 483 "lparser.c"
      var $44=(($43)|0)!=0; //@line 483 "lparser.c"
      if ($44) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 483 "lparser.c"
    case 8: 
      var $46=$1; //@line 484 "lparser.c"
      var $47=$2; //@line 484 "lparser.c"
      var $48=(($47)|0); //@line 484 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($46, $48); //@line 484 "lparser.c"
      __label__ = 9; break; //@line 484 "lparser.c"
    case 9: 
      var $50=$1; //@line 485 "lparser.c"
      var $51=$2; //@line 485 "lparser.c"
      var $52=(($51+20)|0); //@line 485 "lparser.c"
      var $53=HEAP32[(($52)>>2)]; //@line 485 "lparser.c"
      var $54=(($53+4)|0); //@line 485 "lparser.c"
      var $55=$54; //@line 485 "lparser.c"
      var $56=(($55)|0); //@line 485 "lparser.c"
      var $57=HEAP32[(($56)>>2)]; //@line 485 "lparser.c"
      var $58=$2; //@line 485 "lparser.c"
      var $59=(($58+28)|0); //@line 485 "lparser.c"
      var $60=HEAP32[(($59)>>2)]; //@line 485 "lparser.c"
      var $61=$2; //@line 485 "lparser.c"
      var $62=(($61+32)|0); //@line 485 "lparser.c"
      var $63=HEAP32[(($62)>>2)]; //@line 485 "lparser.c"
      __Z12luaK_setlistP9FuncStateiii($50, $57, $60, $63); //@line 485 "lparser.c"
      __label__ = 10; break; //@line 486 "lparser.c"
    case 10: 
      ;
      return; //@line 487 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13lastlistfieldP9FuncStateP11ConsControl["X"]=1;

function __Z9checknameP8LexStateP7expdesc($ls, $e) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$e;
  var $3=$1; //@line 139 "lparser.c"
  var $4=$2; //@line 139 "lparser.c"
  var $5=$1; //@line 139 "lparser.c"
  var $6=__Z13str_checknameP8LexState($5); //@line 139 "lparser.c"
  __Z10codestringP8LexStateP7expdescP7TString($3, $4, $6); //@line 139 "lparser.c"
  ;
  return; //@line 140 "lparser.c"
}


function __Z6yindexP8LexStateP7expdesc($ls, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$v;
  var $3=$1; //@line 420 "lparser.c"
  __Z9luaX_nextP8LexState($3); //@line 420 "lparser.c"
  var $4=$1; //@line 421 "lparser.c"
  var $5=$2; //@line 421 "lparser.c"
  __Z4exprP8LexStateP7expdesc($4, $5); //@line 421 "lparser.c"
  var $6=$1; //@line 422 "lparser.c"
  var $7=(($6+36)|0); //@line 422 "lparser.c"
  var $8=HEAP32[(($7)>>2)]; //@line 422 "lparser.c"
  var $9=$2; //@line 422 "lparser.c"
  __Z12luaK_exp2valP9FuncStateP7expdesc($8, $9); //@line 422 "lparser.c"
  var $10=$1; //@line 423 "lparser.c"
  __Z9checknextP8LexStatei($10, 93); //@line 423 "lparser.c"
  ;
  return; //@line 424 "lparser.c"
}


function __Z9prefixexpP8LexStateP7expdesc($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $line;
      $1=$ls;
      $2=$v;
      var $3=$1; //@line 669 "lparser.c"
      var $4=(($3+12)|0); //@line 669 "lparser.c"
      var $5=(($4)|0); //@line 669 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 669 "lparser.c"
      if ((($6)|0) == 40) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 285) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $8=$1; //@line 671 "lparser.c"
      var $9=(($8+4)|0); //@line 671 "lparser.c"
      var $10=HEAP32[(($9)>>2)]; //@line 671 "lparser.c"
      $line=$10; //@line 671 "lparser.c"
      var $11=$1; //@line 672 "lparser.c"
      __Z9luaX_nextP8LexState($11); //@line 672 "lparser.c"
      var $12=$1; //@line 673 "lparser.c"
      var $13=$2; //@line 673 "lparser.c"
      __Z4exprP8LexStateP7expdesc($12, $13); //@line 673 "lparser.c"
      var $14=$1; //@line 674 "lparser.c"
      var $15=$line; //@line 674 "lparser.c"
      __Z11check_matchP8LexStateiii($14, 41, 40, $15); //@line 674 "lparser.c"
      var $16=$1; //@line 675 "lparser.c"
      var $17=(($16+36)|0); //@line 675 "lparser.c"
      var $18=HEAP32[(($17)>>2)]; //@line 675 "lparser.c"
      var $19=$2; //@line 675 "lparser.c"
      __Z18luaK_dischargevarsP9FuncStateP7expdesc($18, $19); //@line 675 "lparser.c"
      __label__ = 6; break; //@line 676 "lparser.c"
    case 4: 
      var $21=$1; //@line 679 "lparser.c"
      var $22=$2; //@line 679 "lparser.c"
      __Z9singlevarP8LexStateP7expdesc($21, $22); //@line 679 "lparser.c"
      __label__ = 6; break; //@line 680 "lparser.c"
    case 5: 
      var $24=$1; //@line 683 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($24, ((STRING_TABLE.__str14143)|0)); //@line 683 "lparser.c"
      __label__ = 6; break; //@line 684 "lparser.c"
    case 6: 
      ;
      return; //@line 687 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5fieldP8LexStateP7expdesc($ls, $v) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;

  var $1;
  var $2;
  var $fs;
  var $key=__stackBase__;
  $1=$ls;
  $2=$v;
  var $3=$1; //@line 409 "lparser.c"
  var $4=(($3+36)|0); //@line 409 "lparser.c"
  var $5=HEAP32[(($4)>>2)]; //@line 409 "lparser.c"
  $fs=$5; //@line 409 "lparser.c"
  var $6=$fs; //@line 411 "lparser.c"
  var $7=$2; //@line 411 "lparser.c"
  var $8=__Z15luaK_exp2anyregP9FuncStateP7expdesc($6, $7); //@line 411 "lparser.c"
  var $9=$1; //@line 412 "lparser.c"
  __Z9luaX_nextP8LexState($9); //@line 412 "lparser.c"
  var $10=$1; //@line 413 "lparser.c"
  __Z9checknameP8LexStateP7expdesc($10, $key); //@line 413 "lparser.c"
  var $11=$fs; //@line 414 "lparser.c"
  var $12=$2; //@line 414 "lparser.c"
  __Z12luaK_indexedP9FuncStateP7expdescS2_($11, $12, $key); //@line 414 "lparser.c"
  STACKTOP = __stackBase__;
  return; //@line 415 "lparser.c"
}


function __Z9searchvarP9FuncStateP7TString($fs, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$fs;
      $3=$n;
      var $4=$2; //@line 209 "lparser.c"
      var $5=(($4+50)|0); //@line 209 "lparser.c"
      var $6=HEAPU8[($5)]; //@line 209 "lparser.c"
      var $7=(($6)&255); //@line 209 "lparser.c"
      var $8=((($7)-(1))|0); //@line 209 "lparser.c"
      $i=$8; //@line 209 "lparser.c"
      __label__ = 3; break; //@line 209 "lparser.c"
    case 3: 
      var $10=$i; //@line 209 "lparser.c"
      var $11=(($10)|0) >= 0; //@line 209 "lparser.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 209 "lparser.c"
    case 4: 
      var $13=$3; //@line 210 "lparser.c"
      var $14=$i; //@line 210 "lparser.c"
      var $15=$2; //@line 210 "lparser.c"
      var $16=(($15+172)|0); //@line 210 "lparser.c"
      var $17=(($16+($14<<1))|0); //@line 210 "lparser.c"
      var $18=HEAPU16[(($17)>>1)]; //@line 210 "lparser.c"
      var $19=(($18)&65535); //@line 210 "lparser.c"
      var $20=$2; //@line 210 "lparser.c"
      var $21=(($20)|0); //@line 210 "lparser.c"
      var $22=HEAP32[(($21)>>2)]; //@line 210 "lparser.c"
      var $23=(($22+24)|0); //@line 210 "lparser.c"
      var $24=HEAP32[(($23)>>2)]; //@line 210 "lparser.c"
      var $25=(($24+($19)*(12))|0); //@line 210 "lparser.c"
      var $26=(($25)|0); //@line 210 "lparser.c"
      var $27=HEAP32[(($26)>>2)]; //@line 210 "lparser.c"
      var $28=(($13)|0)==(($27)|0); //@line 210 "lparser.c"
      if ($28) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 210 "lparser.c"
    case 5: 
      var $30=$i; //@line 211 "lparser.c"
      $1=$30; //@line 211 "lparser.c"
      __label__ = 9; break; //@line 211 "lparser.c"
    case 6: 
      __label__ = 7; break; //@line 212 "lparser.c"
    case 7: 
      var $33=$i; //@line 209 "lparser.c"
      var $34=((($33)-(1))|0); //@line 209 "lparser.c"
      $i=$34; //@line 209 "lparser.c"
      __label__ = 3; break; //@line 209 "lparser.c"
    case 8: 
      $1=-1; //@line 213 "lparser.c"
      __label__ = 9; break; //@line 213 "lparser.c"
    case 9: 
      var $37=$1; //@line 214 "lparser.c"
      ;
      return $37; //@line 214 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9markupvalP9FuncStatei($fs, $level) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $bl;
      $1=$fs;
      $2=$level;
      var $3=$1; //@line 218 "lparser.c"
      var $4=(($3+20)|0); //@line 218 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 218 "lparser.c"
      $bl=$5; //@line 218 "lparser.c"
      __label__ = 3; break; //@line 219 "lparser.c"
    case 3: 
      var $7=$bl; //@line 219 "lparser.c"
      var $8=(($7)|0)!=0; //@line 219 "lparser.c"
      if ($8) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; } //@line 219 "lparser.c"
    case 4: 
      var $10=$bl; //@line 219 "lparser.c"
      var $11=(($10+8)|0); //@line 219 "lparser.c"
      var $12=HEAPU8[($11)]; //@line 219 "lparser.c"
      var $13=(($12)&255); //@line 219 "lparser.c"
      var $14=$2; //@line 219 "lparser.c"
      var $15=(($13)|0) > (($14)|0); //@line 219 "lparser.c"
      var $17 = $15;__label__ = 5; break; //@line 219 "lparser.c"
    case 5: 
      var $17;
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 219 "lparser.c"
    case 6: 
      var $19=$bl; //@line 219 "lparser.c"
      var $20=(($19)|0); //@line 219 "lparser.c"
      var $21=HEAP32[(($20)>>2)]; //@line 219 "lparser.c"
      $bl=$21; //@line 219 "lparser.c"
      __label__ = 3; break; //@line 219 "lparser.c"
    case 7: 
      var $23=$bl; //@line 220 "lparser.c"
      var $24=(($23)|0)!=0; //@line 220 "lparser.c"
      if ($24) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 220 "lparser.c"
    case 8: 
      var $26=$bl; //@line 220 "lparser.c"
      var $27=(($26+9)|0); //@line 220 "lparser.c"
      HEAP8[($27)]=1; //@line 220 "lparser.c"
      __label__ = 9; break; //@line 220 "lparser.c"
    case 9: 
      ;
      return; //@line 221 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10enterblockP9FuncStateP8BlockCnth($fs, $bl, $isbreakable) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$fs;
  $2=$bl;
  $3=$isbreakable;
  var $4=$2; //@line 286 "lparser.c"
  var $5=(($4+4)|0); //@line 286 "lparser.c"
  HEAP32[(($5)>>2)]=-1; //@line 286 "lparser.c"
  var $6=$3; //@line 287 "lparser.c"
  var $7=$2; //@line 287 "lparser.c"
  var $8=(($7+10)|0); //@line 287 "lparser.c"
  HEAP8[($8)]=$6; //@line 287 "lparser.c"
  var $9=$1; //@line 288 "lparser.c"
  var $10=(($9+50)|0); //@line 288 "lparser.c"
  var $11=HEAP8[($10)]; //@line 288 "lparser.c"
  var $12=$2; //@line 288 "lparser.c"
  var $13=(($12+8)|0); //@line 288 "lparser.c"
  HEAP8[($13)]=$11; //@line 288 "lparser.c"
  var $14=$2; //@line 289 "lparser.c"
  var $15=(($14+9)|0); //@line 289 "lparser.c"
  HEAP8[($15)]=0; //@line 289 "lparser.c"
  var $16=$1; //@line 290 "lparser.c"
  var $17=(($16+20)|0); //@line 290 "lparser.c"
  var $18=HEAP32[(($17)>>2)]; //@line 290 "lparser.c"
  var $19=$2; //@line 290 "lparser.c"
  var $20=(($19)|0); //@line 290 "lparser.c"
  HEAP32[(($20)>>2)]=$18; //@line 290 "lparser.c"
  var $21=$2; //@line 291 "lparser.c"
  var $22=$1; //@line 291 "lparser.c"
  var $23=(($22+20)|0); //@line 291 "lparser.c"
  HEAP32[(($23)>>2)]=$21; //@line 291 "lparser.c"
  ;
  return; //@line 293 "lparser.c"
}


function __Z10removevarsP8LexStatei($ls, $tolevel) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      $1=$ls;
      $2=$tolevel;
      var $3=$1; //@line 177 "lparser.c"
      var $4=(($3+36)|0); //@line 177 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 177 "lparser.c"
      $fs=$5; //@line 177 "lparser.c"
      __label__ = 3; break; //@line 178 "lparser.c"
    case 3: 
      var $7=$fs; //@line 178 "lparser.c"
      var $8=(($7+50)|0); //@line 178 "lparser.c"
      var $9=HEAPU8[($8)]; //@line 178 "lparser.c"
      var $10=(($9)&255); //@line 178 "lparser.c"
      var $11=$2; //@line 178 "lparser.c"
      var $12=(($10)|0) > (($11)|0); //@line 178 "lparser.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 178 "lparser.c"
    case 4: 
      var $14=$fs; //@line 179 "lparser.c"
      var $15=(($14+24)|0); //@line 179 "lparser.c"
      var $16=HEAP32[(($15)>>2)]; //@line 179 "lparser.c"
      var $17=$fs; //@line 179 "lparser.c"
      var $18=(($17+50)|0); //@line 179 "lparser.c"
      var $19=HEAP8[($18)]; //@line 179 "lparser.c"
      var $20=((($19)-(1))&255); //@line 179 "lparser.c"
      HEAP8[($18)]=$20; //@line 179 "lparser.c"
      var $21=(($20)&255); //@line 179 "lparser.c"
      var $22=$fs; //@line 179 "lparser.c"
      var $23=(($22+172)|0); //@line 179 "lparser.c"
      var $24=(($23+($21<<1))|0); //@line 179 "lparser.c"
      var $25=HEAPU16[(($24)>>1)]; //@line 179 "lparser.c"
      var $26=(($25)&65535); //@line 179 "lparser.c"
      var $27=$fs; //@line 179 "lparser.c"
      var $28=(($27)|0); //@line 179 "lparser.c"
      var $29=HEAP32[(($28)>>2)]; //@line 179 "lparser.c"
      var $30=(($29+24)|0); //@line 179 "lparser.c"
      var $31=HEAP32[(($30)>>2)]; //@line 179 "lparser.c"
      var $32=(($31+($26)*(12))|0); //@line 179 "lparser.c"
      var $33=(($32+8)|0); //@line 179 "lparser.c"
      HEAP32[(($33)>>2)]=$16; //@line 179 "lparser.c"
      __label__ = 3; break; //@line 179 "lparser.c"
    case 5: 
      ;
      return; //@line 180 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8funcargsP8LexStateP7expdesc($ls, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $args=__stackBase__;
      var $base;
      var $nparams;
      var $line;
      $1=$ls;
      $2=$f;
      var $3=$1; //@line 610 "lparser.c"
      var $4=(($3+36)|0); //@line 610 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 610 "lparser.c"
      $fs=$5; //@line 610 "lparser.c"
      var $6=$1; //@line 613 "lparser.c"
      var $7=(($6+4)|0); //@line 613 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 613 "lparser.c"
      $line=$8; //@line 613 "lparser.c"
      var $9=$1; //@line 614 "lparser.c"
      var $10=(($9+12)|0); //@line 614 "lparser.c"
      var $11=(($10)|0); //@line 614 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 614 "lparser.c"
      if ((($12)|0) == 40) {
        __label__ = 3; break;
      }
      else if ((($12)|0) == 123) {
        __label__ = 9; break;
      }
      else if ((($12)|0) == 286) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      var $14=$line; //@line 616 "lparser.c"
      var $15=$1; //@line 616 "lparser.c"
      var $16=(($15+8)|0); //@line 616 "lparser.c"
      var $17=HEAP32[(($16)>>2)]; //@line 616 "lparser.c"
      var $18=(($14)|0)!=(($17)|0); //@line 616 "lparser.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 616 "lparser.c"
    case 4: 
      var $20=$1; //@line 617 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($20, ((STRING_TABLE.__str12141)|0)); //@line 617 "lparser.c"
      __label__ = 5; break; //@line 617 "lparser.c"
    case 5: 
      var $22=$1; //@line 618 "lparser.c"
      __Z9luaX_nextP8LexState($22); //@line 618 "lparser.c"
      var $23=$1; //@line 619 "lparser.c"
      var $24=(($23+12)|0); //@line 619 "lparser.c"
      var $25=(($24)|0); //@line 619 "lparser.c"
      var $26=HEAP32[(($25)>>2)]; //@line 619 "lparser.c"
      var $27=(($26)|0)==41; //@line 619 "lparser.c"
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 619 "lparser.c"
    case 6: 
      var $29=(($args)|0); //@line 620 "lparser.c"
      HEAP32[(($29)>>2)]=0; //@line 620 "lparser.c"
      __label__ = 8; break; //@line 620 "lparser.c"
    case 7: 
      var $31=$1; //@line 622 "lparser.c"
      var $32=__Z8explist1P8LexStateP7expdesc($31, $args); //@line 622 "lparser.c"
      var $33=$fs; //@line 623 "lparser.c"
      __Z15luaK_setreturnsP9FuncStateP7expdesci($33, $args, -1); //@line 623 "lparser.c"
      __label__ = 8; break; //@line 624 "lparser.c"
    case 8: 
      var $35=$1; //@line 625 "lparser.c"
      var $36=$line; //@line 625 "lparser.c"
      __Z11check_matchP8LexStateiii($35, 41, 40, $36); //@line 625 "lparser.c"
      __label__ = 12; break; //@line 626 "lparser.c"
    case 9: 
      var $38=$1; //@line 629 "lparser.c"
      __Z11constructorP8LexStateP7expdesc($38, $args); //@line 629 "lparser.c"
      __label__ = 12; break; //@line 630 "lparser.c"
    case 10: 
      var $40=$1; //@line 633 "lparser.c"
      var $41=$1; //@line 633 "lparser.c"
      var $42=(($41+12)|0); //@line 633 "lparser.c"
      var $43=(($42+4)|0); //@line 633 "lparser.c"
      var $44=$43; //@line 633 "lparser.c"
      var $45=HEAP32[(($44)>>2)]; //@line 633 "lparser.c"
      __Z10codestringP8LexStateP7expdescP7TString($40, $args, $45); //@line 633 "lparser.c"
      var $46=$1; //@line 634 "lparser.c"
      __Z9luaX_nextP8LexState($46); //@line 634 "lparser.c"
      __label__ = 12; break; //@line 635 "lparser.c"
    case 11: 
      var $48=$1; //@line 638 "lparser.c"
      __Z16luaX_syntaxerrorP8LexStatePKc($48, ((STRING_TABLE.__str13142)|0)); //@line 638 "lparser.c"
      __label__ = 19; break; //@line 639 "lparser.c"
    case 12: 
      var $50=$2; //@line 643 "lparser.c"
      var $51=(($50+4)|0); //@line 643 "lparser.c"
      var $52=$51; //@line 643 "lparser.c"
      var $53=(($52)|0); //@line 643 "lparser.c"
      var $54=HEAP32[(($53)>>2)]; //@line 643 "lparser.c"
      $base=$54; //@line 643 "lparser.c"
      var $55=(($args)|0); //@line 644 "lparser.c"
      var $56=HEAP32[(($55)>>2)]; //@line 644 "lparser.c"
      var $57=(($56)|0)==13; //@line 644 "lparser.c"
      if ($57) { __label__ = 14; break; } else { __label__ = 13; break; } //@line 644 "lparser.c"
    case 13: 
      var $59=(($args)|0); //@line 644 "lparser.c"
      var $60=HEAP32[(($59)>>2)]; //@line 644 "lparser.c"
      var $61=(($60)|0)==14; //@line 644 "lparser.c"
      if ($61) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 644 "lparser.c"
    case 14: 
      $nparams=-1; //@line 645 "lparser.c"
      __label__ = 18; break; //@line 645 "lparser.c"
    case 15: 
      var $64=(($args)|0); //@line 647 "lparser.c"
      var $65=HEAP32[(($64)>>2)]; //@line 647 "lparser.c"
      var $66=(($65)|0)!=0; //@line 647 "lparser.c"
      if ($66) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 647 "lparser.c"
    case 16: 
      var $68=$fs; //@line 648 "lparser.c"
      __Z16luaK_exp2nextregP9FuncStateP7expdesc($68, $args); //@line 648 "lparser.c"
      __label__ = 17; break; //@line 648 "lparser.c"
    case 17: 
      var $70=$fs; //@line 649 "lparser.c"
      var $71=(($70+36)|0); //@line 649 "lparser.c"
      var $72=HEAP32[(($71)>>2)]; //@line 649 "lparser.c"
      var $73=$base; //@line 649 "lparser.c"
      var $74=((($73)+(1))|0); //@line 649 "lparser.c"
      var $75=((($72)-($74))|0); //@line 649 "lparser.c"
      $nparams=$75; //@line 649 "lparser.c"
      __label__ = 18; break; //@line 650 "lparser.c"
    case 18: 
      var $77=$2; //@line 651 "lparser.c"
      var $78=$fs; //@line 651 "lparser.c"
      var $79=$base; //@line 651 "lparser.c"
      var $80=$nparams; //@line 651 "lparser.c"
      var $81=((($80)+(1))|0); //@line 651 "lparser.c"
      var $82=__Z12luaK_codeABCP9FuncState6OpCodeiii($78, 28, $79, $81, 2); //@line 651 "lparser.c"
      __Z8init_expP7expdesc7expkindi($77, 13, $82); //@line 651 "lparser.c"
      var $83=$fs; //@line 652 "lparser.c"
      var $84=$line; //@line 652 "lparser.c"
      __Z12luaK_fixlineP9FuncStatei($83, $84); //@line 652 "lparser.c"
      var $85=$base; //@line 653 "lparser.c"
      var $86=((($85)+(1))|0); //@line 653 "lparser.c"
      var $87=$fs; //@line 653 "lparser.c"
      var $88=(($87+36)|0); //@line 653 "lparser.c"
      HEAP32[(($88)>>2)]=$86; //@line 653 "lparser.c"
      __label__ = 19; break; //@line 655 "lparser.c"
    case 19: 
      STACKTOP = __stackBase__;
      return; //@line 655 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8funcargsP8LexStateP7expdesc["X"]=1;

function __Z9singlevarP8LexStateP7expdesc($ls, $var) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $varname;
      var $fs;
      $1=$ls;
      $2=$var;
      var $3=$1; //@line 249 "lparser.c"
      var $4=__Z13str_checknameP8LexState($3); //@line 249 "lparser.c"
      $varname=$4; //@line 249 "lparser.c"
      var $5=$1; //@line 250 "lparser.c"
      var $6=(($5+36)|0); //@line 250 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 250 "lparser.c"
      $fs=$7; //@line 250 "lparser.c"
      var $8=$fs; //@line 251 "lparser.c"
      var $9=$varname; //@line 251 "lparser.c"
      var $10=$2; //@line 251 "lparser.c"
      var $11=__Z12singlevarauxP9FuncStateP7TStringP7expdesci($8, $9, $10, 1); //@line 251 "lparser.c"
      var $12=(($11)|0)==8; //@line 251 "lparser.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 251 "lparser.c"
    case 3: 
      var $14=$fs; //@line 252 "lparser.c"
      var $15=$varname; //@line 252 "lparser.c"
      var $16=__Z12luaK_stringKP9FuncStateP7TString($14, $15); //@line 252 "lparser.c"
      var $17=$2; //@line 252 "lparser.c"
      var $18=(($17+4)|0); //@line 252 "lparser.c"
      var $19=$18; //@line 252 "lparser.c"
      var $20=(($19)|0); //@line 252 "lparser.c"
      HEAP32[(($20)>>2)]=$16; //@line 252 "lparser.c"
      __label__ = 4; break; //@line 252 "lparser.c"
    case 4: 
      ;
      return; //@line 253 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12singlevarauxP9FuncStateP7TStringP7expdesci($fs, $n, $var, $base) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $v;
      $2=$fs;
      $3=$n;
      $4=$var;
      $5=$base;
      var $6=$2; //@line 225 "lparser.c"
      var $7=(($6)|0)==0; //@line 225 "lparser.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 225 "lparser.c"
    case 3: 
      var $9=$4; //@line 226 "lparser.c"
      __Z8init_expP7expdesc7expkindi($9, 8, 255); //@line 226 "lparser.c"
      $1=8; //@line 227 "lparser.c"
      __label__ = 11; break; //@line 227 "lparser.c"
    case 4: 
      var $11=$2; //@line 230 "lparser.c"
      var $12=$3; //@line 230 "lparser.c"
      var $13=__Z9searchvarP9FuncStateP7TString($11, $12); //@line 230 "lparser.c"
      $v=$13; //@line 230 "lparser.c"
      var $14=$v; //@line 231 "lparser.c"
      var $15=(($14)|0) >= 0; //@line 231 "lparser.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 231 "lparser.c"
    case 5: 
      var $17=$4; //@line 232 "lparser.c"
      var $18=$v; //@line 232 "lparser.c"
      __Z8init_expP7expdesc7expkindi($17, 6, $18); //@line 232 "lparser.c"
      var $19=$5; //@line 233 "lparser.c"
      var $20=(($19)|0)!=0; //@line 233 "lparser.c"
      if ($20) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 233 "lparser.c"
    case 6: 
      var $22=$2; //@line 234 "lparser.c"
      var $23=$v; //@line 234 "lparser.c"
      __Z9markupvalP9FuncStatei($22, $23); //@line 234 "lparser.c"
      __label__ = 7; break; //@line 234 "lparser.c"
    case 7: 
      $1=6; //@line 235 "lparser.c"
      __label__ = 11; break; //@line 235 "lparser.c"
    case 8: 
      var $26=$2; //@line 238 "lparser.c"
      var $27=(($26+8)|0); //@line 238 "lparser.c"
      var $28=HEAP32[(($27)>>2)]; //@line 238 "lparser.c"
      var $29=$3; //@line 238 "lparser.c"
      var $30=$4; //@line 238 "lparser.c"
      var $31=__Z12singlevarauxP9FuncStateP7TStringP7expdesci($28, $29, $30, 0); //@line 238 "lparser.c"
      var $32=(($31)|0)==8; //@line 238 "lparser.c"
      if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 238 "lparser.c"
    case 9: 
      $1=8; //@line 239 "lparser.c"
      __label__ = 11; break; //@line 239 "lparser.c"
    case 10: 
      var $35=$2; //@line 240 "lparser.c"
      var $36=$3; //@line 240 "lparser.c"
      var $37=$4; //@line 240 "lparser.c"
      var $38=__Z12indexupvalueP9FuncStateP7TStringP7expdesc($35, $36, $37); //@line 240 "lparser.c"
      var $39=$4; //@line 240 "lparser.c"
      var $40=(($39+4)|0); //@line 240 "lparser.c"
      var $41=$40; //@line 240 "lparser.c"
      var $42=(($41)|0); //@line 240 "lparser.c"
      HEAP32[(($42)>>2)]=$38; //@line 240 "lparser.c"
      var $43=$4; //@line 241 "lparser.c"
      var $44=(($43)|0); //@line 241 "lparser.c"
      HEAP32[(($44)>>2)]=7; //@line 241 "lparser.c"
      $1=7; //@line 242 "lparser.c"
      __label__ = 11; break; //@line 242 "lparser.c"
    case 11: 
      var $46=$1; //@line 245 "lparser.c"
      ;
      return $46; //@line 245 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12singlevarauxP9FuncStateP7TStringP7expdesci["X"]=1;

function __Z12indexupvalueP9FuncStateP7TStringP7expdesc($fs, $name, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $f;
      var $oldsize;
      $2=$fs;
      $3=$name;
      $4=$v;
      var $5=$2; //@line 185 "lparser.c"
      var $6=(($5)|0); //@line 185 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 185 "lparser.c"
      $f=$7; //@line 185 "lparser.c"
      var $8=$f; //@line 186 "lparser.c"
      var $9=(($8+36)|0); //@line 186 "lparser.c"
      var $10=HEAP32[(($9)>>2)]; //@line 186 "lparser.c"
      $oldsize=$10; //@line 186 "lparser.c"
      $i=0; //@line 187 "lparser.c"
      __label__ = 3; break; //@line 187 "lparser.c"
    case 3: 
      var $12=$i; //@line 187 "lparser.c"
      var $13=$f; //@line 187 "lparser.c"
      var $14=(($13+72)|0); //@line 187 "lparser.c"
      var $15=HEAPU8[($14)]; //@line 187 "lparser.c"
      var $16=(($15)&255); //@line 187 "lparser.c"
      var $17=(($12)|0) < (($16)|0); //@line 187 "lparser.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 187 "lparser.c"
    case 4: 
      var $19=$i; //@line 188 "lparser.c"
      var $20=$2; //@line 188 "lparser.c"
      var $21=(($20+51)|0); //@line 188 "lparser.c"
      var $22=(($21+($19<<1))|0); //@line 188 "lparser.c"
      var $23=(($22)|0); //@line 188 "lparser.c"
      var $24=HEAPU8[($23)]; //@line 188 "lparser.c"
      var $25=(($24)&255); //@line 188 "lparser.c"
      var $26=$4; //@line 188 "lparser.c"
      var $27=(($26)|0); //@line 188 "lparser.c"
      var $28=HEAP32[(($27)>>2)]; //@line 188 "lparser.c"
      var $29=(($25)|0)==(($28)|0); //@line 188 "lparser.c"
      if ($29) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 188 "lparser.c"
    case 5: 
      var $31=$i; //@line 188 "lparser.c"
      var $32=$2; //@line 188 "lparser.c"
      var $33=(($32+51)|0); //@line 188 "lparser.c"
      var $34=(($33+($31<<1))|0); //@line 188 "lparser.c"
      var $35=(($34+1)|0); //@line 188 "lparser.c"
      var $36=HEAPU8[($35)]; //@line 188 "lparser.c"
      var $37=(($36)&255); //@line 188 "lparser.c"
      var $38=$4; //@line 188 "lparser.c"
      var $39=(($38+4)|0); //@line 188 "lparser.c"
      var $40=$39; //@line 188 "lparser.c"
      var $41=(($40)|0); //@line 188 "lparser.c"
      var $42=HEAP32[(($41)>>2)]; //@line 188 "lparser.c"
      var $43=(($37)|0)==(($42)|0); //@line 188 "lparser.c"
      if ($43) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 188 "lparser.c"
    case 6: 
      var $45=$i; //@line 190 "lparser.c"
      $1=$45; //@line 190 "lparser.c"
      __label__ = 20; break; //@line 190 "lparser.c"
    case 7: 
      __label__ = 8; break; //@line 192 "lparser.c"
    case 8: 
      var $48=$i; //@line 187 "lparser.c"
      var $49=((($48)+(1))|0); //@line 187 "lparser.c"
      $i=$49; //@line 187 "lparser.c"
      __label__ = 3; break; //@line 187 "lparser.c"
    case 9: 
      var $51=$f; //@line 194 "lparser.c"
      var $52=(($51+72)|0); //@line 194 "lparser.c"
      var $53=HEAPU8[($52)]; //@line 194 "lparser.c"
      var $54=(($53)&255); //@line 194 "lparser.c"
      var $55=((($54)+(1))|0); //@line 194 "lparser.c"
      var $56=(($55)|0) > 60; //@line 194 "lparser.c"
      if ($56) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 194 "lparser.c"
    case 10: 
      var $58=$2; //@line 194 "lparser.c"
      __Z10errorlimitP9FuncStateiPKc($58, 60, ((STRING_TABLE.__str15144)|0)); //@line 194 "lparser.c"
      __label__ = 11; break; //@line 194 "lparser.c"
    case 11: 
      var $60=$f; //@line 195 "lparser.c"
      var $61=(($60+72)|0); //@line 195 "lparser.c"
      var $62=HEAPU8[($61)]; //@line 195 "lparser.c"
      var $63=(($62)&255); //@line 195 "lparser.c"
      var $64=((($63)+(1))|0); //@line 195 "lparser.c"
      var $65=$f; //@line 195 "lparser.c"
      var $66=(($65+36)|0); //@line 195 "lparser.c"
      var $67=HEAP32[(($66)>>2)]; //@line 195 "lparser.c"
      var $68=(($64)|0) > (($67)|0); //@line 195 "lparser.c"
      if ($68) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 195 "lparser.c"
    case 12: 
      var $70=$2; //@line 195 "lparser.c"
      var $71=(($70+16)|0); //@line 195 "lparser.c"
      var $72=HEAP32[(($71)>>2)]; //@line 195 "lparser.c"
      var $73=$f; //@line 195 "lparser.c"
      var $74=(($73+28)|0); //@line 195 "lparser.c"
      var $75=HEAP32[(($74)>>2)]; //@line 195 "lparser.c"
      var $76=$75; //@line 195 "lparser.c"
      var $77=$f; //@line 195 "lparser.c"
      var $78=(($77+36)|0); //@line 195 "lparser.c"
      var $79=__Z13luaM_growaux_P9lua_StatePvPijiPKc($72, $76, $78, 4, 2147483645, ((__str16145)|0)); //@line 195 "lparser.c"
      var $80=$79; //@line 195 "lparser.c"
      var $81=$f; //@line 195 "lparser.c"
      var $82=(($81+28)|0); //@line 195 "lparser.c"
      HEAP32[(($82)>>2)]=$80; //@line 195 "lparser.c"
      __label__ = 13; break; //@line 195 "lparser.c"
    case 13: 
      __label__ = 14; break; //@line 197 "lparser.c"
    case 14: 
      var $85=$oldsize; //@line 197 "lparser.c"
      var $86=$f; //@line 197 "lparser.c"
      var $87=(($86+36)|0); //@line 197 "lparser.c"
      var $88=HEAP32[(($87)>>2)]; //@line 197 "lparser.c"
      var $89=(($85)|0) < (($88)|0); //@line 197 "lparser.c"
      if ($89) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 197 "lparser.c"
    case 15: 
      var $91=$oldsize; //@line 197 "lparser.c"
      var $92=((($91)+(1))|0); //@line 197 "lparser.c"
      $oldsize=$92; //@line 197 "lparser.c"
      var $93=$f; //@line 197 "lparser.c"
      var $94=(($93+28)|0); //@line 197 "lparser.c"
      var $95=HEAP32[(($94)>>2)]; //@line 197 "lparser.c"
      var $96=(($95+($91<<2))|0); //@line 197 "lparser.c"
      HEAP32[(($96)>>2)]=0; //@line 197 "lparser.c"
      __label__ = 14; break; //@line 197 "lparser.c"
    case 16: 
      var $98=$3; //@line 198 "lparser.c"
      var $99=$f; //@line 198 "lparser.c"
      var $100=(($99+72)|0); //@line 198 "lparser.c"
      var $101=HEAPU8[($100)]; //@line 198 "lparser.c"
      var $102=(($101)&255); //@line 198 "lparser.c"
      var $103=$f; //@line 198 "lparser.c"
      var $104=(($103+28)|0); //@line 198 "lparser.c"
      var $105=HEAP32[(($104)>>2)]; //@line 198 "lparser.c"
      var $106=(($105+($102<<2))|0); //@line 198 "lparser.c"
      HEAP32[(($106)>>2)]=$98; //@line 198 "lparser.c"
      var $107=$3; //@line 199 "lparser.c"
      var $108=$107; //@line 199 "lparser.c"
      var $109=$108; //@line 199 "lparser.c"
      var $110=(($109+5)|0); //@line 199 "lparser.c"
      var $111=HEAPU8[($110)]; //@line 199 "lparser.c"
      var $112=(($111)&255); //@line 199 "lparser.c"
      var $113=$112 & 3; //@line 199 "lparser.c"
      var $114=(($113)|0)!=0; //@line 199 "lparser.c"
      if ($114) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 199 "lparser.c"
    case 17: 
      var $116=$f; //@line 199 "lparser.c"
      var $117=$116; //@line 199 "lparser.c"
      var $118=$117; //@line 199 "lparser.c"
      var $119=(($118+5)|0); //@line 199 "lparser.c"
      var $120=HEAPU8[($119)]; //@line 199 "lparser.c"
      var $121=(($120)&255); //@line 199 "lparser.c"
      var $122=$121 & 4; //@line 199 "lparser.c"
      var $123=(($122)|0)!=0; //@line 199 "lparser.c"
      if ($123) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 199 "lparser.c"
    case 18: 
      var $125=$2; //@line 199 "lparser.c"
      var $126=(($125+16)|0); //@line 199 "lparser.c"
      var $127=HEAP32[(($126)>>2)]; //@line 199 "lparser.c"
      var $128=$f; //@line 199 "lparser.c"
      var $129=$128; //@line 199 "lparser.c"
      var $130=$3; //@line 199 "lparser.c"
      var $131=$130; //@line 199 "lparser.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($127, $129, $131); //@line 199 "lparser.c"
      __label__ = 19; break; //@line 199 "lparser.c"
    case 19: 
      var $133=$4; //@line 201 "lparser.c"
      var $134=(($133)|0); //@line 201 "lparser.c"
      var $135=HEAP32[(($134)>>2)]; //@line 201 "lparser.c"
      var $136=(($135) & 255); //@line 201 "lparser.c"
      var $137=$f; //@line 201 "lparser.c"
      var $138=(($137+72)|0); //@line 201 "lparser.c"
      var $139=HEAPU8[($138)]; //@line 201 "lparser.c"
      var $140=(($139)&255); //@line 201 "lparser.c"
      var $141=$2; //@line 201 "lparser.c"
      var $142=(($141+51)|0); //@line 201 "lparser.c"
      var $143=(($142+($140<<1))|0); //@line 201 "lparser.c"
      var $144=(($143)|0); //@line 201 "lparser.c"
      HEAP8[($144)]=$136; //@line 201 "lparser.c"
      var $145=$4; //@line 202 "lparser.c"
      var $146=(($145+4)|0); //@line 202 "lparser.c"
      var $147=$146; //@line 202 "lparser.c"
      var $148=(($147)|0); //@line 202 "lparser.c"
      var $149=HEAP32[(($148)>>2)]; //@line 202 "lparser.c"
      var $150=(($149) & 255); //@line 202 "lparser.c"
      var $151=$f; //@line 202 "lparser.c"
      var $152=(($151+72)|0); //@line 202 "lparser.c"
      var $153=HEAPU8[($152)]; //@line 202 "lparser.c"
      var $154=(($153)&255); //@line 202 "lparser.c"
      var $155=$2; //@line 202 "lparser.c"
      var $156=(($155+51)|0); //@line 202 "lparser.c"
      var $157=(($156+($154<<1))|0); //@line 202 "lparser.c"
      var $158=(($157+1)|0); //@line 202 "lparser.c"
      HEAP8[($158)]=$150; //@line 202 "lparser.c"
      var $159=$f; //@line 203 "lparser.c"
      var $160=(($159+72)|0); //@line 203 "lparser.c"
      var $161=HEAPU8[($160)]; //@line 203 "lparser.c"
      var $162=((($161)+(1))&255); //@line 203 "lparser.c"
      HEAP8[($160)]=$162; //@line 203 "lparser.c"
      var $163=(($161)&255); //@line 203 "lparser.c"
      $1=$163; //@line 203 "lparser.c"
      __label__ = 20; break; //@line 203 "lparser.c"
    case 20: 
      var $165=$1; //@line 204 "lparser.c"
      ;
      return $165; //@line 204 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12indexupvalueP9FuncStateP7TStringP7expdesc["X"]=1;

function __Z8funcnameP8LexStateP7expdesc($ls, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $needself;
      $1=$ls;
      $2=$v;
      $needself=0; //@line 1200 "lparser.c"
      var $3=$1; //@line 1201 "lparser.c"
      var $4=$2; //@line 1201 "lparser.c"
      __Z9singlevarP8LexStateP7expdesc($3, $4); //@line 1201 "lparser.c"
      __label__ = 3; break; //@line 1202 "lparser.c"
    case 3: 
      var $6=$1; //@line 1202 "lparser.c"
      var $7=(($6+12)|0); //@line 1202 "lparser.c"
      var $8=(($7)|0); //@line 1202 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 1202 "lparser.c"
      var $10=(($9)|0)==46; //@line 1202 "lparser.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1202 "lparser.c"
    case 4: 
      var $12=$1; //@line 1203 "lparser.c"
      var $13=$2; //@line 1203 "lparser.c"
      __Z5fieldP8LexStateP7expdesc($12, $13); //@line 1203 "lparser.c"
      __label__ = 3; break; //@line 1203 "lparser.c"
    case 5: 
      var $15=$1; //@line 1204 "lparser.c"
      var $16=(($15+12)|0); //@line 1204 "lparser.c"
      var $17=(($16)|0); //@line 1204 "lparser.c"
      var $18=HEAP32[(($17)>>2)]; //@line 1204 "lparser.c"
      var $19=(($18)|0)==58; //@line 1204 "lparser.c"
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1204 "lparser.c"
    case 6: 
      $needself=1; //@line 1205 "lparser.c"
      var $21=$1; //@line 1206 "lparser.c"
      var $22=$2; //@line 1206 "lparser.c"
      __Z5fieldP8LexStateP7expdesc($21, $22); //@line 1206 "lparser.c"
      __label__ = 7; break; //@line 1207 "lparser.c"
    case 7: 
      var $24=$needself; //@line 1208 "lparser.c"
      ;
      return $24; //@line 1208 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z4condP8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $v=__stackBase__;
      $1=$ls;
      var $2=$1; //@line 968 "lparser.c"
      __Z4exprP8LexStateP7expdesc($2, $v); //@line 968 "lparser.c"
      var $3=(($v)|0); //@line 969 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 969 "lparser.c"
      var $5=(($4)|0)==1; //@line 969 "lparser.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 969 "lparser.c"
    case 3: 
      var $7=(($v)|0); //@line 969 "lparser.c"
      HEAP32[(($7)>>2)]=3; //@line 969 "lparser.c"
      __label__ = 4; break; //@line 969 "lparser.c"
    case 4: 
      var $9=$1; //@line 970 "lparser.c"
      var $10=(($9+36)|0); //@line 970 "lparser.c"
      var $11=HEAP32[(($10)>>2)]; //@line 970 "lparser.c"
      __Z13luaK_goiftrueP9FuncStateP7expdesc($11, $v); //@line 970 "lparser.c"
      var $12=(($v+16)|0); //@line 971 "lparser.c"
      var $13=HEAP32[(($12)>>2)]; //@line 971 "lparser.c"
      STACKTOP = __stackBase__;
      return $13; //@line 971 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10leaveblockP9FuncState($fs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $bl;
      $1=$fs;
      var $2=$1; //@line 297 "lparser.c"
      var $3=(($2+20)|0); //@line 297 "lparser.c"
      var $4=HEAP32[(($3)>>2)]; //@line 297 "lparser.c"
      $bl=$4; //@line 297 "lparser.c"
      var $5=$bl; //@line 298 "lparser.c"
      var $6=(($5)|0); //@line 298 "lparser.c"
      var $7=HEAP32[(($6)>>2)]; //@line 298 "lparser.c"
      var $8=$1; //@line 298 "lparser.c"
      var $9=(($8+20)|0); //@line 298 "lparser.c"
      HEAP32[(($9)>>2)]=$7; //@line 298 "lparser.c"
      var $10=$1; //@line 299 "lparser.c"
      var $11=(($10+12)|0); //@line 299 "lparser.c"
      var $12=HEAP32[(($11)>>2)]; //@line 299 "lparser.c"
      var $13=$bl; //@line 299 "lparser.c"
      var $14=(($13+8)|0); //@line 299 "lparser.c"
      var $15=HEAPU8[($14)]; //@line 299 "lparser.c"
      var $16=(($15)&255); //@line 299 "lparser.c"
      __Z10removevarsP8LexStatei($12, $16); //@line 299 "lparser.c"
      var $17=$bl; //@line 300 "lparser.c"
      var $18=(($17+9)|0); //@line 300 "lparser.c"
      var $19=HEAP8[($18)]; //@line 300 "lparser.c"
      var $20=(($19 << 24) >> 24)!=0; //@line 300 "lparser.c"
      if ($20) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 300 "lparser.c"
    case 3: 
      var $22=$1; //@line 301 "lparser.c"
      var $23=$bl; //@line 301 "lparser.c"
      var $24=(($23+8)|0); //@line 301 "lparser.c"
      var $25=HEAPU8[($24)]; //@line 301 "lparser.c"
      var $26=(($25)&255); //@line 301 "lparser.c"
      var $27=__Z12luaK_codeABCP9FuncState6OpCodeiii($22, 35, $26, 0, 0); //@line 301 "lparser.c"
      __label__ = 4; break; //@line 301 "lparser.c"
    case 4: 
      var $29=$1; //@line 305 "lparser.c"
      var $30=(($29+50)|0); //@line 305 "lparser.c"
      var $31=HEAPU8[($30)]; //@line 305 "lparser.c"
      var $32=(($31)&255); //@line 305 "lparser.c"
      var $33=$1; //@line 305 "lparser.c"
      var $34=(($33+36)|0); //@line 305 "lparser.c"
      HEAP32[(($34)>>2)]=$32; //@line 305 "lparser.c"
      var $35=$1; //@line 306 "lparser.c"
      var $36=$bl; //@line 306 "lparser.c"
      var $37=(($36+4)|0); //@line 306 "lparser.c"
      var $38=HEAP32[(($37)>>2)]; //@line 306 "lparser.c"
      __Z16luaK_patchtohereP9FuncStatei($35, $38); //@line 306 "lparser.c"
      ;
      return; //@line 307 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z6fornumP8LexStateP7TStringi($ls, $varname, $line) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $fs;
      var $base;
      $1=$ls;
      $2=$varname;
      $3=$line;
      var $4=$1; //@line 1069 "lparser.c"
      var $5=(($4+36)|0); //@line 1069 "lparser.c"
      var $6=HEAP32[(($5)>>2)]; //@line 1069 "lparser.c"
      $fs=$6; //@line 1069 "lparser.c"
      var $7=$fs; //@line 1070 "lparser.c"
      var $8=(($7+36)|0); //@line 1070 "lparser.c"
      var $9=HEAP32[(($8)>>2)]; //@line 1070 "lparser.c"
      $base=$9; //@line 1070 "lparser.c"
      var $10=$1; //@line 1071 "lparser.c"
      var $11=$1; //@line 1071 "lparser.c"
      var $12=__Z14luaX_newstringP8LexStatePKcj($11, ((STRING_TABLE.__str22151)|0), 11); //@line 1071 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($10, $12, 0); //@line 1071 "lparser.c"
      var $13=$1; //@line 1072 "lparser.c"
      var $14=$1; //@line 1072 "lparser.c"
      var $15=__Z14luaX_newstringP8LexStatePKcj($14, ((STRING_TABLE.__str23152)|0), 11); //@line 1072 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($13, $15, 1); //@line 1072 "lparser.c"
      var $16=$1; //@line 1073 "lparser.c"
      var $17=$1; //@line 1073 "lparser.c"
      var $18=__Z14luaX_newstringP8LexStatePKcj($17, ((STRING_TABLE.__str24153)|0), 10); //@line 1073 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($16, $18, 2); //@line 1073 "lparser.c"
      var $19=$1; //@line 1074 "lparser.c"
      var $20=$2; //@line 1074 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($19, $20, 3); //@line 1074 "lparser.c"
      var $21=$1; //@line 1075 "lparser.c"
      __Z9checknextP8LexStatei($21, 61); //@line 1075 "lparser.c"
      var $22=$1; //@line 1076 "lparser.c"
      var $23=__Z4exp1P8LexState($22); //@line 1076 "lparser.c"
      var $24=$1; //@line 1077 "lparser.c"
      __Z9checknextP8LexStatei($24, 44); //@line 1077 "lparser.c"
      var $25=$1; //@line 1078 "lparser.c"
      var $26=__Z4exp1P8LexState($25); //@line 1078 "lparser.c"
      var $27=$1; //@line 1079 "lparser.c"
      var $28=__Z8testnextP8LexStatei($27, 44); //@line 1079 "lparser.c"
      var $29=(($28)|0)!=0; //@line 1079 "lparser.c"
      if ($29) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1079 "lparser.c"
    case 3: 
      var $31=$1; //@line 1080 "lparser.c"
      var $32=__Z4exp1P8LexState($31); //@line 1080 "lparser.c"
      __label__ = 5; break; //@line 1080 "lparser.c"
    case 4: 
      var $34=$fs; //@line 1082 "lparser.c"
      var $35=$fs; //@line 1082 "lparser.c"
      var $36=(($35+36)|0); //@line 1082 "lparser.c"
      var $37=HEAP32[(($36)>>2)]; //@line 1082 "lparser.c"
      var $38=$fs; //@line 1082 "lparser.c"
      var $39=__Z12luaK_numberKP9FuncStated($38, 1); //@line 1082 "lparser.c"
      var $40=__Z12luaK_codeABxP9FuncState6OpCodeij($34, 1, $37, $39); //@line 1082 "lparser.c"
      var $41=$fs; //@line 1083 "lparser.c"
      __Z16luaK_reserveregsP9FuncStatei($41, 1); //@line 1083 "lparser.c"
      __label__ = 5; break; //@line 1084 "lparser.c"
    case 5: 
      var $43=$1; //@line 1085 "lparser.c"
      var $44=$base; //@line 1085 "lparser.c"
      var $45=$3; //@line 1085 "lparser.c"
      __Z7forbodyP8LexStateiiii($43, $44, $45, 1, 1); //@line 1085 "lparser.c"
      ;
      return; //@line 1086 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6fornumP8LexStateP7TStringi["X"]=1;

function __Z13preinit_stateP9lua_StateP12global_State($L, $g) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$g;
  var $3=$2; //@line 85 "lstate.c"
  var $4=$1; //@line 85 "lstate.c"
  var $5=(($4+16)|0); //@line 85 "lstate.c"
  HEAP32[(($5)>>2)]=$3; //@line 85 "lstate.c"
  var $6=$1; //@line 86 "lstate.c"
  var $7=(($6+32)|0); //@line 86 "lstate.c"
  HEAP32[(($7)>>2)]=0; //@line 86 "lstate.c"
  var $8=$1; //@line 87 "lstate.c"
  var $9=(($8+44)|0); //@line 87 "lstate.c"
  HEAP32[(($9)>>2)]=0; //@line 87 "lstate.c"
  var $10=$1; //@line 88 "lstate.c"
  var $11=(($10+104)|0); //@line 88 "lstate.c"
  HEAP32[(($11)>>2)]=0; //@line 88 "lstate.c"
  var $12=$1; //@line 89 "lstate.c"
  var $13=(($12+68)|0); //@line 89 "lstate.c"
  HEAP32[(($13)>>2)]=0; //@line 89 "lstate.c"
  var $14=$1; //@line 90 "lstate.c"
  var $15=(($14+56)|0); //@line 90 "lstate.c"
  HEAP8[($15)]=0; //@line 90 "lstate.c"
  var $16=$1; //@line 91 "lstate.c"
  var $17=(($16+60)|0); //@line 91 "lstate.c"
  HEAP32[(($17)>>2)]=0; //@line 91 "lstate.c"
  var $18=$1; //@line 92 "lstate.c"
  var $19=(($18+57)|0); //@line 92 "lstate.c"
  HEAP8[($19)]=1; //@line 92 "lstate.c"
  var $20=$1; //@line 93 "lstate.c"
  var $21=(($20+60)|0); //@line 93 "lstate.c"
  var $22=HEAP32[(($21)>>2)]; //@line 93 "lstate.c"
  var $23=$1; //@line 93 "lstate.c"
  var $24=(($23+64)|0); //@line 93 "lstate.c"
  HEAP32[(($24)>>2)]=$22; //@line 93 "lstate.c"
  var $25=$1; //@line 94 "lstate.c"
  var $26=(($25+96)|0); //@line 94 "lstate.c"
  HEAP32[(($26)>>2)]=0; //@line 94 "lstate.c"
  var $27=$1; //@line 95 "lstate.c"
  var $28=(($27+48)|0); //@line 95 "lstate.c"
  HEAP32[(($28)>>2)]=0; //@line 95 "lstate.c"
  var $29=$1; //@line 96 "lstate.c"
  var $30=(($29+54)|0); //@line 96 "lstate.c"
  HEAP16[(($30)>>1)]=0; //@line 96 "lstate.c"
  var $31=$1; //@line 96 "lstate.c"
  var $32=(($31+52)|0); //@line 96 "lstate.c"
  HEAP16[(($32)>>1)]=0; //@line 96 "lstate.c"
  var $33=$1; //@line 97 "lstate.c"
  var $34=(($33+6)|0); //@line 97 "lstate.c"
  HEAP8[($34)]=0; //@line 97 "lstate.c"
  var $35=$1; //@line 98 "lstate.c"
  var $36=(($35+20)|0); //@line 98 "lstate.c"
  HEAP32[(($36)>>2)]=0; //@line 98 "lstate.c"
  var $37=$1; //@line 98 "lstate.c"
  var $38=(($37+40)|0); //@line 98 "lstate.c"
  HEAP32[(($38)>>2)]=0; //@line 98 "lstate.c"
  var $39=$1; //@line 99 "lstate.c"
  var $40=(($39+24)|0); //@line 99 "lstate.c"
  HEAP32[(($40)>>2)]=0; //@line 99 "lstate.c"
  var $41=$1; //@line 100 "lstate.c"
  var $42=(($41+108)|0); //@line 100 "lstate.c"
  HEAP32[(($42)>>2)]=0; //@line 100 "lstate.c"
  var $43=$1; //@line 101 "lstate.c"
  var $44=(($43+72)|0); //@line 101 "lstate.c"
  var $45=(($44+8)|0); //@line 101 "lstate.c"
  HEAP32[(($45)>>2)]=0; //@line 101 "lstate.c"
  ;
  return; //@line 102 "lstate.c"
}
__Z13preinit_stateP9lua_StateP12global_State["X"]=1;

function __Z7forlistP8LexStateP7TString($ls, $indexname) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $fs;
      var $e=__stackBase__;
      var $nvars;
      var $line;
      var $base;
      $1=$ls;
      $2=$indexname;
      var $3=$1; //@line 1091 "lparser.c"
      var $4=(($3+36)|0); //@line 1091 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 1091 "lparser.c"
      $fs=$5; //@line 1091 "lparser.c"
      $nvars=0; //@line 1093 "lparser.c"
      var $6=$fs; //@line 1095 "lparser.c"
      var $7=(($6+36)|0); //@line 1095 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 1095 "lparser.c"
      $base=$8; //@line 1095 "lparser.c"
      var $9=$1; //@line 1097 "lparser.c"
      var $10=$1; //@line 1097 "lparser.c"
      var $11=__Z14luaX_newstringP8LexStatePKcj($10, ((STRING_TABLE.__str19148)|0), 15); //@line 1097 "lparser.c"
      var $12=$nvars; //@line 1097 "lparser.c"
      var $13=((($12)+(1))|0); //@line 1097 "lparser.c"
      $nvars=$13; //@line 1097 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($9, $11, $12); //@line 1097 "lparser.c"
      var $14=$1; //@line 1098 "lparser.c"
      var $15=$1; //@line 1098 "lparser.c"
      var $16=__Z14luaX_newstringP8LexStatePKcj($15, ((STRING_TABLE.__str20149)|0), 11); //@line 1098 "lparser.c"
      var $17=$nvars; //@line 1098 "lparser.c"
      var $18=((($17)+(1))|0); //@line 1098 "lparser.c"
      $nvars=$18; //@line 1098 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($14, $16, $17); //@line 1098 "lparser.c"
      var $19=$1; //@line 1099 "lparser.c"
      var $20=$1; //@line 1099 "lparser.c"
      var $21=__Z14luaX_newstringP8LexStatePKcj($20, ((STRING_TABLE.__str21150)|0), 13); //@line 1099 "lparser.c"
      var $22=$nvars; //@line 1099 "lparser.c"
      var $23=((($22)+(1))|0); //@line 1099 "lparser.c"
      $nvars=$23; //@line 1099 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($19, $21, $22); //@line 1099 "lparser.c"
      var $24=$1; //@line 1101 "lparser.c"
      var $25=$2; //@line 1101 "lparser.c"
      var $26=$nvars; //@line 1101 "lparser.c"
      var $27=((($26)+(1))|0); //@line 1101 "lparser.c"
      $nvars=$27; //@line 1101 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($24, $25, $26); //@line 1101 "lparser.c"
      __label__ = 3; break; //@line 1102 "lparser.c"
    case 3: 
      var $29=$1; //@line 1102 "lparser.c"
      var $30=__Z8testnextP8LexStatei($29, 44); //@line 1102 "lparser.c"
      var $31=(($30)|0)!=0; //@line 1102 "lparser.c"
      if ($31) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 1102 "lparser.c"
    case 4: 
      var $33=$1; //@line 1103 "lparser.c"
      var $34=$1; //@line 1103 "lparser.c"
      var $35=__Z13str_checknameP8LexState($34); //@line 1103 "lparser.c"
      var $36=$nvars; //@line 1103 "lparser.c"
      var $37=((($36)+(1))|0); //@line 1103 "lparser.c"
      $nvars=$37; //@line 1103 "lparser.c"
      __Z12new_localvarP8LexStateP7TStringi($33, $35, $36); //@line 1103 "lparser.c"
      __label__ = 3; break; //@line 1103 "lparser.c"
    case 5: 
      var $39=$1; //@line 1104 "lparser.c"
      __Z9checknextP8LexStatei($39, 267); //@line 1104 "lparser.c"
      var $40=$1; //@line 1105 "lparser.c"
      var $41=(($40+4)|0); //@line 1105 "lparser.c"
      var $42=HEAP32[(($41)>>2)]; //@line 1105 "lparser.c"
      $line=$42; //@line 1105 "lparser.c"
      var $43=$1; //@line 1106 "lparser.c"
      var $44=$1; //@line 1106 "lparser.c"
      var $45=__Z8explist1P8LexStateP7expdesc($44, $e); //@line 1106 "lparser.c"
      __Z13adjust_assignP8LexStateiiP7expdesc($43, 3, $45, $e); //@line 1106 "lparser.c"
      var $46=$fs; //@line 1107 "lparser.c"
      __Z15luaK_checkstackP9FuncStatei($46, 3); //@line 1107 "lparser.c"
      var $47=$1; //@line 1108 "lparser.c"
      var $48=$base; //@line 1108 "lparser.c"
      var $49=$line; //@line 1108 "lparser.c"
      var $50=$nvars; //@line 1108 "lparser.c"
      var $51=((($50)-(3))|0); //@line 1108 "lparser.c"
      __Z7forbodyP8LexStateiiii($47, $48, $49, $51, 0); //@line 1108 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1109 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7forlistP8LexStateP7TString["X"]=1;

function __Z7forbodyP8LexStateiiii($ls, $base, $line, $nvars, $isnum) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $bl=__stackBase__;
      var $fs;
      var $prep;
      var $endfor;
      $1=$ls;
      $2=$base;
      $3=$line;
      $4=$nvars;
      $5=$isnum;
      var $6=$1; //@line 1049 "lparser.c"
      var $7=(($6+36)|0); //@line 1049 "lparser.c"
      var $8=HEAP32[(($7)>>2)]; //@line 1049 "lparser.c"
      $fs=$8; //@line 1049 "lparser.c"
      var $9=$1; //@line 1051 "lparser.c"
      __Z15adjustlocalvarsP8LexStatei($9, 3); //@line 1051 "lparser.c"
      var $10=$1; //@line 1052 "lparser.c"
      __Z9checknextP8LexStatei($10, 259); //@line 1052 "lparser.c"
      var $11=$5; //@line 1053 "lparser.c"
      var $12=(($11)|0)!=0; //@line 1053 "lparser.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 1053 "lparser.c"
    case 3: 
      var $14=$fs; //@line 1053 "lparser.c"
      var $15=$2; //@line 1053 "lparser.c"
      var $16=__Z12luaK_codeABxP9FuncState6OpCodeij($14, 32, $15, 131070); //@line 1053 "lparser.c"
      var $21 = $16;__label__ = 5; break; //@line 1053 "lparser.c"
    case 4: 
      var $18=$fs; //@line 1053 "lparser.c"
      var $19=__Z9luaK_jumpP9FuncState($18); //@line 1053 "lparser.c"
      var $21 = $19;__label__ = 5; break; //@line 1053 "lparser.c"
    case 5: 
      var $21; //@line 1053 "lparser.c"
      $prep=$21; //@line 1053 "lparser.c"
      var $22=$fs; //@line 1054 "lparser.c"
      __Z10enterblockP9FuncStateP8BlockCnth($22, $bl, 0); //@line 1054 "lparser.c"
      var $23=$1; //@line 1055 "lparser.c"
      var $24=$4; //@line 1055 "lparser.c"
      __Z15adjustlocalvarsP8LexStatei($23, $24); //@line 1055 "lparser.c"
      var $25=$fs; //@line 1056 "lparser.c"
      var $26=$4; //@line 1056 "lparser.c"
      __Z16luaK_reserveregsP9FuncStatei($25, $26); //@line 1056 "lparser.c"
      var $27=$1; //@line 1057 "lparser.c"
      __Z5blockP8LexState($27); //@line 1057 "lparser.c"
      var $28=$fs; //@line 1058 "lparser.c"
      __Z10leaveblockP9FuncState($28); //@line 1058 "lparser.c"
      var $29=$fs; //@line 1059 "lparser.c"
      var $30=$prep; //@line 1059 "lparser.c"
      __Z16luaK_patchtohereP9FuncStatei($29, $30); //@line 1059 "lparser.c"
      var $31=$5; //@line 1060 "lparser.c"
      var $32=(($31)|0)!=0; //@line 1060 "lparser.c"
      if ($32) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 1060 "lparser.c"
    case 6: 
      var $34=$fs; //@line 1060 "lparser.c"
      var $35=$2; //@line 1060 "lparser.c"
      var $36=__Z12luaK_codeABxP9FuncState6OpCodeij($34, 31, $35, 131070); //@line 1060 "lparser.c"
      var $43 = $36;__label__ = 8; break; //@line 1060 "lparser.c"
    case 7: 
      var $38=$fs; //@line 1061 "lparser.c"
      var $39=$2; //@line 1061 "lparser.c"
      var $40=$4; //@line 1061 "lparser.c"
      var $41=__Z12luaK_codeABCP9FuncState6OpCodeiii($38, 33, $39, 0, $40); //@line 1061 "lparser.c"
      var $43 = $41;__label__ = 8; break; //@line 1061 "lparser.c"
    case 8: 
      var $43; //@line 1061 "lparser.c"
      $endfor=$43; //@line 1061 "lparser.c"
      var $44=$fs; //@line 1062 "lparser.c"
      var $45=$3; //@line 1062 "lparser.c"
      __Z12luaK_fixlineP9FuncStatei($44, $45); //@line 1062 "lparser.c"
      var $46=$fs; //@line 1063 "lparser.c"
      var $47=$5; //@line 1063 "lparser.c"
      var $48=(($47)|0)!=0; //@line 1063 "lparser.c"
      if ($48) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 1063 "lparser.c"
    case 9: 
      var $50=$endfor; //@line 1063 "lparser.c"
      var $55 = $50;__label__ = 11; break; //@line 1063 "lparser.c"
    case 10: 
      var $52=$fs; //@line 1063 "lparser.c"
      var $53=__Z9luaK_jumpP9FuncState($52); //@line 1063 "lparser.c"
      var $55 = $53;__label__ = 11; break; //@line 1063 "lparser.c"
    case 11: 
      var $55; //@line 1063 "lparser.c"
      var $56=$prep; //@line 1063 "lparser.c"
      var $57=((($56)+(1))|0); //@line 1063 "lparser.c"
      __Z14luaK_patchlistP9FuncStateii($46, $55, $57); //@line 1063 "lparser.c"
      STACKTOP = __stackBase__;
      return; //@line 1064 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7forbodyP8LexStateiiii["X"]=1;

function __Z4exp1P8LexState($ls) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;

  var $1;
  var $e=__stackBase__;
  var $k;
  $1=$ls;
  var $2=$1; //@line 1039 "lparser.c"
  __Z4exprP8LexStateP7expdesc($2, $e); //@line 1039 "lparser.c"
  var $3=(($e)|0); //@line 1040 "lparser.c"
  var $4=HEAP32[(($3)>>2)]; //@line 1040 "lparser.c"
  $k=$4; //@line 1040 "lparser.c"
  var $5=$1; //@line 1041 "lparser.c"
  var $6=(($5+36)|0); //@line 1041 "lparser.c"
  var $7=HEAP32[(($6)>>2)]; //@line 1041 "lparser.c"
  __Z16luaK_exp2nextregP9FuncStateP7expdesc($7, $e); //@line 1041 "lparser.c"
  var $8=$k; //@line 1042 "lparser.c"
  STACKTOP = __stackBase__;
  return $8; //@line 1042 "lparser.c"
}


function __Z14error_expectedP8LexStatei($ls, $token) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  var $2;
  $1=$ls;
  $2=$token;
  var $3=$1; //@line 66 "lparser.c"
  var $4=$1; //@line 67 "lparser.c"
  var $5=(($4+40)|0); //@line 67 "lparser.c"
  var $6=HEAP32[(($5)>>2)]; //@line 67 "lparser.c"
  var $7=$1; //@line 67 "lparser.c"
  var $8=$2; //@line 67 "lparser.c"
  var $9=__Z14luaX_token2strP8LexStatei($7, $8); //@line 67 "lparser.c"
  var $10=__Z16luaO_pushfstringP9lua_StatePKcz($6, ((STRING_TABLE.__str26155)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$9,tempInt)); //@line 67 "lparser.c"
  __Z16luaX_syntaxerrorP8LexStatePKc($3, $10); //@line 67 "lparser.c"
  STACKTOP = __stackBase__;
  return; //@line 68 "lparser.c"
}


function __Z15test_then_blockP8LexState($ls) {
  ;
  var __label__;

  var $1;
  var $condexit;
  $1=$ls;
  var $2=$1; //@line 1133 "lparser.c"
  __Z9luaX_nextP8LexState($2); //@line 1133 "lparser.c"
  var $3=$1; //@line 1134 "lparser.c"
  var $4=__Z4condP8LexState($3); //@line 1134 "lparser.c"
  $condexit=$4; //@line 1134 "lparser.c"
  var $5=$1; //@line 1135 "lparser.c"
  __Z9checknextP8LexStatei($5, 274); //@line 1135 "lparser.c"
  var $6=$1; //@line 1136 "lparser.c"
  __Z5blockP8LexState($6); //@line 1136 "lparser.c"
  var $7=$condexit; //@line 1137 "lparser.c"
  ;
  return $7; //@line 1137 "lparser.c"
}


function __Z12anchor_tokenP8LexState($ls) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $ts;
      $1=$ls;
      var $2=$1; //@line 58 "lparser.c"
      var $3=(($2+12)|0); //@line 58 "lparser.c"
      var $4=(($3)|0); //@line 58 "lparser.c"
      var $5=HEAP32[(($4)>>2)]; //@line 58 "lparser.c"
      var $6=(($5)|0)==285; //@line 58 "lparser.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 58 "lparser.c"
    case 3: 
      var $8=$1; //@line 58 "lparser.c"
      var $9=(($8+12)|0); //@line 58 "lparser.c"
      var $10=(($9)|0); //@line 58 "lparser.c"
      var $11=HEAP32[(($10)>>2)]; //@line 58 "lparser.c"
      var $12=(($11)|0)==286; //@line 58 "lparser.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 58 "lparser.c"
    case 4: 
      var $14=$1; //@line 59 "lparser.c"
      var $15=(($14+12)|0); //@line 59 "lparser.c"
      var $16=(($15+4)|0); //@line 59 "lparser.c"
      var $17=$16; //@line 59 "lparser.c"
      var $18=HEAP32[(($17)>>2)]; //@line 59 "lparser.c"
      $ts=$18; //@line 59 "lparser.c"
      var $19=$1; //@line 60 "lparser.c"
      var $20=$ts; //@line 60 "lparser.c"
      var $21=(($20+16)|0); //@line 60 "lparser.c"
      var $22=$21; //@line 60 "lparser.c"
      var $23=$ts; //@line 60 "lparser.c"
      var $24=$23; //@line 60 "lparser.c"
      var $25=(($24+12)|0); //@line 60 "lparser.c"
      var $26=HEAP32[(($25)>>2)]; //@line 60 "lparser.c"
      var $27=__Z14luaX_newstringP8LexStatePKcj($19, $22, $26); //@line 60 "lparser.c"
      __label__ = 5; break; //@line 61 "lparser.c"
    case 5: 
      ;
      return; //@line 62 "lparser.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaE_newthreadP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $L1;
  var $o2;
  var $o1;
  $1=$L;
  var $2=$1; //@line 120 "lstate.c"
  var $3=__Z13luaM_realloc_P9lua_StatePvjj($2, 0, 0, 112); //@line 120 "lstate.c"
  var $4=(($3)|0); //@line 120 "lstate.c"
  var $5=$4; //@line 120 "lstate.c"
  $L1=$5; //@line 120 "lstate.c"
  var $6=$1; //@line 121 "lstate.c"
  var $7=$L1; //@line 121 "lstate.c"
  var $8=$7; //@line 121 "lstate.c"
  __Z9luaC_linkP9lua_StateP8GCObjecth($6, $8, 8); //@line 121 "lstate.c"
  var $9=$L1; //@line 122 "lstate.c"
  var $10=$1; //@line 122 "lstate.c"
  var $11=(($10+16)|0); //@line 122 "lstate.c"
  var $12=HEAP32[(($11)>>2)]; //@line 122 "lstate.c"
  __Z13preinit_stateP9lua_StateP12global_State($9, $12); //@line 122 "lstate.c"
  var $13=$L1; //@line 123 "lstate.c"
  var $14=$1; //@line 123 "lstate.c"
  __Z10stack_initP9lua_StateS0_($13, $14); //@line 123 "lstate.c"
  var $15=$1; //@line 124 "lstate.c"
  var $16=(($15+72)|0); //@line 124 "lstate.c"
  $o2=$16; //@line 124 "lstate.c"
  var $17=$L1; //@line 124 "lstate.c"
  var $18=(($17+72)|0); //@line 124 "lstate.c"
  $o1=$18; //@line 124 "lstate.c"
  var $19=$o1; //@line 124 "lstate.c"
  var $20=(($19)|0); //@line 124 "lstate.c"
  var $21=$o2; //@line 124 "lstate.c"
  var $22=(($21)|0); //@line 124 "lstate.c"
  var $23=$20; //@line 124 "lstate.c"
  var $24=$22; //@line 124 "lstate.c"
  HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)]; //@line 124 "lstate.c"
  var $25=$o2; //@line 124 "lstate.c"
  var $26=(($25+8)|0); //@line 124 "lstate.c"
  var $27=HEAP32[(($26)>>2)]; //@line 124 "lstate.c"
  var $28=$o1; //@line 124 "lstate.c"
  var $29=(($28+8)|0); //@line 124 "lstate.c"
  HEAP32[(($29)>>2)]=$27; //@line 124 "lstate.c"
  var $30=$1; //@line 125 "lstate.c"
  var $31=(($30+56)|0); //@line 125 "lstate.c"
  var $32=HEAP8[($31)]; //@line 125 "lstate.c"
  var $33=$L1; //@line 125 "lstate.c"
  var $34=(($33+56)|0); //@line 125 "lstate.c"
  HEAP8[($34)]=$32; //@line 125 "lstate.c"
  var $35=$1; //@line 126 "lstate.c"
  var $36=(($35+60)|0); //@line 126 "lstate.c"
  var $37=HEAP32[(($36)>>2)]; //@line 126 "lstate.c"
  var $38=$L1; //@line 126 "lstate.c"
  var $39=(($38+60)|0); //@line 126 "lstate.c"
  HEAP32[(($39)>>2)]=$37; //@line 126 "lstate.c"
  var $40=$1; //@line 127 "lstate.c"
  var $41=(($40+68)|0); //@line 127 "lstate.c"
  var $42=HEAP32[(($41)>>2)]; //@line 127 "lstate.c"
  var $43=$L1; //@line 127 "lstate.c"
  var $44=(($43+68)|0); //@line 127 "lstate.c"
  HEAP32[(($44)>>2)]=$42; //@line 127 "lstate.c"
  var $45=$L1; //@line 128 "lstate.c"
  var $46=(($45+60)|0); //@line 128 "lstate.c"
  var $47=HEAP32[(($46)>>2)]; //@line 128 "lstate.c"
  var $48=$L1; //@line 128 "lstate.c"
  var $49=(($48+64)|0); //@line 128 "lstate.c"
  HEAP32[(($49)>>2)]=$47; //@line 128 "lstate.c"
  var $50=$L1; //@line 130 "lstate.c"
  ;
  return $50; //@line 130 "lstate.c"
}
__Z14luaE_newthreadP9lua_State["X"]=1;

function __Z10stack_initP9lua_StateS0_($L1, $L) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L1;
  $2=$L;
  var $3=$2; //@line 44 "lstate.c"
  var $4=__Z13luaM_realloc_P9lua_StatePvjj($3, 0, 0, 192); //@line 44 "lstate.c"
  var $5=$4; //@line 44 "lstate.c"
  var $6=$1; //@line 44 "lstate.c"
  var $7=(($6+40)|0); //@line 44 "lstate.c"
  HEAP32[(($7)>>2)]=$5; //@line 44 "lstate.c"
  var $8=$1; //@line 45 "lstate.c"
  var $9=(($8+40)|0); //@line 45 "lstate.c"
  var $10=HEAP32[(($9)>>2)]; //@line 45 "lstate.c"
  var $11=$1; //@line 45 "lstate.c"
  var $12=(($11+20)|0); //@line 45 "lstate.c"
  HEAP32[(($12)>>2)]=$10; //@line 45 "lstate.c"
  var $13=$1; //@line 46 "lstate.c"
  var $14=(($13+48)|0); //@line 46 "lstate.c"
  HEAP32[(($14)>>2)]=8; //@line 46 "lstate.c"
  var $15=$1; //@line 47 "lstate.c"
  var $16=(($15+40)|0); //@line 47 "lstate.c"
  var $17=HEAP32[(($16)>>2)]; //@line 47 "lstate.c"
  var $18=$1; //@line 47 "lstate.c"
  var $19=(($18+48)|0); //@line 47 "lstate.c"
  var $20=HEAP32[(($19)>>2)]; //@line 47 "lstate.c"
  var $21=(($17+($20)*(24))|0); //@line 47 "lstate.c"
  var $22=((($21)-(24))|0); //@line 47 "lstate.c"
  var $23=$1; //@line 47 "lstate.c"
  var $24=(($23+36)|0); //@line 47 "lstate.c"
  HEAP32[(($24)>>2)]=$22; //@line 47 "lstate.c"
  var $25=$2; //@line 49 "lstate.c"
  var $26=__Z13luaM_realloc_P9lua_StatePvjj($25, 0, 0, 540); //@line 49 "lstate.c"
  var $27=$26; //@line 49 "lstate.c"
  var $28=$1; //@line 49 "lstate.c"
  var $29=(($28+32)|0); //@line 49 "lstate.c"
  HEAP32[(($29)>>2)]=$27; //@line 49 "lstate.c"
  var $30=$1; //@line 50 "lstate.c"
  var $31=(($30+44)|0); //@line 50 "lstate.c"
  HEAP32[(($31)>>2)]=45; //@line 50 "lstate.c"
  var $32=$1; //@line 51 "lstate.c"
  var $33=(($32+32)|0); //@line 51 "lstate.c"
  var $34=HEAP32[(($33)>>2)]; //@line 51 "lstate.c"
  var $35=$1; //@line 51 "lstate.c"
  var $36=(($35+8)|0); //@line 51 "lstate.c"
  HEAP32[(($36)>>2)]=$34; //@line 51 "lstate.c"
  var $37=$1; //@line 52 "lstate.c"
  var $38=(($37+32)|0); //@line 52 "lstate.c"
  var $39=HEAP32[(($38)>>2)]; //@line 52 "lstate.c"
  var $40=$1; //@line 52 "lstate.c"
  var $41=(($40+44)|0); //@line 52 "lstate.c"
  var $42=HEAP32[(($41)>>2)]; //@line 52 "lstate.c"
  var $43=((($42)-(5))|0); //@line 52 "lstate.c"
  var $44=(($39+($43)*(12))|0); //@line 52 "lstate.c"
  var $45=((($44)-(12))|0); //@line 52 "lstate.c"
  var $46=$1; //@line 52 "lstate.c"
  var $47=(($46+28)|0); //@line 52 "lstate.c"
  HEAP32[(($47)>>2)]=$45; //@line 52 "lstate.c"
  var $48=$1; //@line 54 "lstate.c"
  var $49=(($48+8)|0); //@line 54 "lstate.c"
  var $50=HEAP32[(($49)>>2)]; //@line 54 "lstate.c"
  var $51=$1; //@line 54 "lstate.c"
  var $52=(($51+20)|0); //@line 54 "lstate.c"
  var $53=HEAP32[(($52)>>2)]; //@line 54 "lstate.c"
  var $54=(($53+4)|0); //@line 54 "lstate.c"
  HEAP32[(($54)>>2)]=$50; //@line 54 "lstate.c"
  var $55=$1; //@line 55 "lstate.c"
  var $56=(($55+8)|0); //@line 55 "lstate.c"
  var $57=HEAP32[(($56)>>2)]; //@line 55 "lstate.c"
  var $58=(($57+12)|0); //@line 55 "lstate.c"
  HEAP32[(($56)>>2)]=$58; //@line 55 "lstate.c"
  var $59=(($57+8)|0); //@line 55 "lstate.c"
  HEAP32[(($59)>>2)]=0; //@line 55 "lstate.c"
  var $60=$1; //@line 56 "lstate.c"
  var $61=(($60+8)|0); //@line 56 "lstate.c"
  var $62=HEAP32[(($61)>>2)]; //@line 56 "lstate.c"
  var $63=$1; //@line 56 "lstate.c"
  var $64=(($63+20)|0); //@line 56 "lstate.c"
  var $65=HEAP32[(($64)>>2)]; //@line 56 "lstate.c"
  var $66=(($65)|0); //@line 56 "lstate.c"
  HEAP32[(($66)>>2)]=$62; //@line 56 "lstate.c"
  var $67=$1; //@line 56 "lstate.c"
  var $68=(($67+12)|0); //@line 56 "lstate.c"
  HEAP32[(($68)>>2)]=$62; //@line 56 "lstate.c"
  var $69=$1; //@line 57 "lstate.c"
  var $70=(($69+8)|0); //@line 57 "lstate.c"
  var $71=HEAP32[(($70)>>2)]; //@line 57 "lstate.c"
  var $72=(($71+240)|0); //@line 57 "lstate.c"
  var $73=$1; //@line 57 "lstate.c"
  var $74=(($73+20)|0); //@line 57 "lstate.c"
  var $75=HEAP32[(($74)>>2)]; //@line 57 "lstate.c"
  var $76=(($75+8)|0); //@line 57 "lstate.c"
  HEAP32[(($76)>>2)]=$72; //@line 57 "lstate.c"
  ;
  return; //@line 58 "lstate.c"
}
__Z10stack_initP9lua_StateS0_["X"]=1;

function __Z15luaE_freethreadP9lua_StateS0_($L, $L1) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$L1;
  var $3=$2; //@line 135 "lstate.c"
  var $4=$2; //@line 135 "lstate.c"
  var $5=(($4+32)|0); //@line 135 "lstate.c"
  var $6=HEAP32[(($5)>>2)]; //@line 135 "lstate.c"
  __Z10luaF_closeP9lua_StateP10lua_TValue($3, $6); //@line 135 "lstate.c"
  var $7=$1; //@line 138 "lstate.c"
  var $8=$2; //@line 138 "lstate.c"
  __Z9freestackP9lua_StateS0_($7, $8); //@line 138 "lstate.c"
  var $9=$1; //@line 139 "lstate.c"
  var $10=$2; //@line 139 "lstate.c"
  var $11=$10; //@line 139 "lstate.c"
  var $12=(($11)|0); //@line 139 "lstate.c"
  var $13=__Z13luaM_realloc_P9lua_StatePvjj($9, $12, 112, 0); //@line 139 "lstate.c"
  ;
  return; //@line 140 "lstate.c"
}


function __Z9freestackP9lua_StateS0_($L, $L1) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$L1;
  var $3=$1; //@line 62 "lstate.c"
  var $4=$2; //@line 62 "lstate.c"
  var $5=(($4+40)|0); //@line 62 "lstate.c"
  var $6=HEAP32[(($5)>>2)]; //@line 62 "lstate.c"
  var $7=$6; //@line 62 "lstate.c"
  var $8=$2; //@line 62 "lstate.c"
  var $9=(($8+48)|0); //@line 62 "lstate.c"
  var $10=HEAP32[(($9)>>2)]; //@line 62 "lstate.c"
  var $11=((($10)*(24))|0); //@line 62 "lstate.c"
  var $12=__Z13luaM_realloc_P9lua_StatePvjj($3, $7, $11, 0); //@line 62 "lstate.c"
  var $13=$1; //@line 63 "lstate.c"
  var $14=$2; //@line 63 "lstate.c"
  var $15=(($14+32)|0); //@line 63 "lstate.c"
  var $16=HEAP32[(($15)>>2)]; //@line 63 "lstate.c"
  var $17=$16; //@line 63 "lstate.c"
  var $18=$2; //@line 63 "lstate.c"
  var $19=(($18+44)|0); //@line 63 "lstate.c"
  var $20=HEAP32[(($19)>>2)]; //@line 63 "lstate.c"
  var $21=((($20)*(12))|0); //@line 63 "lstate.c"
  var $22=__Z13luaM_realloc_P9lua_StatePvjj($13, $17, $21, 0); //@line 63 "lstate.c"
  ;
  return; //@line 64 "lstate.c"
}


function _lua_newstate($f, $ud) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $L;
      var $g;
      var $l;
      $2=$f;
      $3=$ud;
      var $4=$2; //@line 147 "lstate.c"
      var $5=$3; //@line 147 "lstate.c"
      var $6=FUNCTION_TABLE[$4]($5, 0, 0, 348); //@line 147 "lstate.c"
      $l=$6; //@line 147 "lstate.c"
      var $7=$l; //@line 148 "lstate.c"
      var $8=(($7)|0)==0; //@line 148 "lstate.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 148 "lstate.c"
    case 3: 
      $1=0; //@line 148 "lstate.c"
      __label__ = 12; break; //@line 148 "lstate.c"
    case 4: 
      var $11=$l; //@line 149 "lstate.c"
      var $12=(($11)|0); //@line 149 "lstate.c"
      var $13=$12; //@line 149 "lstate.c"
      $L=$13; //@line 149 "lstate.c"
      var $14=$L; //@line 150 "lstate.c"
      var $15=$14; //@line 150 "lstate.c"
      var $16=(($15+112)|0); //@line 150 "lstate.c"
      $g=$16; //@line 150 "lstate.c"
      var $17=$L; //@line 151 "lstate.c"
      var $18=(($17)|0); //@line 151 "lstate.c"
      HEAP32[(($18)>>2)]=0; //@line 151 "lstate.c"
      var $19=$L; //@line 152 "lstate.c"
      var $20=(($19+4)|0); //@line 152 "lstate.c"
      HEAP8[($20)]=8; //@line 152 "lstate.c"
      var $21=$g; //@line 153 "lstate.c"
      var $22=(($21+20)|0); //@line 153 "lstate.c"
      HEAP8[($22)]=33; //@line 153 "lstate.c"
      var $23=$g; //@line 154 "lstate.c"
      var $24=(($23+20)|0); //@line 154 "lstate.c"
      var $25=HEAPU8[($24)]; //@line 154 "lstate.c"
      var $26=(($25)&255); //@line 154 "lstate.c"
      var $27=$26 & 3; //@line 154 "lstate.c"
      var $28=(($27) & 255); //@line 154 "lstate.c"
      var $29=$L; //@line 154 "lstate.c"
      var $30=(($29+5)|0); //@line 154 "lstate.c"
      HEAP8[($30)]=$28; //@line 154 "lstate.c"
      var $31=$L; //@line 155 "lstate.c"
      var $32=(($31+5)|0); //@line 155 "lstate.c"
      var $33=HEAPU8[($32)]; //@line 155 "lstate.c"
      var $34=(($33)&255); //@line 155 "lstate.c"
      var $35=$34 | 96; //@line 155 "lstate.c"
      var $36=(($35) & 255); //@line 155 "lstate.c"
      HEAP8[($32)]=$36; //@line 155 "lstate.c"
      var $37=$L; //@line 156 "lstate.c"
      var $38=$g; //@line 156 "lstate.c"
      __Z13preinit_stateP9lua_StateP12global_State($37, $38); //@line 156 "lstate.c"
      var $39=$2; //@line 157 "lstate.c"
      var $40=$g; //@line 157 "lstate.c"
      var $41=(($40+12)|0); //@line 157 "lstate.c"
      HEAP32[(($41)>>2)]=$39; //@line 157 "lstate.c"
      var $42=$3; //@line 158 "lstate.c"
      var $43=$g; //@line 158 "lstate.c"
      var $44=(($43+16)|0); //@line 158 "lstate.c"
      HEAP32[(($44)>>2)]=$42; //@line 158 "lstate.c"
      var $45=$L; //@line 159 "lstate.c"
      var $46=$g; //@line 159 "lstate.c"
      var $47=(($46+104)|0); //@line 159 "lstate.c"
      HEAP32[(($47)>>2)]=$45; //@line 159 "lstate.c"
      var $48=$g; //@line 160 "lstate.c"
      var $49=(($48+108)|0); //@line 160 "lstate.c"
      var $50=$g; //@line 160 "lstate.c"
      var $51=(($50+108)|0); //@line 160 "lstate.c"
      var $52=(($51+12)|0); //@line 160 "lstate.c"
      var $53=$52; //@line 160 "lstate.c"
      var $54=(($53)|0); //@line 160 "lstate.c"
      HEAP32[(($54)>>2)]=$49; //@line 160 "lstate.c"
      var $55=$g; //@line 161 "lstate.c"
      var $56=(($55+108)|0); //@line 161 "lstate.c"
      var $57=$g; //@line 161 "lstate.c"
      var $58=(($57+108)|0); //@line 161 "lstate.c"
      var $59=(($58+12)|0); //@line 161 "lstate.c"
      var $60=$59; //@line 161 "lstate.c"
      var $61=(($60+4)|0); //@line 161 "lstate.c"
      HEAP32[(($61)>>2)]=$56; //@line 161 "lstate.c"
      var $62=$g; //@line 162 "lstate.c"
      var $63=(($62+64)|0); //@line 162 "lstate.c"
      HEAP32[(($63)>>2)]=0; //@line 162 "lstate.c"
      var $64=$g; //@line 163 "lstate.c"
      var $65=(($64)|0); //@line 163 "lstate.c"
      var $66=(($65+8)|0); //@line 163 "lstate.c"
      HEAP32[(($66)>>2)]=0; //@line 163 "lstate.c"
      var $67=$g; //@line 164 "lstate.c"
      var $68=(($67)|0); //@line 164 "lstate.c"
      var $69=(($68+4)|0); //@line 164 "lstate.c"
      HEAP32[(($69)>>2)]=0; //@line 164 "lstate.c"
      var $70=$g; //@line 165 "lstate.c"
      var $71=(($70)|0); //@line 165 "lstate.c"
      var $72=(($71)|0); //@line 165 "lstate.c"
      HEAP32[(($72)>>2)]=0; //@line 165 "lstate.c"
      var $73=$L; //@line 166 "lstate.c"
      var $74=(($73+16)|0); //@line 166 "lstate.c"
      var $75=HEAP32[(($74)>>2)]; //@line 166 "lstate.c"
      var $76=(($75+92)|0); //@line 166 "lstate.c"
      var $77=(($76+8)|0); //@line 166 "lstate.c"
      HEAP32[(($77)>>2)]=0; //@line 166 "lstate.c"
      var $78=$g; //@line 167 "lstate.c"
      var $79=(($78+52)|0); //@line 167 "lstate.c"
      var $80=(($79)|0); //@line 167 "lstate.c"
      HEAP32[(($80)>>2)]=0; //@line 167 "lstate.c"
      var $81=$g; //@line 167 "lstate.c"
      var $82=(($81+52)|0); //@line 167 "lstate.c"
      var $83=(($82+8)|0); //@line 167 "lstate.c"
      HEAP32[(($83)>>2)]=0; //@line 167 "lstate.c"
      var $84=$g; //@line 168 "lstate.c"
      var $85=(($84+88)|0); //@line 168 "lstate.c"
      HEAP32[(($85)>>2)]=0; //@line 168 "lstate.c"
      var $86=$g; //@line 169 "lstate.c"
      var $87=(($86+21)|0); //@line 169 "lstate.c"
      HEAP8[($87)]=0; //@line 169 "lstate.c"
      var $88=$L; //@line 170 "lstate.c"
      var $89=$88; //@line 170 "lstate.c"
      var $90=$g; //@line 170 "lstate.c"
      var $91=(($90+28)|0); //@line 170 "lstate.c"
      HEAP32[(($91)>>2)]=$89; //@line 170 "lstate.c"
      var $92=$g; //@line 171 "lstate.c"
      var $93=(($92+24)|0); //@line 171 "lstate.c"
      HEAP32[(($93)>>2)]=0; //@line 171 "lstate.c"
      var $94=$g; //@line 172 "lstate.c"
      var $95=(($94+28)|0); //@line 172 "lstate.c"
      var $96=$g; //@line 172 "lstate.c"
      var $97=(($96+32)|0); //@line 172 "lstate.c"
      HEAP32[(($97)>>2)]=$95; //@line 172 "lstate.c"
      var $98=$g; //@line 173 "lstate.c"
      var $99=(($98+36)|0); //@line 173 "lstate.c"
      HEAP32[(($99)>>2)]=0; //@line 173 "lstate.c"
      var $100=$g; //@line 174 "lstate.c"
      var $101=(($100+40)|0); //@line 174 "lstate.c"
      HEAP32[(($101)>>2)]=0; //@line 174 "lstate.c"
      var $102=$g; //@line 175 "lstate.c"
      var $103=(($102+44)|0); //@line 175 "lstate.c"
      HEAP32[(($103)>>2)]=0; //@line 175 "lstate.c"
      var $104=$g; //@line 176 "lstate.c"
      var $105=(($104+48)|0); //@line 176 "lstate.c"
      HEAP32[(($105)>>2)]=0; //@line 176 "lstate.c"
      var $106=$g; //@line 177 "lstate.c"
      var $107=(($106+68)|0); //@line 177 "lstate.c"
      HEAP32[(($107)>>2)]=348; //@line 177 "lstate.c"
      var $108=$g; //@line 178 "lstate.c"
      var $109=(($108+80)|0); //@line 178 "lstate.c"
      HEAP32[(($109)>>2)]=200; //@line 178 "lstate.c"
      var $110=$g; //@line 179 "lstate.c"
      var $111=(($110+84)|0); //@line 179 "lstate.c"
      HEAP32[(($111)>>2)]=200; //@line 179 "lstate.c"
      var $112=$g; //@line 180 "lstate.c"
      var $113=(($112+76)|0); //@line 180 "lstate.c"
      HEAP32[(($113)>>2)]=0; //@line 180 "lstate.c"
      $i=0; //@line 181 "lstate.c"
      __label__ = 5; break; //@line 181 "lstate.c"
    case 5: 
      var $115=$i; //@line 181 "lstate.c"
      var $116=(($115)|0) < 9; //@line 181 "lstate.c"
      if ($116) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 181 "lstate.c"
    case 6: 
      var $118=$i; //@line 181 "lstate.c"
      var $119=$g; //@line 181 "lstate.c"
      var $120=(($119+132)|0); //@line 181 "lstate.c"
      var $121=(($120+($118<<2))|0); //@line 181 "lstate.c"
      HEAP32[(($121)>>2)]=0; //@line 181 "lstate.c"
      __label__ = 7; break; //@line 181 "lstate.c"
    case 7: 
      var $123=$i; //@line 181 "lstate.c"
      var $124=((($123)+(1))|0); //@line 181 "lstate.c"
      $i=$124; //@line 181 "lstate.c"
      __label__ = 5; break; //@line 181 "lstate.c"
    case 8: 
      var $126=$L; //@line 182 "lstate.c"
      var $127=__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($126, 16, 0); //@line 182 "lstate.c"
      var $128=(($127)|0)!=0; //@line 182 "lstate.c"
      if ($128) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 182 "lstate.c"
    case 9: 
      var $130=$L; //@line 184 "lstate.c"
      __Z11close_stateP9lua_State($130); //@line 184 "lstate.c"
      $L=0; //@line 185 "lstate.c"
      __label__ = 11; break; //@line 186 "lstate.c"
    case 10: 
      __label__ = 11; break; //@line 188 "lstate.c"
    case 11: 
      var $133=$L; //@line 189 "lstate.c"
      $1=$133; //@line 189 "lstate.c"
      __label__ = 12; break; //@line 189 "lstate.c"
    case 12: 
      var $135=$1; //@line 190 "lstate.c"
      ;
      return $135; //@line 190 "lstate.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_newstate["X"]=1;

function __Z9f_luaopenP9lua_StatePv($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  var $g;
  var $i_o;
  var $i_o1;
  $1=$L;
  $2=$ud;
  var $3=$1; //@line 71 "lstate.c"
  var $4=(($3+16)|0); //@line 71 "lstate.c"
  var $5=HEAP32[(($4)>>2)]; //@line 71 "lstate.c"
  $g=$5; //@line 71 "lstate.c"
  var $6=$1; //@line 73 "lstate.c"
  var $7=$1; //@line 73 "lstate.c"
  __Z10stack_initP9lua_StateS0_($6, $7); //@line 73 "lstate.c"
  var $8=$1; //@line 74 "lstate.c"
  var $9=(($8+72)|0); //@line 74 "lstate.c"
  $i_o=$9; //@line 74 "lstate.c"
  var $10=$1; //@line 74 "lstate.c"
  var $11=__Z8luaH_newP9lua_Stateii($10, 0, 2); //@line 74 "lstate.c"
  var $12=$11; //@line 74 "lstate.c"
  var $13=$i_o; //@line 74 "lstate.c"
  var $14=(($13)|0); //@line 74 "lstate.c"
  var $15=$14; //@line 74 "lstate.c"
  HEAP32[(($15)>>2)]=$12; //@line 74 "lstate.c"
  var $16=$i_o; //@line 74 "lstate.c"
  var $17=(($16+8)|0); //@line 74 "lstate.c"
  HEAP32[(($17)>>2)]=5; //@line 74 "lstate.c"
  var $18=$1; //@line 75 "lstate.c"
  var $19=(($18+16)|0); //@line 75 "lstate.c"
  var $20=HEAP32[(($19)>>2)]; //@line 75 "lstate.c"
  var $21=(($20+92)|0); //@line 75 "lstate.c"
  $i_o1=$21; //@line 75 "lstate.c"
  var $22=$1; //@line 75 "lstate.c"
  var $23=__Z8luaH_newP9lua_Stateii($22, 0, 2); //@line 75 "lstate.c"
  var $24=$23; //@line 75 "lstate.c"
  var $25=$i_o1; //@line 75 "lstate.c"
  var $26=(($25)|0); //@line 75 "lstate.c"
  var $27=$26; //@line 75 "lstate.c"
  HEAP32[(($27)>>2)]=$24; //@line 75 "lstate.c"
  var $28=$i_o1; //@line 75 "lstate.c"
  var $29=(($28+8)|0); //@line 75 "lstate.c"
  HEAP32[(($29)>>2)]=5; //@line 75 "lstate.c"
  var $30=$1; //@line 76 "lstate.c"
  __Z11luaS_resizeP9lua_Statei($30, 32); //@line 76 "lstate.c"
  var $31=$1; //@line 77 "lstate.c"
  __Z9luaT_initP9lua_State($31); //@line 77 "lstate.c"
  var $32=$1; //@line 78 "lstate.c"
  __Z9luaX_initP9lua_State($32); //@line 78 "lstate.c"
  var $33=$1; //@line 79 "lstate.c"
  var $34=__Z12luaS_newlstrP9lua_StatePKcj($33, ((STRING_TABLE.__str158)|0), 17); //@line 79 "lstate.c"
  var $35=$34; //@line 79 "lstate.c"
  var $36=(($35+5)|0); //@line 79 "lstate.c"
  var $37=HEAPU8[($36)]; //@line 79 "lstate.c"
  var $38=(($37)&255); //@line 79 "lstate.c"
  var $39=$38 | 32; //@line 79 "lstate.c"
  var $40=(($39) & 255); //@line 79 "lstate.c"
  HEAP8[($36)]=$40; //@line 79 "lstate.c"
  var $41=$g; //@line 80 "lstate.c"
  var $42=(($41+68)|0); //@line 80 "lstate.c"
  var $43=HEAP32[(($42)>>2)]; //@line 80 "lstate.c"
  var $44=((($43<<2))|0); //@line 80 "lstate.c"
  var $45=$g; //@line 80 "lstate.c"
  var $46=(($45+64)|0); //@line 80 "lstate.c"
  HEAP32[(($46)>>2)]=$44; //@line 80 "lstate.c"
  ;
  return; //@line 81 "lstate.c"
}
__Z9f_luaopenP9lua_StatePv["X"]=1;

function __Z11close_stateP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $g;
  $1=$L;
  var $2=$1; //@line 106 "lstate.c"
  var $3=(($2+16)|0); //@line 106 "lstate.c"
  var $4=HEAP32[(($3)>>2)]; //@line 106 "lstate.c"
  $g=$4; //@line 106 "lstate.c"
  var $5=$1; //@line 107 "lstate.c"
  var $6=$1; //@line 107 "lstate.c"
  var $7=(($6+32)|0); //@line 107 "lstate.c"
  var $8=HEAP32[(($7)>>2)]; //@line 107 "lstate.c"
  __Z10luaF_closeP9lua_StateP10lua_TValue($5, $8); //@line 107 "lstate.c"
  var $9=$1; //@line 108 "lstate.c"
  __Z12luaC_freeallP9lua_State($9); //@line 108 "lstate.c"
  var $10=$1; //@line 111 "lstate.c"
  var $11=$1; //@line 111 "lstate.c"
  var $12=(($11+16)|0); //@line 111 "lstate.c"
  var $13=HEAP32[(($12)>>2)]; //@line 111 "lstate.c"
  var $14=(($13)|0); //@line 111 "lstate.c"
  var $15=(($14)|0); //@line 111 "lstate.c"
  var $16=HEAP32[(($15)>>2)]; //@line 111 "lstate.c"
  var $17=$16; //@line 111 "lstate.c"
  var $18=$1; //@line 111 "lstate.c"
  var $19=(($18+16)|0); //@line 111 "lstate.c"
  var $20=HEAP32[(($19)>>2)]; //@line 111 "lstate.c"
  var $21=(($20)|0); //@line 111 "lstate.c"
  var $22=(($21+8)|0); //@line 111 "lstate.c"
  var $23=HEAP32[(($22)>>2)]; //@line 111 "lstate.c"
  var $24=((($23<<2))|0); //@line 111 "lstate.c"
  var $25=__Z13luaM_realloc_P9lua_StatePvjj($10, $17, $24, 0); //@line 111 "lstate.c"
  var $26=$1; //@line 112 "lstate.c"
  var $27=$g; //@line 112 "lstate.c"
  var $28=(($27+52)|0); //@line 112 "lstate.c"
  var $29=(($28)|0); //@line 112 "lstate.c"
  var $30=HEAP32[(($29)>>2)]; //@line 112 "lstate.c"
  var $31=$g; //@line 112 "lstate.c"
  var $32=(($31+52)|0); //@line 112 "lstate.c"
  var $33=(($32+8)|0); //@line 112 "lstate.c"
  var $34=HEAP32[(($33)>>2)]; //@line 112 "lstate.c"
  var $35=(($34)|0); //@line 112 "lstate.c"
  var $36=__Z13luaM_realloc_P9lua_StatePvjj($26, $30, $35, 0); //@line 112 "lstate.c"
  var $37=$g; //@line 112 "lstate.c"
  var $38=(($37+52)|0); //@line 112 "lstate.c"
  var $39=(($38)|0); //@line 112 "lstate.c"
  HEAP32[(($39)>>2)]=$36; //@line 112 "lstate.c"
  var $40=$g; //@line 112 "lstate.c"
  var $41=(($40+52)|0); //@line 112 "lstate.c"
  var $42=(($41+8)|0); //@line 112 "lstate.c"
  HEAP32[(($42)>>2)]=0; //@line 112 "lstate.c"
  var $43=$1; //@line 113 "lstate.c"
  var $44=$1; //@line 113 "lstate.c"
  __Z9freestackP9lua_StateS0_($43, $44); //@line 113 "lstate.c"
  var $45=$g; //@line 115 "lstate.c"
  var $46=(($45+12)|0); //@line 115 "lstate.c"
  var $47=HEAP32[(($46)>>2)]; //@line 115 "lstate.c"
  var $48=$g; //@line 115 "lstate.c"
  var $49=(($48+16)|0); //@line 115 "lstate.c"
  var $50=HEAP32[(($49)>>2)]; //@line 115 "lstate.c"
  var $51=$1; //@line 115 "lstate.c"
  var $52=$51; //@line 115 "lstate.c"
  var $53=(($52)|0); //@line 115 "lstate.c"
  var $54=FUNCTION_TABLE[$47]($50, $53, 348, 0); //@line 115 "lstate.c"
  ;
  return; //@line 116 "lstate.c"
}
__Z11close_stateP9lua_State["X"]=1;

function _lua_close($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 200 "lstate.c"
      var $3=(($2+16)|0); //@line 200 "lstate.c"
      var $4=HEAP32[(($3)>>2)]; //@line 200 "lstate.c"
      var $5=(($4+104)|0); //@line 200 "lstate.c"
      var $6=HEAP32[(($5)>>2)]; //@line 200 "lstate.c"
      $1=$6; //@line 200 "lstate.c"
      var $7=$1; //@line 202 "lstate.c"
      var $8=$1; //@line 202 "lstate.c"
      var $9=(($8+32)|0); //@line 202 "lstate.c"
      var $10=HEAP32[(($9)>>2)]; //@line 202 "lstate.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($7, $10); //@line 202 "lstate.c"
      var $11=$1; //@line 203 "lstate.c"
      var $12=__Z18luaC_separateudataP9lua_Statei($11, 1); //@line 203 "lstate.c"
      var $13=$1; //@line 204 "lstate.c"
      var $14=(($13+108)|0); //@line 204 "lstate.c"
      HEAP32[(($14)>>2)]=0; //@line 204 "lstate.c"
      __label__ = 3; break; //@line 205 "lstate.c"
    case 3: 
      var $16=$1; //@line 206 "lstate.c"
      var $17=(($16+40)|0); //@line 206 "lstate.c"
      var $18=HEAP32[(($17)>>2)]; //@line 206 "lstate.c"
      var $19=$1; //@line 206 "lstate.c"
      var $20=(($19+20)|0); //@line 206 "lstate.c"
      HEAP32[(($20)>>2)]=$18; //@line 206 "lstate.c"
      var $21=$1; //@line 207 "lstate.c"
      var $22=(($21+20)|0); //@line 207 "lstate.c"
      var $23=HEAP32[(($22)>>2)]; //@line 207 "lstate.c"
      var $24=(($23)|0); //@line 207 "lstate.c"
      var $25=HEAP32[(($24)>>2)]; //@line 207 "lstate.c"
      var $26=$1; //@line 207 "lstate.c"
      var $27=(($26+8)|0); //@line 207 "lstate.c"
      HEAP32[(($27)>>2)]=$25; //@line 207 "lstate.c"
      var $28=$1; //@line 207 "lstate.c"
      var $29=(($28+12)|0); //@line 207 "lstate.c"
      HEAP32[(($29)>>2)]=$25; //@line 207 "lstate.c"
      var $30=$1; //@line 208 "lstate.c"
      var $31=(($30+54)|0); //@line 208 "lstate.c"
      HEAP16[(($31)>>1)]=0; //@line 208 "lstate.c"
      var $32=$1; //@line 208 "lstate.c"
      var $33=(($32+52)|0); //@line 208 "lstate.c"
      HEAP16[(($33)>>1)]=0; //@line 208 "lstate.c"
      __label__ = 4; break; //@line 209 "lstate.c"
    case 4: 
      var $35=$1; //@line 209 "lstate.c"
      var $36=__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_($35, 18, 0); //@line 209 "lstate.c"
      var $37=(($36)|0)!=0; //@line 209 "lstate.c"
      if ($37) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 209 "lstate.c"
    case 5: 
      var $39=$1; //@line 212 "lstate.c"
      __Z11close_stateP9lua_State($39); //@line 212 "lstate.c"
      ;
      return; //@line 213 "lstate.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_lua_close["X"]=1;

function __Z11callallgcTMP9lua_StatePv($L, $ud) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$ud;
  var $3=$1; //@line 195 "lstate.c"
  __Z13luaC_callGCTMP9lua_State($3); //@line 195 "lstate.c"
  ;
  return; //@line 196 "lstate.c"
}


function __Z11luaS_resizeP9lua_Statei($L, $newsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $newhash;
      var $tb;
      var $i;
      var $p;
      var $next;
      var $h;
      var $h1;
      $1=$L;
      $2=$newsize;
      var $3=$1; //@line 26 "lstring.c"
      var $4=(($3+16)|0); //@line 26 "lstring.c"
      var $5=HEAP32[(($4)>>2)]; //@line 26 "lstring.c"
      var $6=(($5+21)|0); //@line 26 "lstring.c"
      var $7=HEAPU8[($6)]; //@line 26 "lstring.c"
      var $8=(($7)&255); //@line 26 "lstring.c"
      var $9=(($8)|0)==2; //@line 26 "lstring.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 26 "lstring.c"
    case 3: 
      __label__ = 19; break; //@line 27 "lstring.c"
    case 4: 
      var $12=$2; //@line 28 "lstring.c"
      var $13=((($12)+(1))|0); //@line 28 "lstring.c"
      var $14=(($13)>>>0) <= 1073741823; //@line 28 "lstring.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 28 "lstring.c"
    case 5: 
      var $16=$1; //@line 28 "lstring.c"
      var $17=$2; //@line 28 "lstring.c"
      var $18=((($17<<2))|0); //@line 28 "lstring.c"
      var $19=__Z13luaM_realloc_P9lua_StatePvjj($16, 0, 0, $18); //@line 28 "lstring.c"
      var $24 = $19;__label__ = 7; break; //@line 28 "lstring.c"
    case 6: 
      var $21=$1; //@line 28 "lstring.c"
      var $22=__Z11luaM_toobigP9lua_State($21); //@line 28 "lstring.c"
      var $24 = $22;__label__ = 7; break; //@line 28 "lstring.c"
    case 7: 
      var $24; //@line 28 "lstring.c"
      var $25=$24; //@line 28 "lstring.c"
      $newhash=$25; //@line 28 "lstring.c"
      var $26=$1; //@line 29 "lstring.c"
      var $27=(($26+16)|0); //@line 29 "lstring.c"
      var $28=HEAP32[(($27)>>2)]; //@line 29 "lstring.c"
      var $29=(($28)|0); //@line 29 "lstring.c"
      $tb=$29; //@line 29 "lstring.c"
      $i=0; //@line 30 "lstring.c"
      __label__ = 8; break; //@line 30 "lstring.c"
    case 8: 
      var $31=$i; //@line 30 "lstring.c"
      var $32=$2; //@line 30 "lstring.c"
      var $33=(($31)|0) < (($32)|0); //@line 30 "lstring.c"
      if ($33) { __label__ = 9; break; } else { __label__ = 11; break; } //@line 30 "lstring.c"
    case 9: 
      var $35=$i; //@line 30 "lstring.c"
      var $36=$newhash; //@line 30 "lstring.c"
      var $37=(($36+($35<<2))|0); //@line 30 "lstring.c"
      HEAP32[(($37)>>2)]=0; //@line 30 "lstring.c"
      __label__ = 10; break; //@line 30 "lstring.c"
    case 10: 
      var $39=$i; //@line 30 "lstring.c"
      var $40=((($39)+(1))|0); //@line 30 "lstring.c"
      $i=$40; //@line 30 "lstring.c"
      __label__ = 8; break; //@line 30 "lstring.c"
    case 11: 
      $i=0; //@line 32 "lstring.c"
      __label__ = 12; break; //@line 32 "lstring.c"
    case 12: 
      var $43=$i; //@line 32 "lstring.c"
      var $44=$tb; //@line 32 "lstring.c"
      var $45=(($44+8)|0); //@line 32 "lstring.c"
      var $46=HEAP32[(($45)>>2)]; //@line 32 "lstring.c"
      var $47=(($43)|0) < (($46)|0); //@line 32 "lstring.c"
      if ($47) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 32 "lstring.c"
    case 13: 
      var $49=$i; //@line 33 "lstring.c"
      var $50=$tb; //@line 33 "lstring.c"
      var $51=(($50)|0); //@line 33 "lstring.c"
      var $52=HEAP32[(($51)>>2)]; //@line 33 "lstring.c"
      var $53=(($52+($49<<2))|0); //@line 33 "lstring.c"
      var $54=HEAP32[(($53)>>2)]; //@line 33 "lstring.c"
      $p=$54; //@line 33 "lstring.c"
      __label__ = 14; break; //@line 34 "lstring.c"
    case 14: 
      var $56=$p; //@line 34 "lstring.c"
      var $57=(($56)|0)!=0; //@line 34 "lstring.c"
      if ($57) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 34 "lstring.c"
    case 15: 
      var $59=$p; //@line 35 "lstring.c"
      var $60=$59; //@line 35 "lstring.c"
      var $61=(($60)|0); //@line 35 "lstring.c"
      var $62=HEAP32[(($61)>>2)]; //@line 35 "lstring.c"
      $next=$62; //@line 35 "lstring.c"
      var $63=$p; //@line 36 "lstring.c"
      var $64=$63; //@line 36 "lstring.c"
      var $65=$64; //@line 36 "lstring.c"
      var $66=(($65+8)|0); //@line 36 "lstring.c"
      var $67=HEAP32[(($66)>>2)]; //@line 36 "lstring.c"
      $h=$67; //@line 36 "lstring.c"
      var $68=$h; //@line 37 "lstring.c"
      var $69=$2; //@line 37 "lstring.c"
      var $70=((($69)-(1))|0); //@line 37 "lstring.c"
      var $71=$68 & $70; //@line 37 "lstring.c"
      $h1=$71; //@line 37 "lstring.c"
      var $72=$h1; //@line 39 "lstring.c"
      var $73=$newhash; //@line 39 "lstring.c"
      var $74=(($73+($72<<2))|0); //@line 39 "lstring.c"
      var $75=HEAP32[(($74)>>2)]; //@line 39 "lstring.c"
      var $76=$p; //@line 39 "lstring.c"
      var $77=$76; //@line 39 "lstring.c"
      var $78=(($77)|0); //@line 39 "lstring.c"
      HEAP32[(($78)>>2)]=$75; //@line 39 "lstring.c"
      var $79=$p; //@line 40 "lstring.c"
      var $80=$h1; //@line 40 "lstring.c"
      var $81=$newhash; //@line 40 "lstring.c"
      var $82=(($81+($80<<2))|0); //@line 40 "lstring.c"
      HEAP32[(($82)>>2)]=$79; //@line 40 "lstring.c"
      var $83=$next; //@line 41 "lstring.c"
      $p=$83; //@line 41 "lstring.c"
      __label__ = 14; break; //@line 42 "lstring.c"
    case 16: 
      __label__ = 17; break; //@line 43 "lstring.c"
    case 17: 
      var $86=$i; //@line 32 "lstring.c"
      var $87=((($86)+(1))|0); //@line 32 "lstring.c"
      $i=$87; //@line 32 "lstring.c"
      __label__ = 12; break; //@line 32 "lstring.c"
    case 18: 
      var $89=$1; //@line 44 "lstring.c"
      var $90=$tb; //@line 44 "lstring.c"
      var $91=(($90)|0); //@line 44 "lstring.c"
      var $92=HEAP32[(($91)>>2)]; //@line 44 "lstring.c"
      var $93=$92; //@line 44 "lstring.c"
      var $94=$tb; //@line 44 "lstring.c"
      var $95=(($94+8)|0); //@line 44 "lstring.c"
      var $96=HEAP32[(($95)>>2)]; //@line 44 "lstring.c"
      var $97=((($96<<2))|0); //@line 44 "lstring.c"
      var $98=__Z13luaM_realloc_P9lua_StatePvjj($89, $93, $97, 0); //@line 44 "lstring.c"
      var $99=$2; //@line 45 "lstring.c"
      var $100=$tb; //@line 45 "lstring.c"
      var $101=(($100+8)|0); //@line 45 "lstring.c"
      HEAP32[(($101)>>2)]=$99; //@line 45 "lstring.c"
      var $102=$newhash; //@line 46 "lstring.c"
      var $103=$tb; //@line 46 "lstring.c"
      var $104=(($103)|0); //@line 46 "lstring.c"
      HEAP32[(($104)>>2)]=$102; //@line 46 "lstring.c"
      __label__ = 19; break; //@line 47 "lstring.c"
    case 19: 
      ;
      return; //@line 47 "lstring.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaS_resizeP9lua_Statei["X"]=1;

function __Z12luaS_newlstrP9lua_StatePKcj($L, $str, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $o;
      var $h;
      var $step;
      var $l1;
      var $ts;
      $2=$L;
      $3=$str;
      $4=$l;
      var $5=$4; //@line 77 "lstring.c"
      $h=$5; //@line 77 "lstring.c"
      var $6=$4; //@line 78 "lstring.c"
      var $7=$6 >>> 5; //@line 78 "lstring.c"
      var $8=((($7)+(1))|0); //@line 78 "lstring.c"
      $step=$8; //@line 78 "lstring.c"
      var $9=$4; //@line 80 "lstring.c"
      $l1=$9; //@line 80 "lstring.c"
      __label__ = 3; break; //@line 80 "lstring.c"
    case 3: 
      var $11=$l1; //@line 80 "lstring.c"
      var $12=$step; //@line 80 "lstring.c"
      var $13=(($11)>>>0) >= (($12)>>>0); //@line 80 "lstring.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 80 "lstring.c"
    case 4: 
      var $15=$h; //@line 81 "lstring.c"
      var $16=$h; //@line 81 "lstring.c"
      var $17=$16 << 5; //@line 81 "lstring.c"
      var $18=$h; //@line 81 "lstring.c"
      var $19=$18 >>> 2; //@line 81 "lstring.c"
      var $20=((($17)+($19))|0); //@line 81 "lstring.c"
      var $21=$l1; //@line 81 "lstring.c"
      var $22=((($21)-(1))|0); //@line 81 "lstring.c"
      var $23=$3; //@line 81 "lstring.c"
      var $24=(($23+$22)|0); //@line 81 "lstring.c"
      var $25=HEAPU8[($24)]; //@line 81 "lstring.c"
      var $26=(($25)&255); //@line 81 "lstring.c"
      var $27=((($20)+($26))|0); //@line 81 "lstring.c"
      var $28=$15 ^ $27; //@line 81 "lstring.c"
      $h=$28; //@line 81 "lstring.c"
      __label__ = 5; break; //@line 81 "lstring.c"
    case 5: 
      var $30=$step; //@line 80 "lstring.c"
      var $31=$l1; //@line 80 "lstring.c"
      var $32=((($31)-($30))|0); //@line 80 "lstring.c"
      $l1=$32; //@line 80 "lstring.c"
      __label__ = 3; break; //@line 80 "lstring.c"
    case 6: 
      var $34=$h; //@line 82 "lstring.c"
      var $35=$2; //@line 82 "lstring.c"
      var $36=(($35+16)|0); //@line 82 "lstring.c"
      var $37=HEAP32[(($36)>>2)]; //@line 82 "lstring.c"
      var $38=(($37)|0); //@line 82 "lstring.c"
      var $39=(($38+8)|0); //@line 82 "lstring.c"
      var $40=HEAP32[(($39)>>2)]; //@line 82 "lstring.c"
      var $41=((($40)-(1))|0); //@line 82 "lstring.c"
      var $42=$34 & $41; //@line 82 "lstring.c"
      var $43=$2; //@line 82 "lstring.c"
      var $44=(($43+16)|0); //@line 82 "lstring.c"
      var $45=HEAP32[(($44)>>2)]; //@line 82 "lstring.c"
      var $46=(($45)|0); //@line 82 "lstring.c"
      var $47=(($46)|0); //@line 82 "lstring.c"
      var $48=HEAP32[(($47)>>2)]; //@line 82 "lstring.c"
      var $49=(($48+($42<<2))|0); //@line 82 "lstring.c"
      var $50=HEAP32[(($49)>>2)]; //@line 82 "lstring.c"
      $o=$50; //@line 82 "lstring.c"
      __label__ = 7; break; //@line 82 "lstring.c"
    case 7: 
      var $52=$o; //@line 82 "lstring.c"
      var $53=(($52)|0)!=0; //@line 82 "lstring.c"
      if ($53) { __label__ = 8; break; } else { __label__ = 15; break; } //@line 82 "lstring.c"
    case 8: 
      var $55=$o; //@line 85 "lstring.c"
      var $56=$55; //@line 85 "lstring.c"
      $ts=$56; //@line 85 "lstring.c"
      var $57=$ts; //@line 86 "lstring.c"
      var $58=$57; //@line 86 "lstring.c"
      var $59=(($58+12)|0); //@line 86 "lstring.c"
      var $60=HEAP32[(($59)>>2)]; //@line 86 "lstring.c"
      var $61=$4; //@line 86 "lstring.c"
      var $62=(($60)|0)==(($61)|0); //@line 86 "lstring.c"
      if ($62) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 86 "lstring.c"
    case 9: 
      var $64=$3; //@line 86 "lstring.c"
      var $65=$ts; //@line 86 "lstring.c"
      var $66=(($65+16)|0); //@line 86 "lstring.c"
      var $67=$66; //@line 86 "lstring.c"
      var $68=$4; //@line 86 "lstring.c"
      var $69=_memcmp($64, $67, $68); //@line 86 "lstring.c"
      var $70=(($69)|0)==0; //@line 86 "lstring.c"
      if ($70) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 86 "lstring.c"
    case 10: 
      var $72=$o; //@line 88 "lstring.c"
      var $73=$72; //@line 88 "lstring.c"
      var $74=(($73+5)|0); //@line 88 "lstring.c"
      var $75=HEAPU8[($74)]; //@line 88 "lstring.c"
      var $76=(($75)&255); //@line 88 "lstring.c"
      var $77=$2; //@line 88 "lstring.c"
      var $78=(($77+16)|0); //@line 88 "lstring.c"
      var $79=HEAP32[(($78)>>2)]; //@line 88 "lstring.c"
      var $80=(($79+20)|0); //@line 88 "lstring.c"
      var $81=HEAPU8[($80)]; //@line 88 "lstring.c"
      var $82=(($81)&255); //@line 88 "lstring.c"
      var $83=$82 ^ 3; //@line 88 "lstring.c"
      var $84=$76 & $83; //@line 88 "lstring.c"
      var $85=$84 & 3; //@line 88 "lstring.c"
      var $86=(($85)|0)!=0; //@line 88 "lstring.c"
      if ($86) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 88 "lstring.c"
    case 11: 
      var $88=$o; //@line 88 "lstring.c"
      var $89=$88; //@line 88 "lstring.c"
      var $90=(($89+5)|0); //@line 88 "lstring.c"
      var $91=HEAPU8[($90)]; //@line 88 "lstring.c"
      var $92=(($91)&255); //@line 88 "lstring.c"
      var $93=$92 ^ 3; //@line 88 "lstring.c"
      var $94=(($93) & 255); //@line 88 "lstring.c"
      HEAP8[($90)]=$94; //@line 88 "lstring.c"
      __label__ = 12; break; //@line 88 "lstring.c"
    case 12: 
      var $96=$ts; //@line 89 "lstring.c"
      $1=$96; //@line 89 "lstring.c"
      __label__ = 16; break; //@line 89 "lstring.c"
    case 13: 
      __label__ = 14; break; //@line 91 "lstring.c"
    case 14: 
      var $99=$o; //@line 84 "lstring.c"
      var $100=$99; //@line 84 "lstring.c"
      var $101=(($100)|0); //@line 84 "lstring.c"
      var $102=HEAP32[(($101)>>2)]; //@line 84 "lstring.c"
      $o=$102; //@line 84 "lstring.c"
      __label__ = 7; break; //@line 84 "lstring.c"
    case 15: 
      var $104=$2; //@line 92 "lstring.c"
      var $105=$3; //@line 92 "lstring.c"
      var $106=$4; //@line 92 "lstring.c"
      var $107=$h; //@line 92 "lstring.c"
      var $108=__Z7newlstrP9lua_StatePKcjj($104, $105, $106, $107); //@line 92 "lstring.c"
      $1=$108; //@line 92 "lstring.c"
      __label__ = 16; break; //@line 92 "lstring.c"
    case 16: 
      var $110=$1; //@line 93 "lstring.c"
      ;
      return $110; //@line 93 "lstring.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12luaS_newlstrP9lua_StatePKcj["X"]=1;

function __Z7newlstrP9lua_StatePKcjj($L, $str, $l, $h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ts;
      var $tb;
      $1=$L;
      $2=$str;
      $3=$l;
      $4=$h;
      var $5=$3; //@line 54 "lstring.c"
      var $6=((($5)+(1))|0); //@line 54 "lstring.c"
      var $7=(($6)>>>0) > 4294967277; //@line 54 "lstring.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 54 "lstring.c"
    case 3: 
      var $9=$1; //@line 55 "lstring.c"
      var $10=__Z11luaM_toobigP9lua_State($9); //@line 55 "lstring.c"
      __label__ = 4; break; //@line 55 "lstring.c"
    case 4: 
      var $12=$1; //@line 56 "lstring.c"
      var $13=$3; //@line 56 "lstring.c"
      var $14=((($13)+(1))|0); //@line 56 "lstring.c"
      var $15=(($14)|0); //@line 56 "lstring.c"
      var $16=((($15)+(16))|0); //@line 56 "lstring.c"
      var $17=__Z13luaM_realloc_P9lua_StatePvjj($12, 0, 0, $16); //@line 56 "lstring.c"
      var $18=$17; //@line 56 "lstring.c"
      $ts=$18; //@line 56 "lstring.c"
      var $19=$3; //@line 57 "lstring.c"
      var $20=$ts; //@line 57 "lstring.c"
      var $21=$20; //@line 57 "lstring.c"
      var $22=(($21+12)|0); //@line 57 "lstring.c"
      HEAP32[(($22)>>2)]=$19; //@line 57 "lstring.c"
      var $23=$4; //@line 58 "lstring.c"
      var $24=$ts; //@line 58 "lstring.c"
      var $25=$24; //@line 58 "lstring.c"
      var $26=(($25+8)|0); //@line 58 "lstring.c"
      HEAP32[(($26)>>2)]=$23; //@line 58 "lstring.c"
      var $27=$1; //@line 59 "lstring.c"
      var $28=(($27+16)|0); //@line 59 "lstring.c"
      var $29=HEAP32[(($28)>>2)]; //@line 59 "lstring.c"
      var $30=(($29+20)|0); //@line 59 "lstring.c"
      var $31=HEAPU8[($30)]; //@line 59 "lstring.c"
      var $32=(($31)&255); //@line 59 "lstring.c"
      var $33=$32 & 3; //@line 59 "lstring.c"
      var $34=(($33) & 255); //@line 59 "lstring.c"
      var $35=$ts; //@line 59 "lstring.c"
      var $36=$35; //@line 59 "lstring.c"
      var $37=(($36+5)|0); //@line 59 "lstring.c"
      HEAP8[($37)]=$34; //@line 59 "lstring.c"
      var $38=$ts; //@line 60 "lstring.c"
      var $39=$38; //@line 60 "lstring.c"
      var $40=(($39+4)|0); //@line 60 "lstring.c"
      HEAP8[($40)]=4; //@line 60 "lstring.c"
      var $41=$ts; //@line 61 "lstring.c"
      var $42=$41; //@line 61 "lstring.c"
      var $43=(($42+6)|0); //@line 61 "lstring.c"
      HEAP8[($43)]=0; //@line 61 "lstring.c"
      var $44=$ts; //@line 62 "lstring.c"
      var $45=(($44+16)|0); //@line 62 "lstring.c"
      var $46=$45; //@line 62 "lstring.c"
      var $47=$2; //@line 62 "lstring.c"
      var $48=$3; //@line 62 "lstring.c"
      var $49=(($48)|0); //@line 62 "lstring.c"
      _memcpy($46, $47, $49, 1); //@line 62 "lstring.c"
      var $50=$3; //@line 63 "lstring.c"
      var $51=$ts; //@line 63 "lstring.c"
      var $52=(($51+16)|0); //@line 63 "lstring.c"
      var $53=$52; //@line 63 "lstring.c"
      var $54=(($53+$50)|0); //@line 63 "lstring.c"
      HEAP8[($54)]=0; //@line 63 "lstring.c"
      var $55=$1; //@line 64 "lstring.c"
      var $56=(($55+16)|0); //@line 64 "lstring.c"
      var $57=HEAP32[(($56)>>2)]; //@line 64 "lstring.c"
      var $58=(($57)|0); //@line 64 "lstring.c"
      $tb=$58; //@line 64 "lstring.c"
      var $59=$4; //@line 65 "lstring.c"
      var $60=$tb; //@line 65 "lstring.c"
      var $61=(($60+8)|0); //@line 65 "lstring.c"
      var $62=HEAP32[(($61)>>2)]; //@line 65 "lstring.c"
      var $63=((($62)-(1))|0); //@line 65 "lstring.c"
      var $64=$59 & $63; //@line 65 "lstring.c"
      $4=$64; //@line 65 "lstring.c"
      var $65=$4; //@line 66 "lstring.c"
      var $66=$tb; //@line 66 "lstring.c"
      var $67=(($66)|0); //@line 66 "lstring.c"
      var $68=HEAP32[(($67)>>2)]; //@line 66 "lstring.c"
      var $69=(($68+($65<<2))|0); //@line 66 "lstring.c"
      var $70=HEAP32[(($69)>>2)]; //@line 66 "lstring.c"
      var $71=$ts; //@line 66 "lstring.c"
      var $72=$71; //@line 66 "lstring.c"
      var $73=(($72)|0); //@line 66 "lstring.c"
      HEAP32[(($73)>>2)]=$70; //@line 66 "lstring.c"
      var $74=$ts; //@line 67 "lstring.c"
      var $75=$74; //@line 67 "lstring.c"
      var $76=$4; //@line 67 "lstring.c"
      var $77=$tb; //@line 67 "lstring.c"
      var $78=(($77)|0); //@line 67 "lstring.c"
      var $79=HEAP32[(($78)>>2)]; //@line 67 "lstring.c"
      var $80=(($79+($76<<2))|0); //@line 67 "lstring.c"
      HEAP32[(($80)>>2)]=$75; //@line 67 "lstring.c"
      var $81=$tb; //@line 68 "lstring.c"
      var $82=(($81+4)|0); //@line 68 "lstring.c"
      var $83=HEAP32[(($82)>>2)]; //@line 68 "lstring.c"
      var $84=((($83)+(1))|0); //@line 68 "lstring.c"
      HEAP32[(($82)>>2)]=$84; //@line 68 "lstring.c"
      var $85=$tb; //@line 69 "lstring.c"
      var $86=(($85+4)|0); //@line 69 "lstring.c"
      var $87=HEAPU32[(($86)>>2)]; //@line 69 "lstring.c"
      var $88=$tb; //@line 69 "lstring.c"
      var $89=(($88+8)|0); //@line 69 "lstring.c"
      var $90=HEAPU32[(($89)>>2)]; //@line 69 "lstring.c"
      var $91=(($87)>>>0) > (($90)>>>0); //@line 69 "lstring.c"
      if ($91) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 69 "lstring.c"
    case 5: 
      var $93=$tb; //@line 69 "lstring.c"
      var $94=(($93+8)|0); //@line 69 "lstring.c"
      var $95=HEAP32[(($94)>>2)]; //@line 69 "lstring.c"
      var $96=(($95)|0) <= 1073741822; //@line 69 "lstring.c"
      if ($96) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 69 "lstring.c"
    case 6: 
      var $98=$1; //@line 70 "lstring.c"
      var $99=$tb; //@line 70 "lstring.c"
      var $100=(($99+8)|0); //@line 70 "lstring.c"
      var $101=HEAP32[(($100)>>2)]; //@line 70 "lstring.c"
      var $102=((($101<<1))|0); //@line 70 "lstring.c"
      __Z11luaS_resizeP9lua_Statei($98, $102); //@line 70 "lstring.c"
      __label__ = 7; break; //@line 70 "lstring.c"
    case 7: 
      var $104=$ts; //@line 71 "lstring.c"
      ;
      return $104; //@line 71 "lstring.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7newlstrP9lua_StatePKcjj["X"]=1;

function __Z13luaS_newudataP9lua_StatejP5Table($L, $s, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $u;
      $1=$L;
      $2=$s;
      $3=$e;
      var $4=$2; //@line 98 "lstring.c"
      var $5=(($4)>>>0) > 4294967273; //@line 98 "lstring.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 98 "lstring.c"
    case 3: 
      var $7=$1; //@line 99 "lstring.c"
      var $8=__Z11luaM_toobigP9lua_State($7); //@line 99 "lstring.c"
      __label__ = 4; break; //@line 99 "lstring.c"
    case 4: 
      var $10=$1; //@line 100 "lstring.c"
      var $11=$2; //@line 100 "lstring.c"
      var $12=((($11)+(20))|0); //@line 100 "lstring.c"
      var $13=__Z13luaM_realloc_P9lua_StatePvjj($10, 0, 0, $12); //@line 100 "lstring.c"
      var $14=$13; //@line 100 "lstring.c"
      $u=$14; //@line 100 "lstring.c"
      var $15=$1; //@line 101 "lstring.c"
      var $16=(($15+16)|0); //@line 101 "lstring.c"
      var $17=HEAP32[(($16)>>2)]; //@line 101 "lstring.c"
      var $18=(($17+20)|0); //@line 101 "lstring.c"
      var $19=HEAPU8[($18)]; //@line 101 "lstring.c"
      var $20=(($19)&255); //@line 101 "lstring.c"
      var $21=$20 & 3; //@line 101 "lstring.c"
      var $22=(($21) & 255); //@line 101 "lstring.c"
      var $23=$u; //@line 101 "lstring.c"
      var $24=$23; //@line 101 "lstring.c"
      var $25=(($24+5)|0); //@line 101 "lstring.c"
      HEAP8[($25)]=$22; //@line 101 "lstring.c"
      var $26=$u; //@line 102 "lstring.c"
      var $27=$26; //@line 102 "lstring.c"
      var $28=(($27+4)|0); //@line 102 "lstring.c"
      HEAP8[($28)]=7; //@line 102 "lstring.c"
      var $29=$2; //@line 103 "lstring.c"
      var $30=$u; //@line 103 "lstring.c"
      var $31=$30; //@line 103 "lstring.c"
      var $32=(($31+16)|0); //@line 103 "lstring.c"
      HEAP32[(($32)>>2)]=$29; //@line 103 "lstring.c"
      var $33=$u; //@line 104 "lstring.c"
      var $34=$33; //@line 104 "lstring.c"
      var $35=(($34+8)|0); //@line 104 "lstring.c"
      HEAP32[(($35)>>2)]=0; //@line 104 "lstring.c"
      var $36=$3; //@line 105 "lstring.c"
      var $37=$u; //@line 105 "lstring.c"
      var $38=$37; //@line 105 "lstring.c"
      var $39=(($38+12)|0); //@line 105 "lstring.c"
      HEAP32[(($39)>>2)]=$36; //@line 105 "lstring.c"
      var $40=$1; //@line 107 "lstring.c"
      var $41=(($40+16)|0); //@line 107 "lstring.c"
      var $42=HEAP32[(($41)>>2)]; //@line 107 "lstring.c"
      var $43=(($42+104)|0); //@line 107 "lstring.c"
      var $44=HEAP32[(($43)>>2)]; //@line 107 "lstring.c"
      var $45=(($44)|0); //@line 107 "lstring.c"
      var $46=HEAP32[(($45)>>2)]; //@line 107 "lstring.c"
      var $47=$u; //@line 107 "lstring.c"
      var $48=$47; //@line 107 "lstring.c"
      var $49=(($48)|0); //@line 107 "lstring.c"
      HEAP32[(($49)>>2)]=$46; //@line 107 "lstring.c"
      var $50=$u; //@line 108 "lstring.c"
      var $51=$50; //@line 108 "lstring.c"
      var $52=$1; //@line 108 "lstring.c"
      var $53=(($52+16)|0); //@line 108 "lstring.c"
      var $54=HEAP32[(($53)>>2)]; //@line 108 "lstring.c"
      var $55=(($54+104)|0); //@line 108 "lstring.c"
      var $56=HEAP32[(($55)>>2)]; //@line 108 "lstring.c"
      var $57=(($56)|0); //@line 108 "lstring.c"
      HEAP32[(($57)>>2)]=$51; //@line 108 "lstring.c"
      var $58=$u; //@line 109 "lstring.c"
      ;
      return $58; //@line 109 "lstring.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaS_newudataP9lua_StatejP5Table["X"]=1;

function __Z9luaH_nextP9lua_StateP5TableP10lua_TValue($L, $t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $i_o;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $o23;
      var $o14;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$2; //@line 163 "ltable.c"
      var $6=$3; //@line 163 "ltable.c"
      var $7=$4; //@line 163 "ltable.c"
      var $8=__Z9findindexP9lua_StateP5TableP10lua_TValue($5, $6, $7); //@line 163 "ltable.c"
      $i=$8; //@line 163 "ltable.c"
      var $9=$i; //@line 164 "ltable.c"
      var $10=((($9)+(1))|0); //@line 164 "ltable.c"
      $i=$10; //@line 164 "ltable.c"
      __label__ = 3; break; //@line 164 "ltable.c"
    case 3: 
      var $12=$i; //@line 164 "ltable.c"
      var $13=$3; //@line 164 "ltable.c"
      var $14=(($13+28)|0); //@line 164 "ltable.c"
      var $15=HEAP32[(($14)>>2)]; //@line 164 "ltable.c"
      var $16=(($12)|0) < (($15)|0); //@line 164 "ltable.c"
      if ($16) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 164 "ltable.c"
    case 4: 
      var $18=$i; //@line 165 "ltable.c"
      var $19=$3; //@line 165 "ltable.c"
      var $20=(($19+12)|0); //@line 165 "ltable.c"
      var $21=HEAP32[(($20)>>2)]; //@line 165 "ltable.c"
      var $22=(($21+($18)*(12))|0); //@line 165 "ltable.c"
      var $23=(($22+8)|0); //@line 165 "ltable.c"
      var $24=HEAP32[(($23)>>2)]; //@line 165 "ltable.c"
      var $25=(($24)|0)==0; //@line 165 "ltable.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 165 "ltable.c"
    case 5: 
      var $27=$4; //@line 166 "ltable.c"
      $i_o=$27; //@line 166 "ltable.c"
      var $28=$i; //@line 166 "ltable.c"
      var $29=((($28)+(1))|0); //@line 166 "ltable.c"
      var $30=(($29)|0); //@line 166 "ltable.c"
      var $31=$i_o; //@line 166 "ltable.c"
      var $32=(($31)|0); //@line 166 "ltable.c"
      var $33=$32; //@line 166 "ltable.c"
      (tempDoubleF64[0]=$30,HEAP32[(($33)>>2)]=tempDoubleI32[0],HEAP32[((($33)+(4))>>2)]=tempDoubleI32[1]); //@line 166 "ltable.c"
      var $34=$i_o; //@line 166 "ltable.c"
      var $35=(($34+8)|0); //@line 166 "ltable.c"
      HEAP32[(($35)>>2)]=3; //@line 166 "ltable.c"
      var $36=$i; //@line 167 "ltable.c"
      var $37=$3; //@line 167 "ltable.c"
      var $38=(($37+12)|0); //@line 167 "ltable.c"
      var $39=HEAP32[(($38)>>2)]; //@line 167 "ltable.c"
      var $40=(($39+($36)*(12))|0); //@line 167 "ltable.c"
      $o2=$40; //@line 167 "ltable.c"
      var $41=$4; //@line 167 "ltable.c"
      var $42=(($41+12)|0); //@line 167 "ltable.c"
      $o1=$42; //@line 167 "ltable.c"
      var $43=$o1; //@line 167 "ltable.c"
      var $44=(($43)|0); //@line 167 "ltable.c"
      var $45=$o2; //@line 167 "ltable.c"
      var $46=(($45)|0); //@line 167 "ltable.c"
      var $47=$44; //@line 167 "ltable.c"
      var $48=$46; //@line 167 "ltable.c"
      HEAP32[(($47)>>2)]=HEAP32[(($48)>>2)];HEAP32[((($47)+(4))>>2)]=HEAP32[((($48)+(4))>>2)]; //@line 167 "ltable.c"
      var $49=$o2; //@line 167 "ltable.c"
      var $50=(($49+8)|0); //@line 167 "ltable.c"
      var $51=HEAP32[(($50)>>2)]; //@line 167 "ltable.c"
      var $52=$o1; //@line 167 "ltable.c"
      var $53=(($52+8)|0); //@line 167 "ltable.c"
      HEAP32[(($53)>>2)]=$51; //@line 167 "ltable.c"
      $1=1; //@line 168 "ltable.c"
      __label__ = 15; break; //@line 168 "ltable.c"
    case 6: 
      __label__ = 7; break; //@line 170 "ltable.c"
    case 7: 
      var $56=$i; //@line 164 "ltable.c"
      var $57=((($56)+(1))|0); //@line 164 "ltable.c"
      $i=$57; //@line 164 "ltable.c"
      __label__ = 3; break; //@line 164 "ltable.c"
    case 8: 
      var $59=$3; //@line 171 "ltable.c"
      var $60=(($59+28)|0); //@line 171 "ltable.c"
      var $61=HEAP32[(($60)>>2)]; //@line 171 "ltable.c"
      var $62=$i; //@line 171 "ltable.c"
      var $63=((($62)-($61))|0); //@line 171 "ltable.c"
      $i=$63; //@line 171 "ltable.c"
      __label__ = 9; break; //@line 171 "ltable.c"
    case 9: 
      var $65=$i; //@line 171 "ltable.c"
      var $66=$3; //@line 171 "ltable.c"
      var $67=(($66+7)|0); //@line 171 "ltable.c"
      var $68=HEAPU8[($67)]; //@line 171 "ltable.c"
      var $69=(($68)&255); //@line 171 "ltable.c"
      var $70=1 << $69; //@line 171 "ltable.c"
      var $71=(($65)|0) < (($70)|0); //@line 171 "ltable.c"
      if ($71) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 171 "ltable.c"
    case 10: 
      var $73=$i; //@line 172 "ltable.c"
      var $74=$3; //@line 172 "ltable.c"
      var $75=(($74+16)|0); //@line 172 "ltable.c"
      var $76=HEAP32[(($75)>>2)]; //@line 172 "ltable.c"
      var $77=(($76+($73)*(28))|0); //@line 172 "ltable.c"
      var $78=(($77)|0); //@line 172 "ltable.c"
      var $79=(($78+8)|0); //@line 172 "ltable.c"
      var $80=HEAP32[(($79)>>2)]; //@line 172 "ltable.c"
      var $81=(($80)|0)==0; //@line 172 "ltable.c"
      if ($81) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 172 "ltable.c"
    case 11: 
      var $83=$i; //@line 173 "ltable.c"
      var $84=$3; //@line 173 "ltable.c"
      var $85=(($84+16)|0); //@line 173 "ltable.c"
      var $86=HEAP32[(($85)>>2)]; //@line 173 "ltable.c"
      var $87=(($86+($83)*(28))|0); //@line 173 "ltable.c"
      var $88=(($87+12)|0); //@line 173 "ltable.c"
      var $89=$88; //@line 173 "ltable.c"
      $o21=$89; //@line 173 "ltable.c"
      var $90=$4; //@line 173 "ltable.c"
      $o12=$90; //@line 173 "ltable.c"
      var $91=$o12; //@line 173 "ltable.c"
      var $92=(($91)|0); //@line 173 "ltable.c"
      var $93=$o21; //@line 173 "ltable.c"
      var $94=(($93)|0); //@line 173 "ltable.c"
      var $95=$92; //@line 173 "ltable.c"
      var $96=$94; //@line 173 "ltable.c"
      HEAP32[(($95)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($95)+(4))>>2)]=HEAP32[((($96)+(4))>>2)]; //@line 173 "ltable.c"
      var $97=$o21; //@line 173 "ltable.c"
      var $98=(($97+8)|0); //@line 173 "ltable.c"
      var $99=HEAP32[(($98)>>2)]; //@line 173 "ltable.c"
      var $100=$o12; //@line 173 "ltable.c"
      var $101=(($100+8)|0); //@line 173 "ltable.c"
      HEAP32[(($101)>>2)]=$99; //@line 173 "ltable.c"
      var $102=$i; //@line 174 "ltable.c"
      var $103=$3; //@line 174 "ltable.c"
      var $104=(($103+16)|0); //@line 174 "ltable.c"
      var $105=HEAP32[(($104)>>2)]; //@line 174 "ltable.c"
      var $106=(($105+($102)*(28))|0); //@line 174 "ltable.c"
      var $107=(($106)|0); //@line 174 "ltable.c"
      $o23=$107; //@line 174 "ltable.c"
      var $108=$4; //@line 174 "ltable.c"
      var $109=(($108+12)|0); //@line 174 "ltable.c"
      $o14=$109; //@line 174 "ltable.c"
      var $110=$o14; //@line 174 "ltable.c"
      var $111=(($110)|0); //@line 174 "ltable.c"
      var $112=$o23; //@line 174 "ltable.c"
      var $113=(($112)|0); //@line 174 "ltable.c"
      var $114=$111; //@line 174 "ltable.c"
      var $115=$113; //@line 174 "ltable.c"
      HEAP32[(($114)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($114)+(4))>>2)]=HEAP32[((($115)+(4))>>2)]; //@line 174 "ltable.c"
      var $116=$o23; //@line 174 "ltable.c"
      var $117=(($116+8)|0); //@line 174 "ltable.c"
      var $118=HEAP32[(($117)>>2)]; //@line 174 "ltable.c"
      var $119=$o14; //@line 174 "ltable.c"
      var $120=(($119+8)|0); //@line 174 "ltable.c"
      HEAP32[(($120)>>2)]=$118; //@line 174 "ltable.c"
      $1=1; //@line 175 "ltable.c"
      __label__ = 15; break; //@line 175 "ltable.c"
    case 12: 
      __label__ = 13; break; //@line 177 "ltable.c"
    case 13: 
      var $123=$i; //@line 171 "ltable.c"
      var $124=((($123)+(1))|0); //@line 171 "ltable.c"
      $i=$124; //@line 171 "ltable.c"
      __label__ = 9; break; //@line 171 "ltable.c"
    case 14: 
      $1=0; //@line 178 "ltable.c"
      __label__ = 15; break; //@line 178 "ltable.c"
    case 15: 
      var $127=$1; //@line 179 "ltable.c"
      ;
      return $127; //@line 179 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9luaH_nextP9lua_StateP5TableP10lua_TValue["X"]=1;

function __Z9findindexP9lua_StateP5TableP10lua_TValue($L, $t, $key) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $n;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$4; //@line 139 "ltable.c"
      var $6=(($5+8)|0); //@line 139 "ltable.c"
      var $7=HEAP32[(($6)>>2)]; //@line 139 "ltable.c"
      var $8=(($7)|0)==0; //@line 139 "ltable.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 139 "ltable.c"
    case 3: 
      $1=-1; //@line 139 "ltable.c"
      __label__ = 17; break; //@line 139 "ltable.c"
    case 4: 
      var $11=$4; //@line 140 "ltable.c"
      var $12=__Z10arrayindexPK10lua_TValue($11); //@line 140 "ltable.c"
      $i=$12; //@line 140 "ltable.c"
      var $13=$i; //@line 141 "ltable.c"
      var $14=0 < (($13)|0); //@line 141 "ltable.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 141 "ltable.c"
    case 5: 
      var $16=$i; //@line 141 "ltable.c"
      var $17=$3; //@line 141 "ltable.c"
      var $18=(($17+28)|0); //@line 141 "ltable.c"
      var $19=HEAP32[(($18)>>2)]; //@line 141 "ltable.c"
      var $20=(($16)|0) <= (($19)|0); //@line 141 "ltable.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 141 "ltable.c"
    case 6: 
      var $22=$i; //@line 142 "ltable.c"
      var $23=((($22)-(1))|0); //@line 142 "ltable.c"
      $1=$23; //@line 142 "ltable.c"
      __label__ = 17; break; //@line 142 "ltable.c"
    case 7: 
      var $25=$3; //@line 144 "ltable.c"
      var $26=$4; //@line 144 "ltable.c"
      var $27=__Z12mainpositionPK5TablePK10lua_TValue($25, $26); //@line 144 "ltable.c"
      $n=$27; //@line 144 "ltable.c"
      __label__ = 8; break; //@line 145 "ltable.c"
    case 8: 
      var $29=$n; //@line 147 "ltable.c"
      var $30=(($29+12)|0); //@line 147 "ltable.c"
      var $31=$30; //@line 147 "ltable.c"
      var $32=$4; //@line 147 "ltable.c"
      var $33=__Z16luaO_rawequalObjPK10lua_TValueS1_($31, $32); //@line 147 "ltable.c"
      var $34=(($33)|0)!=0; //@line 147 "ltable.c"
      if ($34) { __label__ = 12; break; } else { __label__ = 9; break; } //@line 147 "ltable.c"
    case 9: 
      var $36=$n; //@line 147 "ltable.c"
      var $37=(($36+12)|0); //@line 147 "ltable.c"
      var $38=$37; //@line 147 "ltable.c"
      var $39=(($38+8)|0); //@line 147 "ltable.c"
      var $40=HEAP32[(($39)>>2)]; //@line 147 "ltable.c"
      var $41=(($40)|0)==11; //@line 147 "ltable.c"
      if ($41) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 147 "ltable.c"
    case 10: 
      var $43=$4; //@line 147 "ltable.c"
      var $44=(($43+8)|0); //@line 147 "ltable.c"
      var $45=HEAP32[(($44)>>2)]; //@line 147 "ltable.c"
      var $46=(($45)|0) >= 4; //@line 147 "ltable.c"
      if ($46) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 147 "ltable.c"
    case 11: 
      var $48=$n; //@line 147 "ltable.c"
      var $49=(($48+12)|0); //@line 147 "ltable.c"
      var $50=$49; //@line 147 "ltable.c"
      var $51=(($50)|0); //@line 147 "ltable.c"
      var $52=$51; //@line 147 "ltable.c"
      var $53=HEAP32[(($52)>>2)]; //@line 147 "ltable.c"
      var $54=$4; //@line 147 "ltable.c"
      var $55=(($54)|0); //@line 147 "ltable.c"
      var $56=$55; //@line 147 "ltable.c"
      var $57=HEAP32[(($56)>>2)]; //@line 147 "ltable.c"
      var $58=(($53)|0)==(($57)|0); //@line 147 "ltable.c"
      if ($58) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 147 "ltable.c"
    case 12: 
      var $60=$n; //@line 150 "ltable.c"
      var $61=$3; //@line 150 "ltable.c"
      var $62=(($61+16)|0); //@line 150 "ltable.c"
      var $63=HEAP32[(($62)>>2)]; //@line 150 "ltable.c"
      var $64=(($63)|0); //@line 150 "ltable.c"
      var $65=$60; //@line 150 "ltable.c"
      var $66=$64; //@line 150 "ltable.c"
      var $67=((($65)-($66))|0); //@line 150 "ltable.c"
      var $68=((((($67)|0))/(28))&-1); //@line 150 "ltable.c"
      $i=$68; //@line 150 "ltable.c"
      var $69=$i; //@line 152 "ltable.c"
      var $70=$3; //@line 152 "ltable.c"
      var $71=(($70+28)|0); //@line 152 "ltable.c"
      var $72=HEAP32[(($71)>>2)]; //@line 152 "ltable.c"
      var $73=((($69)+($72))|0); //@line 152 "ltable.c"
      $1=$73; //@line 152 "ltable.c"
      __label__ = 17; break; //@line 152 "ltable.c"
    case 13: 
      var $75=$n; //@line 154 "ltable.c"
      var $76=(($75+12)|0); //@line 154 "ltable.c"
      var $77=$76; //@line 154 "ltable.c"
      var $78=(($77+12)|0); //@line 154 "ltable.c"
      var $79=HEAP32[(($78)>>2)]; //@line 154 "ltable.c"
      $n=$79; //@line 154 "ltable.c"
      __label__ = 14; break; //@line 154 "ltable.c"
    case 14: 
      __label__ = 15; break; //@line 155 "ltable.c"
    case 15: 
      var $82=$n; //@line 155 "ltable.c"
      var $83=(($82)|0)!=0; //@line 155 "ltable.c"
      if ($83) { __label__ = 8; break; } else { __label__ = 16; break; } //@line 155 "ltable.c"
    case 16: 
      var $85=$2; //@line 156 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($85, ((STRING_TABLE.__str3167)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 156 "ltable.c"
      $1=0; //@line 157 "ltable.c"
      __label__ = 17; break; //@line 157 "ltable.c"
    case 17: 
      var $87=$1; //@line 159 "ltable.c"
      STACKTOP = __stackBase__;
      return $87; //@line 159 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9findindexP9lua_StateP5TableP10lua_TValue["X"]=1;

function __Z16luaH_resizearrayP9lua_StateP5Tablei($L, $t, $nasize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nsize;
      $1=$L;
      $2=$t;
      $3=$nasize;
      var $4=$2; //@line 328 "ltable.c"
      var $5=(($4+16)|0); //@line 328 "ltable.c"
      var $6=HEAP32[(($5)>>2)]; //@line 328 "ltable.c"
      var $7=(($6)|0)==((__ZL10dummynode_)|0); //@line 328 "ltable.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 328 "ltable.c"
    case 3: 
      var $16 = 0;__label__ = 5; break; //@line 328 "ltable.c"
    case 4: 
      var $10=$2; //@line 328 "ltable.c"
      var $11=(($10+7)|0); //@line 328 "ltable.c"
      var $12=HEAPU8[($11)]; //@line 328 "ltable.c"
      var $13=(($12)&255); //@line 328 "ltable.c"
      var $14=1 << $13; //@line 328 "ltable.c"
      var $16 = $14;__label__ = 5; break; //@line 328 "ltable.c"
    case 5: 
      var $16; //@line 328 "ltable.c"
      $nsize=$16; //@line 328 "ltable.c"
      var $17=$1; //@line 329 "ltable.c"
      var $18=$2; //@line 329 "ltable.c"
      var $19=$3; //@line 329 "ltable.c"
      var $20=$nsize; //@line 329 "ltable.c"
      __Z6resizeP9lua_StateP5Tableii($17, $18, $19, $20); //@line 329 "ltable.c"
      ;
      return; //@line 330 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaH_getstrP5TableP7TString($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      $2=$t;
      $3=$key;
      var $4=$3; //@line 456 "ltable.c"
      var $5=$4; //@line 456 "ltable.c"
      var $6=(($5+8)|0); //@line 456 "ltable.c"
      var $7=HEAP32[(($6)>>2)]; //@line 456 "ltable.c"
      var $8=$2; //@line 456 "ltable.c"
      var $9=(($8+7)|0); //@line 456 "ltable.c"
      var $10=HEAPU8[($9)]; //@line 456 "ltable.c"
      var $11=(($10)&255); //@line 456 "ltable.c"
      var $12=1 << $11; //@line 456 "ltable.c"
      var $13=((($12)-(1))|0); //@line 456 "ltable.c"
      var $14=$7 & $13; //@line 456 "ltable.c"
      var $15=$2; //@line 456 "ltable.c"
      var $16=(($15+16)|0); //@line 456 "ltable.c"
      var $17=HEAP32[(($16)>>2)]; //@line 456 "ltable.c"
      var $18=(($17+($14)*(28))|0); //@line 456 "ltable.c"
      $n=$18; //@line 456 "ltable.c"
      __label__ = 3; break; //@line 457 "ltable.c"
    case 3: 
      var $20=$n; //@line 458 "ltable.c"
      var $21=(($20+12)|0); //@line 458 "ltable.c"
      var $22=$21; //@line 458 "ltable.c"
      var $23=(($22+8)|0); //@line 458 "ltable.c"
      var $24=HEAP32[(($23)>>2)]; //@line 458 "ltable.c"
      var $25=(($24)|0)==4; //@line 458 "ltable.c"
      if ($25) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 458 "ltable.c"
    case 4: 
      var $27=$n; //@line 458 "ltable.c"
      var $28=(($27+12)|0); //@line 458 "ltable.c"
      var $29=$28; //@line 458 "ltable.c"
      var $30=(($29)|0); //@line 458 "ltable.c"
      var $31=$30; //@line 458 "ltable.c"
      var $32=HEAP32[(($31)>>2)]; //@line 458 "ltable.c"
      var $33=$32; //@line 458 "ltable.c"
      var $34=$3; //@line 458 "ltable.c"
      var $35=(($33)|0)==(($34)|0); //@line 458 "ltable.c"
      if ($35) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 458 "ltable.c"
    case 5: 
      var $37=$n; //@line 459 "ltable.c"
      var $38=(($37)|0); //@line 459 "ltable.c"
      $1=$38; //@line 459 "ltable.c"
      __label__ = 10; break; //@line 459 "ltable.c"
    case 6: 
      var $40=$n; //@line 460 "ltable.c"
      var $41=(($40+12)|0); //@line 460 "ltable.c"
      var $42=$41; //@line 460 "ltable.c"
      var $43=(($42+12)|0); //@line 460 "ltable.c"
      var $44=HEAP32[(($43)>>2)]; //@line 460 "ltable.c"
      $n=$44; //@line 460 "ltable.c"
      __label__ = 7; break; //@line 460 "ltable.c"
    case 7: 
      __label__ = 8; break; //@line 461 "ltable.c"
    case 8: 
      var $47=$n; //@line 461 "ltable.c"
      var $48=(($47)|0)!=0; //@line 461 "ltable.c"
      if ($48) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 461 "ltable.c"
    case 9: 
      $1=_luaO_nilobject_; //@line 462 "ltable.c"
      __label__ = 10; break; //@line 462 "ltable.c"
    case 10: 
      var $51=$1; //@line 463 "ltable.c"
      ;
      return $51; //@line 463 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaH_getstrP5TableP7TString["X"]=1;

function __Z6resizeP9lua_StateP5Tableii($L, $t, $nasize, $nhsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $oldasize;
      var $oldhsize;
      var $nold;
      var $o2;
      var $o1;
      var $old;
      var $o21;
      var $o12;
      $1=$L;
      $2=$t;
      $3=$nasize;
      $4=$nhsize;
      var $5=$2; //@line 299 "ltable.c"
      var $6=(($5+28)|0); //@line 299 "ltable.c"
      var $7=HEAP32[(($6)>>2)]; //@line 299 "ltable.c"
      $oldasize=$7; //@line 299 "ltable.c"
      var $8=$2; //@line 300 "ltable.c"
      var $9=(($8+7)|0); //@line 300 "ltable.c"
      var $10=HEAPU8[($9)]; //@line 300 "ltable.c"
      var $11=(($10)&255); //@line 300 "ltable.c"
      $oldhsize=$11; //@line 300 "ltable.c"
      var $12=$2; //@line 301 "ltable.c"
      var $13=(($12+16)|0); //@line 301 "ltable.c"
      var $14=HEAP32[(($13)>>2)]; //@line 301 "ltable.c"
      $nold=$14; //@line 301 "ltable.c"
      var $15=$3; //@line 302 "ltable.c"
      var $16=$oldasize; //@line 302 "ltable.c"
      var $17=(($15)|0) > (($16)|0); //@line 302 "ltable.c"
      if ($17) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 302 "ltable.c"
    case 3: 
      var $19=$1; //@line 303 "ltable.c"
      var $20=$2; //@line 303 "ltable.c"
      var $21=$3; //@line 303 "ltable.c"
      __Z14setarrayvectorP9lua_StateP5Tablei($19, $20, $21); //@line 303 "ltable.c"
      __label__ = 4; break; //@line 303 "ltable.c"
    case 4: 
      var $23=$1; //@line 305 "ltable.c"
      var $24=$2; //@line 305 "ltable.c"
      var $25=$4; //@line 305 "ltable.c"
      __Z13setnodevectorP9lua_StateP5Tablei($23, $24, $25); //@line 305 "ltable.c"
      var $26=$3; //@line 306 "ltable.c"
      var $27=$oldasize; //@line 306 "ltable.c"
      var $28=(($26)|0) < (($27)|0); //@line 306 "ltable.c"
      if ($28) { __label__ = 5; break; } else { __label__ = 15; break; } //@line 306 "ltable.c"
    case 5: 
      var $30=$3; //@line 307 "ltable.c"
      var $31=$2; //@line 307 "ltable.c"
      var $32=(($31+28)|0); //@line 307 "ltable.c"
      HEAP32[(($32)>>2)]=$30; //@line 307 "ltable.c"
      var $33=$3; //@line 309 "ltable.c"
      $i=$33; //@line 309 "ltable.c"
      __label__ = 6; break; //@line 309 "ltable.c"
    case 6: 
      var $35=$i; //@line 309 "ltable.c"
      var $36=$oldasize; //@line 309 "ltable.c"
      var $37=(($35)|0) < (($36)|0); //@line 309 "ltable.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 309 "ltable.c"
    case 7: 
      var $39=$i; //@line 310 "ltable.c"
      var $40=$2; //@line 310 "ltable.c"
      var $41=(($40+12)|0); //@line 310 "ltable.c"
      var $42=HEAP32[(($41)>>2)]; //@line 310 "ltable.c"
      var $43=(($42+($39)*(12))|0); //@line 310 "ltable.c"
      var $44=(($43+8)|0); //@line 310 "ltable.c"
      var $45=HEAP32[(($44)>>2)]; //@line 310 "ltable.c"
      var $46=(($45)|0)==0; //@line 310 "ltable.c"
      if ($46) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 310 "ltable.c"
    case 8: 
      var $48=$i; //@line 311 "ltable.c"
      var $49=$2; //@line 311 "ltable.c"
      var $50=(($49+12)|0); //@line 311 "ltable.c"
      var $51=HEAP32[(($50)>>2)]; //@line 311 "ltable.c"
      var $52=(($51+($48)*(12))|0); //@line 311 "ltable.c"
      $o2=$52; //@line 311 "ltable.c"
      var $53=$1; //@line 311 "ltable.c"
      var $54=$2; //@line 311 "ltable.c"
      var $55=$i; //@line 311 "ltable.c"
      var $56=((($55)+(1))|0); //@line 311 "ltable.c"
      var $57=__Z11luaH_setnumP9lua_StateP5Tablei($53, $54, $56); //@line 311 "ltable.c"
      $o1=$57; //@line 311 "ltable.c"
      var $58=$o1; //@line 311 "ltable.c"
      var $59=(($58)|0); //@line 311 "ltable.c"
      var $60=$o2; //@line 311 "ltable.c"
      var $61=(($60)|0); //@line 311 "ltable.c"
      var $62=$59; //@line 311 "ltable.c"
      var $63=$61; //@line 311 "ltable.c"
      HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)]; //@line 311 "ltable.c"
      var $64=$o2; //@line 311 "ltable.c"
      var $65=(($64+8)|0); //@line 311 "ltable.c"
      var $66=HEAP32[(($65)>>2)]; //@line 311 "ltable.c"
      var $67=$o1; //@line 311 "ltable.c"
      var $68=(($67+8)|0); //@line 311 "ltable.c"
      HEAP32[(($68)>>2)]=$66; //@line 311 "ltable.c"
      __label__ = 9; break; //@line 311 "ltable.c"
    case 9: 
      __label__ = 10; break; //@line 312 "ltable.c"
    case 10: 
      var $71=$i; //@line 309 "ltable.c"
      var $72=((($71)+(1))|0); //@line 309 "ltable.c"
      $i=$72; //@line 309 "ltable.c"
      __label__ = 6; break; //@line 309 "ltable.c"
    case 11: 
      var $74=$3; //@line 314 "ltable.c"
      var $75=((($74)+(1))|0); //@line 314 "ltable.c"
      var $76=(($75)>>>0) <= 357913941; //@line 314 "ltable.c"
      if ($76) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 314 "ltable.c"
    case 12: 
      var $78=$1; //@line 314 "ltable.c"
      var $79=$2; //@line 314 "ltable.c"
      var $80=(($79+12)|0); //@line 314 "ltable.c"
      var $81=HEAP32[(($80)>>2)]; //@line 314 "ltable.c"
      var $82=$81; //@line 314 "ltable.c"
      var $83=$oldasize; //@line 314 "ltable.c"
      var $84=((($83)*(12))|0); //@line 314 "ltable.c"
      var $85=$3; //@line 314 "ltable.c"
      var $86=((($85)*(12))|0); //@line 314 "ltable.c"
      var $87=__Z13luaM_realloc_P9lua_StatePvjj($78, $82, $84, $86); //@line 314 "ltable.c"
      var $92 = $87;__label__ = 14; break; //@line 314 "ltable.c"
    case 13: 
      var $89=$1; //@line 314 "ltable.c"
      var $90=__Z11luaM_toobigP9lua_State($89); //@line 314 "ltable.c"
      var $92 = $90;__label__ = 14; break; //@line 314 "ltable.c"
    case 14: 
      var $92; //@line 314 "ltable.c"
      var $93=$92; //@line 314 "ltable.c"
      var $94=$2; //@line 314 "ltable.c"
      var $95=(($94+12)|0); //@line 314 "ltable.c"
      HEAP32[(($95)>>2)]=$93; //@line 314 "ltable.c"
      __label__ = 15; break; //@line 315 "ltable.c"
    case 15: 
      var $97=$oldhsize; //@line 317 "ltable.c"
      var $98=1 << $97; //@line 317 "ltable.c"
      var $99=((($98)-(1))|0); //@line 317 "ltable.c"
      $i=$99; //@line 317 "ltable.c"
      __label__ = 16; break; //@line 317 "ltable.c"
    case 16: 
      var $101=$i; //@line 317 "ltable.c"
      var $102=(($101)|0) >= 0; //@line 317 "ltable.c"
      if ($102) { __label__ = 17; break; } else { __label__ = 21; break; } //@line 317 "ltable.c"
    case 17: 
      var $104=$nold; //@line 318 "ltable.c"
      var $105=$i; //@line 318 "ltable.c"
      var $106=(($104+($105)*(28))|0); //@line 318 "ltable.c"
      $old=$106; //@line 318 "ltable.c"
      var $107=$old; //@line 319 "ltable.c"
      var $108=(($107)|0); //@line 319 "ltable.c"
      var $109=(($108+8)|0); //@line 319 "ltable.c"
      var $110=HEAP32[(($109)>>2)]; //@line 319 "ltable.c"
      var $111=(($110)|0)==0; //@line 319 "ltable.c"
      if ($111) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 319 "ltable.c"
    case 18: 
      var $113=$old; //@line 320 "ltable.c"
      var $114=(($113)|0); //@line 320 "ltable.c"
      $o21=$114; //@line 320 "ltable.c"
      var $115=$1; //@line 320 "ltable.c"
      var $116=$2; //@line 320 "ltable.c"
      var $117=$old; //@line 320 "ltable.c"
      var $118=(($117+12)|0); //@line 320 "ltable.c"
      var $119=$118; //@line 320 "ltable.c"
      var $120=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($115, $116, $119); //@line 320 "ltable.c"
      $o12=$120; //@line 320 "ltable.c"
      var $121=$o12; //@line 320 "ltable.c"
      var $122=(($121)|0); //@line 320 "ltable.c"
      var $123=$o21; //@line 320 "ltable.c"
      var $124=(($123)|0); //@line 320 "ltable.c"
      var $125=$122; //@line 320 "ltable.c"
      var $126=$124; //@line 320 "ltable.c"
      HEAP32[(($125)>>2)]=HEAP32[(($126)>>2)];HEAP32[((($125)+(4))>>2)]=HEAP32[((($126)+(4))>>2)]; //@line 320 "ltable.c"
      var $127=$o21; //@line 320 "ltable.c"
      var $128=(($127+8)|0); //@line 320 "ltable.c"
      var $129=HEAP32[(($128)>>2)]; //@line 320 "ltable.c"
      var $130=$o12; //@line 320 "ltable.c"
      var $131=(($130+8)|0); //@line 320 "ltable.c"
      HEAP32[(($131)>>2)]=$129; //@line 320 "ltable.c"
      __label__ = 19; break; //@line 320 "ltable.c"
    case 19: 
      __label__ = 20; break; //@line 321 "ltable.c"
    case 20: 
      var $134=$i; //@line 317 "ltable.c"
      var $135=((($134)-(1))|0); //@line 317 "ltable.c"
      $i=$135; //@line 317 "ltable.c"
      __label__ = 16; break; //@line 317 "ltable.c"
    case 21: 
      var $137=$nold; //@line 322 "ltable.c"
      var $138=(($137)|0)!=((__ZL10dummynode_)|0); //@line 322 "ltable.c"
      if ($138) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 322 "ltable.c"
    case 22: 
      var $140=$1; //@line 323 "ltable.c"
      var $141=$nold; //@line 323 "ltable.c"
      var $142=$141; //@line 323 "ltable.c"
      var $143=$oldhsize; //@line 323 "ltable.c"
      var $144=1 << $143; //@line 323 "ltable.c"
      var $145=((($144)*(28))|0); //@line 323 "ltable.c"
      var $146=__Z13luaM_realloc_P9lua_StatePvjj($140, $142, $145, 0); //@line 323 "ltable.c"
      __label__ = 23; break; //@line 323 "ltable.c"
    case 23: 
      ;
      return; //@line 324 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6resizeP9lua_StateP5Tableii["X"]=1;

function __Z8luaH_newP9lua_Stateii($L, $narray, $nhash) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $t;
  $1=$L;
  $2=$narray;
  $3=$nhash;
  var $4=$1; //@line 359 "ltable.c"
  var $5=__Z13luaM_realloc_P9lua_StatePvjj($4, 0, 0, 32); //@line 359 "ltable.c"
  var $6=$5; //@line 359 "ltable.c"
  $t=$6; //@line 359 "ltable.c"
  var $7=$1; //@line 360 "ltable.c"
  var $8=$t; //@line 360 "ltable.c"
  var $9=$8; //@line 360 "ltable.c"
  __Z9luaC_linkP9lua_StateP8GCObjecth($7, $9, 5); //@line 360 "ltable.c"
  var $10=$t; //@line 361 "ltable.c"
  var $11=(($10+8)|0); //@line 361 "ltable.c"
  HEAP32[(($11)>>2)]=0; //@line 361 "ltable.c"
  var $12=$t; //@line 362 "ltable.c"
  var $13=(($12+6)|0); //@line 362 "ltable.c"
  HEAP8[($13)]=-1; //@line 362 "ltable.c"
  var $14=$t; //@line 364 "ltable.c"
  var $15=(($14+12)|0); //@line 364 "ltable.c"
  HEAP32[(($15)>>2)]=0; //@line 364 "ltable.c"
  var $16=$t; //@line 365 "ltable.c"
  var $17=(($16+28)|0); //@line 365 "ltable.c"
  HEAP32[(($17)>>2)]=0; //@line 365 "ltable.c"
  var $18=$t; //@line 366 "ltable.c"
  var $19=(($18+7)|0); //@line 366 "ltable.c"
  HEAP8[($19)]=0; //@line 366 "ltable.c"
  var $20=$t; //@line 367 "ltable.c"
  var $21=(($20+16)|0); //@line 367 "ltable.c"
  HEAP32[(($21)>>2)]=__ZL10dummynode_; //@line 367 "ltable.c"
  var $22=$1; //@line 368 "ltable.c"
  var $23=$t; //@line 368 "ltable.c"
  var $24=$2; //@line 368 "ltable.c"
  __Z14setarrayvectorP9lua_StateP5Tablei($22, $23, $24); //@line 368 "ltable.c"
  var $25=$1; //@line 369 "ltable.c"
  var $26=$t; //@line 369 "ltable.c"
  var $27=$3; //@line 369 "ltable.c"
  __Z13setnodevectorP9lua_StateP5Tablei($25, $26, $27); //@line 369 "ltable.c"
  var $28=$t; //@line 370 "ltable.c"
  ;
  return $28; //@line 370 "ltable.c"
}


function __Z14setarrayvectorP9lua_StateP5Tablei($L, $t, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $1=$L;
      $2=$t;
      $3=$size;
      var $4=$3; //@line 265 "ltable.c"
      var $5=((($4)+(1))|0); //@line 265 "ltable.c"
      var $6=(($5)>>>0) <= 357913941; //@line 265 "ltable.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 265 "ltable.c"
    case 3: 
      var $8=$1; //@line 265 "ltable.c"
      var $9=$2; //@line 265 "ltable.c"
      var $10=(($9+12)|0); //@line 265 "ltable.c"
      var $11=HEAP32[(($10)>>2)]; //@line 265 "ltable.c"
      var $12=$11; //@line 265 "ltable.c"
      var $13=$2; //@line 265 "ltable.c"
      var $14=(($13+28)|0); //@line 265 "ltable.c"
      var $15=HEAP32[(($14)>>2)]; //@line 265 "ltable.c"
      var $16=((($15)*(12))|0); //@line 265 "ltable.c"
      var $17=$3; //@line 265 "ltable.c"
      var $18=((($17)*(12))|0); //@line 265 "ltable.c"
      var $19=__Z13luaM_realloc_P9lua_StatePvjj($8, $12, $16, $18); //@line 265 "ltable.c"
      var $24 = $19;__label__ = 5; break; //@line 265 "ltable.c"
    case 4: 
      var $21=$1; //@line 265 "ltable.c"
      var $22=__Z11luaM_toobigP9lua_State($21); //@line 265 "ltable.c"
      var $24 = $22;__label__ = 5; break; //@line 265 "ltable.c"
    case 5: 
      var $24; //@line 265 "ltable.c"
      var $25=$24; //@line 265 "ltable.c"
      var $26=$2; //@line 265 "ltable.c"
      var $27=(($26+12)|0); //@line 265 "ltable.c"
      HEAP32[(($27)>>2)]=$25; //@line 265 "ltable.c"
      var $28=$2; //@line 266 "ltable.c"
      var $29=(($28+28)|0); //@line 266 "ltable.c"
      var $30=HEAP32[(($29)>>2)]; //@line 266 "ltable.c"
      $i=$30; //@line 266 "ltable.c"
      __label__ = 6; break; //@line 266 "ltable.c"
    case 6: 
      var $32=$i; //@line 266 "ltable.c"
      var $33=$3; //@line 266 "ltable.c"
      var $34=(($32)|0) < (($33)|0); //@line 266 "ltable.c"
      if ($34) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 266 "ltable.c"
    case 7: 
      var $36=$i; //@line 267 "ltable.c"
      var $37=$2; //@line 267 "ltable.c"
      var $38=(($37+12)|0); //@line 267 "ltable.c"
      var $39=HEAP32[(($38)>>2)]; //@line 267 "ltable.c"
      var $40=(($39+($36)*(12))|0); //@line 267 "ltable.c"
      var $41=(($40+8)|0); //@line 267 "ltable.c"
      HEAP32[(($41)>>2)]=0; //@line 267 "ltable.c"
      __label__ = 8; break; //@line 267 "ltable.c"
    case 8: 
      var $43=$i; //@line 266 "ltable.c"
      var $44=((($43)+(1))|0); //@line 266 "ltable.c"
      $i=$44; //@line 266 "ltable.c"
      __label__ = 6; break; //@line 266 "ltable.c"
    case 9: 
      var $46=$3; //@line 268 "ltable.c"
      var $47=$2; //@line 268 "ltable.c"
      var $48=(($47+28)|0); //@line 268 "ltable.c"
      HEAP32[(($48)>>2)]=$46; //@line 268 "ltable.c"
      ;
      return; //@line 269 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14setarrayvectorP9lua_StateP5Tablei["X"]=1;

function __Z13setnodevectorP9lua_StateP5Tablei($L, $t, $size) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lsize;
      var $i;
      var $n;
      $1=$L;
      $2=$t;
      $3=$size;
      var $4=$3; //@line 274 "ltable.c"
      var $5=(($4)|0)==0; //@line 274 "ltable.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 274 "ltable.c"
    case 3: 
      var $7=$2; //@line 275 "ltable.c"
      var $8=(($7+16)|0); //@line 275 "ltable.c"
      HEAP32[(($8)>>2)]=__ZL10dummynode_; //@line 275 "ltable.c"
      $lsize=0; //@line 276 "ltable.c"
      __label__ = 14; break; //@line 277 "ltable.c"
    case 4: 
      var $10=$3; //@line 280 "ltable.c"
      var $11=((($10)-(1))|0); //@line 280 "ltable.c"
      var $12=__Z9luaO_log2j($11); //@line 280 "ltable.c"
      var $13=((($12)+(1))|0); //@line 280 "ltable.c"
      $lsize=$13; //@line 280 "ltable.c"
      var $14=$lsize; //@line 281 "ltable.c"
      var $15=(($14)|0) > 26; //@line 281 "ltable.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 281 "ltable.c"
    case 5: 
      var $17=$1; //@line 282 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($17, ((STRING_TABLE.__str2166)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 282 "ltable.c"
      __label__ = 6; break; //@line 282 "ltable.c"
    case 6: 
      var $19=$lsize; //@line 283 "ltable.c"
      var $20=1 << $19; //@line 283 "ltable.c"
      $3=$20; //@line 283 "ltable.c"
      var $21=$3; //@line 284 "ltable.c"
      var $22=((($21)+(1))|0); //@line 284 "ltable.c"
      var $23=(($22)>>>0) <= 153391689; //@line 284 "ltable.c"
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 284 "ltable.c"
    case 7: 
      var $25=$1; //@line 284 "ltable.c"
      var $26=$3; //@line 284 "ltable.c"
      var $27=((($26)*(28))|0); //@line 284 "ltable.c"
      var $28=__Z13luaM_realloc_P9lua_StatePvjj($25, 0, 0, $27); //@line 284 "ltable.c"
      var $33 = $28;__label__ = 9; break; //@line 284 "ltable.c"
    case 8: 
      var $30=$1; //@line 284 "ltable.c"
      var $31=__Z11luaM_toobigP9lua_State($30); //@line 284 "ltable.c"
      var $33 = $31;__label__ = 9; break; //@line 284 "ltable.c"
    case 9: 
      var $33; //@line 284 "ltable.c"
      var $34=$33; //@line 284 "ltable.c"
      var $35=$2; //@line 284 "ltable.c"
      var $36=(($35+16)|0); //@line 284 "ltable.c"
      HEAP32[(($36)>>2)]=$34; //@line 284 "ltable.c"
      $i=0; //@line 285 "ltable.c"
      __label__ = 10; break; //@line 285 "ltable.c"
    case 10: 
      var $38=$i; //@line 285 "ltable.c"
      var $39=$3; //@line 285 "ltable.c"
      var $40=(($38)|0) < (($39)|0); //@line 285 "ltable.c"
      if ($40) { __label__ = 11; break; } else { __label__ = 13; break; } //@line 285 "ltable.c"
    case 11: 
      var $42=$i; //@line 286 "ltable.c"
      var $43=$2; //@line 286 "ltable.c"
      var $44=(($43+16)|0); //@line 286 "ltable.c"
      var $45=HEAP32[(($44)>>2)]; //@line 286 "ltable.c"
      var $46=(($45+($42)*(28))|0); //@line 286 "ltable.c"
      $n=$46; //@line 286 "ltable.c"
      var $47=$n; //@line 287 "ltable.c"
      var $48=(($47+12)|0); //@line 287 "ltable.c"
      var $49=$48; //@line 287 "ltable.c"
      var $50=(($49+12)|0); //@line 287 "ltable.c"
      HEAP32[(($50)>>2)]=0; //@line 287 "ltable.c"
      var $51=$n; //@line 288 "ltable.c"
      var $52=(($51+12)|0); //@line 288 "ltable.c"
      var $53=$52; //@line 288 "ltable.c"
      var $54=(($53+8)|0); //@line 288 "ltable.c"
      HEAP32[(($54)>>2)]=0; //@line 288 "ltable.c"
      var $55=$n; //@line 289 "ltable.c"
      var $56=(($55)|0); //@line 289 "ltable.c"
      var $57=(($56+8)|0); //@line 289 "ltable.c"
      HEAP32[(($57)>>2)]=0; //@line 289 "ltable.c"
      __label__ = 12; break; //@line 290 "ltable.c"
    case 12: 
      var $59=$i; //@line 285 "ltable.c"
      var $60=((($59)+(1))|0); //@line 285 "ltable.c"
      $i=$60; //@line 285 "ltable.c"
      __label__ = 10; break; //@line 285 "ltable.c"
    case 13: 
      __label__ = 14; break; //@line 291 "ltable.c"
    case 14: 
      var $63=$lsize; //@line 292 "ltable.c"
      var $64=(($63) & 255); //@line 292 "ltable.c"
      var $65=$2; //@line 292 "ltable.c"
      var $66=(($65+7)|0); //@line 292 "ltable.c"
      HEAP8[($66)]=$64; //@line 292 "ltable.c"
      var $67=$3; //@line 293 "ltable.c"
      var $68=$2; //@line 293 "ltable.c"
      var $69=(($68+16)|0); //@line 293 "ltable.c"
      var $70=HEAP32[(($69)>>2)]; //@line 293 "ltable.c"
      var $71=(($70+($67)*(28))|0); //@line 293 "ltable.c"
      var $72=$2; //@line 293 "ltable.c"
      var $73=(($72+20)|0); //@line 293 "ltable.c"
      HEAP32[(($73)>>2)]=$71; //@line 293 "ltable.c"
      STACKTOP = __stackBase__;
      return; //@line 294 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13setnodevectorP9lua_StateP5Tablei["X"]=1;

function __Z9luaH_freeP9lua_StateP5Table($L, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$t;
      var $3=$2; //@line 375 "ltable.c"
      var $4=(($3+16)|0); //@line 375 "ltable.c"
      var $5=HEAP32[(($4)>>2)]; //@line 375 "ltable.c"
      var $6=(($5)|0)!=((__ZL10dummynode_)|0); //@line 375 "ltable.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 375 "ltable.c"
    case 3: 
      var $8=$1; //@line 376 "ltable.c"
      var $9=$2; //@line 376 "ltable.c"
      var $10=(($9+16)|0); //@line 376 "ltable.c"
      var $11=HEAP32[(($10)>>2)]; //@line 376 "ltable.c"
      var $12=$11; //@line 376 "ltable.c"
      var $13=$2; //@line 376 "ltable.c"
      var $14=(($13+7)|0); //@line 376 "ltable.c"
      var $15=HEAPU8[($14)]; //@line 376 "ltable.c"
      var $16=(($15)&255); //@line 376 "ltable.c"
      var $17=1 << $16; //@line 376 "ltable.c"
      var $18=((($17)*(28))|0); //@line 376 "ltable.c"
      var $19=__Z13luaM_realloc_P9lua_StatePvjj($8, $12, $18, 0); //@line 376 "ltable.c"
      __label__ = 4; break; //@line 376 "ltable.c"
    case 4: 
      var $21=$1; //@line 377 "ltable.c"
      var $22=$2; //@line 377 "ltable.c"
      var $23=(($22+12)|0); //@line 377 "ltable.c"
      var $24=HEAP32[(($23)>>2)]; //@line 377 "ltable.c"
      var $25=$24; //@line 377 "ltable.c"
      var $26=$2; //@line 377 "ltable.c"
      var $27=(($26+28)|0); //@line 377 "ltable.c"
      var $28=HEAP32[(($27)>>2)]; //@line 377 "ltable.c"
      var $29=((($28)*(12))|0); //@line 377 "ltable.c"
      var $30=__Z13luaM_realloc_P9lua_StatePvjj($21, $25, $29, 0); //@line 377 "ltable.c"
      var $31=$1; //@line 378 "ltable.c"
      var $32=$2; //@line 378 "ltable.c"
      var $33=$32; //@line 378 "ltable.c"
      var $34=__Z13luaM_realloc_P9lua_StatePvjj($31, $33, 32, 0); //@line 378 "ltable.c"
      ;
      return; //@line 379 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaH_getnumP5Tablei($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nk;
      var $n;
      $2=$t;
      $3=$key;
      var $4=$3; //@line 437 "ltable.c"
      var $5=((($4)-(1))|0); //@line 437 "ltable.c"
      var $6=$2; //@line 437 "ltable.c"
      var $7=(($6+28)|0); //@line 437 "ltable.c"
      var $8=HEAPU32[(($7)>>2)]; //@line 437 "ltable.c"
      var $9=(($5)>>>0) < (($8)>>>0); //@line 437 "ltable.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 437 "ltable.c"
    case 3: 
      var $11=$3; //@line 438 "ltable.c"
      var $12=((($11)-(1))|0); //@line 438 "ltable.c"
      var $13=$2; //@line 438 "ltable.c"
      var $14=(($13+12)|0); //@line 438 "ltable.c"
      var $15=HEAP32[(($14)>>2)]; //@line 438 "ltable.c"
      var $16=(($15+($12)*(12))|0); //@line 438 "ltable.c"
      $1=$16; //@line 438 "ltable.c"
      __label__ = 12; break; //@line 438 "ltable.c"
    case 4: 
      var $18=$3; //@line 440 "ltable.c"
      var $19=(($18)|0); //@line 440 "ltable.c"
      $nk=$19; //@line 440 "ltable.c"
      var $20=$2; //@line 441 "ltable.c"
      var $21=$nk; //@line 441 "ltable.c"
      var $22=__Z7hashnumPK5Tabled($20, $21); //@line 441 "ltable.c"
      $n=$22; //@line 441 "ltable.c"
      __label__ = 5; break; //@line 442 "ltable.c"
    case 5: 
      var $24=$n; //@line 443 "ltable.c"
      var $25=(($24+12)|0); //@line 443 "ltable.c"
      var $26=$25; //@line 443 "ltable.c"
      var $27=(($26+8)|0); //@line 443 "ltable.c"
      var $28=HEAP32[(($27)>>2)]; //@line 443 "ltable.c"
      var $29=(($28)|0)==3; //@line 443 "ltable.c"
      if ($29) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 443 "ltable.c"
    case 6: 
      var $31=$n; //@line 443 "ltable.c"
      var $32=(($31+12)|0); //@line 443 "ltable.c"
      var $33=$32; //@line 443 "ltable.c"
      var $34=(($33)|0); //@line 443 "ltable.c"
      var $35=$34; //@line 443 "ltable.c"
      var $36=(tempDoubleI32[0]=HEAP32[(($35)>>2)],tempDoubleI32[1]=HEAP32[((($35)+(4))>>2)],tempDoubleF64[0]); //@line 443 "ltable.c"
      var $37=$nk; //@line 443 "ltable.c"
      var $38=$36 == $37; //@line 443 "ltable.c"
      if ($38) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 443 "ltable.c"
    case 7: 
      var $40=$n; //@line 444 "ltable.c"
      var $41=(($40)|0); //@line 444 "ltable.c"
      $1=$41; //@line 444 "ltable.c"
      __label__ = 12; break; //@line 444 "ltable.c"
    case 8: 
      var $43=$n; //@line 445 "ltable.c"
      var $44=(($43+12)|0); //@line 445 "ltable.c"
      var $45=$44; //@line 445 "ltable.c"
      var $46=(($45+12)|0); //@line 445 "ltable.c"
      var $47=HEAP32[(($46)>>2)]; //@line 445 "ltable.c"
      $n=$47; //@line 445 "ltable.c"
      __label__ = 9; break; //@line 445 "ltable.c"
    case 9: 
      __label__ = 10; break; //@line 446 "ltable.c"
    case 10: 
      var $50=$n; //@line 446 "ltable.c"
      var $51=(($50)|0)!=0; //@line 446 "ltable.c"
      if ($51) { __label__ = 5; break; } else { __label__ = 11; break; } //@line 446 "ltable.c"
    case 11: 
      $1=_luaO_nilobject_; //@line 447 "ltable.c"
      __label__ = 12; break; //@line 447 "ltable.c"
    case 12: 
      var $54=$1; //@line 449 "ltable.c"
      ;
      return $54; //@line 449 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaH_getnumP5Tablei["X"]=1;

function __Z7hashnumPK5Tabled($t, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; _memset(__stackBase__, 0, 16);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $a=(__stackBase__)+(8);
      var $i;
      $2=$t;
      (tempDoubleF64[0]=$n,HEAP32[(($3)>>2)]=tempDoubleI32[0],HEAP32[((($3)+(4))>>2)]=tempDoubleI32[1]);
      var $4=(tempDoubleI32[0]=HEAP32[(($3)>>2)],tempDoubleI32[1]=HEAP32[((($3)+(4))>>2)],tempDoubleF64[0]); //@line 87 "ltable.c"
      var $5=$4 == 0; //@line 87 "ltable.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 87 "ltable.c"
    case 3: 
      var $7=$2; //@line 88 "ltable.c"
      var $8=(($7+16)|0); //@line 88 "ltable.c"
      var $9=HEAP32[(($8)>>2)]; //@line 88 "ltable.c"
      var $10=(($9)|0); //@line 88 "ltable.c"
      $1=$10; //@line 88 "ltable.c"
      __label__ = 9; break; //@line 88 "ltable.c"
    case 4: 
      var $12=(($a)|0); //@line 89 "ltable.c"
      var $13=$12; //@line 89 "ltable.c"
      var $14=$3; //@line 89 "ltable.c"
      HEAP8[($13)]=HEAP8[($14)];HEAP8[(($13)+(1))]=HEAP8[(($14)+(1))];HEAP8[(($13)+(2))]=HEAP8[(($14)+(2))];HEAP8[(($13)+(3))]=HEAP8[(($14)+(3))];HEAP8[(($13)+(4))]=HEAP8[(($14)+(4))];HEAP8[(($13)+(5))]=HEAP8[(($14)+(5))];HEAP8[(($13)+(6))]=HEAP8[(($14)+(6))];HEAP8[(($13)+(7))]=HEAP8[(($14)+(7))]; //@line 89 "ltable.c"
      $i=1; //@line 90 "ltable.c"
      __label__ = 5; break; //@line 90 "ltable.c"
    case 5: 
      var $16=$i; //@line 90 "ltable.c"
      var $17=(($16)|0) < 2; //@line 90 "ltable.c"
      if ($17) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 90 "ltable.c"
    case 6: 
      var $19=$i; //@line 90 "ltable.c"
      var $20=(($a+($19<<2))|0); //@line 90 "ltable.c"
      var $21=HEAP32[(($20)>>2)]; //@line 90 "ltable.c"
      var $22=(($a)|0); //@line 90 "ltable.c"
      var $23=HEAP32[(($22)>>2)]; //@line 90 "ltable.c"
      var $24=((($23)+($21))|0); //@line 90 "ltable.c"
      HEAP32[(($22)>>2)]=$24; //@line 90 "ltable.c"
      __label__ = 7; break; //@line 90 "ltable.c"
    case 7: 
      var $26=$i; //@line 90 "ltable.c"
      var $27=((($26)+(1))|0); //@line 90 "ltable.c"
      $i=$27; //@line 90 "ltable.c"
      __label__ = 5; break; //@line 90 "ltable.c"
    case 8: 
      var $29=(($a)|0); //@line 91 "ltable.c"
      var $30=HEAPU32[(($29)>>2)]; //@line 91 "ltable.c"
      var $31=$2; //@line 91 "ltable.c"
      var $32=(($31+7)|0); //@line 91 "ltable.c"
      var $33=HEAPU8[($32)]; //@line 91 "ltable.c"
      var $34=(($33)&255); //@line 91 "ltable.c"
      var $35=1 << $34; //@line 91 "ltable.c"
      var $36=((($35)-(1))|0); //@line 91 "ltable.c"
      var $37=$36 | 1; //@line 91 "ltable.c"
      var $38=((($30)>>>0))%((($37)>>>0)); //@line 91 "ltable.c"
      var $39=$2; //@line 91 "ltable.c"
      var $40=(($39+16)|0); //@line 91 "ltable.c"
      var $41=HEAP32[(($40)>>2)]; //@line 91 "ltable.c"
      var $42=(($41+($38)*(28))|0); //@line 91 "ltable.c"
      $1=$42; //@line 91 "ltable.c"
      __label__ = 9; break; //@line 91 "ltable.c"
    case 9: 
      var $44=$1; //@line 92 "ltable.c"
      STACKTOP = __stackBase__;
      return $44; //@line 92 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7hashnumPK5Tabled["X"]=1;

function __Z8luaH_getP5TablePK10lua_TValue($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $k;
      var $n;
      var $n1;
      $2=$t;
      $3=$key;
      var $4=$3; //@line 470 "ltable.c"
      var $5=(($4+8)|0); //@line 470 "ltable.c"
      var $6=HEAP32[(($5)>>2)]; //@line 470 "ltable.c"
      if ((($6)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 4) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 3) {
        __label__ = 5; break;
      }
      else {
      __label__ = 8; break;
      }
      
    case 3: 
      $1=_luaO_nilobject_; //@line 471 "ltable.c"
      __label__ = 15; break; //@line 471 "ltable.c"
    case 4: 
      var $9=$2; //@line 472 "ltable.c"
      var $10=$3; //@line 472 "ltable.c"
      var $11=(($10)|0); //@line 472 "ltable.c"
      var $12=$11; //@line 472 "ltable.c"
      var $13=HEAP32[(($12)>>2)]; //@line 472 "ltable.c"
      var $14=$13; //@line 472 "ltable.c"
      var $15=__Z11luaH_getstrP5TableP7TString($9, $14); //@line 472 "ltable.c"
      $1=$15; //@line 472 "ltable.c"
      __label__ = 15; break; //@line 472 "ltable.c"
    case 5: 
      var $17=$3; //@line 475 "ltable.c"
      var $18=(($17)|0); //@line 475 "ltable.c"
      var $19=$18; //@line 475 "ltable.c"
      var $20=(tempDoubleI32[0]=HEAP32[(($19)>>2)],tempDoubleI32[1]=HEAP32[((($19)+(4))>>2)],tempDoubleF64[0]); //@line 475 "ltable.c"
      $n=$20; //@line 475 "ltable.c"
      var $21=$n; //@line 476 "ltable.c"
      var $22=(($21)&-1); //@line 476 "ltable.c"
      $k=$22; //@line 476 "ltable.c"
      var $23=$k; //@line 477 "ltable.c"
      var $24=(($23)|0); //@line 477 "ltable.c"
      var $25=$3; //@line 477 "ltable.c"
      var $26=(($25)|0); //@line 477 "ltable.c"
      var $27=$26; //@line 477 "ltable.c"
      var $28=(tempDoubleI32[0]=HEAP32[(($27)>>2)],tempDoubleI32[1]=HEAP32[((($27)+(4))>>2)],tempDoubleF64[0]); //@line 477 "ltable.c"
      var $29=$24 == $28; //@line 477 "ltable.c"
      if ($29) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 477 "ltable.c"
    case 6: 
      var $31=$2; //@line 478 "ltable.c"
      var $32=$k; //@line 478 "ltable.c"
      var $33=__Z11luaH_getnumP5Tablei($31, $32); //@line 478 "ltable.c"
      $1=$33; //@line 478 "ltable.c"
      __label__ = 15; break; //@line 478 "ltable.c"
    case 7: 
      __label__ = 8; break; //@line 480 "ltable.c"
    case 8: 
      var $36=$2; //@line 482 "ltable.c"
      var $37=$3; //@line 482 "ltable.c"
      var $38=__Z12mainpositionPK5TablePK10lua_TValue($36, $37); //@line 482 "ltable.c"
      $n1=$38; //@line 482 "ltable.c"
      __label__ = 9; break; //@line 483 "ltable.c"
    case 9: 
      var $40=$n1; //@line 484 "ltable.c"
      var $41=(($40+12)|0); //@line 484 "ltable.c"
      var $42=$41; //@line 484 "ltable.c"
      var $43=$3; //@line 484 "ltable.c"
      var $44=__Z16luaO_rawequalObjPK10lua_TValueS1_($42, $43); //@line 484 "ltable.c"
      var $45=(($44)|0)!=0; //@line 484 "ltable.c"
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 484 "ltable.c"
    case 10: 
      var $47=$n1; //@line 485 "ltable.c"
      var $48=(($47)|0); //@line 485 "ltable.c"
      $1=$48; //@line 485 "ltable.c"
      __label__ = 15; break; //@line 485 "ltable.c"
    case 11: 
      var $50=$n1; //@line 486 "ltable.c"
      var $51=(($50+12)|0); //@line 486 "ltable.c"
      var $52=$51; //@line 486 "ltable.c"
      var $53=(($52+12)|0); //@line 486 "ltable.c"
      var $54=HEAP32[(($53)>>2)]; //@line 486 "ltable.c"
      $n1=$54; //@line 486 "ltable.c"
      __label__ = 12; break; //@line 486 "ltable.c"
    case 12: 
      __label__ = 13; break; //@line 487 "ltable.c"
    case 13: 
      var $57=$n1; //@line 487 "ltable.c"
      var $58=(($57)|0)!=0; //@line 487 "ltable.c"
      if ($58) { __label__ = 9; break; } else { __label__ = 14; break; } //@line 487 "ltable.c"
    case 14: 
      $1=_luaO_nilobject_; //@line 488 "ltable.c"
      __label__ = 15; break; //@line 488 "ltable.c"
    case 15: 
      var $61=$1; //@line 491 "ltable.c"
      ;
      return $61; //@line 491 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8luaH_getP5TablePK10lua_TValue["X"]=1;

function __Z10getfreeposP5Table($t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$t;
      __label__ = 3; break; //@line 383 "ltable.c"
    case 3: 
      var $4=$2; //@line 383 "ltable.c"
      var $5=(($4+20)|0); //@line 383 "ltable.c"
      var $6=HEAPU32[(($5)>>2)]; //@line 383 "ltable.c"
      var $7=((($6)-(28))|0); //@line 383 "ltable.c"
      HEAP32[(($5)>>2)]=$7; //@line 383 "ltable.c"
      var $8=$2; //@line 383 "ltable.c"
      var $9=(($8+16)|0); //@line 383 "ltable.c"
      var $10=HEAPU32[(($9)>>2)]; //@line 383 "ltable.c"
      var $11=(($6)>>>0) > (($10)>>>0); //@line 383 "ltable.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 383 "ltable.c"
    case 4: 
      var $13=$2; //@line 384 "ltable.c"
      var $14=(($13+20)|0); //@line 384 "ltable.c"
      var $15=HEAP32[(($14)>>2)]; //@line 384 "ltable.c"
      var $16=(($15+12)|0); //@line 384 "ltable.c"
      var $17=$16; //@line 384 "ltable.c"
      var $18=(($17+8)|0); //@line 384 "ltable.c"
      var $19=HEAP32[(($18)>>2)]; //@line 384 "ltable.c"
      var $20=(($19)|0)==0; //@line 384 "ltable.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 384 "ltable.c"
    case 5: 
      var $22=$2; //@line 385 "ltable.c"
      var $23=(($22+20)|0); //@line 385 "ltable.c"
      var $24=HEAP32[(($23)>>2)]; //@line 385 "ltable.c"
      $1=$24; //@line 385 "ltable.c"
      __label__ = 8; break; //@line 385 "ltable.c"
    case 6: 
      __label__ = 3; break; //@line 386 "ltable.c"
    case 7: 
      $1=0; //@line 387 "ltable.c"
      __label__ = 8; break; //@line 387 "ltable.c"
    case 8: 
      var $28=$1; //@line 388 "ltable.c"
      ;
      return $28; //@line 388 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11numusearrayPK5TablePi($t, $nums) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $lg;
      var $ttlg;
      var $ause;
      var $i;
      var $lc;
      var $lim;
      $1=$t;
      $2=$nums;
      $ause=0; //@line 225 "ltable.c"
      $i=1; //@line 226 "ltable.c"
      $lg=0; //@line 227 "ltable.c"
      $ttlg=1; //@line 227 "ltable.c"
      __label__ = 3; break; //@line 227 "ltable.c"
    case 3: 
      var $4=$lg; //@line 227 "ltable.c"
      var $5=(($4)|0) <= 26; //@line 227 "ltable.c"
      if ($5) { __label__ = 4; break; } else { __label__ = 16; break; } //@line 227 "ltable.c"
    case 4: 
      $lc=0; //@line 228 "ltable.c"
      var $7=$ttlg; //@line 229 "ltable.c"
      $lim=$7; //@line 229 "ltable.c"
      var $8=$lim; //@line 230 "ltable.c"
      var $9=$1; //@line 230 "ltable.c"
      var $10=(($9+28)|0); //@line 230 "ltable.c"
      var $11=HEAP32[(($10)>>2)]; //@line 230 "ltable.c"
      var $12=(($8)|0) > (($11)|0); //@line 230 "ltable.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 230 "ltable.c"
    case 5: 
      var $14=$1; //@line 231 "ltable.c"
      var $15=(($14+28)|0); //@line 231 "ltable.c"
      var $16=HEAP32[(($15)>>2)]; //@line 231 "ltable.c"
      $lim=$16; //@line 231 "ltable.c"
      var $17=$i; //@line 232 "ltable.c"
      var $18=$lim; //@line 232 "ltable.c"
      var $19=(($17)|0) > (($18)|0); //@line 232 "ltable.c"
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 232 "ltable.c"
    case 6: 
      __label__ = 16; break; //@line 233 "ltable.c"
    case 7: 
      __label__ = 8; break; //@line 234 "ltable.c"
    case 8: 
      __label__ = 9; break; //@line 236 "ltable.c"
    case 9: 
      var $24=$i; //@line 236 "ltable.c"
      var $25=$lim; //@line 236 "ltable.c"
      var $26=(($24)|0) <= (($25)|0); //@line 236 "ltable.c"
      if ($26) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 236 "ltable.c"
    case 10: 
      var $28=$i; //@line 237 "ltable.c"
      var $29=((($28)-(1))|0); //@line 237 "ltable.c"
      var $30=$1; //@line 237 "ltable.c"
      var $31=(($30+12)|0); //@line 237 "ltable.c"
      var $32=HEAP32[(($31)>>2)]; //@line 237 "ltable.c"
      var $33=(($32+($29)*(12))|0); //@line 237 "ltable.c"
      var $34=(($33+8)|0); //@line 237 "ltable.c"
      var $35=HEAP32[(($34)>>2)]; //@line 237 "ltable.c"
      var $36=(($35)|0)==0; //@line 237 "ltable.c"
      if ($36) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 237 "ltable.c"
    case 11: 
      var $38=$lc; //@line 238 "ltable.c"
      var $39=((($38)+(1))|0); //@line 238 "ltable.c"
      $lc=$39; //@line 238 "ltable.c"
      __label__ = 12; break; //@line 238 "ltable.c"
    case 12: 
      __label__ = 13; break; //@line 239 "ltable.c"
    case 13: 
      var $42=$i; //@line 236 "ltable.c"
      var $43=((($42)+(1))|0); //@line 236 "ltable.c"
      $i=$43; //@line 236 "ltable.c"
      __label__ = 9; break; //@line 236 "ltable.c"
    case 14: 
      var $45=$lc; //@line 240 "ltable.c"
      var $46=$lg; //@line 240 "ltable.c"
      var $47=$2; //@line 240 "ltable.c"
      var $48=(($47+($46<<2))|0); //@line 240 "ltable.c"
      var $49=HEAP32[(($48)>>2)]; //@line 240 "ltable.c"
      var $50=((($49)+($45))|0); //@line 240 "ltable.c"
      HEAP32[(($48)>>2)]=$50; //@line 240 "ltable.c"
      var $51=$lc; //@line 241 "ltable.c"
      var $52=$ause; //@line 241 "ltable.c"
      var $53=((($52)+($51))|0); //@line 241 "ltable.c"
      $ause=$53; //@line 241 "ltable.c"
      __label__ = 15; break; //@line 242 "ltable.c"
    case 15: 
      var $55=$lg; //@line 227 "ltable.c"
      var $56=((($55)+(1))|0); //@line 227 "ltable.c"
      $lg=$56; //@line 227 "ltable.c"
      var $57=$ttlg; //@line 227 "ltable.c"
      var $58=((($57<<1))|0); //@line 227 "ltable.c"
      $ttlg=$58; //@line 227 "ltable.c"
      __label__ = 3; break; //@line 227 "ltable.c"
    case 16: 
      var $60=$ause; //@line 243 "ltable.c"
      ;
      return $60; //@line 243 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11numusearrayPK5TablePi["X"]=1;

function __Z12mainpositionPK5TablePK10lua_TValue($t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$t;
      $3=$key;
      var $4=$3; //@line 101 "ltable.c"
      var $5=(($4+8)|0); //@line 101 "ltable.c"
      var $6=HEAP32[(($5)>>2)]; //@line 101 "ltable.c"
      if ((($6)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 4) {
        __label__ = 4; break;
      }
      else if ((($6)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($6)|0) == 2) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $8=$2; //@line 103 "ltable.c"
      var $9=$3; //@line 103 "ltable.c"
      var $10=(($9)|0); //@line 103 "ltable.c"
      var $11=$10; //@line 103 "ltable.c"
      var $12=(tempDoubleI32[0]=HEAP32[(($11)>>2)],tempDoubleI32[1]=HEAP32[((($11)+(4))>>2)],tempDoubleF64[0]); //@line 103 "ltable.c"
      var $13=__Z7hashnumPK5Tabled($8, $12); //@line 103 "ltable.c"
      $1=$13; //@line 103 "ltable.c"
      __label__ = 8; break; //@line 103 "ltable.c"
    case 4: 
      var $15=$3; //@line 105 "ltable.c"
      var $16=(($15)|0); //@line 105 "ltable.c"
      var $17=$16; //@line 105 "ltable.c"
      var $18=HEAP32[(($17)>>2)]; //@line 105 "ltable.c"
      var $19=$18; //@line 105 "ltable.c"
      var $20=$19; //@line 105 "ltable.c"
      var $21=(($20+8)|0); //@line 105 "ltable.c"
      var $22=HEAP32[(($21)>>2)]; //@line 105 "ltable.c"
      var $23=$2; //@line 105 "ltable.c"
      var $24=(($23+7)|0); //@line 105 "ltable.c"
      var $25=HEAPU8[($24)]; //@line 105 "ltable.c"
      var $26=(($25)&255); //@line 105 "ltable.c"
      var $27=1 << $26; //@line 105 "ltable.c"
      var $28=((($27)-(1))|0); //@line 105 "ltable.c"
      var $29=$22 & $28; //@line 105 "ltable.c"
      var $30=$2; //@line 105 "ltable.c"
      var $31=(($30+16)|0); //@line 105 "ltable.c"
      var $32=HEAP32[(($31)>>2)]; //@line 105 "ltable.c"
      var $33=(($32+($29)*(28))|0); //@line 105 "ltable.c"
      $1=$33; //@line 105 "ltable.c"
      __label__ = 8; break; //@line 105 "ltable.c"
    case 5: 
      var $35=$3; //@line 107 "ltable.c"
      var $36=(($35)|0); //@line 107 "ltable.c"
      var $37=$36; //@line 107 "ltable.c"
      var $38=HEAP32[(($37)>>2)]; //@line 107 "ltable.c"
      var $39=$2; //@line 107 "ltable.c"
      var $40=(($39+7)|0); //@line 107 "ltable.c"
      var $41=HEAPU8[($40)]; //@line 107 "ltable.c"
      var $42=(($41)&255); //@line 107 "ltable.c"
      var $43=1 << $42; //@line 107 "ltable.c"
      var $44=((($43)-(1))|0); //@line 107 "ltable.c"
      var $45=$38 & $44; //@line 107 "ltable.c"
      var $46=$2; //@line 107 "ltable.c"
      var $47=(($46+16)|0); //@line 107 "ltable.c"
      var $48=HEAP32[(($47)>>2)]; //@line 107 "ltable.c"
      var $49=(($48+($45)*(28))|0); //@line 107 "ltable.c"
      $1=$49; //@line 107 "ltable.c"
      __label__ = 8; break; //@line 107 "ltable.c"
    case 6: 
      var $51=$3; //@line 109 "ltable.c"
      var $52=(($51)|0); //@line 109 "ltable.c"
      var $53=$52; //@line 109 "ltable.c"
      var $54=HEAP32[(($53)>>2)]; //@line 109 "ltable.c"
      var $55=$54; //@line 109 "ltable.c"
      var $56=$2; //@line 109 "ltable.c"
      var $57=(($56+7)|0); //@line 109 "ltable.c"
      var $58=HEAPU8[($57)]; //@line 109 "ltable.c"
      var $59=(($58)&255); //@line 109 "ltable.c"
      var $60=1 << $59; //@line 109 "ltable.c"
      var $61=((($60)-(1))|0); //@line 109 "ltable.c"
      var $62=$61 | 1; //@line 109 "ltable.c"
      var $63=((($55)>>>0))%((($62)>>>0)); //@line 109 "ltable.c"
      var $64=$2; //@line 109 "ltable.c"
      var $65=(($64+16)|0); //@line 109 "ltable.c"
      var $66=HEAP32[(($65)>>2)]; //@line 109 "ltable.c"
      var $67=(($66+($63)*(28))|0); //@line 109 "ltable.c"
      $1=$67; //@line 109 "ltable.c"
      __label__ = 8; break; //@line 109 "ltable.c"
    case 7: 
      var $69=$3; //@line 111 "ltable.c"
      var $70=(($69)|0); //@line 111 "ltable.c"
      var $71=$70; //@line 111 "ltable.c"
      var $72=HEAP32[(($71)>>2)]; //@line 111 "ltable.c"
      var $73=$72; //@line 111 "ltable.c"
      var $74=$2; //@line 111 "ltable.c"
      var $75=(($74+7)|0); //@line 111 "ltable.c"
      var $76=HEAPU8[($75)]; //@line 111 "ltable.c"
      var $77=(($76)&255); //@line 111 "ltable.c"
      var $78=1 << $77; //@line 111 "ltable.c"
      var $79=((($78)-(1))|0); //@line 111 "ltable.c"
      var $80=$79 | 1; //@line 111 "ltable.c"
      var $81=((($73)>>>0))%((($80)>>>0)); //@line 111 "ltable.c"
      var $82=$2; //@line 111 "ltable.c"
      var $83=(($82+16)|0); //@line 111 "ltable.c"
      var $84=HEAP32[(($83)>>2)]; //@line 111 "ltable.c"
      var $85=(($84+($81)*(28))|0); //@line 111 "ltable.c"
      $1=$85; //@line 111 "ltable.c"
      __label__ = 8; break; //@line 111 "ltable.c"
    case 8: 
      var $87=$1; //@line 113 "ltable.c"
      ;
      return $87; //@line 113 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12mainpositionPK5TablePK10lua_TValue["X"]=1;

function __Z8luaH_setP9lua_StateP5TablePK10lua_TValue($L, $t, $key) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3; //@line 495 "ltable.c"
      var $6=$4; //@line 495 "ltable.c"
      var $7=__Z8luaH_getP5TablePK10lua_TValue($5, $6); //@line 495 "ltable.c"
      $p=$7; //@line 495 "ltable.c"
      var $8=$3; //@line 496 "ltable.c"
      var $9=(($8+6)|0); //@line 496 "ltable.c"
      HEAP8[($9)]=0; //@line 496 "ltable.c"
      var $10=$p; //@line 497 "ltable.c"
      var $11=(($10)|0)!=((_luaO_nilobject_)|0); //@line 497 "ltable.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 497 "ltable.c"
    case 3: 
      var $13=$p; //@line 498 "ltable.c"
      $1=$13; //@line 498 "ltable.c"
      __label__ = 11; break; //@line 498 "ltable.c"
    case 4: 
      var $15=$4; //@line 500 "ltable.c"
      var $16=(($15+8)|0); //@line 500 "ltable.c"
      var $17=HEAP32[(($16)>>2)]; //@line 500 "ltable.c"
      var $18=(($17)|0)==0; //@line 500 "ltable.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 500 "ltable.c"
    case 5: 
      var $20=$2; //@line 500 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($20, ((STRING_TABLE.__str164)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 500 "ltable.c"
      __label__ = 10; break; //@line 500 "ltable.c"
    case 6: 
      var $22=$4; //@line 501 "ltable.c"
      var $23=(($22+8)|0); //@line 501 "ltable.c"
      var $24=HEAP32[(($23)>>2)]; //@line 501 "ltable.c"
      var $25=(($24)|0)==3; //@line 501 "ltable.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 501 "ltable.c"
    case 7: 
      var $27=$4; //@line 501 "ltable.c"
      var $28=(($27)|0); //@line 501 "ltable.c"
      var $29=$28; //@line 501 "ltable.c"
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[((($29)+(4))>>2)],tempDoubleF64[0]); //@line 501 "ltable.c"
      var $31=$4; //@line 501 "ltable.c"
      var $32=(($31)|0); //@line 501 "ltable.c"
      var $33=$32; //@line 501 "ltable.c"
      var $34=(tempDoubleI32[0]=HEAP32[(($33)>>2)],tempDoubleI32[1]=HEAP32[((($33)+(4))>>2)],tempDoubleF64[0]); //@line 501 "ltable.c"
      var $35=$30 == $34; //@line 501 "ltable.c"
      if ($35) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 501 "ltable.c"
    case 8: 
      var $37=$2; //@line 502 "ltable.c"
      __Z13luaG_runerrorP9lua_StatePKcz($37, ((STRING_TABLE.__str1165)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 502 "ltable.c"
      __label__ = 9; break; //@line 502 "ltable.c"
    case 9: 
      __label__ = 10; break; //@line 502 "ltable.c"
    case 10: 
      var $40=$2; //@line 503 "ltable.c"
      var $41=$3; //@line 503 "ltable.c"
      var $42=$4; //@line 503 "ltable.c"
      var $43=__Z6newkeyP9lua_StateP5TablePK10lua_TValue($40, $41, $42); //@line 503 "ltable.c"
      $1=$43; //@line 503 "ltable.c"
      __label__ = 11; break; //@line 503 "ltable.c"
    case 11: 
      var $45=$1; //@line 505 "ltable.c"
      STACKTOP = __stackBase__;
      return $45; //@line 505 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8luaH_setP9lua_StateP5TablePK10lua_TValue["X"]=1;

function __Z6newkeyP9lua_StateP5TablePK10lua_TValue($L, $t, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $mp;
      var $othern;
      var $n;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3; //@line 400 "ltable.c"
      var $6=$4; //@line 400 "ltable.c"
      var $7=__Z12mainpositionPK5TablePK10lua_TValue($5, $6); //@line 400 "ltable.c"
      $mp=$7; //@line 400 "ltable.c"
      var $8=$mp; //@line 401 "ltable.c"
      var $9=(($8)|0); //@line 401 "ltable.c"
      var $10=(($9+8)|0); //@line 401 "ltable.c"
      var $11=HEAP32[(($10)>>2)]; //@line 401 "ltable.c"
      var $12=(($11)|0)==0; //@line 401 "ltable.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 401 "ltable.c"
    case 3: 
      var $14=$mp; //@line 401 "ltable.c"
      var $15=(($14)|0)==((__ZL10dummynode_)|0); //@line 401 "ltable.c"
      if ($15) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 401 "ltable.c"
    case 4: 
      var $17=$3; //@line 403 "ltable.c"
      var $18=__Z10getfreeposP5Table($17); //@line 403 "ltable.c"
      $n=$18; //@line 403 "ltable.c"
      var $19=$n; //@line 404 "ltable.c"
      var $20=(($19)|0)==0; //@line 404 "ltable.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 404 "ltable.c"
    case 5: 
      var $22=$2; //@line 405 "ltable.c"
      var $23=$3; //@line 405 "ltable.c"
      var $24=$4; //@line 405 "ltable.c"
      __Z6rehashP9lua_StateP5TablePK10lua_TValue($22, $23, $24); //@line 405 "ltable.c"
      var $25=$2; //@line 406 "ltable.c"
      var $26=$3; //@line 406 "ltable.c"
      var $27=$4; //@line 406 "ltable.c"
      var $28=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($25, $26, $27); //@line 406 "ltable.c"
      $1=$28; //@line 406 "ltable.c"
      __label__ = 18; break; //@line 406 "ltable.c"
    case 6: 
      var $30=$3; //@line 409 "ltable.c"
      var $31=$mp; //@line 409 "ltable.c"
      var $32=(($31+12)|0); //@line 409 "ltable.c"
      var $33=$32; //@line 409 "ltable.c"
      var $34=__Z12mainpositionPK5TablePK10lua_TValue($30, $33); //@line 409 "ltable.c"
      $othern=$34; //@line 409 "ltable.c"
      var $35=$othern; //@line 410 "ltable.c"
      var $36=$mp; //@line 410 "ltable.c"
      var $37=(($35)|0)!=(($36)|0); //@line 410 "ltable.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 410 "ltable.c"
    case 7: 
      __label__ = 8; break; //@line 412 "ltable.c"
    case 8: 
      var $40=$othern; //@line 412 "ltable.c"
      var $41=(($40+12)|0); //@line 412 "ltable.c"
      var $42=$41; //@line 412 "ltable.c"
      var $43=(($42+12)|0); //@line 412 "ltable.c"
      var $44=HEAP32[(($43)>>2)]; //@line 412 "ltable.c"
      var $45=$mp; //@line 412 "ltable.c"
      var $46=(($44)|0)!=(($45)|0); //@line 412 "ltable.c"
      if ($46) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 412 "ltable.c"
    case 9: 
      var $48=$othern; //@line 412 "ltable.c"
      var $49=(($48+12)|0); //@line 412 "ltable.c"
      var $50=$49; //@line 412 "ltable.c"
      var $51=(($50+12)|0); //@line 412 "ltable.c"
      var $52=HEAP32[(($51)>>2)]; //@line 412 "ltable.c"
      $othern=$52; //@line 412 "ltable.c"
      __label__ = 8; break; //@line 412 "ltable.c"
    case 10: 
      var $54=$n; //@line 413 "ltable.c"
      var $55=$othern; //@line 413 "ltable.c"
      var $56=(($55+12)|0); //@line 413 "ltable.c"
      var $57=$56; //@line 413 "ltable.c"
      var $58=(($57+12)|0); //@line 413 "ltable.c"
      HEAP32[(($58)>>2)]=$54; //@line 413 "ltable.c"
      var $59=$n; //@line 414 "ltable.c"
      var $60=$mp; //@line 414 "ltable.c"
      var $61=$59; //@line 414 "ltable.c"
      var $62=$60; //@line 414 "ltable.c"
      HEAP32[(($61)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];HEAP32[((($61)+(12))>>2)]=HEAP32[((($62)+(12))>>2)];HEAP32[((($61)+(16))>>2)]=HEAP32[((($62)+(16))>>2)];HEAP32[((($61)+(20))>>2)]=HEAP32[((($62)+(20))>>2)];HEAP32[((($61)+(24))>>2)]=HEAP32[((($62)+(24))>>2)]; //@line 414 "ltable.c"
      var $63=$mp; //@line 415 "ltable.c"
      var $64=(($63+12)|0); //@line 415 "ltable.c"
      var $65=$64; //@line 415 "ltable.c"
      var $66=(($65+12)|0); //@line 415 "ltable.c"
      HEAP32[(($66)>>2)]=0; //@line 415 "ltable.c"
      var $67=$mp; //@line 416 "ltable.c"
      var $68=(($67)|0); //@line 416 "ltable.c"
      var $69=(($68+8)|0); //@line 416 "ltable.c"
      HEAP32[(($69)>>2)]=0; //@line 416 "ltable.c"
      __label__ = 12; break; //@line 417 "ltable.c"
    case 11: 
      var $71=$mp; //@line 420 "ltable.c"
      var $72=(($71+12)|0); //@line 420 "ltable.c"
      var $73=$72; //@line 420 "ltable.c"
      var $74=(($73+12)|0); //@line 420 "ltable.c"
      var $75=HEAP32[(($74)>>2)]; //@line 420 "ltable.c"
      var $76=$n; //@line 420 "ltable.c"
      var $77=(($76+12)|0); //@line 420 "ltable.c"
      var $78=$77; //@line 420 "ltable.c"
      var $79=(($78+12)|0); //@line 420 "ltable.c"
      HEAP32[(($79)>>2)]=$75; //@line 420 "ltable.c"
      var $80=$n; //@line 421 "ltable.c"
      var $81=$mp; //@line 421 "ltable.c"
      var $82=(($81+12)|0); //@line 421 "ltable.c"
      var $83=$82; //@line 421 "ltable.c"
      var $84=(($83+12)|0); //@line 421 "ltable.c"
      HEAP32[(($84)>>2)]=$80; //@line 421 "ltable.c"
      var $85=$n; //@line 422 "ltable.c"
      $mp=$85; //@line 422 "ltable.c"
      __label__ = 12; break; //@line 423 "ltable.c"
    case 12: 
      __label__ = 13; break; //@line 424 "ltable.c"
    case 13: 
      var $88=$mp; //@line 425 "ltable.c"
      var $89=(($88+12)|0); //@line 425 "ltable.c"
      var $90=$89; //@line 425 "ltable.c"
      var $91=(($90)|0); //@line 425 "ltable.c"
      var $92=$4; //@line 425 "ltable.c"
      var $93=(($92)|0); //@line 425 "ltable.c"
      var $94=$91; //@line 425 "ltable.c"
      var $95=$93; //@line 425 "ltable.c"
      HEAP32[(($94)>>2)]=HEAP32[(($95)>>2)];HEAP32[((($94)+(4))>>2)]=HEAP32[((($95)+(4))>>2)]; //@line 425 "ltable.c"
      var $96=$4; //@line 425 "ltable.c"
      var $97=(($96+8)|0); //@line 425 "ltable.c"
      var $98=HEAP32[(($97)>>2)]; //@line 425 "ltable.c"
      var $99=$mp; //@line 425 "ltable.c"
      var $100=(($99+12)|0); //@line 425 "ltable.c"
      var $101=$100; //@line 425 "ltable.c"
      var $102=(($101+8)|0); //@line 425 "ltable.c"
      HEAP32[(($102)>>2)]=$98; //@line 425 "ltable.c"
      var $103=$4; //@line 426 "ltable.c"
      var $104=(($103+8)|0); //@line 426 "ltable.c"
      var $105=HEAP32[(($104)>>2)]; //@line 426 "ltable.c"
      var $106=(($105)|0) >= 4; //@line 426 "ltable.c"
      if ($106) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 426 "ltable.c"
    case 14: 
      var $108=$4; //@line 426 "ltable.c"
      var $109=(($108)|0); //@line 426 "ltable.c"
      var $110=$109; //@line 426 "ltable.c"
      var $111=HEAP32[(($110)>>2)]; //@line 426 "ltable.c"
      var $112=$111; //@line 426 "ltable.c"
      var $113=(($112+5)|0); //@line 426 "ltable.c"
      var $114=HEAPU8[($113)]; //@line 426 "ltable.c"
      var $115=(($114)&255); //@line 426 "ltable.c"
      var $116=$115 & 3; //@line 426 "ltable.c"
      var $117=(($116)|0)!=0; //@line 426 "ltable.c"
      if ($117) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 426 "ltable.c"
    case 15: 
      var $119=$3; //@line 426 "ltable.c"
      var $120=$119; //@line 426 "ltable.c"
      var $121=$120; //@line 426 "ltable.c"
      var $122=(($121+5)|0); //@line 426 "ltable.c"
      var $123=HEAPU8[($122)]; //@line 426 "ltable.c"
      var $124=(($123)&255); //@line 426 "ltable.c"
      var $125=$124 & 4; //@line 426 "ltable.c"
      var $126=(($125)|0)!=0; //@line 426 "ltable.c"
      if ($126) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 426 "ltable.c"
    case 16: 
      var $128=$2; //@line 426 "ltable.c"
      var $129=$3; //@line 426 "ltable.c"
      __Z16luaC_barrierbackP9lua_StateP5Table($128, $129); //@line 426 "ltable.c"
      __label__ = 17; break; //@line 426 "ltable.c"
    case 17: 
      var $131=$mp; //@line 428 "ltable.c"
      var $132=(($131)|0); //@line 428 "ltable.c"
      $1=$132; //@line 428 "ltable.c"
      __label__ = 18; break; //@line 428 "ltable.c"
    case 18: 
      var $134=$1; //@line 429 "ltable.c"
      ;
      return $134; //@line 429 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6newkeyP9lua_StateP5TablePK10lua_TValue["X"]=1;

function __Z11luaH_setnumP9lua_StateP5Tablei($L, $t, $key) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $k=__stackBase__;
      var $i_o;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3; //@line 509 "ltable.c"
      var $6=$4; //@line 509 "ltable.c"
      var $7=__Z11luaH_getnumP5Tablei($5, $6); //@line 509 "ltable.c"
      $p=$7; //@line 509 "ltable.c"
      var $8=$p; //@line 510 "ltable.c"
      var $9=(($8)|0)!=((_luaO_nilobject_)|0); //@line 510 "ltable.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 510 "ltable.c"
    case 3: 
      var $11=$p; //@line 511 "ltable.c"
      $1=$11; //@line 511 "ltable.c"
      __label__ = 5; break; //@line 511 "ltable.c"
    case 4: 
      $i_o=$k; //@line 514 "ltable.c"
      var $13=$4; //@line 514 "ltable.c"
      var $14=(($13)|0); //@line 514 "ltable.c"
      var $15=$i_o; //@line 514 "ltable.c"
      var $16=(($15)|0); //@line 514 "ltable.c"
      var $17=$16; //@line 514 "ltable.c"
      (tempDoubleF64[0]=$14,HEAP32[(($17)>>2)]=tempDoubleI32[0],HEAP32[((($17)+(4))>>2)]=tempDoubleI32[1]); //@line 514 "ltable.c"
      var $18=$i_o; //@line 514 "ltable.c"
      var $19=(($18+8)|0); //@line 514 "ltable.c"
      HEAP32[(($19)>>2)]=3; //@line 514 "ltable.c"
      var $20=$2; //@line 515 "ltable.c"
      var $21=$3; //@line 515 "ltable.c"
      var $22=__Z6newkeyP9lua_StateP5TablePK10lua_TValue($20, $21, $k); //@line 515 "ltable.c"
      $1=$22; //@line 515 "ltable.c"
      __label__ = 5; break; //@line 515 "ltable.c"
    case 5: 
      var $24=$1; //@line 517 "ltable.c"
      STACKTOP = __stackBase__;
      return $24; //@line 517 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaH_setstrP9lua_StateP5TableP7TString($L, $t, $key) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $k=__stackBase__;
      var $i_o;
      $2=$L;
      $3=$t;
      $4=$key;
      var $5=$3; //@line 521 "ltable.c"
      var $6=$4; //@line 521 "ltable.c"
      var $7=__Z11luaH_getstrP5TableP7TString($5, $6); //@line 521 "ltable.c"
      $p=$7; //@line 521 "ltable.c"
      var $8=$p; //@line 522 "ltable.c"
      var $9=(($8)|0)!=((_luaO_nilobject_)|0); //@line 522 "ltable.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 522 "ltable.c"
    case 3: 
      var $11=$p; //@line 523 "ltable.c"
      $1=$11; //@line 523 "ltable.c"
      __label__ = 5; break; //@line 523 "ltable.c"
    case 4: 
      $i_o=$k; //@line 526 "ltable.c"
      var $13=$4; //@line 526 "ltable.c"
      var $14=$13; //@line 526 "ltable.c"
      var $15=$i_o; //@line 526 "ltable.c"
      var $16=(($15)|0); //@line 526 "ltable.c"
      var $17=$16; //@line 526 "ltable.c"
      HEAP32[(($17)>>2)]=$14; //@line 526 "ltable.c"
      var $18=$i_o; //@line 526 "ltable.c"
      var $19=(($18+8)|0); //@line 526 "ltable.c"
      HEAP32[(($19)>>2)]=4; //@line 526 "ltable.c"
      var $20=$2; //@line 527 "ltable.c"
      var $21=$3; //@line 527 "ltable.c"
      var $22=__Z6newkeyP9lua_StateP5TablePK10lua_TValue($20, $21, $k); //@line 527 "ltable.c"
      $1=$22; //@line 527 "ltable.c"
      __label__ = 5; break; //@line 527 "ltable.c"
    case 5: 
      var $24=$1; //@line 529 "ltable.c"
      STACKTOP = __stackBase__;
      return $24; //@line 529 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9luaH_getnP5Table($t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $j;
      var $i;
      var $m;
      $2=$t;
      var $3=$2; //@line 561 "ltable.c"
      var $4=(($3+28)|0); //@line 561 "ltable.c"
      var $5=HEAP32[(($4)>>2)]; //@line 561 "ltable.c"
      $j=$5; //@line 561 "ltable.c"
      var $6=$j; //@line 562 "ltable.c"
      var $7=(($6)>>>0) > 0; //@line 562 "ltable.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 562 "ltable.c"
    case 3: 
      var $9=$j; //@line 562 "ltable.c"
      var $10=((($9)-(1))|0); //@line 562 "ltable.c"
      var $11=$2; //@line 562 "ltable.c"
      var $12=(($11+12)|0); //@line 562 "ltable.c"
      var $13=HEAP32[(($12)>>2)]; //@line 562 "ltable.c"
      var $14=(($13+($10)*(12))|0); //@line 562 "ltable.c"
      var $15=(($14+8)|0); //@line 562 "ltable.c"
      var $16=HEAP32[(($15)>>2)]; //@line 562 "ltable.c"
      var $17=(($16)|0)==0; //@line 562 "ltable.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 11; break; } //@line 562 "ltable.c"
    case 4: 
      $i=0; //@line 564 "ltable.c"
      __label__ = 5; break; //@line 565 "ltable.c"
    case 5: 
      var $20=$j; //@line 565 "ltable.c"
      var $21=$i; //@line 565 "ltable.c"
      var $22=((($20)-($21))|0); //@line 565 "ltable.c"
      var $23=(($22)>>>0) > 1; //@line 565 "ltable.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 565 "ltable.c"
    case 6: 
      var $25=$i; //@line 566 "ltable.c"
      var $26=$j; //@line 566 "ltable.c"
      var $27=((($25)+($26))|0); //@line 566 "ltable.c"
      var $28=Math.floor(((($27)>>>0))/(2)); //@line 566 "ltable.c"
      $m=$28; //@line 566 "ltable.c"
      var $29=$m; //@line 567 "ltable.c"
      var $30=((($29)-(1))|0); //@line 567 "ltable.c"
      var $31=$2; //@line 567 "ltable.c"
      var $32=(($31+12)|0); //@line 567 "ltable.c"
      var $33=HEAP32[(($32)>>2)]; //@line 567 "ltable.c"
      var $34=(($33+($30)*(12))|0); //@line 567 "ltable.c"
      var $35=(($34+8)|0); //@line 567 "ltable.c"
      var $36=HEAP32[(($35)>>2)]; //@line 567 "ltable.c"
      var $37=(($36)|0)==0; //@line 567 "ltable.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 567 "ltable.c"
    case 7: 
      var $39=$m; //@line 567 "ltable.c"
      $j=$39; //@line 567 "ltable.c"
      __label__ = 9; break; //@line 567 "ltable.c"
    case 8: 
      var $41=$m; //@line 568 "ltable.c"
      $i=$41; //@line 568 "ltable.c"
      __label__ = 9; break; //@line 568 "ltable.c"
    case 9: 
      __label__ = 5; break; //@line 569 "ltable.c"
    case 10: 
      var $44=$i; //@line 570 "ltable.c"
      $1=$44; //@line 570 "ltable.c"
      __label__ = 14; break; //@line 570 "ltable.c"
    case 11: 
      var $46=$2; //@line 573 "ltable.c"
      var $47=(($46+16)|0); //@line 573 "ltable.c"
      var $48=HEAP32[(($47)>>2)]; //@line 573 "ltable.c"
      var $49=(($48)|0)==((__ZL10dummynode_)|0); //@line 573 "ltable.c"
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 573 "ltable.c"
    case 12: 
      var $51=$j; //@line 574 "ltable.c"
      $1=$51; //@line 574 "ltable.c"
      __label__ = 14; break; //@line 574 "ltable.c"
    case 13: 
      var $53=$2; //@line 575 "ltable.c"
      var $54=$j; //@line 575 "ltable.c"
      var $55=__Z14unbound_searchP5Tablej($53, $54); //@line 575 "ltable.c"
      $1=$55; //@line 575 "ltable.c"
      __label__ = 14; break; //@line 575 "ltable.c"
    case 14: 
      var $57=$1; //@line 576 "ltable.c"
      ;
      return $57; //@line 576 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9luaH_getnP5Table["X"]=1;

function __Z14unbound_searchP5Tablej($t, $j) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $m;
      $2=$t;
      $3=$j;
      var $4=$3; //@line 533 "ltable.c"
      $i=$4; //@line 533 "ltable.c"
      var $5=$3; //@line 534 "ltable.c"
      var $6=((($5)+(1))|0); //@line 534 "ltable.c"
      $3=$6; //@line 534 "ltable.c"
      __label__ = 3; break; //@line 536 "ltable.c"
    case 3: 
      var $8=$2; //@line 536 "ltable.c"
      var $9=$3; //@line 536 "ltable.c"
      var $10=__Z11luaH_getnumP5Tablei($8, $9); //@line 536 "ltable.c"
      var $11=(($10+8)|0); //@line 536 "ltable.c"
      var $12=HEAP32[(($11)>>2)]; //@line 536 "ltable.c"
      var $13=(($12)|0)==0; //@line 536 "ltable.c"
      var $14=$13 ^ 1; //@line 536 "ltable.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 536 "ltable.c"
    case 4: 
      var $16=$3; //@line 537 "ltable.c"
      $i=$16; //@line 537 "ltable.c"
      var $17=$3; //@line 538 "ltable.c"
      var $18=((($17<<1))|0); //@line 538 "ltable.c"
      $3=$18; //@line 538 "ltable.c"
      var $19=$3; //@line 539 "ltable.c"
      var $20=(($19)>>>0) > 2147483645; //@line 539 "ltable.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 9; break; } //@line 539 "ltable.c"
    case 5: 
      $i=1; //@line 541 "ltable.c"
      __label__ = 6; break; //@line 542 "ltable.c"
    case 6: 
      var $23=$2; //@line 542 "ltable.c"
      var $24=$i; //@line 542 "ltable.c"
      var $25=__Z11luaH_getnumP5Tablei($23, $24); //@line 542 "ltable.c"
      var $26=(($25+8)|0); //@line 542 "ltable.c"
      var $27=HEAP32[(($26)>>2)]; //@line 542 "ltable.c"
      var $28=(($27)|0)==0; //@line 542 "ltable.c"
      var $29=$28 ^ 1; //@line 542 "ltable.c"
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 542 "ltable.c"
    case 7: 
      var $31=$i; //@line 542 "ltable.c"
      var $32=((($31)+(1))|0); //@line 542 "ltable.c"
      $i=$32; //@line 542 "ltable.c"
      __label__ = 6; break; //@line 542 "ltable.c"
    case 8: 
      var $34=$i; //@line 543 "ltable.c"
      var $35=((($34)-(1))|0); //@line 543 "ltable.c"
      $1=$35; //@line 543 "ltable.c"
      __label__ = 17; break; //@line 543 "ltable.c"
    case 9: 
      __label__ = 3; break; //@line 545 "ltable.c"
    case 10: 
      __label__ = 11; break; //@line 547 "ltable.c"
    case 11: 
      var $39=$3; //@line 547 "ltable.c"
      var $40=$i; //@line 547 "ltable.c"
      var $41=((($39)-($40))|0); //@line 547 "ltable.c"
      var $42=(($41)>>>0) > 1; //@line 547 "ltable.c"
      if ($42) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 547 "ltable.c"
    case 12: 
      var $44=$i; //@line 548 "ltable.c"
      var $45=$3; //@line 548 "ltable.c"
      var $46=((($44)+($45))|0); //@line 548 "ltable.c"
      var $47=Math.floor(((($46)>>>0))/(2)); //@line 548 "ltable.c"
      $m=$47; //@line 548 "ltable.c"
      var $48=$2; //@line 549 "ltable.c"
      var $49=$m; //@line 549 "ltable.c"
      var $50=__Z11luaH_getnumP5Tablei($48, $49); //@line 549 "ltable.c"
      var $51=(($50+8)|0); //@line 549 "ltable.c"
      var $52=HEAP32[(($51)>>2)]; //@line 549 "ltable.c"
      var $53=(($52)|0)==0; //@line 549 "ltable.c"
      if ($53) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 549 "ltable.c"
    case 13: 
      var $55=$m; //@line 549 "ltable.c"
      $3=$55; //@line 549 "ltable.c"
      __label__ = 15; break; //@line 549 "ltable.c"
    case 14: 
      var $57=$m; //@line 550 "ltable.c"
      $i=$57; //@line 550 "ltable.c"
      __label__ = 15; break; //@line 550 "ltable.c"
    case 15: 
      __label__ = 11; break; //@line 551 "ltable.c"
    case 16: 
      var $60=$i; //@line 552 "ltable.c"
      $1=$60; //@line 552 "ltable.c"
      __label__ = 17; break; //@line 552 "ltable.c"
    case 17: 
      var $62=$1; //@line 553 "ltable.c"
      ;
      return $62; //@line 553 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z14unbound_searchP5Tablej["X"]=1;

function __Z6rehashP9lua_StateP5TablePK10lua_TValue($L, $t, $ek) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; _memset(__stackBase__, 0, 112);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nasize=__stackBase__;
      var $na;
      var $nums=(__stackBase__)+(4);
      var $i;
      var $totaluse;
      $1=$L;
      $2=$t;
      $3=$ek;
      $i=0; //@line 338 "ltable.c"
      __label__ = 3; break; //@line 338 "ltable.c"
    case 3: 
      var $5=$i; //@line 338 "ltable.c"
      var $6=(($5)|0) <= 26; //@line 338 "ltable.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 338 "ltable.c"
    case 4: 
      var $8=$i; //@line 338 "ltable.c"
      var $9=(($nums+($8<<2))|0); //@line 338 "ltable.c"
      HEAP32[(($9)>>2)]=0; //@line 338 "ltable.c"
      __label__ = 5; break; //@line 338 "ltable.c"
    case 5: 
      var $11=$i; //@line 338 "ltable.c"
      var $12=((($11)+(1))|0); //@line 338 "ltable.c"
      $i=$12; //@line 338 "ltable.c"
      __label__ = 3; break; //@line 338 "ltable.c"
    case 6: 
      var $14=$2; //@line 339 "ltable.c"
      var $15=(($nums)|0); //@line 339 "ltable.c"
      var $16=__Z11numusearrayPK5TablePi($14, $15); //@line 339 "ltable.c"
      HEAP32[(($nasize)>>2)]=$16; //@line 339 "ltable.c"
      var $17=HEAP32[(($nasize)>>2)]; //@line 340 "ltable.c"
      $totaluse=$17; //@line 340 "ltable.c"
      var $18=$2; //@line 341 "ltable.c"
      var $19=(($nums)|0); //@line 341 "ltable.c"
      var $20=__Z10numusehashPK5TablePiS2_($18, $19, $nasize); //@line 341 "ltable.c"
      var $21=$totaluse; //@line 341 "ltable.c"
      var $22=((($21)+($20))|0); //@line 341 "ltable.c"
      $totaluse=$22; //@line 341 "ltable.c"
      var $23=$3; //@line 343 "ltable.c"
      var $24=(($nums)|0); //@line 343 "ltable.c"
      var $25=__Z8countintPK10lua_TValuePi($23, $24); //@line 343 "ltable.c"
      var $26=HEAP32[(($nasize)>>2)]; //@line 343 "ltable.c"
      var $27=((($26)+($25))|0); //@line 343 "ltable.c"
      HEAP32[(($nasize)>>2)]=$27; //@line 343 "ltable.c"
      var $28=$totaluse; //@line 344 "ltable.c"
      var $29=((($28)+(1))|0); //@line 344 "ltable.c"
      $totaluse=$29; //@line 344 "ltable.c"
      var $30=(($nums)|0); //@line 346 "ltable.c"
      var $31=__Z12computesizesPiS_($30, $nasize); //@line 346 "ltable.c"
      $na=$31; //@line 346 "ltable.c"
      var $32=$1; //@line 348 "ltable.c"
      var $33=$2; //@line 348 "ltable.c"
      var $34=HEAP32[(($nasize)>>2)]; //@line 348 "ltable.c"
      var $35=$totaluse; //@line 348 "ltable.c"
      var $36=$na; //@line 348 "ltable.c"
      var $37=((($35)-($36))|0); //@line 348 "ltable.c"
      __Z6resizeP9lua_StateP5Tableii($32, $33, $34, $37); //@line 348 "ltable.c"
      STACKTOP = __stackBase__;
      return; //@line 349 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6rehashP9lua_StateP5TablePK10lua_TValue["X"]=1;

function __Z12computesizesPiS_($nums, $narray) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $twotoi;
      var $a;
      var $na;
      var $n;
      $1=$nums;
      $2=$narray;
      $a=0; //@line 192 "ltable.c"
      $na=0; //@line 193 "ltable.c"
      $n=0; //@line 194 "ltable.c"
      $i=0; //@line 195 "ltable.c"
      $twotoi=1; //@line 195 "ltable.c"
      __label__ = 3; break; //@line 195 "ltable.c"
    case 3: 
      var $4=$twotoi; //@line 195 "ltable.c"
      var $5=((((($4)|0))/(2))&-1); //@line 195 "ltable.c"
      var $6=$2; //@line 195 "ltable.c"
      var $7=HEAP32[(($6)>>2)]; //@line 195 "ltable.c"
      var $8=(($5)|0) < (($7)|0); //@line 195 "ltable.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 12; break; } //@line 195 "ltable.c"
    case 4: 
      var $10=$i; //@line 196 "ltable.c"
      var $11=$1; //@line 196 "ltable.c"
      var $12=(($11+($10<<2))|0); //@line 196 "ltable.c"
      var $13=HEAP32[(($12)>>2)]; //@line 196 "ltable.c"
      var $14=(($13)|0) > 0; //@line 196 "ltable.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 196 "ltable.c"
    case 5: 
      var $16=$i; //@line 197 "ltable.c"
      var $17=$1; //@line 197 "ltable.c"
      var $18=(($17+($16<<2))|0); //@line 197 "ltable.c"
      var $19=HEAP32[(($18)>>2)]; //@line 197 "ltable.c"
      var $20=$a; //@line 197 "ltable.c"
      var $21=((($20)+($19))|0); //@line 197 "ltable.c"
      $a=$21; //@line 197 "ltable.c"
      var $22=$a; //@line 198 "ltable.c"
      var $23=$twotoi; //@line 198 "ltable.c"
      var $24=((((($23)|0))/(2))&-1); //@line 198 "ltable.c"
      var $25=(($22)|0) > (($24)|0); //@line 198 "ltable.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 198 "ltable.c"
    case 6: 
      var $27=$twotoi; //@line 199 "ltable.c"
      $n=$27; //@line 199 "ltable.c"
      var $28=$a; //@line 200 "ltable.c"
      $na=$28; //@line 200 "ltable.c"
      __label__ = 7; break; //@line 201 "ltable.c"
    case 7: 
      __label__ = 8; break; //@line 202 "ltable.c"
    case 8: 
      var $31=$a; //@line 203 "ltable.c"
      var $32=$2; //@line 203 "ltable.c"
      var $33=HEAP32[(($32)>>2)]; //@line 203 "ltable.c"
      var $34=(($31)|0)==(($33)|0); //@line 203 "ltable.c"
      if ($34) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 203 "ltable.c"
    case 9: 
      __label__ = 12; break; //@line 203 "ltable.c"
    case 10: 
      __label__ = 11; break; //@line 204 "ltable.c"
    case 11: 
      var $38=$i; //@line 195 "ltable.c"
      var $39=((($38)+(1))|0); //@line 195 "ltable.c"
      $i=$39; //@line 195 "ltable.c"
      var $40=$twotoi; //@line 195 "ltable.c"
      var $41=((($40<<1))|0); //@line 195 "ltable.c"
      $twotoi=$41; //@line 195 "ltable.c"
      __label__ = 3; break; //@line 195 "ltable.c"
    case 12: 
      var $43=$n; //@line 205 "ltable.c"
      var $44=$2; //@line 205 "ltable.c"
      HEAP32[(($44)>>2)]=$43; //@line 205 "ltable.c"
      var $45=$na; //@line 207 "ltable.c"
      ;
      return $45; //@line 207 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12computesizesPiS_["X"]=1;

function __Z10arrayindexPK10lua_TValue($key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $k;
      $2=$key;
      var $3=$2; //@line 121 "ltable.c"
      var $4=(($3+8)|0); //@line 121 "ltable.c"
      var $5=HEAP32[(($4)>>2)]; //@line 121 "ltable.c"
      var $6=(($5)|0)==3; //@line 121 "ltable.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 121 "ltable.c"
    case 3: 
      var $8=$2; //@line 122 "ltable.c"
      var $9=(($8)|0); //@line 122 "ltable.c"
      var $10=$9; //@line 122 "ltable.c"
      var $11=(tempDoubleI32[0]=HEAP32[(($10)>>2)],tempDoubleI32[1]=HEAP32[((($10)+(4))>>2)],tempDoubleF64[0]); //@line 122 "ltable.c"
      $n=$11; //@line 122 "ltable.c"
      var $12=$n; //@line 124 "ltable.c"
      var $13=(($12)&-1); //@line 124 "ltable.c"
      $k=$13; //@line 124 "ltable.c"
      var $14=$k; //@line 125 "ltable.c"
      var $15=(($14)|0); //@line 125 "ltable.c"
      var $16=$n; //@line 125 "ltable.c"
      var $17=$15 == $16; //@line 125 "ltable.c"
      if ($17) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 125 "ltable.c"
    case 4: 
      var $19=$k; //@line 126 "ltable.c"
      $1=$19; //@line 126 "ltable.c"
      __label__ = 7; break; //@line 126 "ltable.c"
    case 5: 
      __label__ = 6; break; //@line 127 "ltable.c"
    case 6: 
      $1=-1; //@line 128 "ltable.c"
      __label__ = 7; break; //@line 128 "ltable.c"
    case 7: 
      var $23=$1; //@line 129 "ltable.c"
      ;
      return $23; //@line 129 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10numusehashPK5TablePiS2_($t, $nums, $pnasize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $totaluse;
      var $ause;
      var $i;
      var $n;
      $1=$t;
      $2=$nums;
      $3=$pnasize;
      $totaluse=0; //@line 248 "ltable.c"
      $ause=0; //@line 249 "ltable.c"
      var $4=$1; //@line 250 "ltable.c"
      var $5=(($4+7)|0); //@line 250 "ltable.c"
      var $6=HEAPU8[($5)]; //@line 250 "ltable.c"
      var $7=(($6)&255); //@line 250 "ltable.c"
      var $8=1 << $7; //@line 250 "ltable.c"
      $i=$8; //@line 250 "ltable.c"
      __label__ = 3; break; //@line 251 "ltable.c"
    case 3: 
      var $10=$i; //@line 251 "ltable.c"
      var $11=((($10)-(1))|0); //@line 251 "ltable.c"
      $i=$11; //@line 251 "ltable.c"
      var $12=(($10)|0)!=0; //@line 251 "ltable.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 251 "ltable.c"
    case 4: 
      var $14=$i; //@line 252 "ltable.c"
      var $15=$1; //@line 252 "ltable.c"
      var $16=(($15+16)|0); //@line 252 "ltable.c"
      var $17=HEAP32[(($16)>>2)]; //@line 252 "ltable.c"
      var $18=(($17+($14)*(28))|0); //@line 252 "ltable.c"
      $n=$18; //@line 252 "ltable.c"
      var $19=$n; //@line 253 "ltable.c"
      var $20=(($19)|0); //@line 253 "ltable.c"
      var $21=(($20+8)|0); //@line 253 "ltable.c"
      var $22=HEAP32[(($21)>>2)]; //@line 253 "ltable.c"
      var $23=(($22)|0)==0; //@line 253 "ltable.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 253 "ltable.c"
    case 5: 
      var $25=$n; //@line 254 "ltable.c"
      var $26=(($25+12)|0); //@line 254 "ltable.c"
      var $27=$26; //@line 254 "ltable.c"
      var $28=$2; //@line 254 "ltable.c"
      var $29=__Z8countintPK10lua_TValuePi($27, $28); //@line 254 "ltable.c"
      var $30=$ause; //@line 254 "ltable.c"
      var $31=((($30)+($29))|0); //@line 254 "ltable.c"
      $ause=$31; //@line 254 "ltable.c"
      var $32=$totaluse; //@line 255 "ltable.c"
      var $33=((($32)+(1))|0); //@line 255 "ltable.c"
      $totaluse=$33; //@line 255 "ltable.c"
      __label__ = 6; break; //@line 256 "ltable.c"
    case 6: 
      __label__ = 3; break; //@line 257 "ltable.c"
    case 7: 
      var $36=$ause; //@line 258 "ltable.c"
      var $37=$3; //@line 258 "ltable.c"
      var $38=HEAP32[(($37)>>2)]; //@line 258 "ltable.c"
      var $39=((($38)+($36))|0); //@line 258 "ltable.c"
      HEAP32[(($37)>>2)]=$39; //@line 258 "ltable.c"
      var $40=$totaluse; //@line 259 "ltable.c"
      ;
      return $40; //@line 259 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10numusehashPK5TablePiS2_["X"]=1;

function __Z8countintPK10lua_TValuePi($key, $nums) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $k;
      $2=$key;
      $3=$nums;
      var $4=$2; //@line 212 "ltable.c"
      var $5=__Z10arrayindexPK10lua_TValue($4); //@line 212 "ltable.c"
      $k=$5; //@line 212 "ltable.c"
      var $6=$k; //@line 213 "ltable.c"
      var $7=0 < (($6)|0); //@line 213 "ltable.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 213 "ltable.c"
    case 3: 
      var $9=$k; //@line 213 "ltable.c"
      var $10=(($9)|0) <= 67108864; //@line 213 "ltable.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 213 "ltable.c"
    case 4: 
      var $12=$k; //@line 214 "ltable.c"
      var $13=((($12)-(1))|0); //@line 214 "ltable.c"
      var $14=__Z9luaO_log2j($13); //@line 214 "ltable.c"
      var $15=((($14)+(1))|0); //@line 214 "ltable.c"
      var $16=$3; //@line 214 "ltable.c"
      var $17=(($16+($15<<2))|0); //@line 214 "ltable.c"
      var $18=HEAP32[(($17)>>2)]; //@line 214 "ltable.c"
      var $19=((($18)+(1))|0); //@line 214 "ltable.c"
      HEAP32[(($17)>>2)]=$19; //@line 214 "ltable.c"
      $1=1; //@line 215 "ltable.c"
      __label__ = 6; break; //@line 215 "ltable.c"
    case 5: 
      $1=0; //@line 218 "ltable.c"
      __label__ = 6; break; //@line 218 "ltable.c"
    case 6: 
      var $22=$1; //@line 219 "ltable.c"
      ;
      return $22; //@line 219 "ltable.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9luaT_initP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$L;
      $i=0; //@line 39 "ltm.c"
      __label__ = 3; break; //@line 39 "ltm.c"
    case 3: 
      var $3=$i; //@line 39 "ltm.c"
      var $4=(($3)|0) < 17; //@line 39 "ltm.c"
      if ($4) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 39 "ltm.c"
    case 4: 
      var $6=$1; //@line 40 "ltm.c"
      var $7=$i; //@line 40 "ltm.c"
      var $8=((__ZZ9luaT_initP9lua_StateE14luaT_eventname+($7<<2))|0); //@line 40 "ltm.c"
      var $9=HEAP32[(($8)>>2)]; //@line 40 "ltm.c"
      var $10=$i; //@line 40 "ltm.c"
      var $11=((__ZZ9luaT_initP9lua_StateE14luaT_eventname+($10<<2))|0); //@line 40 "ltm.c"
      var $12=HEAP32[(($11)>>2)]; //@line 40 "ltm.c"
      var $13=_strlen($12); //@line 40 "ltm.c"
      var $14=__Z12luaS_newlstrP9lua_StatePKcj($6, $9, $13); //@line 40 "ltm.c"
      var $15=$i; //@line 40 "ltm.c"
      var $16=$1; //@line 40 "ltm.c"
      var $17=(($16+16)|0); //@line 40 "ltm.c"
      var $18=HEAP32[(($17)>>2)]; //@line 40 "ltm.c"
      var $19=(($18+168)|0); //@line 40 "ltm.c"
      var $20=(($19+($15<<2))|0); //@line 40 "ltm.c"
      HEAP32[(($20)>>2)]=$14; //@line 40 "ltm.c"
      var $21=$i; //@line 41 "ltm.c"
      var $22=$1; //@line 41 "ltm.c"
      var $23=(($22+16)|0); //@line 41 "ltm.c"
      var $24=HEAP32[(($23)>>2)]; //@line 41 "ltm.c"
      var $25=(($24+168)|0); //@line 41 "ltm.c"
      var $26=(($25+($21<<2))|0); //@line 41 "ltm.c"
      var $27=HEAP32[(($26)>>2)]; //@line 41 "ltm.c"
      var $28=$27; //@line 41 "ltm.c"
      var $29=(($28+5)|0); //@line 41 "ltm.c"
      var $30=HEAPU8[($29)]; //@line 41 "ltm.c"
      var $31=(($30)&255); //@line 41 "ltm.c"
      var $32=$31 | 32; //@line 41 "ltm.c"
      var $33=(($32) & 255); //@line 41 "ltm.c"
      HEAP8[($29)]=$33; //@line 41 "ltm.c"
      __label__ = 5; break; //@line 42 "ltm.c"
    case 5: 
      var $35=$i; //@line 39 "ltm.c"
      var $36=((($35)+(1))|0); //@line 39 "ltm.c"
      $i=$36; //@line 39 "ltm.c"
      __label__ = 3; break; //@line 39 "ltm.c"
    case 6: 
      ;
      return; //@line 43 "ltm.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10luaT_gettmP5Table3TMSP7TString($events, $event, $ename) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tm;
      $2=$events;
      $3=$event;
      $4=$ename;
      var $5=$2; //@line 51 "ltm.c"
      var $6=$4; //@line 51 "ltm.c"
      var $7=__Z11luaH_getstrP5TableP7TString($5, $6); //@line 51 "ltm.c"
      $tm=$7; //@line 51 "ltm.c"
      var $8=$tm; //@line 53 "ltm.c"
      var $9=(($8+8)|0); //@line 53 "ltm.c"
      var $10=HEAP32[(($9)>>2)]; //@line 53 "ltm.c"
      var $11=(($10)|0)==0; //@line 53 "ltm.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 53 "ltm.c"
    case 3: 
      var $13=$3; //@line 54 "ltm.c"
      var $14=1 << $13; //@line 54 "ltm.c"
      var $15=(($14) & 255); //@line 54 "ltm.c"
      var $16=(($15)&255); //@line 54 "ltm.c"
      var $17=$2; //@line 54 "ltm.c"
      var $18=(($17+6)|0); //@line 54 "ltm.c"
      var $19=HEAPU8[($18)]; //@line 54 "ltm.c"
      var $20=(($19)&255); //@line 54 "ltm.c"
      var $21=$20 | $16; //@line 54 "ltm.c"
      var $22=(($21) & 255); //@line 54 "ltm.c"
      HEAP8[($18)]=$22; //@line 54 "ltm.c"
      $1=0; //@line 55 "ltm.c"
      __label__ = 5; break; //@line 55 "ltm.c"
    case 4: 
      var $24=$tm; //@line 57 "ltm.c"
      $1=$24; //@line 57 "ltm.c"
      __label__ = 5; break; //@line 57 "ltm.c"
    case 5: 
      var $26=$1; //@line 58 "ltm.c"
      ;
      return $26; //@line 58 "ltm.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($L, $o, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mt;
      $1=$L;
      $2=$o;
      $3=$event;
      var $4=$2; //@line 63 "ltm.c"
      var $5=(($4+8)|0); //@line 63 "ltm.c"
      var $6=HEAP32[(($5)>>2)]; //@line 63 "ltm.c"
      if ((($6)|0) == 5) {
        __label__ = 3; break;
      }
      else if ((($6)|0) == 7) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $8=$2; //@line 65 "ltm.c"
      var $9=(($8)|0); //@line 65 "ltm.c"
      var $10=$9; //@line 65 "ltm.c"
      var $11=HEAP32[(($10)>>2)]; //@line 65 "ltm.c"
      var $12=$11; //@line 65 "ltm.c"
      var $13=(($12+8)|0); //@line 65 "ltm.c"
      var $14=HEAP32[(($13)>>2)]; //@line 65 "ltm.c"
      $mt=$14; //@line 65 "ltm.c"
      __label__ = 6; break; //@line 66 "ltm.c"
    case 4: 
      var $16=$2; //@line 68 "ltm.c"
      var $17=(($16)|0); //@line 68 "ltm.c"
      var $18=$17; //@line 68 "ltm.c"
      var $19=HEAP32[(($18)>>2)]; //@line 68 "ltm.c"
      var $20=$19; //@line 68 "ltm.c"
      var $21=$20; //@line 68 "ltm.c"
      var $22=(($21+8)|0); //@line 68 "ltm.c"
      var $23=HEAP32[(($22)>>2)]; //@line 68 "ltm.c"
      $mt=$23; //@line 68 "ltm.c"
      __label__ = 6; break; //@line 69 "ltm.c"
    case 5: 
      var $25=$2; //@line 71 "ltm.c"
      var $26=(($25+8)|0); //@line 71 "ltm.c"
      var $27=HEAP32[(($26)>>2)]; //@line 71 "ltm.c"
      var $28=$1; //@line 71 "ltm.c"
      var $29=(($28+16)|0); //@line 71 "ltm.c"
      var $30=HEAP32[(($29)>>2)]; //@line 71 "ltm.c"
      var $31=(($30+132)|0); //@line 71 "ltm.c"
      var $32=(($31+($27<<2))|0); //@line 71 "ltm.c"
      var $33=HEAP32[(($32)>>2)]; //@line 71 "ltm.c"
      $mt=$33; //@line 71 "ltm.c"
      __label__ = 6; break; //@line 72 "ltm.c"
    case 6: 
      var $35=$mt; //@line 73 "ltm.c"
      var $36=(($35)|0)!=0; //@line 73 "ltm.c"
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 73 "ltm.c"
    case 7: 
      var $38=$mt; //@line 73 "ltm.c"
      var $39=$3; //@line 73 "ltm.c"
      var $40=$1; //@line 73 "ltm.c"
      var $41=(($40+16)|0); //@line 73 "ltm.c"
      var $42=HEAP32[(($41)>>2)]; //@line 73 "ltm.c"
      var $43=(($42+168)|0); //@line 73 "ltm.c"
      var $44=(($43+($39<<2))|0); //@line 73 "ltm.c"
      var $45=HEAP32[(($44)>>2)]; //@line 73 "ltm.c"
      var $46=__Z11luaH_getstrP5TableP7TString($38, $45); //@line 73 "ltm.c"
      var $49 = $46;__label__ = 9; break; //@line 73 "ltm.c"
    case 8: 
      var $49 = _luaO_nilobject_;__label__ = 9; break; //@line 73 "ltm.c"
    case 9: 
      var $49; //@line 73 "ltm.c"
      ;
      return $49; //@line 73 "ltm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS["X"]=1;

function __Z11luaU_undumpP9lua_StateP3ZioP7MbufferPKc($L, $Z, $buff, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; _memset(__stackBase__, 0, 16);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $S=__stackBase__;
      $1=$L;
      $2=$Z;
      $3=$buff;
      $4=$name;
      var $5=$4; //@line 198 "lundump.c"
      var $6=HEAP8[($5)]; //@line 198 "lundump.c"
      var $7=(($6 << 24) >> 24); //@line 198 "lundump.c"
      var $8=(($7)|0)==64; //@line 198 "lundump.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 198 "lundump.c"
    case 3: 
      var $10=$4; //@line 198 "lundump.c"
      var $11=HEAP8[($10)]; //@line 198 "lundump.c"
      var $12=(($11 << 24) >> 24); //@line 198 "lundump.c"
      var $13=(($12)|0)==61; //@line 198 "lundump.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 198 "lundump.c"
    case 4: 
      var $15=$4; //@line 199 "lundump.c"
      var $16=(($15+1)|0); //@line 199 "lundump.c"
      var $17=(($S+12)|0); //@line 199 "lundump.c"
      HEAP32[(($17)>>2)]=$16; //@line 199 "lundump.c"
      __label__ = 9; break; //@line 199 "lundump.c"
    case 5: 
      var $19=$4; //@line 200 "lundump.c"
      var $20=HEAP8[($19)]; //@line 200 "lundump.c"
      var $21=(($20 << 24) >> 24); //@line 200 "lundump.c"
      var $22=HEAP8[(((STRING_TABLE.__str208)|0))]; //@line 200 "lundump.c"
      var $23=(($22 << 24) >> 24); //@line 200 "lundump.c"
      var $24=(($21)|0)==(($23)|0); //@line 200 "lundump.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 200 "lundump.c"
    case 6: 
      var $26=(($S+12)|0); //@line 201 "lundump.c"
      HEAP32[(($26)>>2)]=((STRING_TABLE.__str1209)|0); //@line 201 "lundump.c"
      __label__ = 8; break; //@line 201 "lundump.c"
    case 7: 
      var $28=$4; //@line 203 "lundump.c"
      var $29=(($S+12)|0); //@line 203 "lundump.c"
      HEAP32[(($29)>>2)]=$28; //@line 203 "lundump.c"
      __label__ = 8; break; //@line 203 "lundump.c"
    case 8: 
      __label__ = 9; break; //@line 203 "lundump.c"
    case 9: 
      var $32=$1; //@line 204 "lundump.c"
      var $33=(($S)|0); //@line 204 "lundump.c"
      HEAP32[(($33)>>2)]=$32; //@line 204 "lundump.c"
      var $34=$2; //@line 205 "lundump.c"
      var $35=(($S+4)|0); //@line 205 "lundump.c"
      HEAP32[(($35)>>2)]=$34; //@line 205 "lundump.c"
      var $36=$3; //@line 206 "lundump.c"
      var $37=(($S+8)|0); //@line 206 "lundump.c"
      HEAP32[(($37)>>2)]=$36; //@line 206 "lundump.c"
      __Z10LoadHeaderP9LoadState($S); //@line 207 "lundump.c"
      var $38=$1; //@line 208 "lundump.c"
      var $39=__Z12luaS_newlstrP9lua_StatePKcj($38, ((STRING_TABLE.__str2210)|0), 2); //@line 208 "lundump.c"
      var $40=__Z12LoadFunctionP9LoadStateP7TString($S, $39); //@line 208 "lundump.c"
      STACKTOP = __stackBase__;
      return $40; //@line 208 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaU_undumpP9lua_StateP3ZioP7MbufferPKc["X"]=1;

function __Z10LoadHeaderP9LoadState($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $h=__stackBase__;
      var $s=(__stackBase__)+(12);
      $1=$S;
      var $2=(($h)|0); //@line 187 "lundump.c"
      __Z11luaU_headerPc($2); //@line 187 "lundump.c"
      var $3=$1; //@line 188 "lundump.c"
      var $4=(($s)|0); //@line 188 "lundump.c"
      __Z9LoadBlockP9LoadStatePvj($3, $4, 12); //@line 188 "lundump.c"
      var $5=(($h)|0); //@line 189 "lundump.c"
      var $6=(($s)|0); //@line 189 "lundump.c"
      var $7=_memcmp($5, $6, 12); //@line 189 "lundump.c"
      var $8=(($7)|0)!=0; //@line 189 "lundump.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 189 "lundump.c"
    case 3: 
      var $10=$1; //@line 189 "lundump.c"
      __Z5errorP9LoadStatePKc($10, ((STRING_TABLE.__str9217)|0)); //@line 189 "lundump.c"
      __label__ = 4; break; //@line 189 "lundump.c"
    case 4: 
      STACKTOP = __stackBase__;
      return; //@line 190 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12LoadFunctionP9LoadStateP7TString($S, $p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      var $i_o;
      $1=$S;
      $2=$p;
      var $3=$1; //@line 164 "lundump.c"
      var $4=(($3)|0); //@line 164 "lundump.c"
      var $5=HEAP32[(($4)>>2)]; //@line 164 "lundump.c"
      var $6=(($5+52)|0); //@line 164 "lundump.c"
      var $7=HEAP16[(($6)>>1)]; //@line 164 "lundump.c"
      var $8=((($7)+(1))&65535); //@line 164 "lundump.c"
      HEAP16[(($6)>>1)]=$8; //@line 164 "lundump.c"
      var $9=(($8)&65535); //@line 164 "lundump.c"
      var $10=(($9)|0) > 200; //@line 164 "lundump.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 164 "lundump.c"
    case 3: 
      var $12=$1; //@line 164 "lundump.c"
      __Z5errorP9LoadStatePKc($12, ((STRING_TABLE.__str3211)|0)); //@line 164 "lundump.c"
      __label__ = 4; break; //@line 164 "lundump.c"
    case 4: 
      var $14=$1; //@line 165 "lundump.c"
      var $15=(($14)|0); //@line 165 "lundump.c"
      var $16=HEAP32[(($15)>>2)]; //@line 165 "lundump.c"
      var $17=__Z13luaF_newprotoP9lua_State($16); //@line 165 "lundump.c"
      $f=$17; //@line 165 "lundump.c"
      var $18=$1; //@line 166 "lundump.c"
      var $19=(($18)|0); //@line 166 "lundump.c"
      var $20=HEAP32[(($19)>>2)]; //@line 166 "lundump.c"
      var $21=(($20+8)|0); //@line 166 "lundump.c"
      var $22=HEAP32[(($21)>>2)]; //@line 166 "lundump.c"
      $i_o=$22; //@line 166 "lundump.c"
      var $23=$f; //@line 166 "lundump.c"
      var $24=$23; //@line 166 "lundump.c"
      var $25=$i_o; //@line 166 "lundump.c"
      var $26=(($25)|0); //@line 166 "lundump.c"
      var $27=$26; //@line 166 "lundump.c"
      HEAP32[(($27)>>2)]=$24; //@line 166 "lundump.c"
      var $28=$i_o; //@line 166 "lundump.c"
      var $29=(($28+8)|0); //@line 166 "lundump.c"
      HEAP32[(($29)>>2)]=9; //@line 166 "lundump.c"
      var $30=$1; //@line 166 "lundump.c"
      var $31=(($30)|0); //@line 166 "lundump.c"
      var $32=HEAP32[(($31)>>2)]; //@line 166 "lundump.c"
      var $33=(($32+28)|0); //@line 166 "lundump.c"
      var $34=HEAP32[(($33)>>2)]; //@line 166 "lundump.c"
      var $35=$34; //@line 166 "lundump.c"
      var $36=$1; //@line 166 "lundump.c"
      var $37=(($36)|0); //@line 166 "lundump.c"
      var $38=HEAP32[(($37)>>2)]; //@line 166 "lundump.c"
      var $39=(($38+8)|0); //@line 166 "lundump.c"
      var $40=HEAP32[(($39)>>2)]; //@line 166 "lundump.c"
      var $41=$40; //@line 166 "lundump.c"
      var $42=$35; //@line 166 "lundump.c"
      var $43=$41; //@line 166 "lundump.c"
      var $44=((($42)-($43))|0); //@line 166 "lundump.c"
      var $45=(($44)|0) <= 12; //@line 166 "lundump.c"
      if ($45) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 166 "lundump.c"
    case 5: 
      var $47=$1; //@line 166 "lundump.c"
      var $48=(($47)|0); //@line 166 "lundump.c"
      var $49=HEAP32[(($48)>>2)]; //@line 166 "lundump.c"
      __Z14luaD_growstackP9lua_Statei($49, 1); //@line 166 "lundump.c"
      __label__ = 7; break; //@line 166 "lundump.c"
    case 6: 
      __label__ = 7; break; //@line 166 "lundump.c"
    case 7: 
      var $52=$1; //@line 166 "lundump.c"
      var $53=(($52)|0); //@line 166 "lundump.c"
      var $54=HEAP32[(($53)>>2)]; //@line 166 "lundump.c"
      var $55=(($54+8)|0); //@line 166 "lundump.c"
      var $56=HEAP32[(($55)>>2)]; //@line 166 "lundump.c"
      var $57=(($56+12)|0); //@line 166 "lundump.c"
      HEAP32[(($55)>>2)]=$57; //@line 166 "lundump.c"
      var $58=$1; //@line 167 "lundump.c"
      var $59=__Z10LoadStringP9LoadState($58); //@line 167 "lundump.c"
      var $60=$f; //@line 167 "lundump.c"
      var $61=(($60+32)|0); //@line 167 "lundump.c"
      HEAP32[(($61)>>2)]=$59; //@line 167 "lundump.c"
      var $62=$f; //@line 167 "lundump.c"
      var $63=(($62+32)|0); //@line 167 "lundump.c"
      var $64=HEAP32[(($63)>>2)]; //@line 167 "lundump.c"
      var $65=(($64)|0)==0; //@line 167 "lundump.c"
      if ($65) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 167 "lundump.c"
    case 8: 
      var $67=$2; //@line 167 "lundump.c"
      var $68=$f; //@line 167 "lundump.c"
      var $69=(($68+32)|0); //@line 167 "lundump.c"
      HEAP32[(($69)>>2)]=$67; //@line 167 "lundump.c"
      __label__ = 9; break; //@line 167 "lundump.c"
    case 9: 
      var $71=$1; //@line 168 "lundump.c"
      var $72=__Z7LoadIntP9LoadState($71); //@line 168 "lundump.c"
      var $73=$f; //@line 168 "lundump.c"
      var $74=(($73+60)|0); //@line 168 "lundump.c"
      HEAP32[(($74)>>2)]=$72; //@line 168 "lundump.c"
      var $75=$1; //@line 169 "lundump.c"
      var $76=__Z7LoadIntP9LoadState($75); //@line 169 "lundump.c"
      var $77=$f; //@line 169 "lundump.c"
      var $78=(($77+64)|0); //@line 169 "lundump.c"
      HEAP32[(($78)>>2)]=$76; //@line 169 "lundump.c"
      var $79=$1; //@line 170 "lundump.c"
      var $80=__Z8LoadCharP9LoadState($79); //@line 170 "lundump.c"
      var $81=(($80) & 255); //@line 170 "lundump.c"
      var $82=$f; //@line 170 "lundump.c"
      var $83=(($82+72)|0); //@line 170 "lundump.c"
      HEAP8[($83)]=$81; //@line 170 "lundump.c"
      var $84=$1; //@line 171 "lundump.c"
      var $85=__Z8LoadCharP9LoadState($84); //@line 171 "lundump.c"
      var $86=(($85) & 255); //@line 171 "lundump.c"
      var $87=$f; //@line 171 "lundump.c"
      var $88=(($87+73)|0); //@line 171 "lundump.c"
      HEAP8[($88)]=$86; //@line 171 "lundump.c"
      var $89=$1; //@line 172 "lundump.c"
      var $90=__Z8LoadCharP9LoadState($89); //@line 172 "lundump.c"
      var $91=(($90) & 255); //@line 172 "lundump.c"
      var $92=$f; //@line 172 "lundump.c"
      var $93=(($92+74)|0); //@line 172 "lundump.c"
      HEAP8[($93)]=$91; //@line 172 "lundump.c"
      var $94=$1; //@line 173 "lundump.c"
      var $95=__Z8LoadCharP9LoadState($94); //@line 173 "lundump.c"
      var $96=(($95) & 255); //@line 173 "lundump.c"
      var $97=$f; //@line 173 "lundump.c"
      var $98=(($97+75)|0); //@line 173 "lundump.c"
      HEAP8[($98)]=$96; //@line 173 "lundump.c"
      var $99=$1; //@line 174 "lundump.c"
      var $100=$f; //@line 174 "lundump.c"
      __Z8LoadCodeP9LoadStateP5Proto($99, $100); //@line 174 "lundump.c"
      var $101=$1; //@line 175 "lundump.c"
      var $102=$f; //@line 175 "lundump.c"
      __Z13LoadConstantsP9LoadStateP5Proto($101, $102); //@line 175 "lundump.c"
      var $103=$1; //@line 176 "lundump.c"
      var $104=$f; //@line 176 "lundump.c"
      __Z9LoadDebugP9LoadStateP5Proto($103, $104); //@line 176 "lundump.c"
      var $105=$f; //@line 177 "lundump.c"
      var $106=__Z14luaG_checkcodePK5Proto($105); //@line 177 "lundump.c"
      var $107=(($106)|0)!=0; //@line 177 "lundump.c"
      if ($107) { __label__ = 11; break; } else { __label__ = 10; break; } //@line 177 "lundump.c"
    case 10: 
      var $109=$1; //@line 177 "lundump.c"
      __Z5errorP9LoadStatePKc($109, ((STRING_TABLE.__str4212)|0)); //@line 177 "lundump.c"
      __label__ = 11; break; //@line 177 "lundump.c"
    case 11: 
      var $111=$1; //@line 178 "lundump.c"
      var $112=(($111)|0); //@line 178 "lundump.c"
      var $113=HEAP32[(($112)>>2)]; //@line 178 "lundump.c"
      var $114=(($113+8)|0); //@line 178 "lundump.c"
      var $115=HEAP32[(($114)>>2)]; //@line 178 "lundump.c"
      var $116=((($115)-(12))|0); //@line 178 "lundump.c"
      HEAP32[(($114)>>2)]=$116; //@line 178 "lundump.c"
      var $117=$1; //@line 179 "lundump.c"
      var $118=(($117)|0); //@line 179 "lundump.c"
      var $119=HEAP32[(($118)>>2)]; //@line 179 "lundump.c"
      var $120=(($119+52)|0); //@line 179 "lundump.c"
      var $121=HEAP16[(($120)>>1)]; //@line 179 "lundump.c"
      var $122=((($121)-(1))&65535); //@line 179 "lundump.c"
      HEAP16[(($120)>>1)]=$122; //@line 179 "lundump.c"
      var $123=$f; //@line 180 "lundump.c"
      ;
      return $123; //@line 180 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12LoadFunctionP9LoadStateP7TString["X"]=1;

function __Z11luaU_headerPc($h) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $x=__stackBase__;
  $1=$h;
  HEAP32[(($x)>>2)]=1; //@line 216 "lundump.c"
  var $2=$1; //@line 217 "lundump.c"
  HEAP8[($2)]=HEAP8[(((STRING_TABLE.__str208)|0))];HEAP8[(($2)+(1))]=HEAP8[((((STRING_TABLE.__str208)|0))+(1))];HEAP8[(($2)+(2))]=HEAP8[((((STRING_TABLE.__str208)|0))+(2))];HEAP8[(($2)+(3))]=HEAP8[((((STRING_TABLE.__str208)|0))+(3))]; //@line 217 "lundump.c"
  var $3=$1; //@line 218 "lundump.c"
  var $4=(($3+4)|0); //@line 218 "lundump.c"
  $1=$4; //@line 218 "lundump.c"
  var $5=$1; //@line 219 "lundump.c"
  var $6=(($5+1)|0); //@line 219 "lundump.c"
  $1=$6; //@line 219 "lundump.c"
  HEAP8[($5)]=81; //@line 219 "lundump.c"
  var $7=$1; //@line 220 "lundump.c"
  var $8=(($7+1)|0); //@line 220 "lundump.c"
  $1=$8; //@line 220 "lundump.c"
  HEAP8[($7)]=0; //@line 220 "lundump.c"
  var $9=$x; //@line 221 "lundump.c"
  var $10=HEAP8[($9)]; //@line 221 "lundump.c"
  var $11=$1; //@line 221 "lundump.c"
  var $12=(($11+1)|0); //@line 221 "lundump.c"
  $1=$12; //@line 221 "lundump.c"
  HEAP8[($11)]=$10; //@line 221 "lundump.c"
  var $13=$1; //@line 222 "lundump.c"
  var $14=(($13+1)|0); //@line 222 "lundump.c"
  $1=$14; //@line 222 "lundump.c"
  HEAP8[($13)]=4; //@line 222 "lundump.c"
  var $15=$1; //@line 223 "lundump.c"
  var $16=(($15+1)|0); //@line 223 "lundump.c"
  $1=$16; //@line 223 "lundump.c"
  HEAP8[($15)]=4; //@line 223 "lundump.c"
  var $17=$1; //@line 224 "lundump.c"
  var $18=(($17+1)|0); //@line 224 "lundump.c"
  $1=$18; //@line 224 "lundump.c"
  HEAP8[($17)]=4; //@line 224 "lundump.c"
  var $19=$1; //@line 225 "lundump.c"
  var $20=(($19+1)|0); //@line 225 "lundump.c"
  $1=$20; //@line 225 "lundump.c"
  HEAP8[($19)]=8; //@line 225 "lundump.c"
  var $21=$1; //@line 226 "lundump.c"
  var $22=(($21+1)|0); //@line 226 "lundump.c"
  $1=$22; //@line 226 "lundump.c"
  HEAP8[($21)]=0; //@line 226 "lundump.c"
  STACKTOP = __stackBase__;
  return; //@line 227 "lundump.c"
}


function __Z5errorP9LoadStatePKc($S, $why) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  var $2;
  $1=$S;
  $2=$why;
  var $3=$1; //@line 38 "lundump.c"
  var $4=(($3)|0); //@line 38 "lundump.c"
  var $5=HEAP32[(($4)>>2)]; //@line 38 "lundump.c"
  var $6=$1; //@line 38 "lundump.c"
  var $7=(($6+12)|0); //@line 38 "lundump.c"
  var $8=HEAP32[(($7)>>2)]; //@line 38 "lundump.c"
  var $9=$2; //@line 38 "lundump.c"
  var $10=__Z16luaO_pushfstringP9lua_StatePKcz($5, ((STRING_TABLE.__str8216)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$8,HEAP32[(((tempInt)+(4))>>2)]=$9,tempInt)); //@line 38 "lundump.c"
  var $11=$1; //@line 39 "lundump.c"
  var $12=(($11)|0); //@line 39 "lundump.c"
  var $13=HEAP32[(($12)>>2)]; //@line 39 "lundump.c"
  __Z10luaD_throwP9lua_Statei($13, 3); //@line 39 "lundump.c"
  STACKTOP = __stackBase__;
  return; //@line 40 "lundump.c"
}


function __Z10LoadStringP9LoadState($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size=__stackBase__;
      var $s;
      $2=$S;
      var $3=$2; //@line 79 "lundump.c"
      var $4=$size; //@line 79 "lundump.c"
      __Z9LoadBlockP9LoadStatePvj($3, $4, 4); //@line 79 "lundump.c"
      var $5=HEAP32[(($size)>>2)]; //@line 80 "lundump.c"
      var $6=(($5)|0)==0; //@line 80 "lundump.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 80 "lundump.c"
    case 3: 
      $1=0; //@line 81 "lundump.c"
      __label__ = 5; break; //@line 81 "lundump.c"
    case 4: 
      var $9=$2; //@line 84 "lundump.c"
      var $10=(($9)|0); //@line 84 "lundump.c"
      var $11=HEAP32[(($10)>>2)]; //@line 84 "lundump.c"
      var $12=$2; //@line 84 "lundump.c"
      var $13=(($12+8)|0); //@line 84 "lundump.c"
      var $14=HEAP32[(($13)>>2)]; //@line 84 "lundump.c"
      var $15=HEAP32[(($size)>>2)]; //@line 84 "lundump.c"
      var $16=__Z14luaZ_openspaceP9lua_StateP7Mbufferj($11, $14, $15); //@line 84 "lundump.c"
      $s=$16; //@line 84 "lundump.c"
      var $17=$2; //@line 85 "lundump.c"
      var $18=$s; //@line 85 "lundump.c"
      var $19=HEAP32[(($size)>>2)]; //@line 85 "lundump.c"
      __Z9LoadBlockP9LoadStatePvj($17, $18, $19); //@line 85 "lundump.c"
      var $20=$2; //@line 86 "lundump.c"
      var $21=(($20)|0); //@line 86 "lundump.c"
      var $22=HEAP32[(($21)>>2)]; //@line 86 "lundump.c"
      var $23=$s; //@line 86 "lundump.c"
      var $24=HEAP32[(($size)>>2)]; //@line 86 "lundump.c"
      var $25=((($24)-(1))|0); //@line 86 "lundump.c"
      var $26=__Z12luaS_newlstrP9lua_StatePKcj($22, $23, $25); //@line 86 "lundump.c"
      $1=$26; //@line 86 "lundump.c"
      __label__ = 5; break; //@line 86 "lundump.c"
    case 5: 
      var $28=$1; //@line 88 "lundump.c"
      STACKTOP = __stackBase__;
      return $28; //@line 88 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7LoadIntP9LoadState($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $x=__stackBase__;
      $1=$S;
      var $2=$1; //@line 64 "lundump.c"
      var $3=$x; //@line 64 "lundump.c"
      __Z9LoadBlockP9LoadStatePvj($2, $3, 4); //@line 64 "lundump.c"
      var $4=HEAP32[(($x)>>2)]; //@line 65 "lundump.c"
      var $5=(($4)|0) < 0; //@line 65 "lundump.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 65 "lundump.c"
    case 3: 
      var $7=$1; //@line 65 "lundump.c"
      __Z5errorP9LoadStatePKc($7, ((STRING_TABLE.__str7215)|0)); //@line 65 "lundump.c"
      __label__ = 4; break; //@line 65 "lundump.c"
    case 4: 
      var $9=HEAP32[(($x)>>2)]; //@line 66 "lundump.c"
      STACKTOP = __stackBase__;
      return $9; //@line 66 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8LoadCharP9LoadState($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $x=__stackBase__;
  $1=$S;
  var $2=$1; //@line 57 "lundump.c"
  __Z9LoadBlockP9LoadStatePvj($2, $x, 1); //@line 57 "lundump.c"
  var $3=HEAP8[($x)]; //@line 58 "lundump.c"
  var $4=(($3 << 24) >> 24); //@line 58 "lundump.c"
  STACKTOP = __stackBase__;
  return $4; //@line 58 "lundump.c"
}


function __Z8LoadCodeP9LoadStateP5Proto($S, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      $1=$S;
      $2=$f;
      var $3=$1; //@line 92 "lundump.c"
      var $4=__Z7LoadIntP9LoadState($3); //@line 92 "lundump.c"
      $n=$4; //@line 92 "lundump.c"
      var $5=$n; //@line 93 "lundump.c"
      var $6=((($5)+(1))|0); //@line 93 "lundump.c"
      var $7=(($6)>>>0) <= 1073741823; //@line 93 "lundump.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 93 "lundump.c"
    case 3: 
      var $9=$1; //@line 93 "lundump.c"
      var $10=(($9)|0); //@line 93 "lundump.c"
      var $11=HEAP32[(($10)>>2)]; //@line 93 "lundump.c"
      var $12=$n; //@line 93 "lundump.c"
      var $13=((($12<<2))|0); //@line 93 "lundump.c"
      var $14=__Z13luaM_realloc_P9lua_StatePvjj($11, 0, 0, $13); //@line 93 "lundump.c"
      var $21 = $14;__label__ = 5; break; //@line 93 "lundump.c"
    case 4: 
      var $16=$1; //@line 93 "lundump.c"
      var $17=(($16)|0); //@line 93 "lundump.c"
      var $18=HEAP32[(($17)>>2)]; //@line 93 "lundump.c"
      var $19=__Z11luaM_toobigP9lua_State($18); //@line 93 "lundump.c"
      var $21 = $19;__label__ = 5; break; //@line 93 "lundump.c"
    case 5: 
      var $21; //@line 93 "lundump.c"
      var $22=$21; //@line 93 "lundump.c"
      var $23=$2; //@line 93 "lundump.c"
      var $24=(($23+12)|0); //@line 93 "lundump.c"
      HEAP32[(($24)>>2)]=$22; //@line 93 "lundump.c"
      var $25=$n; //@line 94 "lundump.c"
      var $26=$2; //@line 94 "lundump.c"
      var $27=(($26+44)|0); //@line 94 "lundump.c"
      HEAP32[(($27)>>2)]=$25; //@line 94 "lundump.c"
      var $28=$1; //@line 95 "lundump.c"
      var $29=$2; //@line 95 "lundump.c"
      var $30=(($29+12)|0); //@line 95 "lundump.c"
      var $31=HEAP32[(($30)>>2)]; //@line 95 "lundump.c"
      var $32=$31; //@line 95 "lundump.c"
      var $33=$n; //@line 95 "lundump.c"
      var $34=((($33<<2))|0); //@line 95 "lundump.c"
      __Z9LoadBlockP9LoadStatePvj($28, $32, $34); //@line 95 "lundump.c"
      ;
      return; //@line 96 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13LoadConstantsP9LoadStateP5Proto($S, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      var $o;
      var $t;
      var $i_o;
      var $i_o1;
      var $i_o2;
      $1=$S;
      $2=$f;
      var $3=$1; //@line 103 "lundump.c"
      var $4=__Z7LoadIntP9LoadState($3); //@line 103 "lundump.c"
      $n=$4; //@line 103 "lundump.c"
      var $5=$n; //@line 104 "lundump.c"
      var $6=((($5)+(1))|0); //@line 104 "lundump.c"
      var $7=(($6)>>>0) <= 357913941; //@line 104 "lundump.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 104 "lundump.c"
    case 3: 
      var $9=$1; //@line 104 "lundump.c"
      var $10=(($9)|0); //@line 104 "lundump.c"
      var $11=HEAP32[(($10)>>2)]; //@line 104 "lundump.c"
      var $12=$n; //@line 104 "lundump.c"
      var $13=((($12)*(12))|0); //@line 104 "lundump.c"
      var $14=__Z13luaM_realloc_P9lua_StatePvjj($11, 0, 0, $13); //@line 104 "lundump.c"
      var $21 = $14;__label__ = 5; break; //@line 104 "lundump.c"
    case 4: 
      var $16=$1; //@line 104 "lundump.c"
      var $17=(($16)|0); //@line 104 "lundump.c"
      var $18=HEAP32[(($17)>>2)]; //@line 104 "lundump.c"
      var $19=__Z11luaM_toobigP9lua_State($18); //@line 104 "lundump.c"
      var $21 = $19;__label__ = 5; break; //@line 104 "lundump.c"
    case 5: 
      var $21; //@line 104 "lundump.c"
      var $22=$21; //@line 104 "lundump.c"
      var $23=$2; //@line 104 "lundump.c"
      var $24=(($23+8)|0); //@line 104 "lundump.c"
      HEAP32[(($24)>>2)]=$22; //@line 104 "lundump.c"
      var $25=$n; //@line 105 "lundump.c"
      var $26=$2; //@line 105 "lundump.c"
      var $27=(($26+40)|0); //@line 105 "lundump.c"
      HEAP32[(($27)>>2)]=$25; //@line 105 "lundump.c"
      $i=0; //@line 106 "lundump.c"
      __label__ = 6; break; //@line 106 "lundump.c"
    case 6: 
      var $29=$i; //@line 106 "lundump.c"
      var $30=$n; //@line 106 "lundump.c"
      var $31=(($29)|0) < (($30)|0); //@line 106 "lundump.c"
      if ($31) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 106 "lundump.c"
    case 7: 
      var $33=$i; //@line 106 "lundump.c"
      var $34=$2; //@line 106 "lundump.c"
      var $35=(($34+8)|0); //@line 106 "lundump.c"
      var $36=HEAP32[(($35)>>2)]; //@line 106 "lundump.c"
      var $37=(($36+($33)*(12))|0); //@line 106 "lundump.c"
      var $38=(($37+8)|0); //@line 106 "lundump.c"
      HEAP32[(($38)>>2)]=0; //@line 106 "lundump.c"
      __label__ = 8; break; //@line 106 "lundump.c"
    case 8: 
      var $40=$i; //@line 106 "lundump.c"
      var $41=((($40)+(1))|0); //@line 106 "lundump.c"
      $i=$41; //@line 106 "lundump.c"
      __label__ = 6; break; //@line 106 "lundump.c"
    case 9: 
      $i=0; //@line 107 "lundump.c"
      __label__ = 10; break; //@line 107 "lundump.c"
    case 10: 
      var $44=$i; //@line 107 "lundump.c"
      var $45=$n; //@line 107 "lundump.c"
      var $46=(($44)|0) < (($45)|0); //@line 107 "lundump.c"
      if ($46) { __label__ = 11; break; } else { __label__ = 19; break; } //@line 107 "lundump.c"
    case 11: 
      var $48=$i; //@line 109 "lundump.c"
      var $49=$2; //@line 109 "lundump.c"
      var $50=(($49+8)|0); //@line 109 "lundump.c"
      var $51=HEAP32[(($50)>>2)]; //@line 109 "lundump.c"
      var $52=(($51+($48)*(12))|0); //@line 109 "lundump.c"
      $o=$52; //@line 109 "lundump.c"
      var $53=$1; //@line 110 "lundump.c"
      var $54=__Z8LoadCharP9LoadState($53); //@line 110 "lundump.c"
      $t=$54; //@line 110 "lundump.c"
      var $55=$t; //@line 111 "lundump.c"
      if ((($55)|0) == 0) {
        __label__ = 12; break;
      }
      else if ((($55)|0) == 1) {
        __label__ = 13; break;
      }
      else if ((($55)|0) == 3) {
        __label__ = 14; break;
      }
      else if ((($55)|0) == 4) {
        __label__ = 15; break;
      }
      else {
      __label__ = 16; break;
      }
      
    case 12: 
      var $57=$o; //@line 114 "lundump.c"
      var $58=(($57+8)|0); //@line 114 "lundump.c"
      HEAP32[(($58)>>2)]=0; //@line 114 "lundump.c"
      __label__ = 17; break; //@line 115 "lundump.c"
    case 13: 
      var $60=$o; //@line 117 "lundump.c"
      $i_o=$60; //@line 117 "lundump.c"
      var $61=$1; //@line 117 "lundump.c"
      var $62=__Z8LoadCharP9LoadState($61); //@line 117 "lundump.c"
      var $63=(($62)|0)!=0; //@line 117 "lundump.c"
      var $64=(($63)&1); //@line 117 "lundump.c"
      var $65=$i_o; //@line 117 "lundump.c"
      var $66=(($65)|0); //@line 117 "lundump.c"
      var $67=$66; //@line 117 "lundump.c"
      HEAP32[(($67)>>2)]=$64; //@line 117 "lundump.c"
      var $68=$i_o; //@line 117 "lundump.c"
      var $69=(($68+8)|0); //@line 117 "lundump.c"
      HEAP32[(($69)>>2)]=1; //@line 117 "lundump.c"
      __label__ = 17; break; //@line 118 "lundump.c"
    case 14: 
      var $71=$o; //@line 120 "lundump.c"
      $i_o1=$71; //@line 120 "lundump.c"
      var $72=$1; //@line 120 "lundump.c"
      var $73=__Z10LoadNumberP9LoadState($72); //@line 120 "lundump.c"
      var $74=$i_o1; //@line 120 "lundump.c"
      var $75=(($74)|0); //@line 120 "lundump.c"
      var $76=$75; //@line 120 "lundump.c"
      (tempDoubleF64[0]=$73,HEAP32[(($76)>>2)]=tempDoubleI32[0],HEAP32[((($76)+(4))>>2)]=tempDoubleI32[1]); //@line 120 "lundump.c"
      var $77=$i_o1; //@line 120 "lundump.c"
      var $78=(($77+8)|0); //@line 120 "lundump.c"
      HEAP32[(($78)>>2)]=3; //@line 120 "lundump.c"
      __label__ = 17; break; //@line 121 "lundump.c"
    case 15: 
      var $80=$o; //@line 123 "lundump.c"
      $i_o2=$80; //@line 123 "lundump.c"
      var $81=$1; //@line 123 "lundump.c"
      var $82=__Z10LoadStringP9LoadState($81); //@line 123 "lundump.c"
      var $83=$82; //@line 123 "lundump.c"
      var $84=$i_o2; //@line 123 "lundump.c"
      var $85=(($84)|0); //@line 123 "lundump.c"
      var $86=$85; //@line 123 "lundump.c"
      HEAP32[(($86)>>2)]=$83; //@line 123 "lundump.c"
      var $87=$i_o2; //@line 123 "lundump.c"
      var $88=(($87+8)|0); //@line 123 "lundump.c"
      HEAP32[(($88)>>2)]=4; //@line 123 "lundump.c"
      __label__ = 17; break; //@line 124 "lundump.c"
    case 16: 
      var $90=$1; //@line 126 "lundump.c"
      __Z5errorP9LoadStatePKc($90, ((STRING_TABLE.__str6214)|0)); //@line 126 "lundump.c"
      __label__ = 17; break; //@line 127 "lundump.c"
    case 17: 
      __label__ = 18; break; //@line 129 "lundump.c"
    case 18: 
      var $93=$i; //@line 107 "lundump.c"
      var $94=((($93)+(1))|0); //@line 107 "lundump.c"
      $i=$94; //@line 107 "lundump.c"
      __label__ = 10; break; //@line 107 "lundump.c"
    case 19: 
      var $96=$1; //@line 130 "lundump.c"
      var $97=__Z7LoadIntP9LoadState($96); //@line 130 "lundump.c"
      $n=$97; //@line 130 "lundump.c"
      var $98=$n; //@line 131 "lundump.c"
      var $99=((($98)+(1))|0); //@line 131 "lundump.c"
      var $100=(($99)>>>0) <= 1073741823; //@line 131 "lundump.c"
      if ($100) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 131 "lundump.c"
    case 20: 
      var $102=$1; //@line 131 "lundump.c"
      var $103=(($102)|0); //@line 131 "lundump.c"
      var $104=HEAP32[(($103)>>2)]; //@line 131 "lundump.c"
      var $105=$n; //@line 131 "lundump.c"
      var $106=((($105<<2))|0); //@line 131 "lundump.c"
      var $107=__Z13luaM_realloc_P9lua_StatePvjj($104, 0, 0, $106); //@line 131 "lundump.c"
      var $114 = $107;__label__ = 22; break; //@line 131 "lundump.c"
    case 21: 
      var $109=$1; //@line 131 "lundump.c"
      var $110=(($109)|0); //@line 131 "lundump.c"
      var $111=HEAP32[(($110)>>2)]; //@line 131 "lundump.c"
      var $112=__Z11luaM_toobigP9lua_State($111); //@line 131 "lundump.c"
      var $114 = $112;__label__ = 22; break; //@line 131 "lundump.c"
    case 22: 
      var $114; //@line 131 "lundump.c"
      var $115=$114; //@line 131 "lundump.c"
      var $116=$2; //@line 131 "lundump.c"
      var $117=(($116+16)|0); //@line 131 "lundump.c"
      HEAP32[(($117)>>2)]=$115; //@line 131 "lundump.c"
      var $118=$n; //@line 132 "lundump.c"
      var $119=$2; //@line 132 "lundump.c"
      var $120=(($119+52)|0); //@line 132 "lundump.c"
      HEAP32[(($120)>>2)]=$118; //@line 132 "lundump.c"
      $i=0; //@line 133 "lundump.c"
      __label__ = 23; break; //@line 133 "lundump.c"
    case 23: 
      var $122=$i; //@line 133 "lundump.c"
      var $123=$n; //@line 133 "lundump.c"
      var $124=(($122)|0) < (($123)|0); //@line 133 "lundump.c"
      if ($124) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 133 "lundump.c"
    case 24: 
      var $126=$i; //@line 133 "lundump.c"
      var $127=$2; //@line 133 "lundump.c"
      var $128=(($127+16)|0); //@line 133 "lundump.c"
      var $129=HEAP32[(($128)>>2)]; //@line 133 "lundump.c"
      var $130=(($129+($126<<2))|0); //@line 133 "lundump.c"
      HEAP32[(($130)>>2)]=0; //@line 133 "lundump.c"
      __label__ = 25; break; //@line 133 "lundump.c"
    case 25: 
      var $132=$i; //@line 133 "lundump.c"
      var $133=((($132)+(1))|0); //@line 133 "lundump.c"
      $i=$133; //@line 133 "lundump.c"
      __label__ = 23; break; //@line 133 "lundump.c"
    case 26: 
      $i=0; //@line 134 "lundump.c"
      __label__ = 27; break; //@line 134 "lundump.c"
    case 27: 
      var $136=$i; //@line 134 "lundump.c"
      var $137=$n; //@line 134 "lundump.c"
      var $138=(($136)|0) < (($137)|0); //@line 134 "lundump.c"
      if ($138) { __label__ = 28; break; } else { __label__ = 30; break; } //@line 134 "lundump.c"
    case 28: 
      var $140=$1; //@line 134 "lundump.c"
      var $141=$2; //@line 134 "lundump.c"
      var $142=(($141+32)|0); //@line 134 "lundump.c"
      var $143=HEAP32[(($142)>>2)]; //@line 134 "lundump.c"
      var $144=__Z12LoadFunctionP9LoadStateP7TString($140, $143); //@line 134 "lundump.c"
      var $145=$i; //@line 134 "lundump.c"
      var $146=$2; //@line 134 "lundump.c"
      var $147=(($146+16)|0); //@line 134 "lundump.c"
      var $148=HEAP32[(($147)>>2)]; //@line 134 "lundump.c"
      var $149=(($148+($145<<2))|0); //@line 134 "lundump.c"
      HEAP32[(($149)>>2)]=$144; //@line 134 "lundump.c"
      __label__ = 29; break; //@line 134 "lundump.c"
    case 29: 
      var $151=$i; //@line 134 "lundump.c"
      var $152=((($151)+(1))|0); //@line 134 "lundump.c"
      $i=$152; //@line 134 "lundump.c"
      __label__ = 27; break; //@line 134 "lundump.c"
    case 30: 
      ;
      return; //@line 135 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13LoadConstantsP9LoadStateP5Proto["X"]=1;

function __Z9LoadDebugP9LoadStateP5Proto($S, $f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      $1=$S;
      $2=$f;
      var $3=$1; //@line 140 "lundump.c"
      var $4=__Z7LoadIntP9LoadState($3); //@line 140 "lundump.c"
      $n=$4; //@line 140 "lundump.c"
      var $5=$n; //@line 141 "lundump.c"
      var $6=((($5)+(1))|0); //@line 141 "lundump.c"
      var $7=(($6)>>>0) <= 1073741823; //@line 141 "lundump.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 141 "lundump.c"
    case 3: 
      var $9=$1; //@line 141 "lundump.c"
      var $10=(($9)|0); //@line 141 "lundump.c"
      var $11=HEAP32[(($10)>>2)]; //@line 141 "lundump.c"
      var $12=$n; //@line 141 "lundump.c"
      var $13=((($12<<2))|0); //@line 141 "lundump.c"
      var $14=__Z13luaM_realloc_P9lua_StatePvjj($11, 0, 0, $13); //@line 141 "lundump.c"
      var $21 = $14;__label__ = 5; break; //@line 141 "lundump.c"
    case 4: 
      var $16=$1; //@line 141 "lundump.c"
      var $17=(($16)|0); //@line 141 "lundump.c"
      var $18=HEAP32[(($17)>>2)]; //@line 141 "lundump.c"
      var $19=__Z11luaM_toobigP9lua_State($18); //@line 141 "lundump.c"
      var $21 = $19;__label__ = 5; break; //@line 141 "lundump.c"
    case 5: 
      var $21; //@line 141 "lundump.c"
      var $22=$21; //@line 141 "lundump.c"
      var $23=$2; //@line 141 "lundump.c"
      var $24=(($23+20)|0); //@line 141 "lundump.c"
      HEAP32[(($24)>>2)]=$22; //@line 141 "lundump.c"
      var $25=$n; //@line 142 "lundump.c"
      var $26=$2; //@line 142 "lundump.c"
      var $27=(($26+48)|0); //@line 142 "lundump.c"
      HEAP32[(($27)>>2)]=$25; //@line 142 "lundump.c"
      var $28=$1; //@line 143 "lundump.c"
      var $29=$2; //@line 143 "lundump.c"
      var $30=(($29+20)|0); //@line 143 "lundump.c"
      var $31=HEAP32[(($30)>>2)]; //@line 143 "lundump.c"
      var $32=$31; //@line 143 "lundump.c"
      var $33=$n; //@line 143 "lundump.c"
      var $34=((($33<<2))|0); //@line 143 "lundump.c"
      __Z9LoadBlockP9LoadStatePvj($28, $32, $34); //@line 143 "lundump.c"
      var $35=$1; //@line 144 "lundump.c"
      var $36=__Z7LoadIntP9LoadState($35); //@line 144 "lundump.c"
      $n=$36; //@line 144 "lundump.c"
      var $37=$n; //@line 145 "lundump.c"
      var $38=((($37)+(1))|0); //@line 145 "lundump.c"
      var $39=(($38)>>>0) <= 357913941; //@line 145 "lundump.c"
      if ($39) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 145 "lundump.c"
    case 6: 
      var $41=$1; //@line 145 "lundump.c"
      var $42=(($41)|0); //@line 145 "lundump.c"
      var $43=HEAP32[(($42)>>2)]; //@line 145 "lundump.c"
      var $44=$n; //@line 145 "lundump.c"
      var $45=((($44)*(12))|0); //@line 145 "lundump.c"
      var $46=__Z13luaM_realloc_P9lua_StatePvjj($43, 0, 0, $45); //@line 145 "lundump.c"
      var $53 = $46;__label__ = 8; break; //@line 145 "lundump.c"
    case 7: 
      var $48=$1; //@line 145 "lundump.c"
      var $49=(($48)|0); //@line 145 "lundump.c"
      var $50=HEAP32[(($49)>>2)]; //@line 145 "lundump.c"
      var $51=__Z11luaM_toobigP9lua_State($50); //@line 145 "lundump.c"
      var $53 = $51;__label__ = 8; break; //@line 145 "lundump.c"
    case 8: 
      var $53; //@line 145 "lundump.c"
      var $54=$53; //@line 145 "lundump.c"
      var $55=$2; //@line 145 "lundump.c"
      var $56=(($55+24)|0); //@line 145 "lundump.c"
      HEAP32[(($56)>>2)]=$54; //@line 145 "lundump.c"
      var $57=$n; //@line 146 "lundump.c"
      var $58=$2; //@line 146 "lundump.c"
      var $59=(($58+56)|0); //@line 146 "lundump.c"
      HEAP32[(($59)>>2)]=$57; //@line 146 "lundump.c"
      $i=0; //@line 147 "lundump.c"
      __label__ = 9; break; //@line 147 "lundump.c"
    case 9: 
      var $61=$i; //@line 147 "lundump.c"
      var $62=$n; //@line 147 "lundump.c"
      var $63=(($61)|0) < (($62)|0); //@line 147 "lundump.c"
      if ($63) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 147 "lundump.c"
    case 10: 
      var $65=$i; //@line 147 "lundump.c"
      var $66=$2; //@line 147 "lundump.c"
      var $67=(($66+24)|0); //@line 147 "lundump.c"
      var $68=HEAP32[(($67)>>2)]; //@line 147 "lundump.c"
      var $69=(($68+($65)*(12))|0); //@line 147 "lundump.c"
      var $70=(($69)|0); //@line 147 "lundump.c"
      HEAP32[(($70)>>2)]=0; //@line 147 "lundump.c"
      __label__ = 11; break; //@line 147 "lundump.c"
    case 11: 
      var $72=$i; //@line 147 "lundump.c"
      var $73=((($72)+(1))|0); //@line 147 "lundump.c"
      $i=$73; //@line 147 "lundump.c"
      __label__ = 9; break; //@line 147 "lundump.c"
    case 12: 
      $i=0; //@line 148 "lundump.c"
      __label__ = 13; break; //@line 148 "lundump.c"
    case 13: 
      var $76=$i; //@line 148 "lundump.c"
      var $77=$n; //@line 148 "lundump.c"
      var $78=(($76)|0) < (($77)|0); //@line 148 "lundump.c"
      if ($78) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 148 "lundump.c"
    case 14: 
      var $80=$1; //@line 150 "lundump.c"
      var $81=__Z10LoadStringP9LoadState($80); //@line 150 "lundump.c"
      var $82=$i; //@line 150 "lundump.c"
      var $83=$2; //@line 150 "lundump.c"
      var $84=(($83+24)|0); //@line 150 "lundump.c"
      var $85=HEAP32[(($84)>>2)]; //@line 150 "lundump.c"
      var $86=(($85+($82)*(12))|0); //@line 150 "lundump.c"
      var $87=(($86)|0); //@line 150 "lundump.c"
      HEAP32[(($87)>>2)]=$81; //@line 150 "lundump.c"
      var $88=$1; //@line 151 "lundump.c"
      var $89=__Z7LoadIntP9LoadState($88); //@line 151 "lundump.c"
      var $90=$i; //@line 151 "lundump.c"
      var $91=$2; //@line 151 "lundump.c"
      var $92=(($91+24)|0); //@line 151 "lundump.c"
      var $93=HEAP32[(($92)>>2)]; //@line 151 "lundump.c"
      var $94=(($93+($90)*(12))|0); //@line 151 "lundump.c"
      var $95=(($94+4)|0); //@line 151 "lundump.c"
      HEAP32[(($95)>>2)]=$89; //@line 151 "lundump.c"
      var $96=$1; //@line 152 "lundump.c"
      var $97=__Z7LoadIntP9LoadState($96); //@line 152 "lundump.c"
      var $98=$i; //@line 152 "lundump.c"
      var $99=$2; //@line 152 "lundump.c"
      var $100=(($99+24)|0); //@line 152 "lundump.c"
      var $101=HEAP32[(($100)>>2)]; //@line 152 "lundump.c"
      var $102=(($101+($98)*(12))|0); //@line 152 "lundump.c"
      var $103=(($102+8)|0); //@line 152 "lundump.c"
      HEAP32[(($103)>>2)]=$97; //@line 152 "lundump.c"
      __label__ = 15; break; //@line 153 "lundump.c"
    case 15: 
      var $105=$i; //@line 148 "lundump.c"
      var $106=((($105)+(1))|0); //@line 148 "lundump.c"
      $i=$106; //@line 148 "lundump.c"
      __label__ = 13; break; //@line 148 "lundump.c"
    case 16: 
      var $108=$1; //@line 154 "lundump.c"
      var $109=__Z7LoadIntP9LoadState($108); //@line 154 "lundump.c"
      $n=$109; //@line 154 "lundump.c"
      var $110=$n; //@line 155 "lundump.c"
      var $111=((($110)+(1))|0); //@line 155 "lundump.c"
      var $112=(($111)>>>0) <= 1073741823; //@line 155 "lundump.c"
      if ($112) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 155 "lundump.c"
    case 17: 
      var $114=$1; //@line 155 "lundump.c"
      var $115=(($114)|0); //@line 155 "lundump.c"
      var $116=HEAP32[(($115)>>2)]; //@line 155 "lundump.c"
      var $117=$n; //@line 155 "lundump.c"
      var $118=((($117<<2))|0); //@line 155 "lundump.c"
      var $119=__Z13luaM_realloc_P9lua_StatePvjj($116, 0, 0, $118); //@line 155 "lundump.c"
      var $126 = $119;__label__ = 19; break; //@line 155 "lundump.c"
    case 18: 
      var $121=$1; //@line 155 "lundump.c"
      var $122=(($121)|0); //@line 155 "lundump.c"
      var $123=HEAP32[(($122)>>2)]; //@line 155 "lundump.c"
      var $124=__Z11luaM_toobigP9lua_State($123); //@line 155 "lundump.c"
      var $126 = $124;__label__ = 19; break; //@line 155 "lundump.c"
    case 19: 
      var $126; //@line 155 "lundump.c"
      var $127=$126; //@line 155 "lundump.c"
      var $128=$2; //@line 155 "lundump.c"
      var $129=(($128+28)|0); //@line 155 "lundump.c"
      HEAP32[(($129)>>2)]=$127; //@line 155 "lundump.c"
      var $130=$n; //@line 156 "lundump.c"
      var $131=$2; //@line 156 "lundump.c"
      var $132=(($131+36)|0); //@line 156 "lundump.c"
      HEAP32[(($132)>>2)]=$130; //@line 156 "lundump.c"
      $i=0; //@line 157 "lundump.c"
      __label__ = 20; break; //@line 157 "lundump.c"
    case 20: 
      var $134=$i; //@line 157 "lundump.c"
      var $135=$n; //@line 157 "lundump.c"
      var $136=(($134)|0) < (($135)|0); //@line 157 "lundump.c"
      if ($136) { __label__ = 21; break; } else { __label__ = 23; break; } //@line 157 "lundump.c"
    case 21: 
      var $138=$i; //@line 157 "lundump.c"
      var $139=$2; //@line 157 "lundump.c"
      var $140=(($139+28)|0); //@line 157 "lundump.c"
      var $141=HEAP32[(($140)>>2)]; //@line 157 "lundump.c"
      var $142=(($141+($138<<2))|0); //@line 157 "lundump.c"
      HEAP32[(($142)>>2)]=0; //@line 157 "lundump.c"
      __label__ = 22; break; //@line 157 "lundump.c"
    case 22: 
      var $144=$i; //@line 157 "lundump.c"
      var $145=((($144)+(1))|0); //@line 157 "lundump.c"
      $i=$145; //@line 157 "lundump.c"
      __label__ = 20; break; //@line 157 "lundump.c"
    case 23: 
      $i=0; //@line 158 "lundump.c"
      __label__ = 24; break; //@line 158 "lundump.c"
    case 24: 
      var $148=$i; //@line 158 "lundump.c"
      var $149=$n; //@line 158 "lundump.c"
      var $150=(($148)|0) < (($149)|0); //@line 158 "lundump.c"
      if ($150) { __label__ = 25; break; } else { __label__ = 27; break; } //@line 158 "lundump.c"
    case 25: 
      var $152=$1; //@line 158 "lundump.c"
      var $153=__Z10LoadStringP9LoadState($152); //@line 158 "lundump.c"
      var $154=$i; //@line 158 "lundump.c"
      var $155=$2; //@line 158 "lundump.c"
      var $156=(($155+28)|0); //@line 158 "lundump.c"
      var $157=HEAP32[(($156)>>2)]; //@line 158 "lundump.c"
      var $158=(($157+($154<<2))|0); //@line 158 "lundump.c"
      HEAP32[(($158)>>2)]=$153; //@line 158 "lundump.c"
      __label__ = 26; break; //@line 158 "lundump.c"
    case 26: 
      var $160=$i; //@line 158 "lundump.c"
      var $161=((($160)+(1))|0); //@line 158 "lundump.c"
      $i=$161; //@line 158 "lundump.c"
      __label__ = 24; break; //@line 158 "lundump.c"
    case 27: 
      ;
      return; //@line 159 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9LoadDebugP9LoadStateP5Proto["X"]=1;

function __Z9LoadBlockP9LoadStatePvj($S, $b, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $r;
      $1=$S;
      $2=$b;
      $3=$size;
      var $4=$1; //@line 50 "lundump.c"
      var $5=(($4+4)|0); //@line 50 "lundump.c"
      var $6=HEAP32[(($5)>>2)]; //@line 50 "lundump.c"
      var $7=$2; //@line 50 "lundump.c"
      var $8=$3; //@line 50 "lundump.c"
      var $9=__Z9luaZ_readP3ZioPvj($6, $7, $8); //@line 50 "lundump.c"
      $r=$9; //@line 50 "lundump.c"
      var $10=$r; //@line 51 "lundump.c"
      var $11=(($10)|0)!=0; //@line 51 "lundump.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 51 "lundump.c"
    case 3: 
      var $13=$1; //@line 51 "lundump.c"
      __Z5errorP9LoadStatePKc($13, ((STRING_TABLE.__str5213)|0)); //@line 51 "lundump.c"
      __label__ = 4; break; //@line 51 "lundump.c"
    case 4: 
      ;
      return; //@line 52 "lundump.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10LoadNumberP9LoadState($S) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;

  var $1;
  var $x=__stackBase__;
  $1=$S;
  var $2=$1; //@line 72 "lundump.c"
  var $3=$x; //@line 72 "lundump.c"
  __Z9LoadBlockP9LoadStatePvj($2, $3, 8); //@line 72 "lundump.c"
  var $4=(tempDoubleI32[0]=HEAP32[(($x)>>2)],tempDoubleI32[1]=HEAP32[((($x)+(4))>>2)],tempDoubleF64[0]); //@line 73 "lundump.c"
  STACKTOP = __stackBase__;
  return $4; //@line 73 "lundump.c"
}


function __Z13luaV_tonumberPK10lua_TValuePS_($obj, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $num=__stackBase__;
      var $i_o;
      $2=$obj;
      $3=$n;
      var $4=$2; //@line 37 "lvm.c"
      var $5=(($4+8)|0); //@line 37 "lvm.c"
      var $6=HEAP32[(($5)>>2)]; //@line 37 "lvm.c"
      var $7=(($6)|0)==3; //@line 37 "lvm.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 37 "lvm.c"
    case 3: 
      var $9=$2; //@line 37 "lvm.c"
      $1=$9; //@line 37 "lvm.c"
      __label__ = 8; break; //@line 37 "lvm.c"
    case 4: 
      var $11=$2; //@line 38 "lvm.c"
      var $12=(($11+8)|0); //@line 38 "lvm.c"
      var $13=HEAP32[(($12)>>2)]; //@line 38 "lvm.c"
      var $14=(($13)|0)==4; //@line 38 "lvm.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 38 "lvm.c"
    case 5: 
      var $16=$2; //@line 38 "lvm.c"
      var $17=(($16)|0); //@line 38 "lvm.c"
      var $18=$17; //@line 38 "lvm.c"
      var $19=HEAP32[(($18)>>2)]; //@line 38 "lvm.c"
      var $20=$19; //@line 38 "lvm.c"
      var $21=(($20+16)|0); //@line 38 "lvm.c"
      var $22=$21; //@line 38 "lvm.c"
      var $23=__Z10luaO_str2dPKcPd($22, $num); //@line 38 "lvm.c"
      var $24=(($23)|0)!=0; //@line 38 "lvm.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 38 "lvm.c"
    case 6: 
      var $26=$3; //@line 39 "lvm.c"
      $i_o=$26; //@line 39 "lvm.c"
      var $27=(tempDoubleI32[0]=HEAP32[(($num)>>2)],tempDoubleI32[1]=HEAP32[((($num)+(4))>>2)],tempDoubleF64[0]); //@line 39 "lvm.c"
      var $28=$i_o; //@line 39 "lvm.c"
      var $29=(($28)|0); //@line 39 "lvm.c"
      var $30=$29; //@line 39 "lvm.c"
      (tempDoubleF64[0]=$27,HEAP32[(($30)>>2)]=tempDoubleI32[0],HEAP32[((($30)+(4))>>2)]=tempDoubleI32[1]); //@line 39 "lvm.c"
      var $31=$i_o; //@line 39 "lvm.c"
      var $32=(($31+8)|0); //@line 39 "lvm.c"
      HEAP32[(($32)>>2)]=3; //@line 39 "lvm.c"
      var $33=$3; //@line 40 "lvm.c"
      $1=$33; //@line 40 "lvm.c"
      __label__ = 8; break; //@line 40 "lvm.c"
    case 7: 
      $1=0; //@line 43 "lvm.c"
      __label__ = 8; break; //@line 43 "lvm.c"
    case 8: 
      var $36=$1; //@line 44 "lvm.c"
      STACKTOP = __stackBase__;
      return $36; //@line 44 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaV_tostringP9lua_StateP10lua_TValue($L, $obj) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; _memset(__stackBase__, 0, 32);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $s=__stackBase__;
      var $n;
      var $i_o;
      $2=$L;
      $3=$obj;
      var $4=$3; //@line 48 "lvm.c"
      var $5=(($4+8)|0); //@line 48 "lvm.c"
      var $6=HEAP32[(($5)>>2)]; //@line 48 "lvm.c"
      var $7=(($6)|0)==3; //@line 48 "lvm.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 48 "lvm.c"
    case 3: 
      $1=0; //@line 49 "lvm.c"
      __label__ = 5; break; //@line 49 "lvm.c"
    case 4: 
      var $10=$3; //@line 52 "lvm.c"
      var $11=(($10)|0); //@line 52 "lvm.c"
      var $12=$11; //@line 52 "lvm.c"
      var $13=(tempDoubleI32[0]=HEAP32[(($12)>>2)],tempDoubleI32[1]=HEAP32[((($12)+(4))>>2)],tempDoubleF64[0]); //@line 52 "lvm.c"
      $n=$13; //@line 52 "lvm.c"
      var $14=(($s)|0); //@line 53 "lvm.c"
      var $15=$n; //@line 53 "lvm.c"
      var $16=_sprintf($14, ((STRING_TABLE.__str220)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,(tempDoubleF64[0]=$15,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt)); //@line 53 "lvm.c"
      var $17=$3; //@line 54 "lvm.c"
      $i_o=$17; //@line 54 "lvm.c"
      var $18=$2; //@line 54 "lvm.c"
      var $19=(($s)|0); //@line 54 "lvm.c"
      var $20=(($s)|0); //@line 54 "lvm.c"
      var $21=_strlen($20); //@line 54 "lvm.c"
      var $22=__Z12luaS_newlstrP9lua_StatePKcj($18, $19, $21); //@line 54 "lvm.c"
      var $23=$22; //@line 54 "lvm.c"
      var $24=$i_o; //@line 54 "lvm.c"
      var $25=(($24)|0); //@line 54 "lvm.c"
      var $26=$25; //@line 54 "lvm.c"
      HEAP32[(($26)>>2)]=$23; //@line 54 "lvm.c"
      var $27=$i_o; //@line 54 "lvm.c"
      var $28=(($27+8)|0); //@line 54 "lvm.c"
      HEAP32[(($28)>>2)]=4; //@line 54 "lvm.c"
      $1=1; //@line 55 "lvm.c"
      __label__ = 5; break; //@line 55 "lvm.c"
    case 5: 
      var $30=$1; //@line 57 "lvm.c"
      STACKTOP = __stackBase__;
      return $30; //@line 57 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($L, $t, $key, $val) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $loop;
      var $tm;
      var $h;
      var $res;
      var $o2;
      var $o1;
      $1=$L;
      $2=$t;
      $3=$key;
      $4=$val;
      $loop=0; //@line 110 "lvm.c"
      __label__ = 3; break; //@line 110 "lvm.c"
    case 3: 
      var $6=$loop; //@line 110 "lvm.c"
      var $7=(($6)|0) < 100; //@line 110 "lvm.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 22; break; } //@line 110 "lvm.c"
    case 4: 
      var $9=$2; //@line 112 "lvm.c"
      var $10=(($9+8)|0); //@line 112 "lvm.c"
      var $11=HEAP32[(($10)>>2)]; //@line 112 "lvm.c"
      var $12=(($11)|0)==5; //@line 112 "lvm.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 15; break; } //@line 112 "lvm.c"
    case 5: 
      var $14=$2; //@line 113 "lvm.c"
      var $15=(($14)|0); //@line 113 "lvm.c"
      var $16=$15; //@line 113 "lvm.c"
      var $17=HEAP32[(($16)>>2)]; //@line 113 "lvm.c"
      var $18=$17; //@line 113 "lvm.c"
      $h=$18; //@line 113 "lvm.c"
      var $19=$h; //@line 114 "lvm.c"
      var $20=$3; //@line 114 "lvm.c"
      var $21=__Z8luaH_getP5TablePK10lua_TValue($19, $20); //@line 114 "lvm.c"
      $res=$21; //@line 114 "lvm.c"
      var $22=$res; //@line 115 "lvm.c"
      var $23=(($22+8)|0); //@line 115 "lvm.c"
      var $24=HEAP32[(($23)>>2)]; //@line 115 "lvm.c"
      var $25=(($24)|0)==0; //@line 115 "lvm.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 13; break; } //@line 115 "lvm.c"
    case 6: 
      var $27=$h; //@line 115 "lvm.c"
      var $28=(($27+8)|0); //@line 115 "lvm.c"
      var $29=HEAP32[(($28)>>2)]; //@line 115 "lvm.c"
      var $30=(($29)|0)==0; //@line 115 "lvm.c"
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 115 "lvm.c"
    case 7: 
      var $56 = 0;__label__ = 12; break; //@line 115 "lvm.c"
    case 8: 
      var $33=$h; //@line 115 "lvm.c"
      var $34=(($33+8)|0); //@line 115 "lvm.c"
      var $35=HEAP32[(($34)>>2)]; //@line 115 "lvm.c"
      var $36=(($35+6)|0); //@line 115 "lvm.c"
      var $37=HEAPU8[($36)]; //@line 115 "lvm.c"
      var $38=(($37)&255); //@line 115 "lvm.c"
      var $39=$38 & 1; //@line 115 "lvm.c"
      var $40=(($39)|0)!=0; //@line 115 "lvm.c"
      if ($40) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 115 "lvm.c"
    case 9: 
      var $54 = 0;__label__ = 11; break; //@line 115 "lvm.c"
    case 10: 
      var $43=$h; //@line 116 "lvm.c"
      var $44=(($43+8)|0); //@line 116 "lvm.c"
      var $45=HEAP32[(($44)>>2)]; //@line 116 "lvm.c"
      var $46=$1; //@line 116 "lvm.c"
      var $47=(($46+16)|0); //@line 116 "lvm.c"
      var $48=HEAP32[(($47)>>2)]; //@line 116 "lvm.c"
      var $49=(($48+168)|0); //@line 116 "lvm.c"
      var $50=(($49)|0); //@line 116 "lvm.c"
      var $51=HEAP32[(($50)>>2)]; //@line 116 "lvm.c"
      var $52=__Z10luaT_gettmP5Table3TMSP7TString($45, 0, $51); //@line 116 "lvm.c"
      var $54 = $52;__label__ = 11; break; //@line 116 "lvm.c"
    case 11: 
      var $54; //@line 116 "lvm.c"
      var $56 = $54;__label__ = 12; break; //@line 116 "lvm.c"
    case 12: 
      var $56; //@line 116 "lvm.c"
      $tm=$56; //@line 116 "lvm.c"
      var $57=(($56)|0)==0; //@line 116 "lvm.c"
      if ($57) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 116 "lvm.c"
    case 13: 
      var $59=$res; //@line 117 "lvm.c"
      $o2=$59; //@line 117 "lvm.c"
      var $60=$4; //@line 117 "lvm.c"
      $o1=$60; //@line 117 "lvm.c"
      var $61=$o1; //@line 117 "lvm.c"
      var $62=(($61)|0); //@line 117 "lvm.c"
      var $63=$o2; //@line 117 "lvm.c"
      var $64=(($63)|0); //@line 117 "lvm.c"
      var $65=$62; //@line 117 "lvm.c"
      var $66=$64; //@line 117 "lvm.c"
      HEAP32[(($65)>>2)]=HEAP32[(($66)>>2)];HEAP32[((($65)+(4))>>2)]=HEAP32[((($66)+(4))>>2)]; //@line 117 "lvm.c"
      var $67=$o2; //@line 117 "lvm.c"
      var $68=(($67+8)|0); //@line 117 "lvm.c"
      var $69=HEAP32[(($68)>>2)]; //@line 117 "lvm.c"
      var $70=$o1; //@line 117 "lvm.c"
      var $71=(($70+8)|0); //@line 117 "lvm.c"
      HEAP32[(($71)>>2)]=$69; //@line 117 "lvm.c"
      __label__ = 23; break; //@line 118 "lvm.c"
    case 14: 
      __label__ = 18; break; //@line 121 "lvm.c"
    case 15: 
      var $74=$1; //@line 122 "lvm.c"
      var $75=$2; //@line 122 "lvm.c"
      var $76=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($74, $75, 0); //@line 122 "lvm.c"
      $tm=$76; //@line 122 "lvm.c"
      var $77=(($76+8)|0); //@line 122 "lvm.c"
      var $78=HEAP32[(($77)>>2)]; //@line 122 "lvm.c"
      var $79=(($78)|0)==0; //@line 122 "lvm.c"
      if ($79) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 122 "lvm.c"
    case 16: 
      var $81=$1; //@line 123 "lvm.c"
      var $82=$2; //@line 123 "lvm.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($81, $82, ((STRING_TABLE.__str1221)|0)); //@line 123 "lvm.c"
      __label__ = 17; break; //@line 123 "lvm.c"
    case 17: 
      __label__ = 18; break; //@line 123 "lvm.c"
    case 18: 
      var $85=$tm; //@line 124 "lvm.c"
      var $86=(($85+8)|0); //@line 124 "lvm.c"
      var $87=HEAP32[(($86)>>2)]; //@line 124 "lvm.c"
      var $88=(($87)|0)==6; //@line 124 "lvm.c"
      if ($88) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 124 "lvm.c"
    case 19: 
      var $90=$1; //@line 125 "lvm.c"
      var $91=$4; //@line 125 "lvm.c"
      var $92=$tm; //@line 125 "lvm.c"
      var $93=$2; //@line 125 "lvm.c"
      var $94=$3; //@line 125 "lvm.c"
      __Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_($90, $91, $92, $93, $94); //@line 125 "lvm.c"
      __label__ = 23; break; //@line 126 "lvm.c"
    case 20: 
      var $96=$tm; //@line 128 "lvm.c"
      $2=$96; //@line 128 "lvm.c"
      __label__ = 21; break; //@line 129 "lvm.c"
    case 21: 
      var $98=$loop; //@line 110 "lvm.c"
      var $99=((($98)+(1))|0); //@line 110 "lvm.c"
      $loop=$99; //@line 110 "lvm.c"
      __label__ = 3; break; //@line 110 "lvm.c"
    case 22: 
      var $101=$1; //@line 130 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($101, ((STRING_TABLE.__str2222)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 130 "lvm.c"
      __label__ = 23; break; //@line 131 "lvm.c"
    case 23: 
      STACKTOP = __stackBase__;
      return; //@line 131 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_["X"]=1;

function __Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_($L, $res, $f, $p1, $p2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $result;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $o23;
      var $o14;
      var $o25;
      var $o16;
      $1=$L;
      $2=$res;
      $3=$f;
      $4=$p1;
      $5=$p2;
      var $6=$2; //@line 82 "lvm.c"
      var $7=$6; //@line 82 "lvm.c"
      var $8=$1; //@line 82 "lvm.c"
      var $9=(($8+32)|0); //@line 82 "lvm.c"
      var $10=HEAP32[(($9)>>2)]; //@line 82 "lvm.c"
      var $11=$10; //@line 82 "lvm.c"
      var $12=$7; //@line 82 "lvm.c"
      var $13=$11; //@line 82 "lvm.c"
      var $14=((($12)-($13))|0); //@line 82 "lvm.c"
      $result=$14; //@line 82 "lvm.c"
      var $15=$3; //@line 83 "lvm.c"
      $o2=$15; //@line 83 "lvm.c"
      var $16=$1; //@line 83 "lvm.c"
      var $17=(($16+8)|0); //@line 83 "lvm.c"
      var $18=HEAP32[(($17)>>2)]; //@line 83 "lvm.c"
      $o1=$18; //@line 83 "lvm.c"
      var $19=$o1; //@line 83 "lvm.c"
      var $20=(($19)|0); //@line 83 "lvm.c"
      var $21=$o2; //@line 83 "lvm.c"
      var $22=(($21)|0); //@line 83 "lvm.c"
      var $23=$20; //@line 83 "lvm.c"
      var $24=$22; //@line 83 "lvm.c"
      HEAP32[(($23)>>2)]=HEAP32[(($24)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($24)+(4))>>2)]; //@line 83 "lvm.c"
      var $25=$o2; //@line 83 "lvm.c"
      var $26=(($25+8)|0); //@line 83 "lvm.c"
      var $27=HEAP32[(($26)>>2)]; //@line 83 "lvm.c"
      var $28=$o1; //@line 83 "lvm.c"
      var $29=(($28+8)|0); //@line 83 "lvm.c"
      HEAP32[(($29)>>2)]=$27; //@line 83 "lvm.c"
      var $30=$4; //@line 84 "lvm.c"
      $o21=$30; //@line 84 "lvm.c"
      var $31=$1; //@line 84 "lvm.c"
      var $32=(($31+8)|0); //@line 84 "lvm.c"
      var $33=HEAP32[(($32)>>2)]; //@line 84 "lvm.c"
      var $34=(($33+12)|0); //@line 84 "lvm.c"
      $o12=$34; //@line 84 "lvm.c"
      var $35=$o12; //@line 84 "lvm.c"
      var $36=(($35)|0); //@line 84 "lvm.c"
      var $37=$o21; //@line 84 "lvm.c"
      var $38=(($37)|0); //@line 84 "lvm.c"
      var $39=$36; //@line 84 "lvm.c"
      var $40=$38; //@line 84 "lvm.c"
      HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)]; //@line 84 "lvm.c"
      var $41=$o21; //@line 84 "lvm.c"
      var $42=(($41+8)|0); //@line 84 "lvm.c"
      var $43=HEAP32[(($42)>>2)]; //@line 84 "lvm.c"
      var $44=$o12; //@line 84 "lvm.c"
      var $45=(($44+8)|0); //@line 84 "lvm.c"
      HEAP32[(($45)>>2)]=$43; //@line 84 "lvm.c"
      var $46=$5; //@line 85 "lvm.c"
      $o23=$46; //@line 85 "lvm.c"
      var $47=$1; //@line 85 "lvm.c"
      var $48=(($47+8)|0); //@line 85 "lvm.c"
      var $49=HEAP32[(($48)>>2)]; //@line 85 "lvm.c"
      var $50=(($49+24)|0); //@line 85 "lvm.c"
      $o14=$50; //@line 85 "lvm.c"
      var $51=$o14; //@line 85 "lvm.c"
      var $52=(($51)|0); //@line 85 "lvm.c"
      var $53=$o23; //@line 85 "lvm.c"
      var $54=(($53)|0); //@line 85 "lvm.c"
      var $55=$52; //@line 85 "lvm.c"
      var $56=$54; //@line 85 "lvm.c"
      HEAP32[(($55)>>2)]=HEAP32[(($56)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($56)+(4))>>2)]; //@line 85 "lvm.c"
      var $57=$o23; //@line 85 "lvm.c"
      var $58=(($57+8)|0); //@line 85 "lvm.c"
      var $59=HEAP32[(($58)>>2)]; //@line 85 "lvm.c"
      var $60=$o14; //@line 85 "lvm.c"
      var $61=(($60+8)|0); //@line 85 "lvm.c"
      HEAP32[(($61)>>2)]=$59; //@line 85 "lvm.c"
      var $62=$1; //@line 86 "lvm.c"
      var $63=(($62+28)|0); //@line 86 "lvm.c"
      var $64=HEAP32[(($63)>>2)]; //@line 86 "lvm.c"
      var $65=$64; //@line 86 "lvm.c"
      var $66=$1; //@line 86 "lvm.c"
      var $67=(($66+8)|0); //@line 86 "lvm.c"
      var $68=HEAP32[(($67)>>2)]; //@line 86 "lvm.c"
      var $69=$68; //@line 86 "lvm.c"
      var $70=$65; //@line 86 "lvm.c"
      var $71=$69; //@line 86 "lvm.c"
      var $72=((($70)-($71))|0); //@line 86 "lvm.c"
      var $73=(($72)|0) <= 36; //@line 86 "lvm.c"
      if ($73) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 86 "lvm.c"
    case 3: 
      var $75=$1; //@line 86 "lvm.c"
      __Z14luaD_growstackP9lua_Statei($75, 3); //@line 86 "lvm.c"
      __label__ = 5; break; //@line 86 "lvm.c"
    case 4: 
      __label__ = 5; break; //@line 86 "lvm.c"
    case 5: 
      var $78=$1; //@line 87 "lvm.c"
      var $79=(($78+8)|0); //@line 87 "lvm.c"
      var $80=HEAP32[(($79)>>2)]; //@line 87 "lvm.c"
      var $81=(($80+36)|0); //@line 87 "lvm.c"
      HEAP32[(($79)>>2)]=$81; //@line 87 "lvm.c"
      var $82=$1; //@line 88 "lvm.c"
      var $83=$1; //@line 88 "lvm.c"
      var $84=(($83+8)|0); //@line 88 "lvm.c"
      var $85=HEAP32[(($84)>>2)]; //@line 88 "lvm.c"
      var $86=((($85)-(36))|0); //@line 88 "lvm.c"
      __Z9luaD_callP9lua_StateP10lua_TValuei($82, $86, 1); //@line 88 "lvm.c"
      var $87=$1; //@line 89 "lvm.c"
      var $88=(($87+32)|0); //@line 89 "lvm.c"
      var $89=HEAP32[(($88)>>2)]; //@line 89 "lvm.c"
      var $90=$89; //@line 89 "lvm.c"
      var $91=$result; //@line 89 "lvm.c"
      var $92=(($90+$91)|0); //@line 89 "lvm.c"
      var $93=$92; //@line 89 "lvm.c"
      $2=$93; //@line 89 "lvm.c"
      var $94=$1; //@line 90 "lvm.c"
      var $95=(($94+8)|0); //@line 90 "lvm.c"
      var $96=HEAP32[(($95)>>2)]; //@line 90 "lvm.c"
      var $97=((($96)-(12))|0); //@line 90 "lvm.c"
      HEAP32[(($95)>>2)]=$97; //@line 90 "lvm.c"
      var $98=$1; //@line 91 "lvm.c"
      var $99=(($98+8)|0); //@line 91 "lvm.c"
      var $100=HEAP32[(($99)>>2)]; //@line 91 "lvm.c"
      $o25=$100; //@line 91 "lvm.c"
      var $101=$2; //@line 91 "lvm.c"
      $o16=$101; //@line 91 "lvm.c"
      var $102=$o16; //@line 91 "lvm.c"
      var $103=(($102)|0); //@line 91 "lvm.c"
      var $104=$o25; //@line 91 "lvm.c"
      var $105=(($104)|0); //@line 91 "lvm.c"
      var $106=$103; //@line 91 "lvm.c"
      var $107=$105; //@line 91 "lvm.c"
      HEAP32[(($106)>>2)]=HEAP32[(($107)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($107)+(4))>>2)]; //@line 91 "lvm.c"
      var $108=$o25; //@line 91 "lvm.c"
      var $109=(($108+8)|0); //@line 91 "lvm.c"
      var $110=HEAP32[(($109)>>2)]; //@line 91 "lvm.c"
      var $111=$o16; //@line 91 "lvm.c"
      var $112=(($111+8)|0); //@line 91 "lvm.c"
      HEAP32[(($112)>>2)]=$110; //@line 91 "lvm.c"
      ;
      return; //@line 92 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_["X"]=1;

function __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($L, $t, $key, $val) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $loop;
      var $temp=__stackBase__;
      var $tm;
      var $h;
      var $oldval;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      $1=$L;
      $2=$t;
      $3=$key;
      $4=$val;
      $loop=0; //@line 137 "lvm.c"
      __label__ = 3; break; //@line 137 "lvm.c"
    case 3: 
      var $6=$loop; //@line 137 "lvm.c"
      var $7=(($6)|0) < 100; //@line 137 "lvm.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 26; break; } //@line 137 "lvm.c"
    case 4: 
      var $9=$2; //@line 139 "lvm.c"
      var $10=(($9+8)|0); //@line 139 "lvm.c"
      var $11=HEAP32[(($10)>>2)]; //@line 139 "lvm.c"
      var $12=(($11)|0)==5; //@line 139 "lvm.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 19; break; } //@line 139 "lvm.c"
    case 5: 
      var $14=$2; //@line 140 "lvm.c"
      var $15=(($14)|0); //@line 140 "lvm.c"
      var $16=$15; //@line 140 "lvm.c"
      var $17=HEAP32[(($16)>>2)]; //@line 140 "lvm.c"
      var $18=$17; //@line 140 "lvm.c"
      $h=$18; //@line 140 "lvm.c"
      var $19=$1; //@line 141 "lvm.c"
      var $20=$h; //@line 141 "lvm.c"
      var $21=$3; //@line 141 "lvm.c"
      var $22=__Z8luaH_setP9lua_StateP5TablePK10lua_TValue($19, $20, $21); //@line 141 "lvm.c"
      $oldval=$22; //@line 141 "lvm.c"
      var $23=$oldval; //@line 142 "lvm.c"
      var $24=(($23+8)|0); //@line 142 "lvm.c"
      var $25=HEAP32[(($24)>>2)]; //@line 142 "lvm.c"
      var $26=(($25)|0)==0; //@line 142 "lvm.c"
      if ($26) { __label__ = 6; break; } else { __label__ = 13; break; } //@line 142 "lvm.c"
    case 6: 
      var $28=$h; //@line 142 "lvm.c"
      var $29=(($28+8)|0); //@line 142 "lvm.c"
      var $30=HEAP32[(($29)>>2)]; //@line 142 "lvm.c"
      var $31=(($30)|0)==0; //@line 142 "lvm.c"
      if ($31) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 142 "lvm.c"
    case 7: 
      var $57 = 0;__label__ = 12; break; //@line 142 "lvm.c"
    case 8: 
      var $34=$h; //@line 142 "lvm.c"
      var $35=(($34+8)|0); //@line 142 "lvm.c"
      var $36=HEAP32[(($35)>>2)]; //@line 142 "lvm.c"
      var $37=(($36+6)|0); //@line 142 "lvm.c"
      var $38=HEAPU8[($37)]; //@line 142 "lvm.c"
      var $39=(($38)&255); //@line 142 "lvm.c"
      var $40=$39 & 2; //@line 142 "lvm.c"
      var $41=(($40)|0)!=0; //@line 142 "lvm.c"
      if ($41) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 142 "lvm.c"
    case 9: 
      var $55 = 0;__label__ = 11; break; //@line 142 "lvm.c"
    case 10: 
      var $44=$h; //@line 143 "lvm.c"
      var $45=(($44+8)|0); //@line 143 "lvm.c"
      var $46=HEAP32[(($45)>>2)]; //@line 143 "lvm.c"
      var $47=$1; //@line 143 "lvm.c"
      var $48=(($47+16)|0); //@line 143 "lvm.c"
      var $49=HEAP32[(($48)>>2)]; //@line 143 "lvm.c"
      var $50=(($49+168)|0); //@line 143 "lvm.c"
      var $51=(($50+4)|0); //@line 143 "lvm.c"
      var $52=HEAP32[(($51)>>2)]; //@line 143 "lvm.c"
      var $53=__Z10luaT_gettmP5Table3TMSP7TString($46, 1, $52); //@line 143 "lvm.c"
      var $55 = $53;__label__ = 11; break; //@line 143 "lvm.c"
    case 11: 
      var $55; //@line 143 "lvm.c"
      var $57 = $55;__label__ = 12; break; //@line 143 "lvm.c"
    case 12: 
      var $57; //@line 143 "lvm.c"
      $tm=$57; //@line 143 "lvm.c"
      var $58=(($57)|0)==0; //@line 143 "lvm.c"
      if ($58) { __label__ = 13; break; } else { __label__ = 18; break; } //@line 143 "lvm.c"
    case 13: 
      var $60=$4; //@line 144 "lvm.c"
      $o2=$60; //@line 144 "lvm.c"
      var $61=$oldval; //@line 144 "lvm.c"
      $o1=$61; //@line 144 "lvm.c"
      var $62=$o1; //@line 144 "lvm.c"
      var $63=(($62)|0); //@line 144 "lvm.c"
      var $64=$o2; //@line 144 "lvm.c"
      var $65=(($64)|0); //@line 144 "lvm.c"
      var $66=$63; //@line 144 "lvm.c"
      var $67=$65; //@line 144 "lvm.c"
      HEAP32[(($66)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($67)+(4))>>2)]; //@line 144 "lvm.c"
      var $68=$o2; //@line 144 "lvm.c"
      var $69=(($68+8)|0); //@line 144 "lvm.c"
      var $70=HEAP32[(($69)>>2)]; //@line 144 "lvm.c"
      var $71=$o1; //@line 144 "lvm.c"
      var $72=(($71+8)|0); //@line 144 "lvm.c"
      HEAP32[(($72)>>2)]=$70; //@line 144 "lvm.c"
      var $73=$4; //@line 145 "lvm.c"
      var $74=(($73+8)|0); //@line 145 "lvm.c"
      var $75=HEAP32[(($74)>>2)]; //@line 145 "lvm.c"
      var $76=(($75)|0) >= 4; //@line 145 "lvm.c"
      if ($76) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 145 "lvm.c"
    case 14: 
      var $78=$4; //@line 145 "lvm.c"
      var $79=(($78)|0); //@line 145 "lvm.c"
      var $80=$79; //@line 145 "lvm.c"
      var $81=HEAP32[(($80)>>2)]; //@line 145 "lvm.c"
      var $82=$81; //@line 145 "lvm.c"
      var $83=(($82+5)|0); //@line 145 "lvm.c"
      var $84=HEAPU8[($83)]; //@line 145 "lvm.c"
      var $85=(($84)&255); //@line 145 "lvm.c"
      var $86=$85 & 3; //@line 145 "lvm.c"
      var $87=(($86)|0)!=0; //@line 145 "lvm.c"
      if ($87) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 145 "lvm.c"
    case 15: 
      var $89=$h; //@line 145 "lvm.c"
      var $90=$89; //@line 145 "lvm.c"
      var $91=$90; //@line 145 "lvm.c"
      var $92=(($91+5)|0); //@line 145 "lvm.c"
      var $93=HEAPU8[($92)]; //@line 145 "lvm.c"
      var $94=(($93)&255); //@line 145 "lvm.c"
      var $95=$94 & 4; //@line 145 "lvm.c"
      var $96=(($95)|0)!=0; //@line 145 "lvm.c"
      if ($96) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 145 "lvm.c"
    case 16: 
      var $98=$1; //@line 145 "lvm.c"
      var $99=$h; //@line 145 "lvm.c"
      __Z16luaC_barrierbackP9lua_StateP5Table($98, $99); //@line 145 "lvm.c"
      __label__ = 17; break; //@line 145 "lvm.c"
    case 17: 
      __label__ = 27; break; //@line 146 "lvm.c"
    case 18: 
      __label__ = 22; break; //@line 149 "lvm.c"
    case 19: 
      var $103=$1; //@line 150 "lvm.c"
      var $104=$2; //@line 150 "lvm.c"
      var $105=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($103, $104, 1); //@line 150 "lvm.c"
      $tm=$105; //@line 150 "lvm.c"
      var $106=(($105+8)|0); //@line 150 "lvm.c"
      var $107=HEAP32[(($106)>>2)]; //@line 150 "lvm.c"
      var $108=(($107)|0)==0; //@line 150 "lvm.c"
      if ($108) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 150 "lvm.c"
    case 20: 
      var $110=$1; //@line 151 "lvm.c"
      var $111=$2; //@line 151 "lvm.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($110, $111, ((STRING_TABLE.__str1221)|0)); //@line 151 "lvm.c"
      __label__ = 21; break; //@line 151 "lvm.c"
    case 21: 
      __label__ = 22; break; //@line 151 "lvm.c"
    case 22: 
      var $114=$tm; //@line 152 "lvm.c"
      var $115=(($114+8)|0); //@line 152 "lvm.c"
      var $116=HEAP32[(($115)>>2)]; //@line 152 "lvm.c"
      var $117=(($116)|0)==6; //@line 152 "lvm.c"
      if ($117) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 152 "lvm.c"
    case 23: 
      var $119=$1; //@line 153 "lvm.c"
      var $120=$tm; //@line 153 "lvm.c"
      var $121=$2; //@line 153 "lvm.c"
      var $122=$3; //@line 153 "lvm.c"
      var $123=$4; //@line 153 "lvm.c"
      __Z6callTMP9lua_StatePK10lua_TValueS3_S3_S3_($119, $120, $121, $122, $123); //@line 153 "lvm.c"
      __label__ = 27; break; //@line 154 "lvm.c"
    case 24: 
      var $125=$tm; //@line 157 "lvm.c"
      $o21=$125; //@line 157 "lvm.c"
      $o12=$temp; //@line 157 "lvm.c"
      var $126=$o12; //@line 157 "lvm.c"
      var $127=(($126)|0); //@line 157 "lvm.c"
      var $128=$o21; //@line 157 "lvm.c"
      var $129=(($128)|0); //@line 157 "lvm.c"
      var $130=$127; //@line 157 "lvm.c"
      var $131=$129; //@line 157 "lvm.c"
      HEAP32[(($130)>>2)]=HEAP32[(($131)>>2)];HEAP32[((($130)+(4))>>2)]=HEAP32[((($131)+(4))>>2)]; //@line 157 "lvm.c"
      var $132=$o21; //@line 157 "lvm.c"
      var $133=(($132+8)|0); //@line 157 "lvm.c"
      var $134=HEAP32[(($133)>>2)]; //@line 157 "lvm.c"
      var $135=$o12; //@line 157 "lvm.c"
      var $136=(($135+8)|0); //@line 157 "lvm.c"
      HEAP32[(($136)>>2)]=$134; //@line 157 "lvm.c"
      $2=$temp; //@line 158 "lvm.c"
      __label__ = 25; break; //@line 159 "lvm.c"
    case 25: 
      var $138=$loop; //@line 137 "lvm.c"
      var $139=((($138)+(1))|0); //@line 137 "lvm.c"
      $loop=$139; //@line 137 "lvm.c"
      __label__ = 3; break; //@line 137 "lvm.c"
    case 26: 
      var $141=$1; //@line 160 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($141, ((STRING_TABLE.__str3223)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 160 "lvm.c"
      __label__ = 27; break; //@line 161 "lvm.c"
    case 27: 
      STACKTOP = __stackBase__;
      return; //@line 161 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_["X"]=1;

function __Z6callTMP9lua_StatePK10lua_TValueS3_S3_S3_($L, $f, $p1, $p2, $p3) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $o23;
      var $o14;
      var $o25;
      var $o16;
      $1=$L;
      $2=$f;
      $3=$p1;
      $4=$p2;
      $5=$p3;
      var $6=$2; //@line 98 "lvm.c"
      $o2=$6; //@line 98 "lvm.c"
      var $7=$1; //@line 98 "lvm.c"
      var $8=(($7+8)|0); //@line 98 "lvm.c"
      var $9=HEAP32[(($8)>>2)]; //@line 98 "lvm.c"
      $o1=$9; //@line 98 "lvm.c"
      var $10=$o1; //@line 98 "lvm.c"
      var $11=(($10)|0); //@line 98 "lvm.c"
      var $12=$o2; //@line 98 "lvm.c"
      var $13=(($12)|0); //@line 98 "lvm.c"
      var $14=$11; //@line 98 "lvm.c"
      var $15=$13; //@line 98 "lvm.c"
      HEAP32[(($14)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($14)+(4))>>2)]=HEAP32[((($15)+(4))>>2)]; //@line 98 "lvm.c"
      var $16=$o2; //@line 98 "lvm.c"
      var $17=(($16+8)|0); //@line 98 "lvm.c"
      var $18=HEAP32[(($17)>>2)]; //@line 98 "lvm.c"
      var $19=$o1; //@line 98 "lvm.c"
      var $20=(($19+8)|0); //@line 98 "lvm.c"
      HEAP32[(($20)>>2)]=$18; //@line 98 "lvm.c"
      var $21=$3; //@line 99 "lvm.c"
      $o21=$21; //@line 99 "lvm.c"
      var $22=$1; //@line 99 "lvm.c"
      var $23=(($22+8)|0); //@line 99 "lvm.c"
      var $24=HEAP32[(($23)>>2)]; //@line 99 "lvm.c"
      var $25=(($24+12)|0); //@line 99 "lvm.c"
      $o12=$25; //@line 99 "lvm.c"
      var $26=$o12; //@line 99 "lvm.c"
      var $27=(($26)|0); //@line 99 "lvm.c"
      var $28=$o21; //@line 99 "lvm.c"
      var $29=(($28)|0); //@line 99 "lvm.c"
      var $30=$27; //@line 99 "lvm.c"
      var $31=$29; //@line 99 "lvm.c"
      HEAP32[(($30)>>2)]=HEAP32[(($31)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($31)+(4))>>2)]; //@line 99 "lvm.c"
      var $32=$o21; //@line 99 "lvm.c"
      var $33=(($32+8)|0); //@line 99 "lvm.c"
      var $34=HEAP32[(($33)>>2)]; //@line 99 "lvm.c"
      var $35=$o12; //@line 99 "lvm.c"
      var $36=(($35+8)|0); //@line 99 "lvm.c"
      HEAP32[(($36)>>2)]=$34; //@line 99 "lvm.c"
      var $37=$4; //@line 100 "lvm.c"
      $o23=$37; //@line 100 "lvm.c"
      var $38=$1; //@line 100 "lvm.c"
      var $39=(($38+8)|0); //@line 100 "lvm.c"
      var $40=HEAP32[(($39)>>2)]; //@line 100 "lvm.c"
      var $41=(($40+24)|0); //@line 100 "lvm.c"
      $o14=$41; //@line 100 "lvm.c"
      var $42=$o14; //@line 100 "lvm.c"
      var $43=(($42)|0); //@line 100 "lvm.c"
      var $44=$o23; //@line 100 "lvm.c"
      var $45=(($44)|0); //@line 100 "lvm.c"
      var $46=$43; //@line 100 "lvm.c"
      var $47=$45; //@line 100 "lvm.c"
      HEAP32[(($46)>>2)]=HEAP32[(($47)>>2)];HEAP32[((($46)+(4))>>2)]=HEAP32[((($47)+(4))>>2)]; //@line 100 "lvm.c"
      var $48=$o23; //@line 100 "lvm.c"
      var $49=(($48+8)|0); //@line 100 "lvm.c"
      var $50=HEAP32[(($49)>>2)]; //@line 100 "lvm.c"
      var $51=$o14; //@line 100 "lvm.c"
      var $52=(($51+8)|0); //@line 100 "lvm.c"
      HEAP32[(($52)>>2)]=$50; //@line 100 "lvm.c"
      var $53=$5; //@line 101 "lvm.c"
      $o25=$53; //@line 101 "lvm.c"
      var $54=$1; //@line 101 "lvm.c"
      var $55=(($54+8)|0); //@line 101 "lvm.c"
      var $56=HEAP32[(($55)>>2)]; //@line 101 "lvm.c"
      var $57=(($56+36)|0); //@line 101 "lvm.c"
      $o16=$57; //@line 101 "lvm.c"
      var $58=$o16; //@line 101 "lvm.c"
      var $59=(($58)|0); //@line 101 "lvm.c"
      var $60=$o25; //@line 101 "lvm.c"
      var $61=(($60)|0); //@line 101 "lvm.c"
      var $62=$59; //@line 101 "lvm.c"
      var $63=$61; //@line 101 "lvm.c"
      HEAP32[(($62)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($63)+(4))>>2)]; //@line 101 "lvm.c"
      var $64=$o25; //@line 101 "lvm.c"
      var $65=(($64+8)|0); //@line 101 "lvm.c"
      var $66=HEAP32[(($65)>>2)]; //@line 101 "lvm.c"
      var $67=$o16; //@line 101 "lvm.c"
      var $68=(($67+8)|0); //@line 101 "lvm.c"
      HEAP32[(($68)>>2)]=$66; //@line 101 "lvm.c"
      var $69=$1; //@line 102 "lvm.c"
      var $70=(($69+28)|0); //@line 102 "lvm.c"
      var $71=HEAP32[(($70)>>2)]; //@line 102 "lvm.c"
      var $72=$71; //@line 102 "lvm.c"
      var $73=$1; //@line 102 "lvm.c"
      var $74=(($73+8)|0); //@line 102 "lvm.c"
      var $75=HEAP32[(($74)>>2)]; //@line 102 "lvm.c"
      var $76=$75; //@line 102 "lvm.c"
      var $77=$72; //@line 102 "lvm.c"
      var $78=$76; //@line 102 "lvm.c"
      var $79=((($77)-($78))|0); //@line 102 "lvm.c"
      var $80=(($79)|0) <= 48; //@line 102 "lvm.c"
      if ($80) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 102 "lvm.c"
    case 3: 
      var $82=$1; //@line 102 "lvm.c"
      __Z14luaD_growstackP9lua_Statei($82, 4); //@line 102 "lvm.c"
      __label__ = 5; break; //@line 102 "lvm.c"
    case 4: 
      __label__ = 5; break; //@line 102 "lvm.c"
    case 5: 
      var $85=$1; //@line 103 "lvm.c"
      var $86=(($85+8)|0); //@line 103 "lvm.c"
      var $87=HEAP32[(($86)>>2)]; //@line 103 "lvm.c"
      var $88=(($87+48)|0); //@line 103 "lvm.c"
      HEAP32[(($86)>>2)]=$88; //@line 103 "lvm.c"
      var $89=$1; //@line 104 "lvm.c"
      var $90=$1; //@line 104 "lvm.c"
      var $91=(($90+8)|0); //@line 104 "lvm.c"
      var $92=HEAP32[(($91)>>2)]; //@line 104 "lvm.c"
      var $93=((($92)-(48))|0); //@line 104 "lvm.c"
      __Z9luaD_callP9lua_StateP10lua_TValuei($89, $93, 0); //@line 104 "lvm.c"
      ;
      return; //@line 105 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6callTMP9lua_StatePK10lua_TValueS3_S3_S3_["X"]=1;

function __Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_($L, $l, $r) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$l;
      $4=$r;
      var $5=$3; //@line 226 "lvm.c"
      var $6=(($5+8)|0); //@line 226 "lvm.c"
      var $7=HEAP32[(($6)>>2)]; //@line 226 "lvm.c"
      var $8=$4; //@line 226 "lvm.c"
      var $9=(($8+8)|0); //@line 226 "lvm.c"
      var $10=HEAP32[(($9)>>2)]; //@line 226 "lvm.c"
      var $11=(($7)|0)!=(($10)|0); //@line 226 "lvm.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 226 "lvm.c"
    case 3: 
      var $13=$2; //@line 227 "lvm.c"
      var $14=$3; //@line 227 "lvm.c"
      var $15=$4; //@line 227 "lvm.c"
      var $16=__Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($13, $14, $15); //@line 227 "lvm.c"
      $1=$16; //@line 227 "lvm.c"
      __label__ = 14; break; //@line 227 "lvm.c"
    case 4: 
      var $18=$3; //@line 228 "lvm.c"
      var $19=(($18+8)|0); //@line 228 "lvm.c"
      var $20=HEAP32[(($19)>>2)]; //@line 228 "lvm.c"
      var $21=(($20)|0)==3; //@line 228 "lvm.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 228 "lvm.c"
    case 5: 
      var $23=$3; //@line 229 "lvm.c"
      var $24=(($23)|0); //@line 229 "lvm.c"
      var $25=$24; //@line 229 "lvm.c"
      var $26=(tempDoubleI32[0]=HEAP32[(($25)>>2)],tempDoubleI32[1]=HEAP32[((($25)+(4))>>2)],tempDoubleF64[0]); //@line 229 "lvm.c"
      var $27=$4; //@line 229 "lvm.c"
      var $28=(($27)|0); //@line 229 "lvm.c"
      var $29=$28; //@line 229 "lvm.c"
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[((($29)+(4))>>2)],tempDoubleF64[0]); //@line 229 "lvm.c"
      var $31=$26 < $30; //@line 229 "lvm.c"
      var $32=(($31)&1); //@line 229 "lvm.c"
      $1=$32; //@line 229 "lvm.c"
      __label__ = 14; break; //@line 229 "lvm.c"
    case 6: 
      var $34=$3; //@line 230 "lvm.c"
      var $35=(($34+8)|0); //@line 230 "lvm.c"
      var $36=HEAP32[(($35)>>2)]; //@line 230 "lvm.c"
      var $37=(($36)|0)==4; //@line 230 "lvm.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 230 "lvm.c"
    case 7: 
      var $39=$3; //@line 231 "lvm.c"
      var $40=(($39)|0); //@line 231 "lvm.c"
      var $41=$40; //@line 231 "lvm.c"
      var $42=HEAP32[(($41)>>2)]; //@line 231 "lvm.c"
      var $43=$42; //@line 231 "lvm.c"
      var $44=$4; //@line 231 "lvm.c"
      var $45=(($44)|0); //@line 231 "lvm.c"
      var $46=$45; //@line 231 "lvm.c"
      var $47=HEAP32[(($46)>>2)]; //@line 231 "lvm.c"
      var $48=$47; //@line 231 "lvm.c"
      var $49=__Z8l_strcmpPK7TStringS1_($43, $48); //@line 231 "lvm.c"
      var $50=(($49)|0) < 0; //@line 231 "lvm.c"
      var $51=(($50)&1); //@line 231 "lvm.c"
      $1=$51; //@line 231 "lvm.c"
      __label__ = 14; break; //@line 231 "lvm.c"
    case 8: 
      var $53=$2; //@line 232 "lvm.c"
      var $54=$3; //@line 232 "lvm.c"
      var $55=$4; //@line 232 "lvm.c"
      var $56=__Z12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($53, $54, $55, 13); //@line 232 "lvm.c"
      $res=$56; //@line 232 "lvm.c"
      var $57=(($56)|0)!=-1; //@line 232 "lvm.c"
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 232 "lvm.c"
    case 9: 
      var $59=$res; //@line 233 "lvm.c"
      $1=$59; //@line 233 "lvm.c"
      __label__ = 14; break; //@line 233 "lvm.c"
    case 10: 
      __label__ = 11; break; //@line 233 "lvm.c"
    case 11: 
      __label__ = 12; break; //@line 233 "lvm.c"
    case 12: 
      __label__ = 13; break; //@line 233 "lvm.c"
    case 13: 
      var $64=$2; //@line 234 "lvm.c"
      var $65=$3; //@line 234 "lvm.c"
      var $66=$4; //@line 234 "lvm.c"
      var $67=__Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($64, $65, $66); //@line 234 "lvm.c"
      $1=$67; //@line 234 "lvm.c"
      __label__ = 14; break; //@line 234 "lvm.c"
    case 14: 
      var $69=$1; //@line 235 "lvm.c"
      ;
      return $69; //@line 235 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_["X"]=1;

function __Z8l_strcmpPK7TStringS1_($ls, $rs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $ll;
      var $r;
      var $lr;
      var $temp;
      var $len;
      $2=$ls;
      $3=$rs;
      var $4=$2; //@line 203 "lvm.c"
      var $5=(($4+16)|0); //@line 203 "lvm.c"
      var $6=$5; //@line 203 "lvm.c"
      $l=$6; //@line 203 "lvm.c"
      var $7=$2; //@line 204 "lvm.c"
      var $8=$7; //@line 204 "lvm.c"
      var $9=(($8+12)|0); //@line 204 "lvm.c"
      var $10=HEAP32[(($9)>>2)]; //@line 204 "lvm.c"
      $ll=$10; //@line 204 "lvm.c"
      var $11=$3; //@line 205 "lvm.c"
      var $12=(($11+16)|0); //@line 205 "lvm.c"
      var $13=$12; //@line 205 "lvm.c"
      $r=$13; //@line 205 "lvm.c"
      var $14=$3; //@line 206 "lvm.c"
      var $15=$14; //@line 206 "lvm.c"
      var $16=(($15+12)|0); //@line 206 "lvm.c"
      var $17=HEAP32[(($16)>>2)]; //@line 206 "lvm.c"
      $lr=$17; //@line 206 "lvm.c"
      __label__ = 3; break; //@line 207 "lvm.c"
    case 3: 
      var $19=$l; //@line 208 "lvm.c"
      var $20=$r; //@line 208 "lvm.c"
      var $21=_strcoll($19, $20); //@line 208 "lvm.c"
      $temp=$21; //@line 208 "lvm.c"
      var $22=$temp; //@line 209 "lvm.c"
      var $23=(($22)|0)!=0; //@line 209 "lvm.c"
      if ($23) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 209 "lvm.c"
    case 4: 
      var $25=$temp; //@line 209 "lvm.c"
      $1=$25; //@line 209 "lvm.c"
      __label__ = 12; break; //@line 209 "lvm.c"
    case 5: 
      var $27=$l; //@line 211 "lvm.c"
      var $28=_strlen($27); //@line 211 "lvm.c"
      $len=$28; //@line 211 "lvm.c"
      var $29=$len; //@line 212 "lvm.c"
      var $30=$lr; //@line 212 "lvm.c"
      var $31=(($29)|0)==(($30)|0); //@line 212 "lvm.c"
      if ($31) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 212 "lvm.c"
    case 6: 
      var $33=$len; //@line 213 "lvm.c"
      var $34=$ll; //@line 213 "lvm.c"
      var $35=(($33)|0)==(($34)|0); //@line 213 "lvm.c"
      var $36=$35 ? 0 : 1; //@line 213 "lvm.c"
      $1=$36; //@line 213 "lvm.c"
      __label__ = 12; break; //@line 213 "lvm.c"
    case 7: 
      var $38=$len; //@line 214 "lvm.c"
      var $39=$ll; //@line 214 "lvm.c"
      var $40=(($38)|0)==(($39)|0); //@line 214 "lvm.c"
      if ($40) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 214 "lvm.c"
    case 8: 
      $1=-1; //@line 215 "lvm.c"
      __label__ = 12; break; //@line 215 "lvm.c"
    case 9: 
      __label__ = 10; break; //@line 215 "lvm.c"
    case 10: 
      var $44=$len; //@line 217 "lvm.c"
      var $45=((($44)+(1))|0); //@line 217 "lvm.c"
      $len=$45; //@line 217 "lvm.c"
      var $46=$len; //@line 218 "lvm.c"
      var $47=$l; //@line 218 "lvm.c"
      var $48=(($47+$46)|0); //@line 218 "lvm.c"
      $l=$48; //@line 218 "lvm.c"
      var $49=$len; //@line 218 "lvm.c"
      var $50=$ll; //@line 218 "lvm.c"
      var $51=((($50)-($49))|0); //@line 218 "lvm.c"
      $ll=$51; //@line 218 "lvm.c"
      var $52=$len; //@line 218 "lvm.c"
      var $53=$r; //@line 218 "lvm.c"
      var $54=(($53+$52)|0); //@line 218 "lvm.c"
      $r=$54; //@line 218 "lvm.c"
      var $55=$len; //@line 218 "lvm.c"
      var $56=$lr; //@line 218 "lvm.c"
      var $57=((($56)-($55))|0); //@line 218 "lvm.c"
      $lr=$57; //@line 218 "lvm.c"
      __label__ = 11; break; //@line 219 "lvm.c"
    case 11: 
      __label__ = 3; break; //@line 220 "lvm.c"
    case 12: 
      var $60=$1; //@line 221 "lvm.c"
      ;
      return $60; //@line 221 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8l_strcmpPK7TStringS1_["X"]=1;

function __Z12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($L, $p1, $p2, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tm1;
      var $tm2;
      $2=$L;
      $3=$p1;
      $4=$p2;
      $5=$event;
      var $6=$2; //@line 191 "lvm.c"
      var $7=$3; //@line 191 "lvm.c"
      var $8=$5; //@line 191 "lvm.c"
      var $9=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($6, $7, $8); //@line 191 "lvm.c"
      $tm1=$9; //@line 191 "lvm.c"
      var $10=$tm1; //@line 193 "lvm.c"
      var $11=(($10+8)|0); //@line 193 "lvm.c"
      var $12=HEAP32[(($11)>>2)]; //@line 193 "lvm.c"
      var $13=(($12)|0)==0; //@line 193 "lvm.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 193 "lvm.c"
    case 3: 
      $1=-1; //@line 193 "lvm.c"
      __label__ = 11; break; //@line 193 "lvm.c"
    case 4: 
      var $16=$2; //@line 194 "lvm.c"
      var $17=$4; //@line 194 "lvm.c"
      var $18=$5; //@line 194 "lvm.c"
      var $19=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($16, $17, $18); //@line 194 "lvm.c"
      $tm2=$19; //@line 194 "lvm.c"
      var $20=$tm1; //@line 195 "lvm.c"
      var $21=$tm2; //@line 195 "lvm.c"
      var $22=__Z16luaO_rawequalObjPK10lua_TValueS1_($20, $21); //@line 195 "lvm.c"
      var $23=(($22)|0)!=0; //@line 195 "lvm.c"
      if ($23) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 195 "lvm.c"
    case 5: 
      $1=-1; //@line 196 "lvm.c"
      __label__ = 11; break; //@line 196 "lvm.c"
    case 6: 
      var $26=$2; //@line 197 "lvm.c"
      var $27=$2; //@line 197 "lvm.c"
      var $28=(($27+8)|0); //@line 197 "lvm.c"
      var $29=HEAP32[(($28)>>2)]; //@line 197 "lvm.c"
      var $30=$tm1; //@line 197 "lvm.c"
      var $31=$3; //@line 197 "lvm.c"
      var $32=$4; //@line 197 "lvm.c"
      __Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_($26, $29, $30, $31, $32); //@line 197 "lvm.c"
      var $33=$2; //@line 198 "lvm.c"
      var $34=(($33+8)|0); //@line 198 "lvm.c"
      var $35=HEAP32[(($34)>>2)]; //@line 198 "lvm.c"
      var $36=(($35+8)|0); //@line 198 "lvm.c"
      var $37=HEAP32[(($36)>>2)]; //@line 198 "lvm.c"
      var $38=(($37)|0)==0; //@line 198 "lvm.c"
      if ($38) { var $57 = 1;__label__ = 10; break; } else { __label__ = 7; break; } //@line 198 "lvm.c"
    case 7: 
      var $40=$2; //@line 198 "lvm.c"
      var $41=(($40+8)|0); //@line 198 "lvm.c"
      var $42=HEAP32[(($41)>>2)]; //@line 198 "lvm.c"
      var $43=(($42+8)|0); //@line 198 "lvm.c"
      var $44=HEAP32[(($43)>>2)]; //@line 198 "lvm.c"
      var $45=(($44)|0)==1; //@line 198 "lvm.c"
      if ($45) { __label__ = 8; break; } else { var $55 = 0;__label__ = 9; break; } //@line 198 "lvm.c"
    case 8: 
      var $47=$2; //@line 198 "lvm.c"
      var $48=(($47+8)|0); //@line 198 "lvm.c"
      var $49=HEAP32[(($48)>>2)]; //@line 198 "lvm.c"
      var $50=(($49)|0); //@line 198 "lvm.c"
      var $51=$50; //@line 198 "lvm.c"
      var $52=HEAP32[(($51)>>2)]; //@line 198 "lvm.c"
      var $53=(($52)|0)==0; //@line 198 "lvm.c"
      var $55 = $53;__label__ = 9; break; //@line 198 "lvm.c"
    case 9: 
      var $55;
      var $57 = $55;__label__ = 10; break; //@line 198 "lvm.c"
    case 10: 
      var $57;
      var $58=$57 ^ 1; //@line 198 "lvm.c"
      var $59=(($58)&1); //@line 198 "lvm.c"
      $1=$59; //@line 198 "lvm.c"
      __label__ = 11; break; //@line 198 "lvm.c"
    case 11: 
      var $61=$1; //@line 199 "lvm.c"
      ;
      return $61; //@line 199 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS["X"]=1;

function __Z13luaV_equalvalP9lua_StatePK10lua_TValueS3_($L, $t1, $t2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $tm;
      $2=$L;
      $3=$t1;
      $4=$t2;
      var $5=$3; //@line 257 "lvm.c"
      var $6=(($5+8)|0); //@line 257 "lvm.c"
      var $7=HEAP32[(($6)>>2)]; //@line 257 "lvm.c"
      if ((($7)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 3) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($7)|0) == 2) {
        __label__ = 6; break;
      }
      else if ((($7)|0) == 7) {
        __label__ = 7; break;
      }
      else if ((($7)|0) == 5) {
        __label__ = 10; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 3: 
      $1=1; //@line 258 "lvm.c"
      __label__ = 21; break; //@line 258 "lvm.c"
    case 4: 
      var $10=$3; //@line 259 "lvm.c"
      var $11=(($10)|0); //@line 259 "lvm.c"
      var $12=$11; //@line 259 "lvm.c"
      var $13=(tempDoubleI32[0]=HEAP32[(($12)>>2)],tempDoubleI32[1]=HEAP32[((($12)+(4))>>2)],tempDoubleF64[0]); //@line 259 "lvm.c"
      var $14=$4; //@line 259 "lvm.c"
      var $15=(($14)|0); //@line 259 "lvm.c"
      var $16=$15; //@line 259 "lvm.c"
      var $17=(tempDoubleI32[0]=HEAP32[(($16)>>2)],tempDoubleI32[1]=HEAP32[((($16)+(4))>>2)],tempDoubleF64[0]); //@line 259 "lvm.c"
      var $18=$13 == $17; //@line 259 "lvm.c"
      var $19=(($18)&1); //@line 259 "lvm.c"
      $1=$19; //@line 259 "lvm.c"
      __label__ = 21; break; //@line 259 "lvm.c"
    case 5: 
      var $21=$3; //@line 260 "lvm.c"
      var $22=(($21)|0); //@line 260 "lvm.c"
      var $23=$22; //@line 260 "lvm.c"
      var $24=HEAP32[(($23)>>2)]; //@line 260 "lvm.c"
      var $25=$4; //@line 260 "lvm.c"
      var $26=(($25)|0); //@line 260 "lvm.c"
      var $27=$26; //@line 260 "lvm.c"
      var $28=HEAP32[(($27)>>2)]; //@line 260 "lvm.c"
      var $29=(($24)|0)==(($28)|0); //@line 260 "lvm.c"
      var $30=(($29)&1); //@line 260 "lvm.c"
      $1=$30; //@line 260 "lvm.c"
      __label__ = 21; break; //@line 260 "lvm.c"
    case 6: 
      var $32=$3; //@line 261 "lvm.c"
      var $33=(($32)|0); //@line 261 "lvm.c"
      var $34=$33; //@line 261 "lvm.c"
      var $35=HEAP32[(($34)>>2)]; //@line 261 "lvm.c"
      var $36=$4; //@line 261 "lvm.c"
      var $37=(($36)|0); //@line 261 "lvm.c"
      var $38=$37; //@line 261 "lvm.c"
      var $39=HEAP32[(($38)>>2)]; //@line 261 "lvm.c"
      var $40=(($35)|0)==(($39)|0); //@line 261 "lvm.c"
      var $41=(($40)&1); //@line 261 "lvm.c"
      $1=$41; //@line 261 "lvm.c"
      __label__ = 21; break; //@line 261 "lvm.c"
    case 7: 
      var $43=$3; //@line 263 "lvm.c"
      var $44=(($43)|0); //@line 263 "lvm.c"
      var $45=$44; //@line 263 "lvm.c"
      var $46=HEAP32[(($45)>>2)]; //@line 263 "lvm.c"
      var $47=$46; //@line 263 "lvm.c"
      var $48=$47; //@line 263 "lvm.c"
      var $49=$4; //@line 263 "lvm.c"
      var $50=(($49)|0); //@line 263 "lvm.c"
      var $51=$50; //@line 263 "lvm.c"
      var $52=HEAP32[(($51)>>2)]; //@line 263 "lvm.c"
      var $53=$52; //@line 263 "lvm.c"
      var $54=$53; //@line 263 "lvm.c"
      var $55=(($48)|0)==(($54)|0); //@line 263 "lvm.c"
      if ($55) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 263 "lvm.c"
    case 8: 
      $1=1; //@line 263 "lvm.c"
      __label__ = 21; break; //@line 263 "lvm.c"
    case 9: 
      var $58=$2; //@line 264 "lvm.c"
      var $59=$3; //@line 264 "lvm.c"
      var $60=(($59)|0); //@line 264 "lvm.c"
      var $61=$60; //@line 264 "lvm.c"
      var $62=HEAP32[(($61)>>2)]; //@line 264 "lvm.c"
      var $63=$62; //@line 264 "lvm.c"
      var $64=$63; //@line 264 "lvm.c"
      var $65=(($64+8)|0); //@line 264 "lvm.c"
      var $66=HEAP32[(($65)>>2)]; //@line 264 "lvm.c"
      var $67=$4; //@line 264 "lvm.c"
      var $68=(($67)|0); //@line 264 "lvm.c"
      var $69=$68; //@line 264 "lvm.c"
      var $70=HEAP32[(($69)>>2)]; //@line 264 "lvm.c"
      var $71=$70; //@line 264 "lvm.c"
      var $72=$71; //@line 264 "lvm.c"
      var $73=(($72+8)|0); //@line 264 "lvm.c"
      var $74=HEAP32[(($73)>>2)]; //@line 264 "lvm.c"
      var $75=__Z10get_compTMP9lua_StateP5TableS2_3TMS($58, $66, $74, 4); //@line 264 "lvm.c"
      $tm=$75; //@line 264 "lvm.c"
      __label__ = 14; break; //@line 266 "lvm.c"
    case 10: 
      var $77=$3; //@line 269 "lvm.c"
      var $78=(($77)|0); //@line 269 "lvm.c"
      var $79=$78; //@line 269 "lvm.c"
      var $80=HEAP32[(($79)>>2)]; //@line 269 "lvm.c"
      var $81=$80; //@line 269 "lvm.c"
      var $82=$4; //@line 269 "lvm.c"
      var $83=(($82)|0); //@line 269 "lvm.c"
      var $84=$83; //@line 269 "lvm.c"
      var $85=HEAP32[(($84)>>2)]; //@line 269 "lvm.c"
      var $86=$85; //@line 269 "lvm.c"
      var $87=(($81)|0)==(($86)|0); //@line 269 "lvm.c"
      if ($87) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 269 "lvm.c"
    case 11: 
      $1=1; //@line 269 "lvm.c"
      __label__ = 21; break; //@line 269 "lvm.c"
    case 12: 
      var $90=$2; //@line 270 "lvm.c"
      var $91=$3; //@line 270 "lvm.c"
      var $92=(($91)|0); //@line 270 "lvm.c"
      var $93=$92; //@line 270 "lvm.c"
      var $94=HEAP32[(($93)>>2)]; //@line 270 "lvm.c"
      var $95=$94; //@line 270 "lvm.c"
      var $96=(($95+8)|0); //@line 270 "lvm.c"
      var $97=HEAP32[(($96)>>2)]; //@line 270 "lvm.c"
      var $98=$4; //@line 270 "lvm.c"
      var $99=(($98)|0); //@line 270 "lvm.c"
      var $100=$99; //@line 270 "lvm.c"
      var $101=HEAP32[(($100)>>2)]; //@line 270 "lvm.c"
      var $102=$101; //@line 270 "lvm.c"
      var $103=(($102+8)|0); //@line 270 "lvm.c"
      var $104=HEAP32[(($103)>>2)]; //@line 270 "lvm.c"
      var $105=__Z10get_compTMP9lua_StateP5TableS2_3TMS($90, $97, $104, 4); //@line 270 "lvm.c"
      $tm=$105; //@line 270 "lvm.c"
      __label__ = 14; break; //@line 271 "lvm.c"
    case 13: 
      var $107=$3; //@line 273 "lvm.c"
      var $108=(($107)|0); //@line 273 "lvm.c"
      var $109=$108; //@line 273 "lvm.c"
      var $110=HEAP32[(($109)>>2)]; //@line 273 "lvm.c"
      var $111=$4; //@line 273 "lvm.c"
      var $112=(($111)|0); //@line 273 "lvm.c"
      var $113=$112; //@line 273 "lvm.c"
      var $114=HEAP32[(($113)>>2)]; //@line 273 "lvm.c"
      var $115=(($110)|0)==(($114)|0); //@line 273 "lvm.c"
      var $116=(($115)&1); //@line 273 "lvm.c"
      $1=$116; //@line 273 "lvm.c"
      __label__ = 21; break; //@line 273 "lvm.c"
    case 14: 
      var $118=$tm; //@line 275 "lvm.c"
      var $119=(($118)|0)==0; //@line 275 "lvm.c"
      if ($119) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 275 "lvm.c"
    case 15: 
      $1=0; //@line 275 "lvm.c"
      __label__ = 21; break; //@line 275 "lvm.c"
    case 16: 
      var $122=$2; //@line 276 "lvm.c"
      var $123=$2; //@line 276 "lvm.c"
      var $124=(($123+8)|0); //@line 276 "lvm.c"
      var $125=HEAP32[(($124)>>2)]; //@line 276 "lvm.c"
      var $126=$tm; //@line 276 "lvm.c"
      var $127=$3; //@line 276 "lvm.c"
      var $128=$4; //@line 276 "lvm.c"
      __Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_($122, $125, $126, $127, $128); //@line 276 "lvm.c"
      var $129=$2; //@line 277 "lvm.c"
      var $130=(($129+8)|0); //@line 277 "lvm.c"
      var $131=HEAP32[(($130)>>2)]; //@line 277 "lvm.c"
      var $132=(($131+8)|0); //@line 277 "lvm.c"
      var $133=HEAP32[(($132)>>2)]; //@line 277 "lvm.c"
      var $134=(($133)|0)==0; //@line 277 "lvm.c"
      if ($134) { var $153 = 1;__label__ = 20; break; } else { __label__ = 17; break; } //@line 277 "lvm.c"
    case 17: 
      var $136=$2; //@line 277 "lvm.c"
      var $137=(($136+8)|0); //@line 277 "lvm.c"
      var $138=HEAP32[(($137)>>2)]; //@line 277 "lvm.c"
      var $139=(($138+8)|0); //@line 277 "lvm.c"
      var $140=HEAP32[(($139)>>2)]; //@line 277 "lvm.c"
      var $141=(($140)|0)==1; //@line 277 "lvm.c"
      if ($141) { __label__ = 18; break; } else { var $151 = 0;__label__ = 19; break; } //@line 277 "lvm.c"
    case 18: 
      var $143=$2; //@line 277 "lvm.c"
      var $144=(($143+8)|0); //@line 277 "lvm.c"
      var $145=HEAP32[(($144)>>2)]; //@line 277 "lvm.c"
      var $146=(($145)|0); //@line 277 "lvm.c"
      var $147=$146; //@line 277 "lvm.c"
      var $148=HEAP32[(($147)>>2)]; //@line 277 "lvm.c"
      var $149=(($148)|0)==0; //@line 277 "lvm.c"
      var $151 = $149;__label__ = 19; break; //@line 277 "lvm.c"
    case 19: 
      var $151;
      var $153 = $151;__label__ = 20; break; //@line 277 "lvm.c"
    case 20: 
      var $153;
      var $154=$153 ^ 1; //@line 277 "lvm.c"
      var $155=(($154)&1); //@line 277 "lvm.c"
      $1=$155; //@line 277 "lvm.c"
      __label__ = 21; break; //@line 277 "lvm.c"
    case 21: 
      var $157=$1; //@line 278 "lvm.c"
      ;
      return $157; //@line 278 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaV_equalvalP9lua_StatePK10lua_TValueS3_["X"]=1;

function __Z10get_compTMP9lua_StateP5TableS2_3TMS($L, $mt1, $mt2, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tm1;
      var $tm2;
      $2=$L;
      $3=$mt1;
      $4=$mt2;
      $5=$event;
      var $6=$3; //@line 177 "lvm.c"
      var $7=(($6)|0)==0; //@line 177 "lvm.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 177 "lvm.c"
    case 3: 
      var $33 = 0;__label__ = 8; break; //@line 177 "lvm.c"
    case 4: 
      var $10=$3; //@line 177 "lvm.c"
      var $11=(($10+6)|0); //@line 177 "lvm.c"
      var $12=HEAPU8[($11)]; //@line 177 "lvm.c"
      var $13=(($12)&255); //@line 177 "lvm.c"
      var $14=$5; //@line 177 "lvm.c"
      var $15=1 << $14; //@line 177 "lvm.c"
      var $16=$13 & $15; //@line 177 "lvm.c"
      var $17=(($16)|0)!=0; //@line 177 "lvm.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 177 "lvm.c"
    case 5: 
      var $31 = 0;__label__ = 7; break; //@line 177 "lvm.c"
    case 6: 
      var $20=$3; //@line 177 "lvm.c"
      var $21=$5; //@line 177 "lvm.c"
      var $22=$5; //@line 177 "lvm.c"
      var $23=$2; //@line 177 "lvm.c"
      var $24=(($23+16)|0); //@line 177 "lvm.c"
      var $25=HEAP32[(($24)>>2)]; //@line 177 "lvm.c"
      var $26=(($25+168)|0); //@line 177 "lvm.c"
      var $27=(($26+($22<<2))|0); //@line 177 "lvm.c"
      var $28=HEAP32[(($27)>>2)]; //@line 177 "lvm.c"
      var $29=__Z10luaT_gettmP5Table3TMSP7TString($20, $21, $28); //@line 177 "lvm.c"
      var $31 = $29;__label__ = 7; break; //@line 177 "lvm.c"
    case 7: 
      var $31; //@line 177 "lvm.c"
      var $33 = $31;__label__ = 8; break; //@line 177 "lvm.c"
    case 8: 
      var $33; //@line 177 "lvm.c"
      $tm1=$33; //@line 177 "lvm.c"
      var $34=$tm1; //@line 179 "lvm.c"
      var $35=(($34)|0)==0; //@line 179 "lvm.c"
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 179 "lvm.c"
    case 9: 
      $1=0; //@line 179 "lvm.c"
      __label__ = 23; break; //@line 179 "lvm.c"
    case 10: 
      var $38=$3; //@line 180 "lvm.c"
      var $39=$4; //@line 180 "lvm.c"
      var $40=(($38)|0)==(($39)|0); //@line 180 "lvm.c"
      if ($40) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 180 "lvm.c"
    case 11: 
      var $42=$tm1; //@line 180 "lvm.c"
      $1=$42; //@line 180 "lvm.c"
      __label__ = 23; break; //@line 180 "lvm.c"
    case 12: 
      var $44=$4; //@line 181 "lvm.c"
      var $45=(($44)|0)==0; //@line 181 "lvm.c"
      if ($45) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 181 "lvm.c"
    case 13: 
      var $71 = 0;__label__ = 18; break; //@line 181 "lvm.c"
    case 14: 
      var $48=$4; //@line 181 "lvm.c"
      var $49=(($48+6)|0); //@line 181 "lvm.c"
      var $50=HEAPU8[($49)]; //@line 181 "lvm.c"
      var $51=(($50)&255); //@line 181 "lvm.c"
      var $52=$5; //@line 181 "lvm.c"
      var $53=1 << $52; //@line 181 "lvm.c"
      var $54=$51 & $53; //@line 181 "lvm.c"
      var $55=(($54)|0)!=0; //@line 181 "lvm.c"
      if ($55) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 181 "lvm.c"
    case 15: 
      var $69 = 0;__label__ = 17; break; //@line 181 "lvm.c"
    case 16: 
      var $58=$4; //@line 181 "lvm.c"
      var $59=$5; //@line 181 "lvm.c"
      var $60=$5; //@line 181 "lvm.c"
      var $61=$2; //@line 181 "lvm.c"
      var $62=(($61+16)|0); //@line 181 "lvm.c"
      var $63=HEAP32[(($62)>>2)]; //@line 181 "lvm.c"
      var $64=(($63+168)|0); //@line 181 "lvm.c"
      var $65=(($64+($60<<2))|0); //@line 181 "lvm.c"
      var $66=HEAP32[(($65)>>2)]; //@line 181 "lvm.c"
      var $67=__Z10luaT_gettmP5Table3TMSP7TString($58, $59, $66); //@line 181 "lvm.c"
      var $69 = $67;__label__ = 17; break; //@line 181 "lvm.c"
    case 17: 
      var $69; //@line 181 "lvm.c"
      var $71 = $69;__label__ = 18; break; //@line 181 "lvm.c"
    case 18: 
      var $71; //@line 181 "lvm.c"
      $tm2=$71; //@line 181 "lvm.c"
      var $72=$tm2; //@line 182 "lvm.c"
      var $73=(($72)|0)==0; //@line 182 "lvm.c"
      if ($73) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 182 "lvm.c"
    case 19: 
      $1=0; //@line 182 "lvm.c"
      __label__ = 23; break; //@line 182 "lvm.c"
    case 20: 
      var $76=$tm1; //@line 183 "lvm.c"
      var $77=$tm2; //@line 183 "lvm.c"
      var $78=__Z16luaO_rawequalObjPK10lua_TValueS1_($76, $77); //@line 183 "lvm.c"
      var $79=(($78)|0)!=0; //@line 183 "lvm.c"
      if ($79) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 183 "lvm.c"
    case 21: 
      var $81=$tm1; //@line 184 "lvm.c"
      $1=$81; //@line 184 "lvm.c"
      __label__ = 23; break; //@line 184 "lvm.c"
    case 22: 
      $1=0; //@line 185 "lvm.c"
      __label__ = 23; break; //@line 185 "lvm.c"
    case 23: 
      var $84=$1; //@line 186 "lvm.c"
      ;
      return $84; //@line 186 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10get_compTMP9lua_StateP5TableS2_3TMS["X"]=1;

function __Z11luaV_concatP9lua_Stateii($L, $total, $last) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $top;
      var $n;
      var $tl;
      var $buffer;
      var $i;
      var $l;
      var $l1;
      var $i_o;
      $1=$L;
      $2=$total;
      $3=$last;
      __label__ = 3; break; //@line 282 "lvm.c"
    case 3: 
      var $5=$1; //@line 283 "lvm.c"
      var $6=(($5+12)|0); //@line 283 "lvm.c"
      var $7=HEAP32[(($6)>>2)]; //@line 283 "lvm.c"
      var $8=$3; //@line 283 "lvm.c"
      var $9=(($7+($8)*(12))|0); //@line 283 "lvm.c"
      var $10=(($9+12)|0); //@line 283 "lvm.c"
      $top=$10; //@line 283 "lvm.c"
      $n=2; //@line 284 "lvm.c"
      var $11=$top; //@line 285 "lvm.c"
      var $12=((($11)-(24))|0); //@line 285 "lvm.c"
      var $13=(($12+8)|0); //@line 285 "lvm.c"
      var $14=HEAP32[(($13)>>2)]; //@line 285 "lvm.c"
      var $15=(($14)|0)==4; //@line 285 "lvm.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 285 "lvm.c"
    case 4: 
      var $17=$top; //@line 285 "lvm.c"
      var $18=((($17)-(24))|0); //@line 285 "lvm.c"
      var $19=(($18+8)|0); //@line 285 "lvm.c"
      var $20=HEAP32[(($19)>>2)]; //@line 285 "lvm.c"
      var $21=(($20)|0)==3; //@line 285 "lvm.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 285 "lvm.c"
    case 5: 
      var $23=$top; //@line 285 "lvm.c"
      var $24=((($23)-(12))|0); //@line 285 "lvm.c"
      var $25=(($24+8)|0); //@line 285 "lvm.c"
      var $26=HEAP32[(($25)>>2)]; //@line 285 "lvm.c"
      var $27=(($26)|0)==4; //@line 285 "lvm.c"
      if ($27) { __label__ = 10; break; } else { __label__ = 6; break; } //@line 285 "lvm.c"
    case 6: 
      var $29=$1; //@line 285 "lvm.c"
      var $30=$top; //@line 285 "lvm.c"
      var $31=((($30)-(12))|0); //@line 285 "lvm.c"
      var $32=__Z13luaV_tostringP9lua_StateP10lua_TValue($29, $31); //@line 285 "lvm.c"
      var $33=(($32)|0)!=0; //@line 285 "lvm.c"
      if ($33) { __label__ = 10; break; } else { __label__ = 7; break; } //@line 285 "lvm.c"
    case 7: 
      var $35=$1; //@line 286 "lvm.c"
      var $36=$top; //@line 286 "lvm.c"
      var $37=((($36)-(24))|0); //@line 286 "lvm.c"
      var $38=$top; //@line 286 "lvm.c"
      var $39=((($38)-(12))|0); //@line 286 "lvm.c"
      var $40=$top; //@line 286 "lvm.c"
      var $41=((($40)-(24))|0); //@line 286 "lvm.c"
      var $42=__Z10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($35, $37, $39, $41, 15); //@line 286 "lvm.c"
      var $43=(($42)|0)!=0; //@line 286 "lvm.c"
      if ($43) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 286 "lvm.c"
    case 8: 
      var $45=$1; //@line 287 "lvm.c"
      var $46=$top; //@line 287 "lvm.c"
      var $47=((($46)-(24))|0); //@line 287 "lvm.c"
      var $48=$top; //@line 287 "lvm.c"
      var $49=((($48)-(12))|0); //@line 287 "lvm.c"
      __Z16luaG_concaterrorP9lua_StateP10lua_TValueS2_($45, $47, $49); //@line 287 "lvm.c"
      __label__ = 9; break; //@line 287 "lvm.c"
    case 9: 
      __label__ = 30; break; //@line 288 "lvm.c"
    case 10: 
      var $52=$top; //@line 288 "lvm.c"
      var $53=((($52)-(12))|0); //@line 288 "lvm.c"
      var $54=(($53)|0); //@line 288 "lvm.c"
      var $55=$54; //@line 288 "lvm.c"
      var $56=HEAP32[(($55)>>2)]; //@line 288 "lvm.c"
      var $57=$56; //@line 288 "lvm.c"
      var $58=$57; //@line 288 "lvm.c"
      var $59=(($58+12)|0); //@line 288 "lvm.c"
      var $60=HEAP32[(($59)>>2)]; //@line 288 "lvm.c"
      var $61=(($60)|0)==0; //@line 288 "lvm.c"
      if ($61) { __label__ = 11; break; } else { __label__ = 14; break; } //@line 288 "lvm.c"
    case 11: 
      var $63=$top; //@line 289 "lvm.c"
      var $64=((($63)-(24))|0); //@line 289 "lvm.c"
      var $65=(($64+8)|0); //@line 289 "lvm.c"
      var $66=HEAP32[(($65)>>2)]; //@line 289 "lvm.c"
      var $67=(($66)|0)==4; //@line 289 "lvm.c"
      if ($67) { var $75 = 1;__label__ = 13; break; } else { __label__ = 12; break; } //@line 289 "lvm.c"
    case 12: 
      var $69=$1; //@line 289 "lvm.c"
      var $70=$top; //@line 289 "lvm.c"
      var $71=((($70)-(24))|0); //@line 289 "lvm.c"
      var $72=__Z13luaV_tostringP9lua_StateP10lua_TValue($69, $71); //@line 289 "lvm.c"
      var $73=(($72)|0)!=0; //@line 289 "lvm.c"
      var $75 = $73;__label__ = 13; break; //@line 289 "lvm.c"
    case 13: 
      var $75;
      __label__ = 29; break; //@line 289 "lvm.c"
    case 14: 
      var $77=$top; //@line 292 "lvm.c"
      var $78=((($77)-(12))|0); //@line 292 "lvm.c"
      var $79=(($78)|0); //@line 292 "lvm.c"
      var $80=$79; //@line 292 "lvm.c"
      var $81=HEAP32[(($80)>>2)]; //@line 292 "lvm.c"
      var $82=$81; //@line 292 "lvm.c"
      var $83=$82; //@line 292 "lvm.c"
      var $84=(($83+12)|0); //@line 292 "lvm.c"
      var $85=HEAP32[(($84)>>2)]; //@line 292 "lvm.c"
      $tl=$85; //@line 292 "lvm.c"
      $n=1; //@line 296 "lvm.c"
      __label__ = 15; break; //@line 296 "lvm.c"
    case 15: 
      var $87=$n; //@line 296 "lvm.c"
      var $88=$2; //@line 296 "lvm.c"
      var $89=(($87)|0) < (($88)|0); //@line 296 "lvm.c"
      if ($89) { __label__ = 16; break; } else { var $111 = 0;__label__ = 19; break; } //@line 296 "lvm.c"
    case 16: 
      var $91=$top; //@line 296 "lvm.c"
      var $92=$n; //@line 296 "lvm.c"
      var $93=(((-$92))|0); //@line 296 "lvm.c"
      var $94=(($91+($93)*(12))|0); //@line 296 "lvm.c"
      var $95=((($94)-(12))|0); //@line 296 "lvm.c"
      var $96=(($95+8)|0); //@line 296 "lvm.c"
      var $97=HEAP32[(($96)>>2)]; //@line 296 "lvm.c"
      var $98=(($97)|0)==4; //@line 296 "lvm.c"
      if ($98) { var $109 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 296 "lvm.c"
    case 17: 
      var $100=$1; //@line 296 "lvm.c"
      var $101=$top; //@line 296 "lvm.c"
      var $102=$n; //@line 296 "lvm.c"
      var $103=(((-$102))|0); //@line 296 "lvm.c"
      var $104=(($101+($103)*(12))|0); //@line 296 "lvm.c"
      var $105=((($104)-(12))|0); //@line 296 "lvm.c"
      var $106=__Z13luaV_tostringP9lua_StateP10lua_TValue($100, $105); //@line 296 "lvm.c"
      var $107=(($106)|0)!=0; //@line 296 "lvm.c"
      var $109 = $107;__label__ = 18; break; //@line 296 "lvm.c"
    case 18: 
      var $109;
      var $111 = $109;__label__ = 19; break; //@line 296 "lvm.c"
    case 19: 
      var $111;
      if ($111) { __label__ = 20; break; } else { __label__ = 24; break; } //@line 296 "lvm.c"
    case 20: 
      var $113=$top; //@line 297 "lvm.c"
      var $114=$n; //@line 297 "lvm.c"
      var $115=(((-$114))|0); //@line 297 "lvm.c"
      var $116=(($113+($115)*(12))|0); //@line 297 "lvm.c"
      var $117=((($116)-(12))|0); //@line 297 "lvm.c"
      var $118=(($117)|0); //@line 297 "lvm.c"
      var $119=$118; //@line 297 "lvm.c"
      var $120=HEAP32[(($119)>>2)]; //@line 297 "lvm.c"
      var $121=$120; //@line 297 "lvm.c"
      var $122=$121; //@line 297 "lvm.c"
      var $123=(($122+12)|0); //@line 297 "lvm.c"
      var $124=HEAP32[(($123)>>2)]; //@line 297 "lvm.c"
      $l=$124; //@line 297 "lvm.c"
      var $125=$l; //@line 298 "lvm.c"
      var $126=$tl; //@line 298 "lvm.c"
      var $127=(((-3)-($126))|0); //@line 298 "lvm.c"
      var $128=(($125)>>>0) >= (($127)>>>0); //@line 298 "lvm.c"
      if ($128) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 298 "lvm.c"
    case 21: 
      var $130=$1; //@line 298 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($130, ((STRING_TABLE.__str4224)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 298 "lvm.c"
      __label__ = 22; break; //@line 298 "lvm.c"
    case 22: 
      var $132=$l; //@line 299 "lvm.c"
      var $133=$tl; //@line 299 "lvm.c"
      var $134=((($133)+($132))|0); //@line 299 "lvm.c"
      $tl=$134; //@line 299 "lvm.c"
      __label__ = 23; break; //@line 300 "lvm.c"
    case 23: 
      var $136=$n; //@line 296 "lvm.c"
      var $137=((($136)+(1))|0); //@line 296 "lvm.c"
      $n=$137; //@line 296 "lvm.c"
      __label__ = 15; break; //@line 296 "lvm.c"
    case 24: 
      var $139=$1; //@line 301 "lvm.c"
      var $140=$1; //@line 301 "lvm.c"
      var $141=(($140+16)|0); //@line 301 "lvm.c"
      var $142=HEAP32[(($141)>>2)]; //@line 301 "lvm.c"
      var $143=(($142+52)|0); //@line 301 "lvm.c"
      var $144=$tl; //@line 301 "lvm.c"
      var $145=__Z14luaZ_openspaceP9lua_StateP7Mbufferj($139, $143, $144); //@line 301 "lvm.c"
      $buffer=$145; //@line 301 "lvm.c"
      $tl=0; //@line 302 "lvm.c"
      var $146=$n; //@line 303 "lvm.c"
      $i=$146; //@line 303 "lvm.c"
      __label__ = 25; break; //@line 303 "lvm.c"
    case 25: 
      var $148=$i; //@line 303 "lvm.c"
      var $149=(($148)|0) > 0; //@line 303 "lvm.c"
      if ($149) { __label__ = 26; break; } else { __label__ = 28; break; } //@line 303 "lvm.c"
    case 26: 
      var $151=$top; //@line 304 "lvm.c"
      var $152=$i; //@line 304 "lvm.c"
      var $153=(((-$152))|0); //@line 304 "lvm.c"
      var $154=(($151+($153)*(12))|0); //@line 304 "lvm.c"
      var $155=(($154)|0); //@line 304 "lvm.c"
      var $156=$155; //@line 304 "lvm.c"
      var $157=HEAP32[(($156)>>2)]; //@line 304 "lvm.c"
      var $158=$157; //@line 304 "lvm.c"
      var $159=$158; //@line 304 "lvm.c"
      var $160=(($159+12)|0); //@line 304 "lvm.c"
      var $161=HEAP32[(($160)>>2)]; //@line 304 "lvm.c"
      $l1=$161; //@line 304 "lvm.c"
      var $162=$buffer; //@line 305 "lvm.c"
      var $163=$tl; //@line 305 "lvm.c"
      var $164=(($162+$163)|0); //@line 305 "lvm.c"
      var $165=$top; //@line 305 "lvm.c"
      var $166=$i; //@line 305 "lvm.c"
      var $167=(((-$166))|0); //@line 305 "lvm.c"
      var $168=(($165+($167)*(12))|0); //@line 305 "lvm.c"
      var $169=(($168)|0); //@line 305 "lvm.c"
      var $170=$169; //@line 305 "lvm.c"
      var $171=HEAP32[(($170)>>2)]; //@line 305 "lvm.c"
      var $172=$171; //@line 305 "lvm.c"
      var $173=(($172+16)|0); //@line 305 "lvm.c"
      var $174=$173; //@line 305 "lvm.c"
      var $175=$l1; //@line 305 "lvm.c"
      _memcpy($164, $174, $175, 1); //@line 305 "lvm.c"
      var $176=$l1; //@line 306 "lvm.c"
      var $177=$tl; //@line 306 "lvm.c"
      var $178=((($177)+($176))|0); //@line 306 "lvm.c"
      $tl=$178; //@line 306 "lvm.c"
      __label__ = 27; break; //@line 307 "lvm.c"
    case 27: 
      var $180=$i; //@line 303 "lvm.c"
      var $181=((($180)-(1))|0); //@line 303 "lvm.c"
      $i=$181; //@line 303 "lvm.c"
      __label__ = 25; break; //@line 303 "lvm.c"
    case 28: 
      var $183=$top; //@line 308 "lvm.c"
      var $184=$n; //@line 308 "lvm.c"
      var $185=(((-$184))|0); //@line 308 "lvm.c"
      var $186=(($183+($185)*(12))|0); //@line 308 "lvm.c"
      $i_o=$186; //@line 308 "lvm.c"
      var $187=$1; //@line 308 "lvm.c"
      var $188=$buffer; //@line 308 "lvm.c"
      var $189=$tl; //@line 308 "lvm.c"
      var $190=__Z12luaS_newlstrP9lua_StatePKcj($187, $188, $189); //@line 308 "lvm.c"
      var $191=$190; //@line 308 "lvm.c"
      var $192=$i_o; //@line 308 "lvm.c"
      var $193=(($192)|0); //@line 308 "lvm.c"
      var $194=$193; //@line 308 "lvm.c"
      HEAP32[(($194)>>2)]=$191; //@line 308 "lvm.c"
      var $195=$i_o; //@line 308 "lvm.c"
      var $196=(($195+8)|0); //@line 308 "lvm.c"
      HEAP32[(($196)>>2)]=4; //@line 308 "lvm.c"
      __label__ = 29; break; //@line 309 "lvm.c"
    case 29: 
      __label__ = 30; break; //@line 309 "lvm.c"
    case 30: 
      var $199=$n; //@line 310 "lvm.c"
      var $200=((($199)-(1))|0); //@line 310 "lvm.c"
      var $201=$2; //@line 310 "lvm.c"
      var $202=((($201)-($200))|0); //@line 310 "lvm.c"
      $2=$202; //@line 310 "lvm.c"
      var $203=$n; //@line 311 "lvm.c"
      var $204=((($203)-(1))|0); //@line 311 "lvm.c"
      var $205=$3; //@line 311 "lvm.c"
      var $206=((($205)-($204))|0); //@line 311 "lvm.c"
      $3=$206; //@line 311 "lvm.c"
      __label__ = 31; break; //@line 312 "lvm.c"
    case 31: 
      var $208=$2; //@line 312 "lvm.c"
      var $209=(($208)|0) > 1; //@line 312 "lvm.c"
      if ($209) { __label__ = 3; break; } else { __label__ = 32; break; } //@line 312 "lvm.c"
    case 32: 
      STACKTOP = __stackBase__;
      return; //@line 313 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaV_concatP9lua_Stateii["X"]=1;

function __Z10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($L, $p1, $p2, $res, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $tm;
      $2=$L;
      $3=$p1;
      $4=$p2;
      $5=$res;
      $6=$event;
      var $7=$2; //@line 166 "lvm.c"
      var $8=$3; //@line 166 "lvm.c"
      var $9=$6; //@line 166 "lvm.c"
      var $10=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($7, $8, $9); //@line 166 "lvm.c"
      $tm=$10; //@line 166 "lvm.c"
      var $11=$tm; //@line 167 "lvm.c"
      var $12=(($11+8)|0); //@line 167 "lvm.c"
      var $13=HEAP32[(($12)>>2)]; //@line 167 "lvm.c"
      var $14=(($13)|0)==0; //@line 167 "lvm.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 167 "lvm.c"
    case 3: 
      var $16=$2; //@line 168 "lvm.c"
      var $17=$4; //@line 168 "lvm.c"
      var $18=$6; //@line 168 "lvm.c"
      var $19=__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS($16, $17, $18); //@line 168 "lvm.c"
      $tm=$19; //@line 168 "lvm.c"
      __label__ = 4; break; //@line 168 "lvm.c"
    case 4: 
      var $21=$tm; //@line 169 "lvm.c"
      var $22=(($21+8)|0); //@line 169 "lvm.c"
      var $23=HEAP32[(($22)>>2)]; //@line 169 "lvm.c"
      var $24=(($23)|0)==0; //@line 169 "lvm.c"
      if ($24) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 169 "lvm.c"
    case 5: 
      $1=0; //@line 169 "lvm.c"
      __label__ = 7; break; //@line 169 "lvm.c"
    case 6: 
      var $27=$2; //@line 170 "lvm.c"
      var $28=$5; //@line 170 "lvm.c"
      var $29=$tm; //@line 170 "lvm.c"
      var $30=$3; //@line 170 "lvm.c"
      var $31=$4; //@line 170 "lvm.c"
      __Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_($27, $28, $29, $30, $31); //@line 170 "lvm.c"
      $1=1; //@line 171 "lvm.c"
      __label__ = 7; break; //@line 171 "lvm.c"
    case 7: 
      var $33=$1; //@line 172 "lvm.c"
      ;
      return $33; //@line 172 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12luaV_executeP9lua_Statei($L, $nexeccalls) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $cl;
      var $base;
      var $k;
      var $pc;
      var $i;
      var $ra;
      var $o2;
      var $o1;
      var $o21;
      var $o12;
      var $i_o;
      var $rb;
      var $b;
      var $o23;
      var $o14;
      var $g=__stackBase__;
      var $rb5;
      var $i_o6;
      var $g7=(__stackBase__)+(12);
      var $i_o8;
      var $uv;
      var $o29;
      var $o110;
      var $b11;
      var $c;
      var $i_o12;
      var $rb13;
      var $o214;
      var $o115;
      var $rb16;
      var $rc;
      var $nb;
      var $nc;
      var $i_o17;
      var $rb18;
      var $rc19;
      var $nb20;
      var $nc21;
      var $i_o22;
      var $rb23;
      var $rc24;
      var $nb25;
      var $nc26;
      var $i_o27;
      var $rb28;
      var $rc29;
      var $nb30;
      var $nc31;
      var $i_o32;
      var $rb33;
      var $rc34;
      var $nb35;
      var $nc36;
      var $i_o37;
      var $rb38;
      var $rc39;
      var $nb40;
      var $nc41;
      var $i_o42;
      var $rb43;
      var $nb44;
      var $i_o45;
      var $res;
      var $i_o46;
      var $rb47;
      var $i_o48;
      var $i_o49;
      var $b50;
      var $c51;
      var $o252;
      var $o153;
      var $rb54;
      var $rc55;
      var $rb56;
      var $o257;
      var $o158;
      var $b59;
      var $nresults;
      var $b60;
      var $ci;
      var $aux;
      var $func;
      var $pfunc;
      var $o261;
      var $o162;
      var $b63;
      var $step;
      var $idx;
      var $limit;
      var $i_o64;
      var $i_o65;
      var $init;
      var $plimit;
      var $pstep;
      var $i_o66;
      var $cb;
      var $o267;
      var $o168;
      var $o269;
      var $o170;
      var $o271;
      var $o172;
      var $o273;
      var $o174;
      var $n;
      var $c75;
      var $last;
      var $h;
      var $val;
      var $o276;
      var $o177;
      var $p;
      var $ncl;
      var $nup;
      var $j;
      var $i_o78;
      var $b79;
      var $j80;
      var $ci81;
      var $n82;
      var $o283;
      var $o184;
      $1=$L;
      $2=$nexeccalls;
      __label__ = 3; break; //@line 380 "lvm.c"
    case 3: 
      var $4=$1; //@line 383 "lvm.c"
      var $5=(($4+24)|0); //@line 383 "lvm.c"
      var $6=HEAP32[(($5)>>2)]; //@line 383 "lvm.c"
      $pc=$6; //@line 383 "lvm.c"
      var $7=$1; //@line 384 "lvm.c"
      var $8=(($7+20)|0); //@line 384 "lvm.c"
      var $9=HEAP32[(($8)>>2)]; //@line 384 "lvm.c"
      var $10=(($9+4)|0); //@line 384 "lvm.c"
      var $11=HEAP32[(($10)>>2)]; //@line 384 "lvm.c"
      var $12=(($11)|0); //@line 384 "lvm.c"
      var $13=$12; //@line 384 "lvm.c"
      var $14=HEAP32[(($13)>>2)]; //@line 384 "lvm.c"
      var $15=$14; //@line 384 "lvm.c"
      var $16=$15; //@line 384 "lvm.c"
      $cl=$16; //@line 384 "lvm.c"
      var $17=$1; //@line 385 "lvm.c"
      var $18=(($17+12)|0); //@line 385 "lvm.c"
      var $19=HEAP32[(($18)>>2)]; //@line 385 "lvm.c"
      $base=$19; //@line 385 "lvm.c"
      var $20=$cl; //@line 386 "lvm.c"
      var $21=(($20+16)|0); //@line 386 "lvm.c"
      var $22=HEAP32[(($21)>>2)]; //@line 386 "lvm.c"
      var $23=(($22+8)|0); //@line 386 "lvm.c"
      var $24=HEAP32[(($23)>>2)]; //@line 386 "lvm.c"
      $k=$24; //@line 386 "lvm.c"
      __label__ = 4; break; //@line 388 "lvm.c"
    case 4: 
      var $26=$pc; //@line 389 "lvm.c"
      var $27=(($26+4)|0); //@line 389 "lvm.c"
      $pc=$27; //@line 389 "lvm.c"
      var $28=HEAP32[(($26)>>2)]; //@line 389 "lvm.c"
      $i=$28; //@line 389 "lvm.c"
      var $29=$1; //@line 391 "lvm.c"
      var $30=(($29+56)|0); //@line 391 "lvm.c"
      var $31=HEAPU8[($30)]; //@line 391 "lvm.c"
      var $32=(($31)&255); //@line 391 "lvm.c"
      var $33=$32 & 12; //@line 391 "lvm.c"
      var $34=(($33)|0)!=0; //@line 391 "lvm.c"
      if ($34) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 391 "lvm.c"
    case 5: 
      var $36=$1; //@line 391 "lvm.c"
      var $37=(($36+64)|0); //@line 391 "lvm.c"
      var $38=HEAP32[(($37)>>2)]; //@line 391 "lvm.c"
      var $39=((($38)-(1))|0); //@line 391 "lvm.c"
      HEAP32[(($37)>>2)]=$39; //@line 391 "lvm.c"
      var $40=(($39)|0)==0; //@line 391 "lvm.c"
      if ($40) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 391 "lvm.c"
    case 6: 
      var $42=$1; //@line 391 "lvm.c"
      var $43=(($42+56)|0); //@line 391 "lvm.c"
      var $44=HEAPU8[($43)]; //@line 391 "lvm.c"
      var $45=(($44)&255); //@line 391 "lvm.c"
      var $46=$45 & 4; //@line 391 "lvm.c"
      var $47=(($46)|0)!=0; //@line 391 "lvm.c"
      if ($47) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 391 "lvm.c"
    case 7: 
      var $49=$1; //@line 393 "lvm.c"
      var $50=$pc; //@line 393 "lvm.c"
      __Z9traceexecP9lua_StatePKj($49, $50); //@line 393 "lvm.c"
      var $51=$1; //@line 394 "lvm.c"
      var $52=(($51+6)|0); //@line 394 "lvm.c"
      var $53=HEAPU8[($52)]; //@line 394 "lvm.c"
      var $54=(($53)&255); //@line 394 "lvm.c"
      var $55=(($54)|0)==1; //@line 394 "lvm.c"
      if ($55) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 394 "lvm.c"
    case 8: 
      var $57=$pc; //@line 395 "lvm.c"
      var $58=((($57)-(4))|0); //@line 395 "lvm.c"
      var $59=$1; //@line 395 "lvm.c"
      var $60=(($59+24)|0); //@line 395 "lvm.c"
      HEAP32[(($60)>>2)]=$58; //@line 395 "lvm.c"
      __label__ = 266; break; //@line 396 "lvm.c"
    case 9: 
      var $62=$1; //@line 398 "lvm.c"
      var $63=(($62+12)|0); //@line 398 "lvm.c"
      var $64=HEAP32[(($63)>>2)]; //@line 398 "lvm.c"
      $base=$64; //@line 398 "lvm.c"
      __label__ = 10; break; //@line 399 "lvm.c"
    case 10: 
      var $66=$base; //@line 401 "lvm.c"
      var $67=$i; //@line 401 "lvm.c"
      var $68=$67 >>> 6; //@line 401 "lvm.c"
      var $69=$68 & 255; //@line 401 "lvm.c"
      var $70=(($66+($69)*(12))|0); //@line 401 "lvm.c"
      $ra=$70; //@line 401 "lvm.c"
      var $71=$i; //@line 405 "lvm.c"
      var $72=$71 >>> 0; //@line 405 "lvm.c"
      var $73=$72 & 63; //@line 405 "lvm.c"
      if ((($73)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($73)|0) == 1) {
        __label__ = 12; break;
      }
      else if ((($73)|0) == 2) {
        __label__ = 13; break;
      }
      else if ((($73)|0) == 3) {
        __label__ = 16; break;
      }
      else if ((($73)|0) == 4) {
        __label__ = 20; break;
      }
      else if ((($73)|0) == 5) {
        __label__ = 21; break;
      }
      else if ((($73)|0) == 6) {
        __label__ = 22; break;
      }
      else if ((($73)|0) == 7) {
        __label__ = 26; break;
      }
      else if ((($73)|0) == 8) {
        __label__ = 27; break;
      }
      else if ((($73)|0) == 9) {
        __label__ = 32; break;
      }
      else if ((($73)|0) == 10) {
        __label__ = 39; break;
      }
      else if ((($73)|0) == 11) {
        __label__ = 42; break;
      }
      else if ((($73)|0) == 12) {
        __label__ = 46; break;
      }
      else if ((($73)|0) == 13) {
        __label__ = 57; break;
      }
      else if ((($73)|0) == 14) {
        __label__ = 68; break;
      }
      else if ((($73)|0) == 15) {
        __label__ = 79; break;
      }
      else if ((($73)|0) == 16) {
        __label__ = 90; break;
      }
      else if ((($73)|0) == 17) {
        __label__ = 101; break;
      }
      else if ((($73)|0) == 18) {
        __label__ = 112; break;
      }
      else if ((($73)|0) == 19) {
        __label__ = 116; break;
      }
      else if ((($73)|0) == 20) {
        __label__ = 121; break;
      }
      else if ((($73)|0) == 21) {
        __label__ = 128; break;
      }
      else if ((($73)|0) == 22) {
        __label__ = 131; break;
      }
      else if ((($73)|0) == 23) {
        __label__ = 132; break;
      }
      else if ((($73)|0) == 24) {
        __label__ = 143; break;
      }
      else if ((($73)|0) == 25) {
        __label__ = 152; break;
      }
      else if ((($73)|0) == 26) {
        __label__ = 161; break;
      }
      else if ((($73)|0) == 27) {
        __label__ = 168; break;
      }
      else if ((($73)|0) == 28) {
        __label__ = 175; break;
      }
      else if ((($73)|0) == 29) {
        __label__ = 183; break;
      }
      else if ((($73)|0) == 30) {
        __label__ = 195; break;
      }
      else if ((($73)|0) == 31) {
        __label__ = 204; break;
      }
      else if ((($73)|0) == 32) {
        __label__ = 209; break;
      }
      else if ((($73)|0) == 33) {
        __label__ = 221; break;
      }
      else if ((($73)|0) == 34) {
        __label__ = 224; break;
      }
      else if ((($73)|0) == 35) {
        __label__ = 241; break;
      }
      else if ((($73)|0) == 36) {
        __label__ = 242; break;
      }
      else if ((($73)|0) == 37) {
        __label__ = 252; break;
      }
      else {
      __label__ = 265; break;
      }
      
    case 11: 
      var $75=$base; //@line 407 "lvm.c"
      var $76=$i; //@line 407 "lvm.c"
      var $77=$76 >>> 23; //@line 407 "lvm.c"
      var $78=$77 & 511; //@line 407 "lvm.c"
      var $79=(($75+($78)*(12))|0); //@line 407 "lvm.c"
      $o2=$79; //@line 407 "lvm.c"
      var $80=$ra; //@line 407 "lvm.c"
      $o1=$80; //@line 407 "lvm.c"
      var $81=$o1; //@line 407 "lvm.c"
      var $82=(($81)|0); //@line 407 "lvm.c"
      var $83=$o2; //@line 407 "lvm.c"
      var $84=(($83)|0); //@line 407 "lvm.c"
      var $85=$82; //@line 407 "lvm.c"
      var $86=$84; //@line 407 "lvm.c"
      HEAP32[(($85)>>2)]=HEAP32[(($86)>>2)];HEAP32[((($85)+(4))>>2)]=HEAP32[((($86)+(4))>>2)]; //@line 407 "lvm.c"
      var $87=$o2; //@line 407 "lvm.c"
      var $88=(($87+8)|0); //@line 407 "lvm.c"
      var $89=HEAP32[(($88)>>2)]; //@line 407 "lvm.c"
      var $90=$o1; //@line 407 "lvm.c"
      var $91=(($90+8)|0); //@line 407 "lvm.c"
      HEAP32[(($91)>>2)]=$89; //@line 407 "lvm.c"
      __label__ = 4; break; //@line 408 "lvm.c"
    case 12: 
      var $93=$k; //@line 411 "lvm.c"
      var $94=$i; //@line 411 "lvm.c"
      var $95=$94 >>> 14; //@line 411 "lvm.c"
      var $96=$95 & 262143; //@line 411 "lvm.c"
      var $97=(($93+($96)*(12))|0); //@line 411 "lvm.c"
      $o21=$97; //@line 411 "lvm.c"
      var $98=$ra; //@line 411 "lvm.c"
      $o12=$98; //@line 411 "lvm.c"
      var $99=$o12; //@line 411 "lvm.c"
      var $100=(($99)|0); //@line 411 "lvm.c"
      var $101=$o21; //@line 411 "lvm.c"
      var $102=(($101)|0); //@line 411 "lvm.c"
      var $103=$100; //@line 411 "lvm.c"
      var $104=$102; //@line 411 "lvm.c"
      HEAP32[(($103)>>2)]=HEAP32[(($104)>>2)];HEAP32[((($103)+(4))>>2)]=HEAP32[((($104)+(4))>>2)]; //@line 411 "lvm.c"
      var $105=$o21; //@line 411 "lvm.c"
      var $106=(($105+8)|0); //@line 411 "lvm.c"
      var $107=HEAP32[(($106)>>2)]; //@line 411 "lvm.c"
      var $108=$o12; //@line 411 "lvm.c"
      var $109=(($108+8)|0); //@line 411 "lvm.c"
      HEAP32[(($109)>>2)]=$107; //@line 411 "lvm.c"
      __label__ = 4; break; //@line 412 "lvm.c"
    case 13: 
      var $111=$ra; //@line 415 "lvm.c"
      $i_o=$111; //@line 415 "lvm.c"
      var $112=$i; //@line 415 "lvm.c"
      var $113=$112 >>> 23; //@line 415 "lvm.c"
      var $114=$113 & 511; //@line 415 "lvm.c"
      var $115=$i_o; //@line 415 "lvm.c"
      var $116=(($115)|0); //@line 415 "lvm.c"
      var $117=$116; //@line 415 "lvm.c"
      HEAP32[(($117)>>2)]=$114; //@line 415 "lvm.c"
      var $118=$i_o; //@line 415 "lvm.c"
      var $119=(($118+8)|0); //@line 415 "lvm.c"
      HEAP32[(($119)>>2)]=1; //@line 415 "lvm.c"
      var $120=$i; //@line 416 "lvm.c"
      var $121=$120 >>> 14; //@line 416 "lvm.c"
      var $122=$121 & 511; //@line 416 "lvm.c"
      var $123=(($122)|0)!=0; //@line 416 "lvm.c"
      if ($123) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 416 "lvm.c"
    case 14: 
      var $125=$pc; //@line 416 "lvm.c"
      var $126=(($125+4)|0); //@line 416 "lvm.c"
      $pc=$126; //@line 416 "lvm.c"
      __label__ = 15; break; //@line 416 "lvm.c"
    case 15: 
      __label__ = 4; break; //@line 417 "lvm.c"
    case 16: 
      var $129=$base; //@line 420 "lvm.c"
      var $130=$i; //@line 420 "lvm.c"
      var $131=$130 >>> 23; //@line 420 "lvm.c"
      var $132=$131 & 511; //@line 420 "lvm.c"
      var $133=(($129+($132)*(12))|0); //@line 420 "lvm.c"
      $rb=$133; //@line 420 "lvm.c"
      __label__ = 17; break; //@line 421 "lvm.c"
    case 17: 
      var $135=$rb; //@line 422 "lvm.c"
      var $136=((($135)-(12))|0); //@line 422 "lvm.c"
      $rb=$136; //@line 422 "lvm.c"
      var $137=(($135+8)|0); //@line 422 "lvm.c"
      HEAP32[(($137)>>2)]=0; //@line 422 "lvm.c"
      __label__ = 18; break; //@line 423 "lvm.c"
    case 18: 
      var $139=$rb; //@line 423 "lvm.c"
      var $140=$ra; //@line 423 "lvm.c"
      var $141=(($139)>>>0) >= (($140)>>>0); //@line 423 "lvm.c"
      if ($141) { __label__ = 17; break; } else { __label__ = 19; break; } //@line 423 "lvm.c"
    case 19: 
      __label__ = 4; break; //@line 424 "lvm.c"
    case 20: 
      var $144=$i; //@line 427 "lvm.c"
      var $145=$144 >>> 23; //@line 427 "lvm.c"
      var $146=$145 & 511; //@line 427 "lvm.c"
      $b=$146; //@line 427 "lvm.c"
      var $147=$b; //@line 428 "lvm.c"
      var $148=$cl; //@line 428 "lvm.c"
      var $149=(($148+20)|0); //@line 428 "lvm.c"
      var $150=(($149+($147<<2))|0); //@line 428 "lvm.c"
      var $151=HEAP32[(($150)>>2)]; //@line 428 "lvm.c"
      var $152=(($151+8)|0); //@line 428 "lvm.c"
      var $153=HEAP32[(($152)>>2)]; //@line 428 "lvm.c"
      $o23=$153; //@line 428 "lvm.c"
      var $154=$ra; //@line 428 "lvm.c"
      $o14=$154; //@line 428 "lvm.c"
      var $155=$o14; //@line 428 "lvm.c"
      var $156=(($155)|0); //@line 428 "lvm.c"
      var $157=$o23; //@line 428 "lvm.c"
      var $158=(($157)|0); //@line 428 "lvm.c"
      var $159=$156; //@line 428 "lvm.c"
      var $160=$158; //@line 428 "lvm.c"
      HEAP32[(($159)>>2)]=HEAP32[(($160)>>2)];HEAP32[((($159)+(4))>>2)]=HEAP32[((($160)+(4))>>2)]; //@line 428 "lvm.c"
      var $161=$o23; //@line 428 "lvm.c"
      var $162=(($161+8)|0); //@line 428 "lvm.c"
      var $163=HEAP32[(($162)>>2)]; //@line 428 "lvm.c"
      var $164=$o14; //@line 428 "lvm.c"
      var $165=(($164+8)|0); //@line 428 "lvm.c"
      HEAP32[(($165)>>2)]=$163; //@line 428 "lvm.c"
      __label__ = 4; break; //@line 429 "lvm.c"
    case 21: 
      var $167=$k; //@line 433 "lvm.c"
      var $168=$i; //@line 433 "lvm.c"
      var $169=$168 >>> 14; //@line 433 "lvm.c"
      var $170=$169 & 262143; //@line 433 "lvm.c"
      var $171=(($167+($170)*(12))|0); //@line 433 "lvm.c"
      $rb5=$171; //@line 433 "lvm.c"
      $i_o6=$g; //@line 434 "lvm.c"
      var $172=$cl; //@line 434 "lvm.c"
      var $173=(($172+12)|0); //@line 434 "lvm.c"
      var $174=HEAP32[(($173)>>2)]; //@line 434 "lvm.c"
      var $175=$174; //@line 434 "lvm.c"
      var $176=$i_o6; //@line 434 "lvm.c"
      var $177=(($176)|0); //@line 434 "lvm.c"
      var $178=$177; //@line 434 "lvm.c"
      HEAP32[(($178)>>2)]=$175; //@line 434 "lvm.c"
      var $179=$i_o6; //@line 434 "lvm.c"
      var $180=(($179+8)|0); //@line 434 "lvm.c"
      HEAP32[(($180)>>2)]=5; //@line 434 "lvm.c"
      var $181=$pc; //@line 436 "lvm.c"
      var $182=$1; //@line 436 "lvm.c"
      var $183=(($182+24)|0); //@line 436 "lvm.c"
      HEAP32[(($183)>>2)]=$181; //@line 436 "lvm.c"
      var $184=$1; //@line 436 "lvm.c"
      var $185=$rb5; //@line 436 "lvm.c"
      var $186=$ra; //@line 436 "lvm.c"
      __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($184, $g, $185, $186); //@line 436 "lvm.c"
      var $187=$1; //@line 436 "lvm.c"
      var $188=(($187+12)|0); //@line 436 "lvm.c"
      var $189=HEAP32[(($188)>>2)]; //@line 436 "lvm.c"
      $base=$189; //@line 436 "lvm.c"
      __label__ = 4; break; //@line 437 "lvm.c"
    case 22: 
      var $191=$pc; //@line 440 "lvm.c"
      var $192=$1; //@line 440 "lvm.c"
      var $193=(($192+24)|0); //@line 440 "lvm.c"
      HEAP32[(($193)>>2)]=$191; //@line 440 "lvm.c"
      var $194=$1; //@line 440 "lvm.c"
      var $195=$base; //@line 440 "lvm.c"
      var $196=$i; //@line 440 "lvm.c"
      var $197=$196 >>> 23; //@line 440 "lvm.c"
      var $198=$197 & 511; //@line 440 "lvm.c"
      var $199=(($195+($198)*(12))|0); //@line 440 "lvm.c"
      var $200=$i; //@line 440 "lvm.c"
      var $201=$200 >>> 14; //@line 440 "lvm.c"
      var $202=$201 & 511; //@line 440 "lvm.c"
      var $203=$202 & 256; //@line 440 "lvm.c"
      var $204=(($203)|0)!=0; //@line 440 "lvm.c"
      if ($204) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 440 "lvm.c"
    case 23: 
      var $206=$k; //@line 440 "lvm.c"
      var $207=$i; //@line 440 "lvm.c"
      var $208=$207 >>> 14; //@line 440 "lvm.c"
      var $209=$208 & 511; //@line 440 "lvm.c"
      var $210=$209 & -257; //@line 440 "lvm.c"
      var $211=(($206+($210)*(12))|0); //@line 440 "lvm.c"
      var $219 = $211;__label__ = 25; break; //@line 440 "lvm.c"
    case 24: 
      var $213=$base; //@line 440 "lvm.c"
      var $214=$i; //@line 440 "lvm.c"
      var $215=$214 >>> 14; //@line 440 "lvm.c"
      var $216=$215 & 511; //@line 440 "lvm.c"
      var $217=(($213+($216)*(12))|0); //@line 440 "lvm.c"
      var $219 = $217;__label__ = 25; break; //@line 440 "lvm.c"
    case 25: 
      var $219; //@line 440 "lvm.c"
      var $220=$ra; //@line 440 "lvm.c"
      __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($194, $199, $219, $220); //@line 440 "lvm.c"
      var $221=$1; //@line 440 "lvm.c"
      var $222=(($221+12)|0); //@line 440 "lvm.c"
      var $223=HEAP32[(($222)>>2)]; //@line 440 "lvm.c"
      $base=$223; //@line 440 "lvm.c"
      __label__ = 4; break; //@line 441 "lvm.c"
    case 26: 
      $i_o8=$g7; //@line 445 "lvm.c"
      var $225=$cl; //@line 445 "lvm.c"
      var $226=(($225+12)|0); //@line 445 "lvm.c"
      var $227=HEAP32[(($226)>>2)]; //@line 445 "lvm.c"
      var $228=$227; //@line 445 "lvm.c"
      var $229=$i_o8; //@line 445 "lvm.c"
      var $230=(($229)|0); //@line 445 "lvm.c"
      var $231=$230; //@line 445 "lvm.c"
      HEAP32[(($231)>>2)]=$228; //@line 445 "lvm.c"
      var $232=$i_o8; //@line 445 "lvm.c"
      var $233=(($232+8)|0); //@line 445 "lvm.c"
      HEAP32[(($233)>>2)]=5; //@line 445 "lvm.c"
      var $234=$pc; //@line 447 "lvm.c"
      var $235=$1; //@line 447 "lvm.c"
      var $236=(($235+24)|0); //@line 447 "lvm.c"
      HEAP32[(($236)>>2)]=$234; //@line 447 "lvm.c"
      var $237=$1; //@line 447 "lvm.c"
      var $238=$k; //@line 447 "lvm.c"
      var $239=$i; //@line 447 "lvm.c"
      var $240=$239 >>> 14; //@line 447 "lvm.c"
      var $241=$240 & 262143; //@line 447 "lvm.c"
      var $242=(($238+($241)*(12))|0); //@line 447 "lvm.c"
      var $243=$ra; //@line 447 "lvm.c"
      __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($237, $g7, $242, $243); //@line 447 "lvm.c"
      var $244=$1; //@line 447 "lvm.c"
      var $245=(($244+12)|0); //@line 447 "lvm.c"
      var $246=HEAP32[(($245)>>2)]; //@line 447 "lvm.c"
      $base=$246; //@line 447 "lvm.c"
      __label__ = 4; break; //@line 448 "lvm.c"
    case 27: 
      var $248=$i; //@line 451 "lvm.c"
      var $249=$248 >>> 23; //@line 451 "lvm.c"
      var $250=$249 & 511; //@line 451 "lvm.c"
      var $251=$cl; //@line 451 "lvm.c"
      var $252=(($251+20)|0); //@line 451 "lvm.c"
      var $253=(($252+($250<<2))|0); //@line 451 "lvm.c"
      var $254=HEAP32[(($253)>>2)]; //@line 451 "lvm.c"
      $uv=$254; //@line 451 "lvm.c"
      var $255=$ra; //@line 452 "lvm.c"
      $o29=$255; //@line 452 "lvm.c"
      var $256=$uv; //@line 452 "lvm.c"
      var $257=(($256+8)|0); //@line 452 "lvm.c"
      var $258=HEAP32[(($257)>>2)]; //@line 452 "lvm.c"
      $o110=$258; //@line 452 "lvm.c"
      var $259=$o110; //@line 452 "lvm.c"
      var $260=(($259)|0); //@line 452 "lvm.c"
      var $261=$o29; //@line 452 "lvm.c"
      var $262=(($261)|0); //@line 452 "lvm.c"
      var $263=$260; //@line 452 "lvm.c"
      var $264=$262; //@line 452 "lvm.c"
      HEAP32[(($263)>>2)]=HEAP32[(($264)>>2)];HEAP32[((($263)+(4))>>2)]=HEAP32[((($264)+(4))>>2)]; //@line 452 "lvm.c"
      var $265=$o29; //@line 452 "lvm.c"
      var $266=(($265+8)|0); //@line 452 "lvm.c"
      var $267=HEAP32[(($266)>>2)]; //@line 452 "lvm.c"
      var $268=$o110; //@line 452 "lvm.c"
      var $269=(($268+8)|0); //@line 452 "lvm.c"
      HEAP32[(($269)>>2)]=$267; //@line 452 "lvm.c"
      var $270=$ra; //@line 453 "lvm.c"
      var $271=(($270+8)|0); //@line 453 "lvm.c"
      var $272=HEAP32[(($271)>>2)]; //@line 453 "lvm.c"
      var $273=(($272)|0) >= 4; //@line 453 "lvm.c"
      if ($273) { __label__ = 28; break; } else { __label__ = 31; break; } //@line 453 "lvm.c"
    case 28: 
      var $275=$ra; //@line 453 "lvm.c"
      var $276=(($275)|0); //@line 453 "lvm.c"
      var $277=$276; //@line 453 "lvm.c"
      var $278=HEAP32[(($277)>>2)]; //@line 453 "lvm.c"
      var $279=$278; //@line 453 "lvm.c"
      var $280=(($279+5)|0); //@line 453 "lvm.c"
      var $281=HEAPU8[($280)]; //@line 453 "lvm.c"
      var $282=(($281)&255); //@line 453 "lvm.c"
      var $283=$282 & 3; //@line 453 "lvm.c"
      var $284=(($283)|0)!=0; //@line 453 "lvm.c"
      if ($284) { __label__ = 29; break; } else { __label__ = 31; break; } //@line 453 "lvm.c"
    case 29: 
      var $286=$uv; //@line 453 "lvm.c"
      var $287=$286; //@line 453 "lvm.c"
      var $288=$287; //@line 453 "lvm.c"
      var $289=(($288+5)|0); //@line 453 "lvm.c"
      var $290=HEAPU8[($289)]; //@line 453 "lvm.c"
      var $291=(($290)&255); //@line 453 "lvm.c"
      var $292=$291 & 4; //@line 453 "lvm.c"
      var $293=(($292)|0)!=0; //@line 453 "lvm.c"
      if ($293) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 453 "lvm.c"
    case 30: 
      var $295=$1; //@line 453 "lvm.c"
      var $296=$uv; //@line 453 "lvm.c"
      var $297=$296; //@line 453 "lvm.c"
      var $298=$ra; //@line 453 "lvm.c"
      var $299=(($298)|0); //@line 453 "lvm.c"
      var $300=$299; //@line 453 "lvm.c"
      var $301=HEAP32[(($300)>>2)]; //@line 453 "lvm.c"
      __Z13luaC_barrierfP9lua_StateP8GCObjectS2_($295, $297, $301); //@line 453 "lvm.c"
      __label__ = 31; break; //@line 453 "lvm.c"
    case 31: 
      __label__ = 4; break; //@line 454 "lvm.c"
    case 32: 
      var $304=$pc; //@line 457 "lvm.c"
      var $305=$1; //@line 457 "lvm.c"
      var $306=(($305+24)|0); //@line 457 "lvm.c"
      HEAP32[(($306)>>2)]=$304; //@line 457 "lvm.c"
      var $307=$1; //@line 457 "lvm.c"
      var $308=$ra; //@line 457 "lvm.c"
      var $309=$i; //@line 457 "lvm.c"
      var $310=$309 >>> 23; //@line 457 "lvm.c"
      var $311=$310 & 511; //@line 457 "lvm.c"
      var $312=$311 & 256; //@line 457 "lvm.c"
      var $313=(($312)|0)!=0; //@line 457 "lvm.c"
      if ($313) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 457 "lvm.c"
    case 33: 
      var $315=$k; //@line 457 "lvm.c"
      var $316=$i; //@line 457 "lvm.c"
      var $317=$316 >>> 23; //@line 457 "lvm.c"
      var $318=$317 & 511; //@line 457 "lvm.c"
      var $319=$318 & -257; //@line 457 "lvm.c"
      var $320=(($315+($319)*(12))|0); //@line 457 "lvm.c"
      var $328 = $320;__label__ = 35; break; //@line 457 "lvm.c"
    case 34: 
      var $322=$base; //@line 457 "lvm.c"
      var $323=$i; //@line 457 "lvm.c"
      var $324=$323 >>> 23; //@line 457 "lvm.c"
      var $325=$324 & 511; //@line 457 "lvm.c"
      var $326=(($322+($325)*(12))|0); //@line 457 "lvm.c"
      var $328 = $326;__label__ = 35; break; //@line 457 "lvm.c"
    case 35: 
      var $328; //@line 457 "lvm.c"
      var $329=$i; //@line 457 "lvm.c"
      var $330=$329 >>> 14; //@line 457 "lvm.c"
      var $331=$330 & 511; //@line 457 "lvm.c"
      var $332=$331 & 256; //@line 457 "lvm.c"
      var $333=(($332)|0)!=0; //@line 457 "lvm.c"
      if ($333) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 457 "lvm.c"
    case 36: 
      var $335=$k; //@line 457 "lvm.c"
      var $336=$i; //@line 457 "lvm.c"
      var $337=$336 >>> 14; //@line 457 "lvm.c"
      var $338=$337 & 511; //@line 457 "lvm.c"
      var $339=$338 & -257; //@line 457 "lvm.c"
      var $340=(($335+($339)*(12))|0); //@line 457 "lvm.c"
      var $348 = $340;__label__ = 38; break; //@line 457 "lvm.c"
    case 37: 
      var $342=$base; //@line 457 "lvm.c"
      var $343=$i; //@line 457 "lvm.c"
      var $344=$343 >>> 14; //@line 457 "lvm.c"
      var $345=$344 & 511; //@line 457 "lvm.c"
      var $346=(($342+($345)*(12))|0); //@line 457 "lvm.c"
      var $348 = $346;__label__ = 38; break; //@line 457 "lvm.c"
    case 38: 
      var $348; //@line 457 "lvm.c"
      __Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_($307, $308, $328, $348); //@line 457 "lvm.c"
      var $349=$1; //@line 457 "lvm.c"
      var $350=(($349+12)|0); //@line 457 "lvm.c"
      var $351=HEAP32[(($350)>>2)]; //@line 457 "lvm.c"
      $base=$351; //@line 457 "lvm.c"
      __label__ = 4; break; //@line 458 "lvm.c"
    case 39: 
      var $353=$i; //@line 461 "lvm.c"
      var $354=$353 >>> 23; //@line 461 "lvm.c"
      var $355=$354 & 511; //@line 461 "lvm.c"
      $b11=$355; //@line 461 "lvm.c"
      var $356=$i; //@line 462 "lvm.c"
      var $357=$356 >>> 14; //@line 462 "lvm.c"
      var $358=$357 & 511; //@line 462 "lvm.c"
      $c=$358; //@line 462 "lvm.c"
      var $359=$ra; //@line 463 "lvm.c"
      $i_o12=$359; //@line 463 "lvm.c"
      var $360=$1; //@line 463 "lvm.c"
      var $361=$b11; //@line 463 "lvm.c"
      var $362=__Z11luaO_fb2inti($361); //@line 463 "lvm.c"
      var $363=$c; //@line 463 "lvm.c"
      var $364=__Z11luaO_fb2inti($363); //@line 463 "lvm.c"
      var $365=__Z8luaH_newP9lua_Stateii($360, $362, $364); //@line 463 "lvm.c"
      var $366=$365; //@line 463 "lvm.c"
      var $367=$i_o12; //@line 463 "lvm.c"
      var $368=(($367)|0); //@line 463 "lvm.c"
      var $369=$368; //@line 463 "lvm.c"
      HEAP32[(($369)>>2)]=$366; //@line 463 "lvm.c"
      var $370=$i_o12; //@line 463 "lvm.c"
      var $371=(($370+8)|0); //@line 463 "lvm.c"
      HEAP32[(($371)>>2)]=5; //@line 463 "lvm.c"
      var $372=$pc; //@line 464 "lvm.c"
      var $373=$1; //@line 464 "lvm.c"
      var $374=(($373+24)|0); //@line 464 "lvm.c"
      HEAP32[(($374)>>2)]=$372; //@line 464 "lvm.c"
      var $375=$1; //@line 464 "lvm.c"
      var $376=(($375+16)|0); //@line 464 "lvm.c"
      var $377=HEAP32[(($376)>>2)]; //@line 464 "lvm.c"
      var $378=(($377+68)|0); //@line 464 "lvm.c"
      var $379=HEAPU32[(($378)>>2)]; //@line 464 "lvm.c"
      var $380=$1; //@line 464 "lvm.c"
      var $381=(($380+16)|0); //@line 464 "lvm.c"
      var $382=HEAP32[(($381)>>2)]; //@line 464 "lvm.c"
      var $383=(($382+64)|0); //@line 464 "lvm.c"
      var $384=HEAPU32[(($383)>>2)]; //@line 464 "lvm.c"
      var $385=(($379)>>>0) >= (($384)>>>0); //@line 464 "lvm.c"
      if ($385) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 464 "lvm.c"
    case 40: 
      var $387=$1; //@line 464 "lvm.c"
      __Z9luaC_stepP9lua_State($387); //@line 464 "lvm.c"
      __label__ = 41; break; //@line 464 "lvm.c"
    case 41: 
      var $389=$1; //@line 464 "lvm.c"
      var $390=(($389+12)|0); //@line 464 "lvm.c"
      var $391=HEAP32[(($390)>>2)]; //@line 464 "lvm.c"
      $base=$391; //@line 464 "lvm.c"
      __label__ = 4; break; //@line 465 "lvm.c"
    case 42: 
      var $393=$base; //@line 468 "lvm.c"
      var $394=$i; //@line 468 "lvm.c"
      var $395=$394 >>> 23; //@line 468 "lvm.c"
      var $396=$395 & 511; //@line 468 "lvm.c"
      var $397=(($393+($396)*(12))|0); //@line 468 "lvm.c"
      $rb13=$397; //@line 468 "lvm.c"
      var $398=$rb13; //@line 469 "lvm.c"
      $o214=$398; //@line 469 "lvm.c"
      var $399=$ra; //@line 469 "lvm.c"
      var $400=(($399+12)|0); //@line 469 "lvm.c"
      $o115=$400; //@line 469 "lvm.c"
      var $401=$o115; //@line 469 "lvm.c"
      var $402=(($401)|0); //@line 469 "lvm.c"
      var $403=$o214; //@line 469 "lvm.c"
      var $404=(($403)|0); //@line 469 "lvm.c"
      var $405=$402; //@line 469 "lvm.c"
      var $406=$404; //@line 469 "lvm.c"
      HEAP32[(($405)>>2)]=HEAP32[(($406)>>2)];HEAP32[((($405)+(4))>>2)]=HEAP32[((($406)+(4))>>2)]; //@line 469 "lvm.c"
      var $407=$o214; //@line 469 "lvm.c"
      var $408=(($407+8)|0); //@line 469 "lvm.c"
      var $409=HEAP32[(($408)>>2)]; //@line 469 "lvm.c"
      var $410=$o115; //@line 469 "lvm.c"
      var $411=(($410+8)|0); //@line 469 "lvm.c"
      HEAP32[(($411)>>2)]=$409; //@line 469 "lvm.c"
      var $412=$pc; //@line 470 "lvm.c"
      var $413=$1; //@line 470 "lvm.c"
      var $414=(($413+24)|0); //@line 470 "lvm.c"
      HEAP32[(($414)>>2)]=$412; //@line 470 "lvm.c"
      var $415=$1; //@line 470 "lvm.c"
      var $416=$rb13; //@line 470 "lvm.c"
      var $417=$i; //@line 470 "lvm.c"
      var $418=$417 >>> 14; //@line 470 "lvm.c"
      var $419=$418 & 511; //@line 470 "lvm.c"
      var $420=$419 & 256; //@line 470 "lvm.c"
      var $421=(($420)|0)!=0; //@line 470 "lvm.c"
      if ($421) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 470 "lvm.c"
    case 43: 
      var $423=$k; //@line 470 "lvm.c"
      var $424=$i; //@line 470 "lvm.c"
      var $425=$424 >>> 14; //@line 470 "lvm.c"
      var $426=$425 & 511; //@line 470 "lvm.c"
      var $427=$426 & -257; //@line 470 "lvm.c"
      var $428=(($423+($427)*(12))|0); //@line 470 "lvm.c"
      var $436 = $428;__label__ = 45; break; //@line 470 "lvm.c"
    case 44: 
      var $430=$base; //@line 470 "lvm.c"
      var $431=$i; //@line 470 "lvm.c"
      var $432=$431 >>> 14; //@line 470 "lvm.c"
      var $433=$432 & 511; //@line 470 "lvm.c"
      var $434=(($430+($433)*(12))|0); //@line 470 "lvm.c"
      var $436 = $434;__label__ = 45; break; //@line 470 "lvm.c"
    case 45: 
      var $436; //@line 470 "lvm.c"
      var $437=$ra; //@line 470 "lvm.c"
      __Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_($415, $416, $436, $437); //@line 470 "lvm.c"
      var $438=$1; //@line 470 "lvm.c"
      var $439=(($438+12)|0); //@line 470 "lvm.c"
      var $440=HEAP32[(($439)>>2)]; //@line 470 "lvm.c"
      $base=$440; //@line 470 "lvm.c"
      __label__ = 4; break; //@line 471 "lvm.c"
    case 46: 
      var $442=$i; //@line 474 "lvm.c"
      var $443=$442 >>> 23; //@line 474 "lvm.c"
      var $444=$443 & 511; //@line 474 "lvm.c"
      var $445=$444 & 256; //@line 474 "lvm.c"
      var $446=(($445)|0)!=0; //@line 474 "lvm.c"
      if ($446) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 474 "lvm.c"
    case 47: 
      var $448=$k; //@line 474 "lvm.c"
      var $449=$i; //@line 474 "lvm.c"
      var $450=$449 >>> 23; //@line 474 "lvm.c"
      var $451=$450 & 511; //@line 474 "lvm.c"
      var $452=$451 & -257; //@line 474 "lvm.c"
      var $453=(($448+($452)*(12))|0); //@line 474 "lvm.c"
      var $461 = $453;__label__ = 49; break; //@line 474 "lvm.c"
    case 48: 
      var $455=$base; //@line 474 "lvm.c"
      var $456=$i; //@line 474 "lvm.c"
      var $457=$456 >>> 23; //@line 474 "lvm.c"
      var $458=$457 & 511; //@line 474 "lvm.c"
      var $459=(($455+($458)*(12))|0); //@line 474 "lvm.c"
      var $461 = $459;__label__ = 49; break; //@line 474 "lvm.c"
    case 49: 
      var $461; //@line 474 "lvm.c"
      $rb16=$461; //@line 474 "lvm.c"
      var $462=$i; //@line 474 "lvm.c"
      var $463=$462 >>> 14; //@line 474 "lvm.c"
      var $464=$463 & 511; //@line 474 "lvm.c"
      var $465=$464 & 256; //@line 474 "lvm.c"
      var $466=(($465)|0)!=0; //@line 474 "lvm.c"
      if ($466) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 474 "lvm.c"
    case 50: 
      var $468=$k; //@line 474 "lvm.c"
      var $469=$i; //@line 474 "lvm.c"
      var $470=$469 >>> 14; //@line 474 "lvm.c"
      var $471=$470 & 511; //@line 474 "lvm.c"
      var $472=$471 & -257; //@line 474 "lvm.c"
      var $473=(($468+($472)*(12))|0); //@line 474 "lvm.c"
      var $481 = $473;__label__ = 52; break; //@line 474 "lvm.c"
    case 51: 
      var $475=$base; //@line 474 "lvm.c"
      var $476=$i; //@line 474 "lvm.c"
      var $477=$476 >>> 14; //@line 474 "lvm.c"
      var $478=$477 & 511; //@line 474 "lvm.c"
      var $479=(($475+($478)*(12))|0); //@line 474 "lvm.c"
      var $481 = $479;__label__ = 52; break; //@line 474 "lvm.c"
    case 52: 
      var $481; //@line 474 "lvm.c"
      $rc=$481; //@line 474 "lvm.c"
      var $482=$rb16; //@line 474 "lvm.c"
      var $483=(($482+8)|0); //@line 474 "lvm.c"
      var $484=HEAP32[(($483)>>2)]; //@line 474 "lvm.c"
      var $485=(($484)|0)==3; //@line 474 "lvm.c"
      if ($485) { __label__ = 53; break; } else { __label__ = 55; break; } //@line 474 "lvm.c"
    case 53: 
      var $487=$rc; //@line 474 "lvm.c"
      var $488=(($487+8)|0); //@line 474 "lvm.c"
      var $489=HEAP32[(($488)>>2)]; //@line 474 "lvm.c"
      var $490=(($489)|0)==3; //@line 474 "lvm.c"
      if ($490) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 474 "lvm.c"
    case 54: 
      var $492=$rb16; //@line 474 "lvm.c"
      var $493=(($492)|0); //@line 474 "lvm.c"
      var $494=$493; //@line 474 "lvm.c"
      var $495=(tempDoubleI32[0]=HEAP32[(($494)>>2)],tempDoubleI32[1]=HEAP32[((($494)+(4))>>2)],tempDoubleF64[0]); //@line 474 "lvm.c"
      $nb=$495; //@line 474 "lvm.c"
      var $496=$rc; //@line 474 "lvm.c"
      var $497=(($496)|0); //@line 474 "lvm.c"
      var $498=$497; //@line 474 "lvm.c"
      var $499=(tempDoubleI32[0]=HEAP32[(($498)>>2)],tempDoubleI32[1]=HEAP32[((($498)+(4))>>2)],tempDoubleF64[0]); //@line 474 "lvm.c"
      $nc=$499; //@line 474 "lvm.c"
      var $500=$ra; //@line 474 "lvm.c"
      $i_o17=$500; //@line 474 "lvm.c"
      var $501=$nb; //@line 474 "lvm.c"
      var $502=$nc; //@line 474 "lvm.c"
      var $503=($501)+($502); //@line 474 "lvm.c"
      var $504=$i_o17; //@line 474 "lvm.c"
      var $505=(($504)|0); //@line 474 "lvm.c"
      var $506=$505; //@line 474 "lvm.c"
      (tempDoubleF64[0]=$503,HEAP32[(($506)>>2)]=tempDoubleI32[0],HEAP32[((($506)+(4))>>2)]=tempDoubleI32[1]); //@line 474 "lvm.c"
      var $507=$i_o17; //@line 474 "lvm.c"
      var $508=(($507+8)|0); //@line 474 "lvm.c"
      HEAP32[(($508)>>2)]=3; //@line 474 "lvm.c"
      __label__ = 56; break; //@line 474 "lvm.c"
    case 55: 
      var $510=$pc; //@line 474 "lvm.c"
      var $511=$1; //@line 474 "lvm.c"
      var $512=(($511+24)|0); //@line 474 "lvm.c"
      HEAP32[(($512)>>2)]=$510; //@line 474 "lvm.c"
      var $513=$1; //@line 474 "lvm.c"
      var $514=$ra; //@line 474 "lvm.c"
      var $515=$rb16; //@line 474 "lvm.c"
      var $516=$rc; //@line 474 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($513, $514, $515, $516, 5); //@line 474 "lvm.c"
      var $517=$1; //@line 474 "lvm.c"
      var $518=(($517+12)|0); //@line 474 "lvm.c"
      var $519=HEAP32[(($518)>>2)]; //@line 474 "lvm.c"
      $base=$519; //@line 474 "lvm.c"
      __label__ = 56; break; //@line 474 "lvm.c"
    case 56: 
      __label__ = 4; break; //@line 475 "lvm.c"
    case 57: 
      var $522=$i; //@line 478 "lvm.c"
      var $523=$522 >>> 23; //@line 478 "lvm.c"
      var $524=$523 & 511; //@line 478 "lvm.c"
      var $525=$524 & 256; //@line 478 "lvm.c"
      var $526=(($525)|0)!=0; //@line 478 "lvm.c"
      if ($526) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 478 "lvm.c"
    case 58: 
      var $528=$k; //@line 478 "lvm.c"
      var $529=$i; //@line 478 "lvm.c"
      var $530=$529 >>> 23; //@line 478 "lvm.c"
      var $531=$530 & 511; //@line 478 "lvm.c"
      var $532=$531 & -257; //@line 478 "lvm.c"
      var $533=(($528+($532)*(12))|0); //@line 478 "lvm.c"
      var $541 = $533;__label__ = 60; break; //@line 478 "lvm.c"
    case 59: 
      var $535=$base; //@line 478 "lvm.c"
      var $536=$i; //@line 478 "lvm.c"
      var $537=$536 >>> 23; //@line 478 "lvm.c"
      var $538=$537 & 511; //@line 478 "lvm.c"
      var $539=(($535+($538)*(12))|0); //@line 478 "lvm.c"
      var $541 = $539;__label__ = 60; break; //@line 478 "lvm.c"
    case 60: 
      var $541; //@line 478 "lvm.c"
      $rb18=$541; //@line 478 "lvm.c"
      var $542=$i; //@line 478 "lvm.c"
      var $543=$542 >>> 14; //@line 478 "lvm.c"
      var $544=$543 & 511; //@line 478 "lvm.c"
      var $545=$544 & 256; //@line 478 "lvm.c"
      var $546=(($545)|0)!=0; //@line 478 "lvm.c"
      if ($546) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 478 "lvm.c"
    case 61: 
      var $548=$k; //@line 478 "lvm.c"
      var $549=$i; //@line 478 "lvm.c"
      var $550=$549 >>> 14; //@line 478 "lvm.c"
      var $551=$550 & 511; //@line 478 "lvm.c"
      var $552=$551 & -257; //@line 478 "lvm.c"
      var $553=(($548+($552)*(12))|0); //@line 478 "lvm.c"
      var $561 = $553;__label__ = 63; break; //@line 478 "lvm.c"
    case 62: 
      var $555=$base; //@line 478 "lvm.c"
      var $556=$i; //@line 478 "lvm.c"
      var $557=$556 >>> 14; //@line 478 "lvm.c"
      var $558=$557 & 511; //@line 478 "lvm.c"
      var $559=(($555+($558)*(12))|0); //@line 478 "lvm.c"
      var $561 = $559;__label__ = 63; break; //@line 478 "lvm.c"
    case 63: 
      var $561; //@line 478 "lvm.c"
      $rc19=$561; //@line 478 "lvm.c"
      var $562=$rb18; //@line 478 "lvm.c"
      var $563=(($562+8)|0); //@line 478 "lvm.c"
      var $564=HEAP32[(($563)>>2)]; //@line 478 "lvm.c"
      var $565=(($564)|0)==3; //@line 478 "lvm.c"
      if ($565) { __label__ = 64; break; } else { __label__ = 66; break; } //@line 478 "lvm.c"
    case 64: 
      var $567=$rc19; //@line 478 "lvm.c"
      var $568=(($567+8)|0); //@line 478 "lvm.c"
      var $569=HEAP32[(($568)>>2)]; //@line 478 "lvm.c"
      var $570=(($569)|0)==3; //@line 478 "lvm.c"
      if ($570) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 478 "lvm.c"
    case 65: 
      var $572=$rb18; //@line 478 "lvm.c"
      var $573=(($572)|0); //@line 478 "lvm.c"
      var $574=$573; //@line 478 "lvm.c"
      var $575=(tempDoubleI32[0]=HEAP32[(($574)>>2)],tempDoubleI32[1]=HEAP32[((($574)+(4))>>2)],tempDoubleF64[0]); //@line 478 "lvm.c"
      $nb20=$575; //@line 478 "lvm.c"
      var $576=$rc19; //@line 478 "lvm.c"
      var $577=(($576)|0); //@line 478 "lvm.c"
      var $578=$577; //@line 478 "lvm.c"
      var $579=(tempDoubleI32[0]=HEAP32[(($578)>>2)],tempDoubleI32[1]=HEAP32[((($578)+(4))>>2)],tempDoubleF64[0]); //@line 478 "lvm.c"
      $nc21=$579; //@line 478 "lvm.c"
      var $580=$ra; //@line 478 "lvm.c"
      $i_o22=$580; //@line 478 "lvm.c"
      var $581=$nb20; //@line 478 "lvm.c"
      var $582=$nc21; //@line 478 "lvm.c"
      var $583=($581)-($582); //@line 478 "lvm.c"
      var $584=$i_o22; //@line 478 "lvm.c"
      var $585=(($584)|0); //@line 478 "lvm.c"
      var $586=$585; //@line 478 "lvm.c"
      (tempDoubleF64[0]=$583,HEAP32[(($586)>>2)]=tempDoubleI32[0],HEAP32[((($586)+(4))>>2)]=tempDoubleI32[1]); //@line 478 "lvm.c"
      var $587=$i_o22; //@line 478 "lvm.c"
      var $588=(($587+8)|0); //@line 478 "lvm.c"
      HEAP32[(($588)>>2)]=3; //@line 478 "lvm.c"
      __label__ = 67; break; //@line 478 "lvm.c"
    case 66: 
      var $590=$pc; //@line 478 "lvm.c"
      var $591=$1; //@line 478 "lvm.c"
      var $592=(($591+24)|0); //@line 478 "lvm.c"
      HEAP32[(($592)>>2)]=$590; //@line 478 "lvm.c"
      var $593=$1; //@line 478 "lvm.c"
      var $594=$ra; //@line 478 "lvm.c"
      var $595=$rb18; //@line 478 "lvm.c"
      var $596=$rc19; //@line 478 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($593, $594, $595, $596, 6); //@line 478 "lvm.c"
      var $597=$1; //@line 478 "lvm.c"
      var $598=(($597+12)|0); //@line 478 "lvm.c"
      var $599=HEAP32[(($598)>>2)]; //@line 478 "lvm.c"
      $base=$599; //@line 478 "lvm.c"
      __label__ = 67; break; //@line 478 "lvm.c"
    case 67: 
      __label__ = 4; break; //@line 479 "lvm.c"
    case 68: 
      var $602=$i; //@line 482 "lvm.c"
      var $603=$602 >>> 23; //@line 482 "lvm.c"
      var $604=$603 & 511; //@line 482 "lvm.c"
      var $605=$604 & 256; //@line 482 "lvm.c"
      var $606=(($605)|0)!=0; //@line 482 "lvm.c"
      if ($606) { __label__ = 69; break; } else { __label__ = 70; break; } //@line 482 "lvm.c"
    case 69: 
      var $608=$k; //@line 482 "lvm.c"
      var $609=$i; //@line 482 "lvm.c"
      var $610=$609 >>> 23; //@line 482 "lvm.c"
      var $611=$610 & 511; //@line 482 "lvm.c"
      var $612=$611 & -257; //@line 482 "lvm.c"
      var $613=(($608+($612)*(12))|0); //@line 482 "lvm.c"
      var $621 = $613;__label__ = 71; break; //@line 482 "lvm.c"
    case 70: 
      var $615=$base; //@line 482 "lvm.c"
      var $616=$i; //@line 482 "lvm.c"
      var $617=$616 >>> 23; //@line 482 "lvm.c"
      var $618=$617 & 511; //@line 482 "lvm.c"
      var $619=(($615+($618)*(12))|0); //@line 482 "lvm.c"
      var $621 = $619;__label__ = 71; break; //@line 482 "lvm.c"
    case 71: 
      var $621; //@line 482 "lvm.c"
      $rb23=$621; //@line 482 "lvm.c"
      var $622=$i; //@line 482 "lvm.c"
      var $623=$622 >>> 14; //@line 482 "lvm.c"
      var $624=$623 & 511; //@line 482 "lvm.c"
      var $625=$624 & 256; //@line 482 "lvm.c"
      var $626=(($625)|0)!=0; //@line 482 "lvm.c"
      if ($626) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 482 "lvm.c"
    case 72: 
      var $628=$k; //@line 482 "lvm.c"
      var $629=$i; //@line 482 "lvm.c"
      var $630=$629 >>> 14; //@line 482 "lvm.c"
      var $631=$630 & 511; //@line 482 "lvm.c"
      var $632=$631 & -257; //@line 482 "lvm.c"
      var $633=(($628+($632)*(12))|0); //@line 482 "lvm.c"
      var $641 = $633;__label__ = 74; break; //@line 482 "lvm.c"
    case 73: 
      var $635=$base; //@line 482 "lvm.c"
      var $636=$i; //@line 482 "lvm.c"
      var $637=$636 >>> 14; //@line 482 "lvm.c"
      var $638=$637 & 511; //@line 482 "lvm.c"
      var $639=(($635+($638)*(12))|0); //@line 482 "lvm.c"
      var $641 = $639;__label__ = 74; break; //@line 482 "lvm.c"
    case 74: 
      var $641; //@line 482 "lvm.c"
      $rc24=$641; //@line 482 "lvm.c"
      var $642=$rb23; //@line 482 "lvm.c"
      var $643=(($642+8)|0); //@line 482 "lvm.c"
      var $644=HEAP32[(($643)>>2)]; //@line 482 "lvm.c"
      var $645=(($644)|0)==3; //@line 482 "lvm.c"
      if ($645) { __label__ = 75; break; } else { __label__ = 77; break; } //@line 482 "lvm.c"
    case 75: 
      var $647=$rc24; //@line 482 "lvm.c"
      var $648=(($647+8)|0); //@line 482 "lvm.c"
      var $649=HEAP32[(($648)>>2)]; //@line 482 "lvm.c"
      var $650=(($649)|0)==3; //@line 482 "lvm.c"
      if ($650) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 482 "lvm.c"
    case 76: 
      var $652=$rb23; //@line 482 "lvm.c"
      var $653=(($652)|0); //@line 482 "lvm.c"
      var $654=$653; //@line 482 "lvm.c"
      var $655=(tempDoubleI32[0]=HEAP32[(($654)>>2)],tempDoubleI32[1]=HEAP32[((($654)+(4))>>2)],tempDoubleF64[0]); //@line 482 "lvm.c"
      $nb25=$655; //@line 482 "lvm.c"
      var $656=$rc24; //@line 482 "lvm.c"
      var $657=(($656)|0); //@line 482 "lvm.c"
      var $658=$657; //@line 482 "lvm.c"
      var $659=(tempDoubleI32[0]=HEAP32[(($658)>>2)],tempDoubleI32[1]=HEAP32[((($658)+(4))>>2)],tempDoubleF64[0]); //@line 482 "lvm.c"
      $nc26=$659; //@line 482 "lvm.c"
      var $660=$ra; //@line 482 "lvm.c"
      $i_o27=$660; //@line 482 "lvm.c"
      var $661=$nb25; //@line 482 "lvm.c"
      var $662=$nc26; //@line 482 "lvm.c"
      var $663=($661)*($662); //@line 482 "lvm.c"
      var $664=$i_o27; //@line 482 "lvm.c"
      var $665=(($664)|0); //@line 482 "lvm.c"
      var $666=$665; //@line 482 "lvm.c"
      (tempDoubleF64[0]=$663,HEAP32[(($666)>>2)]=tempDoubleI32[0],HEAP32[((($666)+(4))>>2)]=tempDoubleI32[1]); //@line 482 "lvm.c"
      var $667=$i_o27; //@line 482 "lvm.c"
      var $668=(($667+8)|0); //@line 482 "lvm.c"
      HEAP32[(($668)>>2)]=3; //@line 482 "lvm.c"
      __label__ = 78; break; //@line 482 "lvm.c"
    case 77: 
      var $670=$pc; //@line 482 "lvm.c"
      var $671=$1; //@line 482 "lvm.c"
      var $672=(($671+24)|0); //@line 482 "lvm.c"
      HEAP32[(($672)>>2)]=$670; //@line 482 "lvm.c"
      var $673=$1; //@line 482 "lvm.c"
      var $674=$ra; //@line 482 "lvm.c"
      var $675=$rb23; //@line 482 "lvm.c"
      var $676=$rc24; //@line 482 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($673, $674, $675, $676, 7); //@line 482 "lvm.c"
      var $677=$1; //@line 482 "lvm.c"
      var $678=(($677+12)|0); //@line 482 "lvm.c"
      var $679=HEAP32[(($678)>>2)]; //@line 482 "lvm.c"
      $base=$679; //@line 482 "lvm.c"
      __label__ = 78; break; //@line 482 "lvm.c"
    case 78: 
      __label__ = 4; break; //@line 483 "lvm.c"
    case 79: 
      var $682=$i; //@line 486 "lvm.c"
      var $683=$682 >>> 23; //@line 486 "lvm.c"
      var $684=$683 & 511; //@line 486 "lvm.c"
      var $685=$684 & 256; //@line 486 "lvm.c"
      var $686=(($685)|0)!=0; //@line 486 "lvm.c"
      if ($686) { __label__ = 80; break; } else { __label__ = 81; break; } //@line 486 "lvm.c"
    case 80: 
      var $688=$k; //@line 486 "lvm.c"
      var $689=$i; //@line 486 "lvm.c"
      var $690=$689 >>> 23; //@line 486 "lvm.c"
      var $691=$690 & 511; //@line 486 "lvm.c"
      var $692=$691 & -257; //@line 486 "lvm.c"
      var $693=(($688+($692)*(12))|0); //@line 486 "lvm.c"
      var $701 = $693;__label__ = 82; break; //@line 486 "lvm.c"
    case 81: 
      var $695=$base; //@line 486 "lvm.c"
      var $696=$i; //@line 486 "lvm.c"
      var $697=$696 >>> 23; //@line 486 "lvm.c"
      var $698=$697 & 511; //@line 486 "lvm.c"
      var $699=(($695+($698)*(12))|0); //@line 486 "lvm.c"
      var $701 = $699;__label__ = 82; break; //@line 486 "lvm.c"
    case 82: 
      var $701; //@line 486 "lvm.c"
      $rb28=$701; //@line 486 "lvm.c"
      var $702=$i; //@line 486 "lvm.c"
      var $703=$702 >>> 14; //@line 486 "lvm.c"
      var $704=$703 & 511; //@line 486 "lvm.c"
      var $705=$704 & 256; //@line 486 "lvm.c"
      var $706=(($705)|0)!=0; //@line 486 "lvm.c"
      if ($706) { __label__ = 83; break; } else { __label__ = 84; break; } //@line 486 "lvm.c"
    case 83: 
      var $708=$k; //@line 486 "lvm.c"
      var $709=$i; //@line 486 "lvm.c"
      var $710=$709 >>> 14; //@line 486 "lvm.c"
      var $711=$710 & 511; //@line 486 "lvm.c"
      var $712=$711 & -257; //@line 486 "lvm.c"
      var $713=(($708+($712)*(12))|0); //@line 486 "lvm.c"
      var $721 = $713;__label__ = 85; break; //@line 486 "lvm.c"
    case 84: 
      var $715=$base; //@line 486 "lvm.c"
      var $716=$i; //@line 486 "lvm.c"
      var $717=$716 >>> 14; //@line 486 "lvm.c"
      var $718=$717 & 511; //@line 486 "lvm.c"
      var $719=(($715+($718)*(12))|0); //@line 486 "lvm.c"
      var $721 = $719;__label__ = 85; break; //@line 486 "lvm.c"
    case 85: 
      var $721; //@line 486 "lvm.c"
      $rc29=$721; //@line 486 "lvm.c"
      var $722=$rb28; //@line 486 "lvm.c"
      var $723=(($722+8)|0); //@line 486 "lvm.c"
      var $724=HEAP32[(($723)>>2)]; //@line 486 "lvm.c"
      var $725=(($724)|0)==3; //@line 486 "lvm.c"
      if ($725) { __label__ = 86; break; } else { __label__ = 88; break; } //@line 486 "lvm.c"
    case 86: 
      var $727=$rc29; //@line 486 "lvm.c"
      var $728=(($727+8)|0); //@line 486 "lvm.c"
      var $729=HEAP32[(($728)>>2)]; //@line 486 "lvm.c"
      var $730=(($729)|0)==3; //@line 486 "lvm.c"
      if ($730) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 486 "lvm.c"
    case 87: 
      var $732=$rb28; //@line 486 "lvm.c"
      var $733=(($732)|0); //@line 486 "lvm.c"
      var $734=$733; //@line 486 "lvm.c"
      var $735=(tempDoubleI32[0]=HEAP32[(($734)>>2)],tempDoubleI32[1]=HEAP32[((($734)+(4))>>2)],tempDoubleF64[0]); //@line 486 "lvm.c"
      $nb30=$735; //@line 486 "lvm.c"
      var $736=$rc29; //@line 486 "lvm.c"
      var $737=(($736)|0); //@line 486 "lvm.c"
      var $738=$737; //@line 486 "lvm.c"
      var $739=(tempDoubleI32[0]=HEAP32[(($738)>>2)],tempDoubleI32[1]=HEAP32[((($738)+(4))>>2)],tempDoubleF64[0]); //@line 486 "lvm.c"
      $nc31=$739; //@line 486 "lvm.c"
      var $740=$ra; //@line 486 "lvm.c"
      $i_o32=$740; //@line 486 "lvm.c"
      var $741=$nb30; //@line 486 "lvm.c"
      var $742=$nc31; //@line 486 "lvm.c"
      var $743=($741)/($742); //@line 486 "lvm.c"
      var $744=$i_o32; //@line 486 "lvm.c"
      var $745=(($744)|0); //@line 486 "lvm.c"
      var $746=$745; //@line 486 "lvm.c"
      (tempDoubleF64[0]=$743,HEAP32[(($746)>>2)]=tempDoubleI32[0],HEAP32[((($746)+(4))>>2)]=tempDoubleI32[1]); //@line 486 "lvm.c"
      var $747=$i_o32; //@line 486 "lvm.c"
      var $748=(($747+8)|0); //@line 486 "lvm.c"
      HEAP32[(($748)>>2)]=3; //@line 486 "lvm.c"
      __label__ = 89; break; //@line 486 "lvm.c"
    case 88: 
      var $750=$pc; //@line 486 "lvm.c"
      var $751=$1; //@line 486 "lvm.c"
      var $752=(($751+24)|0); //@line 486 "lvm.c"
      HEAP32[(($752)>>2)]=$750; //@line 486 "lvm.c"
      var $753=$1; //@line 486 "lvm.c"
      var $754=$ra; //@line 486 "lvm.c"
      var $755=$rb28; //@line 486 "lvm.c"
      var $756=$rc29; //@line 486 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($753, $754, $755, $756, 8); //@line 486 "lvm.c"
      var $757=$1; //@line 486 "lvm.c"
      var $758=(($757+12)|0); //@line 486 "lvm.c"
      var $759=HEAP32[(($758)>>2)]; //@line 486 "lvm.c"
      $base=$759; //@line 486 "lvm.c"
      __label__ = 89; break; //@line 486 "lvm.c"
    case 89: 
      __label__ = 4; break; //@line 487 "lvm.c"
    case 90: 
      var $762=$i; //@line 490 "lvm.c"
      var $763=$762 >>> 23; //@line 490 "lvm.c"
      var $764=$763 & 511; //@line 490 "lvm.c"
      var $765=$764 & 256; //@line 490 "lvm.c"
      var $766=(($765)|0)!=0; //@line 490 "lvm.c"
      if ($766) { __label__ = 91; break; } else { __label__ = 92; break; } //@line 490 "lvm.c"
    case 91: 
      var $768=$k; //@line 490 "lvm.c"
      var $769=$i; //@line 490 "lvm.c"
      var $770=$769 >>> 23; //@line 490 "lvm.c"
      var $771=$770 & 511; //@line 490 "lvm.c"
      var $772=$771 & -257; //@line 490 "lvm.c"
      var $773=(($768+($772)*(12))|0); //@line 490 "lvm.c"
      var $781 = $773;__label__ = 93; break; //@line 490 "lvm.c"
    case 92: 
      var $775=$base; //@line 490 "lvm.c"
      var $776=$i; //@line 490 "lvm.c"
      var $777=$776 >>> 23; //@line 490 "lvm.c"
      var $778=$777 & 511; //@line 490 "lvm.c"
      var $779=(($775+($778)*(12))|0); //@line 490 "lvm.c"
      var $781 = $779;__label__ = 93; break; //@line 490 "lvm.c"
    case 93: 
      var $781; //@line 490 "lvm.c"
      $rb33=$781; //@line 490 "lvm.c"
      var $782=$i; //@line 490 "lvm.c"
      var $783=$782 >>> 14; //@line 490 "lvm.c"
      var $784=$783 & 511; //@line 490 "lvm.c"
      var $785=$784 & 256; //@line 490 "lvm.c"
      var $786=(($785)|0)!=0; //@line 490 "lvm.c"
      if ($786) { __label__ = 94; break; } else { __label__ = 95; break; } //@line 490 "lvm.c"
    case 94: 
      var $788=$k; //@line 490 "lvm.c"
      var $789=$i; //@line 490 "lvm.c"
      var $790=$789 >>> 14; //@line 490 "lvm.c"
      var $791=$790 & 511; //@line 490 "lvm.c"
      var $792=$791 & -257; //@line 490 "lvm.c"
      var $793=(($788+($792)*(12))|0); //@line 490 "lvm.c"
      var $801 = $793;__label__ = 96; break; //@line 490 "lvm.c"
    case 95: 
      var $795=$base; //@line 490 "lvm.c"
      var $796=$i; //@line 490 "lvm.c"
      var $797=$796 >>> 14; //@line 490 "lvm.c"
      var $798=$797 & 511; //@line 490 "lvm.c"
      var $799=(($795+($798)*(12))|0); //@line 490 "lvm.c"
      var $801 = $799;__label__ = 96; break; //@line 490 "lvm.c"
    case 96: 
      var $801; //@line 490 "lvm.c"
      $rc34=$801; //@line 490 "lvm.c"
      var $802=$rb33; //@line 490 "lvm.c"
      var $803=(($802+8)|0); //@line 490 "lvm.c"
      var $804=HEAP32[(($803)>>2)]; //@line 490 "lvm.c"
      var $805=(($804)|0)==3; //@line 490 "lvm.c"
      if ($805) { __label__ = 97; break; } else { __label__ = 99; break; } //@line 490 "lvm.c"
    case 97: 
      var $807=$rc34; //@line 490 "lvm.c"
      var $808=(($807+8)|0); //@line 490 "lvm.c"
      var $809=HEAP32[(($808)>>2)]; //@line 490 "lvm.c"
      var $810=(($809)|0)==3; //@line 490 "lvm.c"
      if ($810) { __label__ = 98; break; } else { __label__ = 99; break; } //@line 490 "lvm.c"
    case 98: 
      var $812=$rb33; //@line 490 "lvm.c"
      var $813=(($812)|0); //@line 490 "lvm.c"
      var $814=$813; //@line 490 "lvm.c"
      var $815=(tempDoubleI32[0]=HEAP32[(($814)>>2)],tempDoubleI32[1]=HEAP32[((($814)+(4))>>2)],tempDoubleF64[0]); //@line 490 "lvm.c"
      $nb35=$815; //@line 490 "lvm.c"
      var $816=$rc34; //@line 490 "lvm.c"
      var $817=(($816)|0); //@line 490 "lvm.c"
      var $818=$817; //@line 490 "lvm.c"
      var $819=(tempDoubleI32[0]=HEAP32[(($818)>>2)],tempDoubleI32[1]=HEAP32[((($818)+(4))>>2)],tempDoubleF64[0]); //@line 490 "lvm.c"
      $nc36=$819; //@line 490 "lvm.c"
      var $820=$ra; //@line 490 "lvm.c"
      $i_o37=$820; //@line 490 "lvm.c"
      var $821=$nb35; //@line 490 "lvm.c"
      var $822=$nb35; //@line 490 "lvm.c"
      var $823=$nc36; //@line 490 "lvm.c"
      var $824=($822)/($823); //@line 490 "lvm.c"
      var $825=_floor($824); //@line 490 "lvm.c"
      var $826=$nc36; //@line 490 "lvm.c"
      var $827=($825)*($826); //@line 490 "lvm.c"
      var $828=($821)-($827); //@line 490 "lvm.c"
      var $829=$i_o37; //@line 490 "lvm.c"
      var $830=(($829)|0); //@line 490 "lvm.c"
      var $831=$830; //@line 490 "lvm.c"
      (tempDoubleF64[0]=$828,HEAP32[(($831)>>2)]=tempDoubleI32[0],HEAP32[((($831)+(4))>>2)]=tempDoubleI32[1]); //@line 490 "lvm.c"
      var $832=$i_o37; //@line 490 "lvm.c"
      var $833=(($832+8)|0); //@line 490 "lvm.c"
      HEAP32[(($833)>>2)]=3; //@line 490 "lvm.c"
      __label__ = 100; break; //@line 490 "lvm.c"
    case 99: 
      var $835=$pc; //@line 490 "lvm.c"
      var $836=$1; //@line 490 "lvm.c"
      var $837=(($836+24)|0); //@line 490 "lvm.c"
      HEAP32[(($837)>>2)]=$835; //@line 490 "lvm.c"
      var $838=$1; //@line 490 "lvm.c"
      var $839=$ra; //@line 490 "lvm.c"
      var $840=$rb33; //@line 490 "lvm.c"
      var $841=$rc34; //@line 490 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($838, $839, $840, $841, 9); //@line 490 "lvm.c"
      var $842=$1; //@line 490 "lvm.c"
      var $843=(($842+12)|0); //@line 490 "lvm.c"
      var $844=HEAP32[(($843)>>2)]; //@line 490 "lvm.c"
      $base=$844; //@line 490 "lvm.c"
      __label__ = 100; break; //@line 490 "lvm.c"
    case 100: 
      __label__ = 4; break; //@line 491 "lvm.c"
    case 101: 
      var $847=$i; //@line 494 "lvm.c"
      var $848=$847 >>> 23; //@line 494 "lvm.c"
      var $849=$848 & 511; //@line 494 "lvm.c"
      var $850=$849 & 256; //@line 494 "lvm.c"
      var $851=(($850)|0)!=0; //@line 494 "lvm.c"
      if ($851) { __label__ = 102; break; } else { __label__ = 103; break; } //@line 494 "lvm.c"
    case 102: 
      var $853=$k; //@line 494 "lvm.c"
      var $854=$i; //@line 494 "lvm.c"
      var $855=$854 >>> 23; //@line 494 "lvm.c"
      var $856=$855 & 511; //@line 494 "lvm.c"
      var $857=$856 & -257; //@line 494 "lvm.c"
      var $858=(($853+($857)*(12))|0); //@line 494 "lvm.c"
      var $866 = $858;__label__ = 104; break; //@line 494 "lvm.c"
    case 103: 
      var $860=$base; //@line 494 "lvm.c"
      var $861=$i; //@line 494 "lvm.c"
      var $862=$861 >>> 23; //@line 494 "lvm.c"
      var $863=$862 & 511; //@line 494 "lvm.c"
      var $864=(($860+($863)*(12))|0); //@line 494 "lvm.c"
      var $866 = $864;__label__ = 104; break; //@line 494 "lvm.c"
    case 104: 
      var $866; //@line 494 "lvm.c"
      $rb38=$866; //@line 494 "lvm.c"
      var $867=$i; //@line 494 "lvm.c"
      var $868=$867 >>> 14; //@line 494 "lvm.c"
      var $869=$868 & 511; //@line 494 "lvm.c"
      var $870=$869 & 256; //@line 494 "lvm.c"
      var $871=(($870)|0)!=0; //@line 494 "lvm.c"
      if ($871) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 494 "lvm.c"
    case 105: 
      var $873=$k; //@line 494 "lvm.c"
      var $874=$i; //@line 494 "lvm.c"
      var $875=$874 >>> 14; //@line 494 "lvm.c"
      var $876=$875 & 511; //@line 494 "lvm.c"
      var $877=$876 & -257; //@line 494 "lvm.c"
      var $878=(($873+($877)*(12))|0); //@line 494 "lvm.c"
      var $886 = $878;__label__ = 107; break; //@line 494 "lvm.c"
    case 106: 
      var $880=$base; //@line 494 "lvm.c"
      var $881=$i; //@line 494 "lvm.c"
      var $882=$881 >>> 14; //@line 494 "lvm.c"
      var $883=$882 & 511; //@line 494 "lvm.c"
      var $884=(($880+($883)*(12))|0); //@line 494 "lvm.c"
      var $886 = $884;__label__ = 107; break; //@line 494 "lvm.c"
    case 107: 
      var $886; //@line 494 "lvm.c"
      $rc39=$886; //@line 494 "lvm.c"
      var $887=$rb38; //@line 494 "lvm.c"
      var $888=(($887+8)|0); //@line 494 "lvm.c"
      var $889=HEAP32[(($888)>>2)]; //@line 494 "lvm.c"
      var $890=(($889)|0)==3; //@line 494 "lvm.c"
      if ($890) { __label__ = 108; break; } else { __label__ = 110; break; } //@line 494 "lvm.c"
    case 108: 
      var $892=$rc39; //@line 494 "lvm.c"
      var $893=(($892+8)|0); //@line 494 "lvm.c"
      var $894=HEAP32[(($893)>>2)]; //@line 494 "lvm.c"
      var $895=(($894)|0)==3; //@line 494 "lvm.c"
      if ($895) { __label__ = 109; break; } else { __label__ = 110; break; } //@line 494 "lvm.c"
    case 109: 
      var $897=$rb38; //@line 494 "lvm.c"
      var $898=(($897)|0); //@line 494 "lvm.c"
      var $899=$898; //@line 494 "lvm.c"
      var $900=(tempDoubleI32[0]=HEAP32[(($899)>>2)],tempDoubleI32[1]=HEAP32[((($899)+(4))>>2)],tempDoubleF64[0]); //@line 494 "lvm.c"
      $nb40=$900; //@line 494 "lvm.c"
      var $901=$rc39; //@line 494 "lvm.c"
      var $902=(($901)|0); //@line 494 "lvm.c"
      var $903=$902; //@line 494 "lvm.c"
      var $904=(tempDoubleI32[0]=HEAP32[(($903)>>2)],tempDoubleI32[1]=HEAP32[((($903)+(4))>>2)],tempDoubleF64[0]); //@line 494 "lvm.c"
      $nc41=$904; //@line 494 "lvm.c"
      var $905=$ra; //@line 494 "lvm.c"
      $i_o42=$905; //@line 494 "lvm.c"
      var $906=$nb40; //@line 494 "lvm.c"
      var $907=$nc41; //@line 494 "lvm.c"
      var $908=_llvm_pow_f64($906, $907); //@line 494 "lvm.c"
      var $909=$i_o42; //@line 494 "lvm.c"
      var $910=(($909)|0); //@line 494 "lvm.c"
      var $911=$910; //@line 494 "lvm.c"
      (tempDoubleF64[0]=$908,HEAP32[(($911)>>2)]=tempDoubleI32[0],HEAP32[((($911)+(4))>>2)]=tempDoubleI32[1]); //@line 494 "lvm.c"
      var $912=$i_o42; //@line 494 "lvm.c"
      var $913=(($912+8)|0); //@line 494 "lvm.c"
      HEAP32[(($913)>>2)]=3; //@line 494 "lvm.c"
      __label__ = 111; break; //@line 494 "lvm.c"
    case 110: 
      var $915=$pc; //@line 494 "lvm.c"
      var $916=$1; //@line 494 "lvm.c"
      var $917=(($916+24)|0); //@line 494 "lvm.c"
      HEAP32[(($917)>>2)]=$915; //@line 494 "lvm.c"
      var $918=$1; //@line 494 "lvm.c"
      var $919=$ra; //@line 494 "lvm.c"
      var $920=$rb38; //@line 494 "lvm.c"
      var $921=$rc39; //@line 494 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($918, $919, $920, $921, 10); //@line 494 "lvm.c"
      var $922=$1; //@line 494 "lvm.c"
      var $923=(($922+12)|0); //@line 494 "lvm.c"
      var $924=HEAP32[(($923)>>2)]; //@line 494 "lvm.c"
      $base=$924; //@line 494 "lvm.c"
      __label__ = 111; break; //@line 494 "lvm.c"
    case 111: 
      __label__ = 4; break; //@line 495 "lvm.c"
    case 112: 
      var $927=$base; //@line 498 "lvm.c"
      var $928=$i; //@line 498 "lvm.c"
      var $929=$928 >>> 23; //@line 498 "lvm.c"
      var $930=$929 & 511; //@line 498 "lvm.c"
      var $931=(($927+($930)*(12))|0); //@line 498 "lvm.c"
      $rb43=$931; //@line 498 "lvm.c"
      var $932=$rb43; //@line 499 "lvm.c"
      var $933=(($932+8)|0); //@line 499 "lvm.c"
      var $934=HEAP32[(($933)>>2)]; //@line 499 "lvm.c"
      var $935=(($934)|0)==3; //@line 499 "lvm.c"
      if ($935) { __label__ = 113; break; } else { __label__ = 114; break; } //@line 499 "lvm.c"
    case 113: 
      var $937=$rb43; //@line 500 "lvm.c"
      var $938=(($937)|0); //@line 500 "lvm.c"
      var $939=$938; //@line 500 "lvm.c"
      var $940=(tempDoubleI32[0]=HEAP32[(($939)>>2)],tempDoubleI32[1]=HEAP32[((($939)+(4))>>2)],tempDoubleF64[0]); //@line 500 "lvm.c"
      $nb44=$940; //@line 500 "lvm.c"
      var $941=$ra; //@line 501 "lvm.c"
      $i_o45=$941; //@line 501 "lvm.c"
      var $942=$nb44; //@line 501 "lvm.c"
      var $943=(-$942); //@line 501 "lvm.c"
      var $944=$i_o45; //@line 501 "lvm.c"
      var $945=(($944)|0); //@line 501 "lvm.c"
      var $946=$945; //@line 501 "lvm.c"
      (tempDoubleF64[0]=$943,HEAP32[(($946)>>2)]=tempDoubleI32[0],HEAP32[((($946)+(4))>>2)]=tempDoubleI32[1]); //@line 501 "lvm.c"
      var $947=$i_o45; //@line 501 "lvm.c"
      var $948=(($947+8)|0); //@line 501 "lvm.c"
      HEAP32[(($948)>>2)]=3; //@line 501 "lvm.c"
      __label__ = 115; break; //@line 502 "lvm.c"
    case 114: 
      var $950=$pc; //@line 504 "lvm.c"
      var $951=$1; //@line 504 "lvm.c"
      var $952=(($951+24)|0); //@line 504 "lvm.c"
      HEAP32[(($952)>>2)]=$950; //@line 504 "lvm.c"
      var $953=$1; //@line 504 "lvm.c"
      var $954=$ra; //@line 504 "lvm.c"
      var $955=$rb43; //@line 504 "lvm.c"
      var $956=$rb43; //@line 504 "lvm.c"
      __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($953, $954, $955, $956, 11); //@line 504 "lvm.c"
      var $957=$1; //@line 504 "lvm.c"
      var $958=(($957+12)|0); //@line 504 "lvm.c"
      var $959=HEAP32[(($958)>>2)]; //@line 504 "lvm.c"
      $base=$959; //@line 504 "lvm.c"
      __label__ = 115; break; //@line 505 "lvm.c"
    case 115: 
      __label__ = 4; break; //@line 506 "lvm.c"
    case 116: 
      var $962=$base; //@line 509 "lvm.c"
      var $963=$i; //@line 509 "lvm.c"
      var $964=$963 >>> 23; //@line 509 "lvm.c"
      var $965=$964 & 511; //@line 509 "lvm.c"
      var $966=(($962+($965)*(12))|0); //@line 509 "lvm.c"
      var $967=(($966+8)|0); //@line 509 "lvm.c"
      var $968=HEAP32[(($967)>>2)]; //@line 509 "lvm.c"
      var $969=(($968)|0)==0; //@line 509 "lvm.c"
      if ($969) { var $992 = 1;__label__ = 120; break; } else { __label__ = 117; break; } //@line 509 "lvm.c"
    case 117: 
      var $971=$base; //@line 509 "lvm.c"
      var $972=$i; //@line 509 "lvm.c"
      var $973=$972 >>> 23; //@line 509 "lvm.c"
      var $974=$973 & 511; //@line 509 "lvm.c"
      var $975=(($971+($974)*(12))|0); //@line 509 "lvm.c"
      var $976=(($975+8)|0); //@line 509 "lvm.c"
      var $977=HEAP32[(($976)>>2)]; //@line 509 "lvm.c"
      var $978=(($977)|0)==1; //@line 509 "lvm.c"
      if ($978) { __label__ = 118; break; } else { var $990 = 0;__label__ = 119; break; } //@line 509 "lvm.c"
    case 118: 
      var $980=$base; //@line 509 "lvm.c"
      var $981=$i; //@line 509 "lvm.c"
      var $982=$981 >>> 23; //@line 509 "lvm.c"
      var $983=$982 & 511; //@line 509 "lvm.c"
      var $984=(($980+($983)*(12))|0); //@line 509 "lvm.c"
      var $985=(($984)|0); //@line 509 "lvm.c"
      var $986=$985; //@line 509 "lvm.c"
      var $987=HEAP32[(($986)>>2)]; //@line 509 "lvm.c"
      var $988=(($987)|0)==0; //@line 509 "lvm.c"
      var $990 = $988;__label__ = 119; break; //@line 509 "lvm.c"
    case 119: 
      var $990;
      var $992 = $990;__label__ = 120; break; //@line 509 "lvm.c"
    case 120: 
      var $992;
      var $993=(($992)&1); //@line 509 "lvm.c"
      $res=$993; //@line 509 "lvm.c"
      var $994=$ra; //@line 510 "lvm.c"
      $i_o46=$994; //@line 510 "lvm.c"
      var $995=$res; //@line 510 "lvm.c"
      var $996=$i_o46; //@line 510 "lvm.c"
      var $997=(($996)|0); //@line 510 "lvm.c"
      var $998=$997; //@line 510 "lvm.c"
      HEAP32[(($998)>>2)]=$995; //@line 510 "lvm.c"
      var $999=$i_o46; //@line 510 "lvm.c"
      var $1000=(($999+8)|0); //@line 510 "lvm.c"
      HEAP32[(($1000)>>2)]=1; //@line 510 "lvm.c"
      __label__ = 4; break; //@line 511 "lvm.c"
    case 121: 
      var $1002=$base; //@line 514 "lvm.c"
      var $1003=$i; //@line 514 "lvm.c"
      var $1004=$1003 >>> 23; //@line 514 "lvm.c"
      var $1005=$1004 & 511; //@line 514 "lvm.c"
      var $1006=(($1002+($1005)*(12))|0); //@line 514 "lvm.c"
      $rb47=$1006; //@line 514 "lvm.c"
      var $1007=$rb47; //@line 515 "lvm.c"
      var $1008=(($1007+8)|0); //@line 515 "lvm.c"
      var $1009=HEAP32[(($1008)>>2)]; //@line 515 "lvm.c"
      if ((($1009)|0) == 5) {
        __label__ = 122; break;
      }
      else if ((($1009)|0) == 4) {
        __label__ = 123; break;
      }
      else {
      __label__ = 124; break;
      }
      
    case 122: 
      var $1011=$ra; //@line 517 "lvm.c"
      $i_o48=$1011; //@line 517 "lvm.c"
      var $1012=$rb47; //@line 517 "lvm.c"
      var $1013=(($1012)|0); //@line 517 "lvm.c"
      var $1014=$1013; //@line 517 "lvm.c"
      var $1015=HEAP32[(($1014)>>2)]; //@line 517 "lvm.c"
      var $1016=$1015; //@line 517 "lvm.c"
      var $1017=__Z9luaH_getnP5Table($1016); //@line 517 "lvm.c"
      var $1018=(($1017)|0); //@line 517 "lvm.c"
      var $1019=$i_o48; //@line 517 "lvm.c"
      var $1020=(($1019)|0); //@line 517 "lvm.c"
      var $1021=$1020; //@line 517 "lvm.c"
      (tempDoubleF64[0]=$1018,HEAP32[(($1021)>>2)]=tempDoubleI32[0],HEAP32[((($1021)+(4))>>2)]=tempDoubleI32[1]); //@line 517 "lvm.c"
      var $1022=$i_o48; //@line 517 "lvm.c"
      var $1023=(($1022+8)|0); //@line 517 "lvm.c"
      HEAP32[(($1023)>>2)]=3; //@line 517 "lvm.c"
      __label__ = 127; break; //@line 518 "lvm.c"
    case 123: 
      var $1025=$ra; //@line 521 "lvm.c"
      $i_o49=$1025; //@line 521 "lvm.c"
      var $1026=$rb47; //@line 521 "lvm.c"
      var $1027=(($1026)|0); //@line 521 "lvm.c"
      var $1028=$1027; //@line 521 "lvm.c"
      var $1029=HEAP32[(($1028)>>2)]; //@line 521 "lvm.c"
      var $1030=$1029; //@line 521 "lvm.c"
      var $1031=$1030; //@line 521 "lvm.c"
      var $1032=(($1031+12)|0); //@line 521 "lvm.c"
      var $1033=HEAPU32[(($1032)>>2)]; //@line 521 "lvm.c"
      var $1034=(($1033)>>>0); //@line 521 "lvm.c"
      var $1035=$i_o49; //@line 521 "lvm.c"
      var $1036=(($1035)|0); //@line 521 "lvm.c"
      var $1037=$1036; //@line 521 "lvm.c"
      (tempDoubleF64[0]=$1034,HEAP32[(($1037)>>2)]=tempDoubleI32[0],HEAP32[((($1037)+(4))>>2)]=tempDoubleI32[1]); //@line 521 "lvm.c"
      var $1038=$i_o49; //@line 521 "lvm.c"
      var $1039=(($1038+8)|0); //@line 521 "lvm.c"
      HEAP32[(($1039)>>2)]=3; //@line 521 "lvm.c"
      __label__ = 127; break; //@line 522 "lvm.c"
    case 124: 
      var $1041=$pc; //@line 525 "lvm.c"
      var $1042=$1; //@line 525 "lvm.c"
      var $1043=(($1042+24)|0); //@line 525 "lvm.c"
      HEAP32[(($1043)>>2)]=$1041; //@line 525 "lvm.c"
      var $1044=$1; //@line 525 "lvm.c"
      var $1045=$rb47; //@line 525 "lvm.c"
      var $1046=$ra; //@line 525 "lvm.c"
      var $1047=__Z10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($1044, $1045, _luaO_nilobject_, $1046, 12); //@line 525 "lvm.c"
      var $1048=(($1047)|0)!=0; //@line 525 "lvm.c"
      if ($1048) { __label__ = 126; break; } else { __label__ = 125; break; } //@line 525 "lvm.c"
    case 125: 
      var $1050=$1; //@line 525 "lvm.c"
      var $1051=$rb47; //@line 525 "lvm.c"
      __Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc($1050, $1051, ((STRING_TABLE.__str5225)|0)); //@line 525 "lvm.c"
      __label__ = 126; break; //@line 525 "lvm.c"
    case 126: 
      var $1053=$1; //@line 525 "lvm.c"
      var $1054=(($1053+12)|0); //@line 525 "lvm.c"
      var $1055=HEAP32[(($1054)>>2)]; //@line 525 "lvm.c"
      $base=$1055; //@line 525 "lvm.c"
      __label__ = 127; break; //@line 530 "lvm.c"
    case 127: 
      __label__ = 4; break; //@line 531 "lvm.c"
    case 128: 
      var $1058=$i; //@line 534 "lvm.c"
      var $1059=$1058 >>> 23; //@line 534 "lvm.c"
      var $1060=$1059 & 511; //@line 534 "lvm.c"
      $b50=$1060; //@line 534 "lvm.c"
      var $1061=$i; //@line 535 "lvm.c"
      var $1062=$1061 >>> 14; //@line 535 "lvm.c"
      var $1063=$1062 & 511; //@line 535 "lvm.c"
      $c51=$1063; //@line 535 "lvm.c"
      var $1064=$pc; //@line 536 "lvm.c"
      var $1065=$1; //@line 536 "lvm.c"
      var $1066=(($1065+24)|0); //@line 536 "lvm.c"
      HEAP32[(($1066)>>2)]=$1064; //@line 536 "lvm.c"
      var $1067=$1; //@line 536 "lvm.c"
      var $1068=$c51; //@line 536 "lvm.c"
      var $1069=$b50; //@line 536 "lvm.c"
      var $1070=((($1068)-($1069))|0); //@line 536 "lvm.c"
      var $1071=((($1070)+(1))|0); //@line 536 "lvm.c"
      var $1072=$c51; //@line 536 "lvm.c"
      __Z11luaV_concatP9lua_Stateii($1067, $1071, $1072); //@line 536 "lvm.c"
      var $1073=$1; //@line 536 "lvm.c"
      var $1074=(($1073+16)|0); //@line 536 "lvm.c"
      var $1075=HEAP32[(($1074)>>2)]; //@line 536 "lvm.c"
      var $1076=(($1075+68)|0); //@line 536 "lvm.c"
      var $1077=HEAPU32[(($1076)>>2)]; //@line 536 "lvm.c"
      var $1078=$1; //@line 536 "lvm.c"
      var $1079=(($1078+16)|0); //@line 536 "lvm.c"
      var $1080=HEAP32[(($1079)>>2)]; //@line 536 "lvm.c"
      var $1081=(($1080+64)|0); //@line 536 "lvm.c"
      var $1082=HEAPU32[(($1081)>>2)]; //@line 536 "lvm.c"
      var $1083=(($1077)>>>0) >= (($1082)>>>0); //@line 536 "lvm.c"
      if ($1083) { __label__ = 129; break; } else { __label__ = 130; break; } //@line 536 "lvm.c"
    case 129: 
      var $1085=$1; //@line 536 "lvm.c"
      __Z9luaC_stepP9lua_State($1085); //@line 536 "lvm.c"
      __label__ = 130; break; //@line 536 "lvm.c"
    case 130: 
      var $1087=$1; //@line 536 "lvm.c"
      var $1088=(($1087+12)|0); //@line 536 "lvm.c"
      var $1089=HEAP32[(($1088)>>2)]; //@line 536 "lvm.c"
      $base=$1089; //@line 536 "lvm.c"
      var $1090=$base; //@line 537 "lvm.c"
      var $1091=$b50; //@line 537 "lvm.c"
      var $1092=(($1090+($1091)*(12))|0); //@line 537 "lvm.c"
      $o252=$1092; //@line 537 "lvm.c"
      var $1093=$base; //@line 537 "lvm.c"
      var $1094=$i; //@line 537 "lvm.c"
      var $1095=$1094 >>> 6; //@line 537 "lvm.c"
      var $1096=$1095 & 255; //@line 537 "lvm.c"
      var $1097=(($1093+($1096)*(12))|0); //@line 537 "lvm.c"
      $o153=$1097; //@line 537 "lvm.c"
      var $1098=$o153; //@line 537 "lvm.c"
      var $1099=(($1098)|0); //@line 537 "lvm.c"
      var $1100=$o252; //@line 537 "lvm.c"
      var $1101=(($1100)|0); //@line 537 "lvm.c"
      var $1102=$1099; //@line 537 "lvm.c"
      var $1103=$1101; //@line 537 "lvm.c"
      HEAP32[(($1102)>>2)]=HEAP32[(($1103)>>2)];HEAP32[((($1102)+(4))>>2)]=HEAP32[((($1103)+(4))>>2)]; //@line 537 "lvm.c"
      var $1104=$o252; //@line 537 "lvm.c"
      var $1105=(($1104+8)|0); //@line 537 "lvm.c"
      var $1106=HEAP32[(($1105)>>2)]; //@line 537 "lvm.c"
      var $1107=$o153; //@line 537 "lvm.c"
      var $1108=(($1107+8)|0); //@line 537 "lvm.c"
      HEAP32[(($1108)>>2)]=$1106; //@line 537 "lvm.c"
      __label__ = 4; break; //@line 538 "lvm.c"
    case 131: 
      var $1110=$i; //@line 541 "lvm.c"
      var $1111=$1110 >>> 14; //@line 541 "lvm.c"
      var $1112=$1111 & 262143; //@line 541 "lvm.c"
      var $1113=((($1112)-(131071))|0); //@line 541 "lvm.c"
      var $1114=$pc; //@line 541 "lvm.c"
      var $1115=(($1114+($1113<<2))|0); //@line 541 "lvm.c"
      $pc=$1115; //@line 541 "lvm.c"
      __label__ = 4; break; //@line 542 "lvm.c"
    case 132: 
      var $1117=$i; //@line 545 "lvm.c"
      var $1118=$1117 >>> 23; //@line 545 "lvm.c"
      var $1119=$1118 & 511; //@line 545 "lvm.c"
      var $1120=$1119 & 256; //@line 545 "lvm.c"
      var $1121=(($1120)|0)!=0; //@line 545 "lvm.c"
      if ($1121) { __label__ = 133; break; } else { __label__ = 134; break; } //@line 545 "lvm.c"
    case 133: 
      var $1123=$k; //@line 545 "lvm.c"
      var $1124=$i; //@line 545 "lvm.c"
      var $1125=$1124 >>> 23; //@line 545 "lvm.c"
      var $1126=$1125 & 511; //@line 545 "lvm.c"
      var $1127=$1126 & -257; //@line 545 "lvm.c"
      var $1128=(($1123+($1127)*(12))|0); //@line 545 "lvm.c"
      var $1136 = $1128;__label__ = 135; break; //@line 545 "lvm.c"
    case 134: 
      var $1130=$base; //@line 545 "lvm.c"
      var $1131=$i; //@line 545 "lvm.c"
      var $1132=$1131 >>> 23; //@line 545 "lvm.c"
      var $1133=$1132 & 511; //@line 545 "lvm.c"
      var $1134=(($1130+($1133)*(12))|0); //@line 545 "lvm.c"
      var $1136 = $1134;__label__ = 135; break; //@line 545 "lvm.c"
    case 135: 
      var $1136; //@line 545 "lvm.c"
      $rb54=$1136; //@line 545 "lvm.c"
      var $1137=$i; //@line 546 "lvm.c"
      var $1138=$1137 >>> 14; //@line 546 "lvm.c"
      var $1139=$1138 & 511; //@line 546 "lvm.c"
      var $1140=$1139 & 256; //@line 546 "lvm.c"
      var $1141=(($1140)|0)!=0; //@line 546 "lvm.c"
      if ($1141) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 546 "lvm.c"
    case 136: 
      var $1143=$k; //@line 546 "lvm.c"
      var $1144=$i; //@line 546 "lvm.c"
      var $1145=$1144 >>> 14; //@line 546 "lvm.c"
      var $1146=$1145 & 511; //@line 546 "lvm.c"
      var $1147=$1146 & -257; //@line 546 "lvm.c"
      var $1148=(($1143+($1147)*(12))|0); //@line 546 "lvm.c"
      var $1156 = $1148;__label__ = 138; break; //@line 546 "lvm.c"
    case 137: 
      var $1150=$base; //@line 546 "lvm.c"
      var $1151=$i; //@line 546 "lvm.c"
      var $1152=$1151 >>> 14; //@line 546 "lvm.c"
      var $1153=$1152 & 511; //@line 546 "lvm.c"
      var $1154=(($1150+($1153)*(12))|0); //@line 546 "lvm.c"
      var $1156 = $1154;__label__ = 138; break; //@line 546 "lvm.c"
    case 138: 
      var $1156; //@line 546 "lvm.c"
      $rc55=$1156; //@line 546 "lvm.c"
      var $1157=$pc; //@line 547 "lvm.c"
      var $1158=$1; //@line 547 "lvm.c"
      var $1159=(($1158+24)|0); //@line 547 "lvm.c"
      HEAP32[(($1159)>>2)]=$1157; //@line 547 "lvm.c"
      var $1160=$rb54; //@line 547 "lvm.c"
      var $1161=(($1160+8)|0); //@line 547 "lvm.c"
      var $1162=HEAP32[(($1161)>>2)]; //@line 547 "lvm.c"
      var $1163=$rc55; //@line 547 "lvm.c"
      var $1164=(($1163+8)|0); //@line 547 "lvm.c"
      var $1165=HEAP32[(($1164)>>2)]; //@line 547 "lvm.c"
      var $1166=(($1162)|0)==(($1165)|0); //@line 547 "lvm.c"
      if ($1166) { __label__ = 139; break; } else { var $1174 = 0;__label__ = 140; break; } //@line 547 "lvm.c"
    case 139: 
      var $1168=$1; //@line 547 "lvm.c"
      var $1169=$rb54; //@line 547 "lvm.c"
      var $1170=$rc55; //@line 547 "lvm.c"
      var $1171=__Z13luaV_equalvalP9lua_StatePK10lua_TValueS3_($1168, $1169, $1170); //@line 547 "lvm.c"
      var $1172=(($1171)|0)!=0; //@line 547 "lvm.c"
      var $1174 = $1172;__label__ = 140; break; //@line 547 "lvm.c"
    case 140: 
      var $1174;
      var $1175=(($1174)&1); //@line 547 "lvm.c"
      var $1176=$i; //@line 547 "lvm.c"
      var $1177=$1176 >>> 6; //@line 547 "lvm.c"
      var $1178=$1177 & 255; //@line 547 "lvm.c"
      var $1179=(($1175)|0)==(($1178)|0); //@line 547 "lvm.c"
      if ($1179) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 547 "lvm.c"
    case 141: 
      var $1181=$pc; //@line 547 "lvm.c"
      var $1182=HEAPU32[(($1181)>>2)]; //@line 547 "lvm.c"
      var $1183=$1182 >>> 14; //@line 547 "lvm.c"
      var $1184=$1183 & 262143; //@line 547 "lvm.c"
      var $1185=((($1184)-(131071))|0); //@line 547 "lvm.c"
      var $1186=$pc; //@line 547 "lvm.c"
      var $1187=(($1186+($1185<<2))|0); //@line 547 "lvm.c"
      $pc=$1187; //@line 547 "lvm.c"
      __label__ = 142; break; //@line 547 "lvm.c"
    case 142: 
      var $1189=$1; //@line 547 "lvm.c"
      var $1190=(($1189+12)|0); //@line 547 "lvm.c"
      var $1191=HEAP32[(($1190)>>2)]; //@line 547 "lvm.c"
      $base=$1191; //@line 547 "lvm.c"
      var $1192=$pc; //@line 551 "lvm.c"
      var $1193=(($1192+4)|0); //@line 551 "lvm.c"
      $pc=$1193; //@line 551 "lvm.c"
      __label__ = 4; break; //@line 552 "lvm.c"
    case 143: 
      var $1195=$pc; //@line 555 "lvm.c"
      var $1196=$1; //@line 555 "lvm.c"
      var $1197=(($1196+24)|0); //@line 555 "lvm.c"
      HEAP32[(($1197)>>2)]=$1195; //@line 555 "lvm.c"
      var $1198=$1; //@line 555 "lvm.c"
      var $1199=$i; //@line 555 "lvm.c"
      var $1200=$1199 >>> 23; //@line 555 "lvm.c"
      var $1201=$1200 & 511; //@line 555 "lvm.c"
      var $1202=$1201 & 256; //@line 555 "lvm.c"
      var $1203=(($1202)|0)!=0; //@line 555 "lvm.c"
      if ($1203) { __label__ = 144; break; } else { __label__ = 145; break; } //@line 555 "lvm.c"
    case 144: 
      var $1205=$k; //@line 555 "lvm.c"
      var $1206=$i; //@line 555 "lvm.c"
      var $1207=$1206 >>> 23; //@line 555 "lvm.c"
      var $1208=$1207 & 511; //@line 555 "lvm.c"
      var $1209=$1208 & -257; //@line 555 "lvm.c"
      var $1210=(($1205+($1209)*(12))|0); //@line 555 "lvm.c"
      var $1218 = $1210;__label__ = 146; break; //@line 555 "lvm.c"
    case 145: 
      var $1212=$base; //@line 555 "lvm.c"
      var $1213=$i; //@line 555 "lvm.c"
      var $1214=$1213 >>> 23; //@line 555 "lvm.c"
      var $1215=$1214 & 511; //@line 555 "lvm.c"
      var $1216=(($1212+($1215)*(12))|0); //@line 555 "lvm.c"
      var $1218 = $1216;__label__ = 146; break; //@line 555 "lvm.c"
    case 146: 
      var $1218; //@line 555 "lvm.c"
      var $1219=$i; //@line 555 "lvm.c"
      var $1220=$1219 >>> 14; //@line 555 "lvm.c"
      var $1221=$1220 & 511; //@line 555 "lvm.c"
      var $1222=$1221 & 256; //@line 555 "lvm.c"
      var $1223=(($1222)|0)!=0; //@line 555 "lvm.c"
      if ($1223) { __label__ = 147; break; } else { __label__ = 148; break; } //@line 555 "lvm.c"
    case 147: 
      var $1225=$k; //@line 555 "lvm.c"
      var $1226=$i; //@line 555 "lvm.c"
      var $1227=$1226 >>> 14; //@line 555 "lvm.c"
      var $1228=$1227 & 511; //@line 555 "lvm.c"
      var $1229=$1228 & -257; //@line 555 "lvm.c"
      var $1230=(($1225+($1229)*(12))|0); //@line 555 "lvm.c"
      var $1238 = $1230;__label__ = 149; break; //@line 555 "lvm.c"
    case 148: 
      var $1232=$base; //@line 555 "lvm.c"
      var $1233=$i; //@line 555 "lvm.c"
      var $1234=$1233 >>> 14; //@line 555 "lvm.c"
      var $1235=$1234 & 511; //@line 555 "lvm.c"
      var $1236=(($1232+($1235)*(12))|0); //@line 555 "lvm.c"
      var $1238 = $1236;__label__ = 149; break; //@line 555 "lvm.c"
    case 149: 
      var $1238; //@line 555 "lvm.c"
      var $1239=__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_($1198, $1218, $1238); //@line 555 "lvm.c"
      var $1240=$i; //@line 555 "lvm.c"
      var $1241=$1240 >>> 6; //@line 555 "lvm.c"
      var $1242=$1241 & 255; //@line 555 "lvm.c"
      var $1243=(($1239)|0)==(($1242)|0); //@line 555 "lvm.c"
      if ($1243) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 555 "lvm.c"
    case 150: 
      var $1245=$pc; //@line 555 "lvm.c"
      var $1246=HEAPU32[(($1245)>>2)]; //@line 555 "lvm.c"
      var $1247=$1246 >>> 14; //@line 555 "lvm.c"
      var $1248=$1247 & 262143; //@line 555 "lvm.c"
      var $1249=((($1248)-(131071))|0); //@line 555 "lvm.c"
      var $1250=$pc; //@line 555 "lvm.c"
      var $1251=(($1250+($1249<<2))|0); //@line 555 "lvm.c"
      $pc=$1251; //@line 555 "lvm.c"
      __label__ = 151; break; //@line 555 "lvm.c"
    case 151: 
      var $1253=$1; //@line 555 "lvm.c"
      var $1254=(($1253+12)|0); //@line 555 "lvm.c"
      var $1255=HEAP32[(($1254)>>2)]; //@line 555 "lvm.c"
      $base=$1255; //@line 555 "lvm.c"
      var $1256=$pc; //@line 559 "lvm.c"
      var $1257=(($1256+4)|0); //@line 559 "lvm.c"
      $pc=$1257; //@line 559 "lvm.c"
      __label__ = 4; break; //@line 560 "lvm.c"
    case 152: 
      var $1259=$pc; //@line 563 "lvm.c"
      var $1260=$1; //@line 563 "lvm.c"
      var $1261=(($1260+24)|0); //@line 563 "lvm.c"
      HEAP32[(($1261)>>2)]=$1259; //@line 563 "lvm.c"
      var $1262=$1; //@line 563 "lvm.c"
      var $1263=$i; //@line 563 "lvm.c"
      var $1264=$1263 >>> 23; //@line 563 "lvm.c"
      var $1265=$1264 & 511; //@line 563 "lvm.c"
      var $1266=$1265 & 256; //@line 563 "lvm.c"
      var $1267=(($1266)|0)!=0; //@line 563 "lvm.c"
      if ($1267) { __label__ = 153; break; } else { __label__ = 154; break; } //@line 563 "lvm.c"
    case 153: 
      var $1269=$k; //@line 563 "lvm.c"
      var $1270=$i; //@line 563 "lvm.c"
      var $1271=$1270 >>> 23; //@line 563 "lvm.c"
      var $1272=$1271 & 511; //@line 563 "lvm.c"
      var $1273=$1272 & -257; //@line 563 "lvm.c"
      var $1274=(($1269+($1273)*(12))|0); //@line 563 "lvm.c"
      var $1282 = $1274;__label__ = 155; break; //@line 563 "lvm.c"
    case 154: 
      var $1276=$base; //@line 563 "lvm.c"
      var $1277=$i; //@line 563 "lvm.c"
      var $1278=$1277 >>> 23; //@line 563 "lvm.c"
      var $1279=$1278 & 511; //@line 563 "lvm.c"
      var $1280=(($1276+($1279)*(12))|0); //@line 563 "lvm.c"
      var $1282 = $1280;__label__ = 155; break; //@line 563 "lvm.c"
    case 155: 
      var $1282; //@line 563 "lvm.c"
      var $1283=$i; //@line 563 "lvm.c"
      var $1284=$1283 >>> 14; //@line 563 "lvm.c"
      var $1285=$1284 & 511; //@line 563 "lvm.c"
      var $1286=$1285 & 256; //@line 563 "lvm.c"
      var $1287=(($1286)|0)!=0; //@line 563 "lvm.c"
      if ($1287) { __label__ = 156; break; } else { __label__ = 157; break; } //@line 563 "lvm.c"
    case 156: 
      var $1289=$k; //@line 563 "lvm.c"
      var $1290=$i; //@line 563 "lvm.c"
      var $1291=$1290 >>> 14; //@line 563 "lvm.c"
      var $1292=$1291 & 511; //@line 563 "lvm.c"
      var $1293=$1292 & -257; //@line 563 "lvm.c"
      var $1294=(($1289+($1293)*(12))|0); //@line 563 "lvm.c"
      var $1302 = $1294;__label__ = 158; break; //@line 563 "lvm.c"
    case 157: 
      var $1296=$base; //@line 563 "lvm.c"
      var $1297=$i; //@line 563 "lvm.c"
      var $1298=$1297 >>> 14; //@line 563 "lvm.c"
      var $1299=$1298 & 511; //@line 563 "lvm.c"
      var $1300=(($1296+($1299)*(12))|0); //@line 563 "lvm.c"
      var $1302 = $1300;__label__ = 158; break; //@line 563 "lvm.c"
    case 158: 
      var $1302; //@line 563 "lvm.c"
      var $1303=__Z9lessequalP9lua_StatePK10lua_TValueS3_($1262, $1282, $1302); //@line 563 "lvm.c"
      var $1304=$i; //@line 563 "lvm.c"
      var $1305=$1304 >>> 6; //@line 563 "lvm.c"
      var $1306=$1305 & 255; //@line 563 "lvm.c"
      var $1307=(($1303)|0)==(($1306)|0); //@line 563 "lvm.c"
      if ($1307) { __label__ = 159; break; } else { __label__ = 160; break; } //@line 563 "lvm.c"
    case 159: 
      var $1309=$pc; //@line 563 "lvm.c"
      var $1310=HEAPU32[(($1309)>>2)]; //@line 563 "lvm.c"
      var $1311=$1310 >>> 14; //@line 563 "lvm.c"
      var $1312=$1311 & 262143; //@line 563 "lvm.c"
      var $1313=((($1312)-(131071))|0); //@line 563 "lvm.c"
      var $1314=$pc; //@line 563 "lvm.c"
      var $1315=(($1314+($1313<<2))|0); //@line 563 "lvm.c"
      $pc=$1315; //@line 563 "lvm.c"
      __label__ = 160; break; //@line 563 "lvm.c"
    case 160: 
      var $1317=$1; //@line 563 "lvm.c"
      var $1318=(($1317+12)|0); //@line 563 "lvm.c"
      var $1319=HEAP32[(($1318)>>2)]; //@line 563 "lvm.c"
      $base=$1319; //@line 563 "lvm.c"
      var $1320=$pc; //@line 567 "lvm.c"
      var $1321=(($1320+4)|0); //@line 567 "lvm.c"
      $pc=$1321; //@line 567 "lvm.c"
      __label__ = 4; break; //@line 568 "lvm.c"
    case 161: 
      var $1323=$ra; //@line 571 "lvm.c"
      var $1324=(($1323+8)|0); //@line 571 "lvm.c"
      var $1325=HEAP32[(($1324)>>2)]; //@line 571 "lvm.c"
      var $1326=(($1325)|0)==0; //@line 571 "lvm.c"
      if ($1326) { var $1341 = 1;__label__ = 165; break; } else { __label__ = 162; break; } //@line 571 "lvm.c"
    case 162: 
      var $1328=$ra; //@line 571 "lvm.c"
      var $1329=(($1328+8)|0); //@line 571 "lvm.c"
      var $1330=HEAP32[(($1329)>>2)]; //@line 571 "lvm.c"
      var $1331=(($1330)|0)==1; //@line 571 "lvm.c"
      if ($1331) { __label__ = 163; break; } else { var $1339 = 0;__label__ = 164; break; } //@line 571 "lvm.c"
    case 163: 
      var $1333=$ra; //@line 571 "lvm.c"
      var $1334=(($1333)|0); //@line 571 "lvm.c"
      var $1335=$1334; //@line 571 "lvm.c"
      var $1336=HEAP32[(($1335)>>2)]; //@line 571 "lvm.c"
      var $1337=(($1336)|0)==0; //@line 571 "lvm.c"
      var $1339 = $1337;__label__ = 164; break; //@line 571 "lvm.c"
    case 164: 
      var $1339;
      var $1341 = $1339;__label__ = 165; break; //@line 571 "lvm.c"
    case 165: 
      var $1341;
      var $1342=(($1341)&1); //@line 571 "lvm.c"
      var $1343=$i; //@line 571 "lvm.c"
      var $1344=$1343 >>> 14; //@line 571 "lvm.c"
      var $1345=$1344 & 511; //@line 571 "lvm.c"
      var $1346=(($1342)|0)!=(($1345)|0); //@line 571 "lvm.c"
      if ($1346) { __label__ = 166; break; } else { __label__ = 167; break; } //@line 571 "lvm.c"
    case 166: 
      var $1348=$pc; //@line 572 "lvm.c"
      var $1349=HEAPU32[(($1348)>>2)]; //@line 572 "lvm.c"
      var $1350=$1349 >>> 14; //@line 572 "lvm.c"
      var $1351=$1350 & 262143; //@line 572 "lvm.c"
      var $1352=((($1351)-(131071))|0); //@line 572 "lvm.c"
      var $1353=$pc; //@line 572 "lvm.c"
      var $1354=(($1353+($1352<<2))|0); //@line 572 "lvm.c"
      $pc=$1354; //@line 572 "lvm.c"
      __label__ = 167; break; //@line 572 "lvm.c"
    case 167: 
      var $1356=$pc; //@line 573 "lvm.c"
      var $1357=(($1356+4)|0); //@line 573 "lvm.c"
      $pc=$1357; //@line 573 "lvm.c"
      __label__ = 4; break; //@line 574 "lvm.c"
    case 168: 
      var $1359=$base; //@line 577 "lvm.c"
      var $1360=$i; //@line 577 "lvm.c"
      var $1361=$1360 >>> 23; //@line 577 "lvm.c"
      var $1362=$1361 & 511; //@line 577 "lvm.c"
      var $1363=(($1359+($1362)*(12))|0); //@line 577 "lvm.c"
      $rb56=$1363; //@line 577 "lvm.c"
      var $1364=$rb56; //@line 578 "lvm.c"
      var $1365=(($1364+8)|0); //@line 578 "lvm.c"
      var $1366=HEAP32[(($1365)>>2)]; //@line 578 "lvm.c"
      var $1367=(($1366)|0)==0; //@line 578 "lvm.c"
      if ($1367) { var $1382 = 1;__label__ = 172; break; } else { __label__ = 169; break; } //@line 578 "lvm.c"
    case 169: 
      var $1369=$rb56; //@line 578 "lvm.c"
      var $1370=(($1369+8)|0); //@line 578 "lvm.c"
      var $1371=HEAP32[(($1370)>>2)]; //@line 578 "lvm.c"
      var $1372=(($1371)|0)==1; //@line 578 "lvm.c"
      if ($1372) { __label__ = 170; break; } else { var $1380 = 0;__label__ = 171; break; } //@line 578 "lvm.c"
    case 170: 
      var $1374=$rb56; //@line 578 "lvm.c"
      var $1375=(($1374)|0); //@line 578 "lvm.c"
      var $1376=$1375; //@line 578 "lvm.c"
      var $1377=HEAP32[(($1376)>>2)]; //@line 578 "lvm.c"
      var $1378=(($1377)|0)==0; //@line 578 "lvm.c"
      var $1380 = $1378;__label__ = 171; break; //@line 578 "lvm.c"
    case 171: 
      var $1380;
      var $1382 = $1380;__label__ = 172; break; //@line 578 "lvm.c"
    case 172: 
      var $1382;
      var $1383=(($1382)&1); //@line 578 "lvm.c"
      var $1384=$i; //@line 578 "lvm.c"
      var $1385=$1384 >>> 14; //@line 578 "lvm.c"
      var $1386=$1385 & 511; //@line 578 "lvm.c"
      var $1387=(($1383)|0)!=(($1386)|0); //@line 578 "lvm.c"
      if ($1387) { __label__ = 173; break; } else { __label__ = 174; break; } //@line 578 "lvm.c"
    case 173: 
      var $1389=$rb56; //@line 579 "lvm.c"
      $o257=$1389; //@line 579 "lvm.c"
      var $1390=$ra; //@line 579 "lvm.c"
      $o158=$1390; //@line 579 "lvm.c"
      var $1391=$o158; //@line 579 "lvm.c"
      var $1392=(($1391)|0); //@line 579 "lvm.c"
      var $1393=$o257; //@line 579 "lvm.c"
      var $1394=(($1393)|0); //@line 579 "lvm.c"
      var $1395=$1392; //@line 579 "lvm.c"
      var $1396=$1394; //@line 579 "lvm.c"
      HEAP32[(($1395)>>2)]=HEAP32[(($1396)>>2)];HEAP32[((($1395)+(4))>>2)]=HEAP32[((($1396)+(4))>>2)]; //@line 579 "lvm.c"
      var $1397=$o257; //@line 579 "lvm.c"
      var $1398=(($1397+8)|0); //@line 579 "lvm.c"
      var $1399=HEAP32[(($1398)>>2)]; //@line 579 "lvm.c"
      var $1400=$o158; //@line 579 "lvm.c"
      var $1401=(($1400+8)|0); //@line 579 "lvm.c"
      HEAP32[(($1401)>>2)]=$1399; //@line 579 "lvm.c"
      var $1402=$pc; //@line 580 "lvm.c"
      var $1403=HEAPU32[(($1402)>>2)]; //@line 580 "lvm.c"
      var $1404=$1403 >>> 14; //@line 580 "lvm.c"
      var $1405=$1404 & 262143; //@line 580 "lvm.c"
      var $1406=((($1405)-(131071))|0); //@line 580 "lvm.c"
      var $1407=$pc; //@line 580 "lvm.c"
      var $1408=(($1407+($1406<<2))|0); //@line 580 "lvm.c"
      $pc=$1408; //@line 580 "lvm.c"
      __label__ = 174; break; //@line 581 "lvm.c"
    case 174: 
      var $1410=$pc; //@line 582 "lvm.c"
      var $1411=(($1410+4)|0); //@line 582 "lvm.c"
      $pc=$1411; //@line 582 "lvm.c"
      __label__ = 4; break; //@line 583 "lvm.c"
    case 175: 
      var $1413=$i; //@line 586 "lvm.c"
      var $1414=$1413 >>> 23; //@line 586 "lvm.c"
      var $1415=$1414 & 511; //@line 586 "lvm.c"
      $b59=$1415; //@line 586 "lvm.c"
      var $1416=$i; //@line 587 "lvm.c"
      var $1417=$1416 >>> 14; //@line 587 "lvm.c"
      var $1418=$1417 & 511; //@line 587 "lvm.c"
      var $1419=((($1418)-(1))|0); //@line 587 "lvm.c"
      $nresults=$1419; //@line 587 "lvm.c"
      var $1420=$b59; //@line 588 "lvm.c"
      var $1421=(($1420)|0)!=0; //@line 588 "lvm.c"
      if ($1421) { __label__ = 176; break; } else { __label__ = 177; break; } //@line 588 "lvm.c"
    case 176: 
      var $1423=$ra; //@line 588 "lvm.c"
      var $1424=$b59; //@line 588 "lvm.c"
      var $1425=(($1423+($1424)*(12))|0); //@line 588 "lvm.c"
      var $1426=$1; //@line 588 "lvm.c"
      var $1427=(($1426+8)|0); //@line 588 "lvm.c"
      HEAP32[(($1427)>>2)]=$1425; //@line 588 "lvm.c"
      __label__ = 177; break; //@line 588 "lvm.c"
    case 177: 
      var $1429=$pc; //@line 589 "lvm.c"
      var $1430=$1; //@line 589 "lvm.c"
      var $1431=(($1430+24)|0); //@line 589 "lvm.c"
      HEAP32[(($1431)>>2)]=$1429; //@line 589 "lvm.c"
      var $1432=$1; //@line 590 "lvm.c"
      var $1433=$ra; //@line 590 "lvm.c"
      var $1434=$nresults; //@line 590 "lvm.c"
      var $1435=__Z12luaD_precallP9lua_StateP10lua_TValuei($1432, $1433, $1434); //@line 590 "lvm.c"
      if ((($1435)|0) == 0) {
        __label__ = 178; break;
      }
      else if ((($1435)|0) == 1) {
        __label__ = 179; break;
      }
      else {
      __label__ = 182; break;
      }
      
    case 178: 
      var $1437=$2; //@line 592 "lvm.c"
      var $1438=((($1437)+(1))|0); //@line 592 "lvm.c"
      $2=$1438; //@line 592 "lvm.c"
      __label__ = 3; break; //@line 593 "lvm.c"
    case 179: 
      var $1440=$nresults; //@line 597 "lvm.c"
      var $1441=(($1440)|0) >= 0; //@line 597 "lvm.c"
      if ($1441) { __label__ = 180; break; } else { __label__ = 181; break; } //@line 597 "lvm.c"
    case 180: 
      var $1443=$1; //@line 597 "lvm.c"
      var $1444=(($1443+20)|0); //@line 597 "lvm.c"
      var $1445=HEAP32[(($1444)>>2)]; //@line 597 "lvm.c"
      var $1446=(($1445+8)|0); //@line 597 "lvm.c"
      var $1447=HEAP32[(($1446)>>2)]; //@line 597 "lvm.c"
      var $1448=$1; //@line 597 "lvm.c"
      var $1449=(($1448+8)|0); //@line 597 "lvm.c"
      HEAP32[(($1449)>>2)]=$1447; //@line 597 "lvm.c"
      __label__ = 181; break; //@line 597 "lvm.c"
    case 181: 
      var $1451=$1; //@line 598 "lvm.c"
      var $1452=(($1451+12)|0); //@line 598 "lvm.c"
      var $1453=HEAP32[(($1452)>>2)]; //@line 598 "lvm.c"
      $base=$1453; //@line 598 "lvm.c"
      __label__ = 4; break; //@line 599 "lvm.c"
    case 182: 
      __label__ = 266; break; //@line 602 "lvm.c"
    case 183: 
      var $1456=$i; //@line 607 "lvm.c"
      var $1457=$1456 >>> 23; //@line 607 "lvm.c"
      var $1458=$1457 & 511; //@line 607 "lvm.c"
      $b60=$1458; //@line 607 "lvm.c"
      var $1459=$b60; //@line 608 "lvm.c"
      var $1460=(($1459)|0)!=0; //@line 608 "lvm.c"
      if ($1460) { __label__ = 184; break; } else { __label__ = 185; break; } //@line 608 "lvm.c"
    case 184: 
      var $1462=$ra; //@line 608 "lvm.c"
      var $1463=$b60; //@line 608 "lvm.c"
      var $1464=(($1462+($1463)*(12))|0); //@line 608 "lvm.c"
      var $1465=$1; //@line 608 "lvm.c"
      var $1466=(($1465+8)|0); //@line 608 "lvm.c"
      HEAP32[(($1466)>>2)]=$1464; //@line 608 "lvm.c"
      __label__ = 185; break; //@line 608 "lvm.c"
    case 185: 
      var $1468=$pc; //@line 609 "lvm.c"
      var $1469=$1; //@line 609 "lvm.c"
      var $1470=(($1469+24)|0); //@line 609 "lvm.c"
      HEAP32[(($1470)>>2)]=$1468; //@line 609 "lvm.c"
      var $1471=$1; //@line 611 "lvm.c"
      var $1472=$ra; //@line 611 "lvm.c"
      var $1473=__Z12luaD_precallP9lua_StateP10lua_TValuei($1471, $1472, -1); //@line 611 "lvm.c"
      if ((($1473)|0) == 0) {
        __label__ = 186; break;
      }
      else if ((($1473)|0) == 1) {
        __label__ = 193; break;
      }
      else {
      __label__ = 194; break;
      }
      
    case 186: 
      var $1475=$1; //@line 614 "lvm.c"
      var $1476=(($1475+20)|0); //@line 614 "lvm.c"
      var $1477=HEAP32[(($1476)>>2)]; //@line 614 "lvm.c"
      var $1478=((($1477)-(24))|0); //@line 614 "lvm.c"
      $ci=$1478; //@line 614 "lvm.c"
      var $1479=$ci; //@line 616 "lvm.c"
      var $1480=(($1479+4)|0); //@line 616 "lvm.c"
      var $1481=HEAP32[(($1480)>>2)]; //@line 616 "lvm.c"
      $func=$1481; //@line 616 "lvm.c"
      var $1482=$ci; //@line 617 "lvm.c"
      var $1483=(($1482+24)|0); //@line 617 "lvm.c"
      var $1484=(($1483+4)|0); //@line 617 "lvm.c"
      var $1485=HEAP32[(($1484)>>2)]; //@line 617 "lvm.c"
      $pfunc=$1485; //@line 617 "lvm.c"
      var $1486=$1; //@line 618 "lvm.c"
      var $1487=(($1486+96)|0); //@line 618 "lvm.c"
      var $1488=HEAP32[(($1487)>>2)]; //@line 618 "lvm.c"
      var $1489=(($1488)|0)!=0; //@line 618 "lvm.c"
      if ($1489) { __label__ = 187; break; } else { __label__ = 188; break; } //@line 618 "lvm.c"
    case 187: 
      var $1491=$1; //@line 618 "lvm.c"
      var $1492=$ci; //@line 618 "lvm.c"
      var $1493=(($1492)|0); //@line 618 "lvm.c"
      var $1494=HEAP32[(($1493)>>2)]; //@line 618 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($1491, $1494); //@line 618 "lvm.c"
      __label__ = 188; break; //@line 618 "lvm.c"
    case 188: 
      var $1496=$ci; //@line 619 "lvm.c"
      var $1497=(($1496+4)|0); //@line 619 "lvm.c"
      var $1498=HEAP32[(($1497)>>2)]; //@line 619 "lvm.c"
      var $1499=$ci; //@line 619 "lvm.c"
      var $1500=(($1499+24)|0); //@line 619 "lvm.c"
      var $1501=(($1500)|0); //@line 619 "lvm.c"
      var $1502=HEAP32[(($1501)>>2)]; //@line 619 "lvm.c"
      var $1503=$pfunc; //@line 619 "lvm.c"
      var $1504=$1502; //@line 619 "lvm.c"
      var $1505=$1503; //@line 619 "lvm.c"
      var $1506=((($1504)-($1505))|0); //@line 619 "lvm.c"
      var $1507=((((($1506)|0))/(12))&-1); //@line 619 "lvm.c"
      var $1508=(($1498+($1507)*(12))|0); //@line 619 "lvm.c"
      var $1509=$ci; //@line 619 "lvm.c"
      var $1510=(($1509)|0); //@line 619 "lvm.c"
      HEAP32[(($1510)>>2)]=$1508; //@line 619 "lvm.c"
      var $1511=$1; //@line 619 "lvm.c"
      var $1512=(($1511+12)|0); //@line 619 "lvm.c"
      HEAP32[(($1512)>>2)]=$1508; //@line 619 "lvm.c"
      $aux=0; //@line 620 "lvm.c"
      __label__ = 189; break; //@line 620 "lvm.c"
    case 189: 
      var $1514=$pfunc; //@line 620 "lvm.c"
      var $1515=$aux; //@line 620 "lvm.c"
      var $1516=(($1514+($1515)*(12))|0); //@line 620 "lvm.c"
      var $1517=$1; //@line 620 "lvm.c"
      var $1518=(($1517+8)|0); //@line 620 "lvm.c"
      var $1519=HEAPU32[(($1518)>>2)]; //@line 620 "lvm.c"
      var $1520=(($1516)>>>0) < (($1519)>>>0); //@line 620 "lvm.c"
      if ($1520) { __label__ = 190; break; } else { __label__ = 192; break; } //@line 620 "lvm.c"
    case 190: 
      var $1522=$pfunc; //@line 621 "lvm.c"
      var $1523=$aux; //@line 621 "lvm.c"
      var $1524=(($1522+($1523)*(12))|0); //@line 621 "lvm.c"
      $o261=$1524; //@line 621 "lvm.c"
      var $1525=$func; //@line 621 "lvm.c"
      var $1526=$aux; //@line 621 "lvm.c"
      var $1527=(($1525+($1526)*(12))|0); //@line 621 "lvm.c"
      $o162=$1527; //@line 621 "lvm.c"
      var $1528=$o162; //@line 621 "lvm.c"
      var $1529=(($1528)|0); //@line 621 "lvm.c"
      var $1530=$o261; //@line 621 "lvm.c"
      var $1531=(($1530)|0); //@line 621 "lvm.c"
      var $1532=$1529; //@line 621 "lvm.c"
      var $1533=$1531; //@line 621 "lvm.c"
      HEAP32[(($1532)>>2)]=HEAP32[(($1533)>>2)];HEAP32[((($1532)+(4))>>2)]=HEAP32[((($1533)+(4))>>2)]; //@line 621 "lvm.c"
      var $1534=$o261; //@line 621 "lvm.c"
      var $1535=(($1534+8)|0); //@line 621 "lvm.c"
      var $1536=HEAP32[(($1535)>>2)]; //@line 621 "lvm.c"
      var $1537=$o162; //@line 621 "lvm.c"
      var $1538=(($1537+8)|0); //@line 621 "lvm.c"
      HEAP32[(($1538)>>2)]=$1536; //@line 621 "lvm.c"
      __label__ = 191; break; //@line 621 "lvm.c"
    case 191: 
      var $1540=$aux; //@line 620 "lvm.c"
      var $1541=((($1540)+(1))|0); //@line 620 "lvm.c"
      $aux=$1541; //@line 620 "lvm.c"
      __label__ = 189; break; //@line 620 "lvm.c"
    case 192: 
      var $1543=$func; //@line 622 "lvm.c"
      var $1544=$aux; //@line 622 "lvm.c"
      var $1545=(($1543+($1544)*(12))|0); //@line 622 "lvm.c"
      var $1546=$1; //@line 622 "lvm.c"
      var $1547=(($1546+8)|0); //@line 622 "lvm.c"
      HEAP32[(($1547)>>2)]=$1545; //@line 622 "lvm.c"
      var $1548=$ci; //@line 622 "lvm.c"
      var $1549=(($1548+8)|0); //@line 622 "lvm.c"
      HEAP32[(($1549)>>2)]=$1545; //@line 622 "lvm.c"
      var $1550=$1; //@line 624 "lvm.c"
      var $1551=(($1550+24)|0); //@line 624 "lvm.c"
      var $1552=HEAP32[(($1551)>>2)]; //@line 624 "lvm.c"
      var $1553=$ci; //@line 624 "lvm.c"
      var $1554=(($1553+12)|0); //@line 624 "lvm.c"
      HEAP32[(($1554)>>2)]=$1552; //@line 624 "lvm.c"
      var $1555=$ci; //@line 625 "lvm.c"
      var $1556=(($1555+20)|0); //@line 625 "lvm.c"
      var $1557=HEAP32[(($1556)>>2)]; //@line 625 "lvm.c"
      var $1558=((($1557)+(1))|0); //@line 625 "lvm.c"
      HEAP32[(($1556)>>2)]=$1558; //@line 625 "lvm.c"
      var $1559=$1; //@line 626 "lvm.c"
      var $1560=(($1559+20)|0); //@line 626 "lvm.c"
      var $1561=HEAP32[(($1560)>>2)]; //@line 626 "lvm.c"
      var $1562=((($1561)-(24))|0); //@line 626 "lvm.c"
      HEAP32[(($1560)>>2)]=$1562; //@line 626 "lvm.c"
      __label__ = 3; break; //@line 627 "lvm.c"
    case 193: 
      var $1564=$1; //@line 630 "lvm.c"
      var $1565=(($1564+12)|0); //@line 630 "lvm.c"
      var $1566=HEAP32[(($1565)>>2)]; //@line 630 "lvm.c"
      $base=$1566; //@line 630 "lvm.c"
      __label__ = 4; break; //@line 631 "lvm.c"
    case 194: 
      __label__ = 266; break; //@line 634 "lvm.c"
    case 195: 
      var $1569=$i; //@line 639 "lvm.c"
      var $1570=$1569 >>> 23; //@line 639 "lvm.c"
      var $1571=$1570 & 511; //@line 639 "lvm.c"
      $b63=$1571; //@line 639 "lvm.c"
      var $1572=$b63; //@line 640 "lvm.c"
      var $1573=(($1572)|0)!=0; //@line 640 "lvm.c"
      if ($1573) { __label__ = 196; break; } else { __label__ = 197; break; } //@line 640 "lvm.c"
    case 196: 
      var $1575=$ra; //@line 640 "lvm.c"
      var $1576=$b63; //@line 640 "lvm.c"
      var $1577=(($1575+($1576)*(12))|0); //@line 640 "lvm.c"
      var $1578=((($1577)-(12))|0); //@line 640 "lvm.c"
      var $1579=$1; //@line 640 "lvm.c"
      var $1580=(($1579+8)|0); //@line 640 "lvm.c"
      HEAP32[(($1580)>>2)]=$1578; //@line 640 "lvm.c"
      __label__ = 197; break; //@line 640 "lvm.c"
    case 197: 
      var $1582=$1; //@line 641 "lvm.c"
      var $1583=(($1582+96)|0); //@line 641 "lvm.c"
      var $1584=HEAP32[(($1583)>>2)]; //@line 641 "lvm.c"
      var $1585=(($1584)|0)!=0; //@line 641 "lvm.c"
      if ($1585) { __label__ = 198; break; } else { __label__ = 199; break; } //@line 641 "lvm.c"
    case 198: 
      var $1587=$1; //@line 641 "lvm.c"
      var $1588=$base; //@line 641 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($1587, $1588); //@line 641 "lvm.c"
      __label__ = 199; break; //@line 641 "lvm.c"
    case 199: 
      var $1590=$pc; //@line 642 "lvm.c"
      var $1591=$1; //@line 642 "lvm.c"
      var $1592=(($1591+24)|0); //@line 642 "lvm.c"
      HEAP32[(($1592)>>2)]=$1590; //@line 642 "lvm.c"
      var $1593=$1; //@line 643 "lvm.c"
      var $1594=$ra; //@line 643 "lvm.c"
      var $1595=__Z12luaD_poscallP9lua_StateP10lua_TValue($1593, $1594); //@line 643 "lvm.c"
      $b63=$1595; //@line 643 "lvm.c"
      var $1596=$2; //@line 644 "lvm.c"
      var $1597=((($1596)-(1))|0); //@line 644 "lvm.c"
      $2=$1597; //@line 644 "lvm.c"
      var $1598=(($1597)|0)==0; //@line 644 "lvm.c"
      if ($1598) { __label__ = 200; break; } else { __label__ = 201; break; } //@line 644 "lvm.c"
    case 200: 
      __label__ = 266; break; //@line 645 "lvm.c"
    case 201: 
      var $1601=$b63; //@line 647 "lvm.c"
      var $1602=(($1601)|0)!=0; //@line 647 "lvm.c"
      if ($1602) { __label__ = 202; break; } else { __label__ = 203; break; } //@line 647 "lvm.c"
    case 202: 
      var $1604=$1; //@line 647 "lvm.c"
      var $1605=(($1604+20)|0); //@line 647 "lvm.c"
      var $1606=HEAP32[(($1605)>>2)]; //@line 647 "lvm.c"
      var $1607=(($1606+8)|0); //@line 647 "lvm.c"
      var $1608=HEAP32[(($1607)>>2)]; //@line 647 "lvm.c"
      var $1609=$1; //@line 647 "lvm.c"
      var $1610=(($1609+8)|0); //@line 647 "lvm.c"
      HEAP32[(($1610)>>2)]=$1608; //@line 647 "lvm.c"
      __label__ = 203; break; //@line 647 "lvm.c"
    case 203: 
      __label__ = 3; break; //@line 650 "lvm.c"
    case 204: 
      var $1613=$ra; //@line 654 "lvm.c"
      var $1614=(($1613+24)|0); //@line 654 "lvm.c"
      var $1615=(($1614)|0); //@line 654 "lvm.c"
      var $1616=$1615; //@line 654 "lvm.c"
      var $1617=(tempDoubleI32[0]=HEAP32[(($1616)>>2)],tempDoubleI32[1]=HEAP32[((($1616)+(4))>>2)],tempDoubleF64[0]); //@line 654 "lvm.c"
      $step=$1617; //@line 654 "lvm.c"
      var $1618=$ra; //@line 655 "lvm.c"
      var $1619=(($1618)|0); //@line 655 "lvm.c"
      var $1620=$1619; //@line 655 "lvm.c"
      var $1621=(tempDoubleI32[0]=HEAP32[(($1620)>>2)],tempDoubleI32[1]=HEAP32[((($1620)+(4))>>2)],tempDoubleF64[0]); //@line 655 "lvm.c"
      var $1622=$step; //@line 655 "lvm.c"
      var $1623=($1621)+($1622); //@line 655 "lvm.c"
      $idx=$1623; //@line 655 "lvm.c"
      var $1624=$ra; //@line 656 "lvm.c"
      var $1625=(($1624+12)|0); //@line 656 "lvm.c"
      var $1626=(($1625)|0); //@line 656 "lvm.c"
      var $1627=$1626; //@line 656 "lvm.c"
      var $1628=(tempDoubleI32[0]=HEAP32[(($1627)>>2)],tempDoubleI32[1]=HEAP32[((($1627)+(4))>>2)],tempDoubleF64[0]); //@line 656 "lvm.c"
      $limit=$1628; //@line 656 "lvm.c"
      var $1629=$step; //@line 657 "lvm.c"
      var $1630=0 < $1629; //@line 657 "lvm.c"
      if ($1630) { __label__ = 205; break; } else { __label__ = 206; break; } //@line 657 "lvm.c"
    case 205: 
      var $1632=$idx; //@line 657 "lvm.c"
      var $1633=$limit; //@line 657 "lvm.c"
      var $1634=$1632 <= $1633; //@line 657 "lvm.c"
      if ($1634) { __label__ = 207; break; } else { __label__ = 208; break; } //@line 657 "lvm.c"
    case 206: 
      var $1636=$limit; //@line 657 "lvm.c"
      var $1637=$idx; //@line 657 "lvm.c"
      var $1638=$1636 <= $1637; //@line 657 "lvm.c"
      if ($1638) { __label__ = 207; break; } else { __label__ = 208; break; } //@line 657 "lvm.c"
    case 207: 
      var $1640=$i; //@line 659 "lvm.c"
      var $1641=$1640 >>> 14; //@line 659 "lvm.c"
      var $1642=$1641 & 262143; //@line 659 "lvm.c"
      var $1643=((($1642)-(131071))|0); //@line 659 "lvm.c"
      var $1644=$pc; //@line 659 "lvm.c"
      var $1645=(($1644+($1643<<2))|0); //@line 659 "lvm.c"
      $pc=$1645; //@line 659 "lvm.c"
      var $1646=$ra; //@line 660 "lvm.c"
      $i_o64=$1646; //@line 660 "lvm.c"
      var $1647=$idx; //@line 660 "lvm.c"
      var $1648=$i_o64; //@line 660 "lvm.c"
      var $1649=(($1648)|0); //@line 660 "lvm.c"
      var $1650=$1649; //@line 660 "lvm.c"
      (tempDoubleF64[0]=$1647,HEAP32[(($1650)>>2)]=tempDoubleI32[0],HEAP32[((($1650)+(4))>>2)]=tempDoubleI32[1]); //@line 660 "lvm.c"
      var $1651=$i_o64; //@line 660 "lvm.c"
      var $1652=(($1651+8)|0); //@line 660 "lvm.c"
      HEAP32[(($1652)>>2)]=3; //@line 660 "lvm.c"
      var $1653=$ra; //@line 661 "lvm.c"
      var $1654=(($1653+36)|0); //@line 661 "lvm.c"
      $i_o65=$1654; //@line 661 "lvm.c"
      var $1655=$idx; //@line 661 "lvm.c"
      var $1656=$i_o65; //@line 661 "lvm.c"
      var $1657=(($1656)|0); //@line 661 "lvm.c"
      var $1658=$1657; //@line 661 "lvm.c"
      (tempDoubleF64[0]=$1655,HEAP32[(($1658)>>2)]=tempDoubleI32[0],HEAP32[((($1658)+(4))>>2)]=tempDoubleI32[1]); //@line 661 "lvm.c"
      var $1659=$i_o65; //@line 661 "lvm.c"
      var $1660=(($1659+8)|0); //@line 661 "lvm.c"
      HEAP32[(($1660)>>2)]=3; //@line 661 "lvm.c"
      __label__ = 208; break; //@line 662 "lvm.c"
    case 208: 
      __label__ = 4; break; //@line 663 "lvm.c"
    case 209: 
      var $1663=$ra; //@line 666 "lvm.c"
      $init=$1663; //@line 666 "lvm.c"
      var $1664=$ra; //@line 667 "lvm.c"
      var $1665=(($1664+12)|0); //@line 667 "lvm.c"
      $plimit=$1665; //@line 667 "lvm.c"
      var $1666=$ra; //@line 668 "lvm.c"
      var $1667=(($1666+24)|0); //@line 668 "lvm.c"
      $pstep=$1667; //@line 668 "lvm.c"
      var $1668=$pc; //@line 669 "lvm.c"
      var $1669=$1; //@line 669 "lvm.c"
      var $1670=(($1669+24)|0); //@line 669 "lvm.c"
      HEAP32[(($1670)>>2)]=$1668; //@line 669 "lvm.c"
      var $1671=$init; //@line 670 "lvm.c"
      var $1672=(($1671+8)|0); //@line 670 "lvm.c"
      var $1673=HEAP32[(($1672)>>2)]; //@line 670 "lvm.c"
      var $1674=(($1673)|0)==3; //@line 670 "lvm.c"
      if ($1674) { __label__ = 212; break; } else { __label__ = 210; break; } //@line 670 "lvm.c"
    case 210: 
      var $1676=$init; //@line 670 "lvm.c"
      var $1677=$ra; //@line 670 "lvm.c"
      var $1678=__Z13luaV_tonumberPK10lua_TValuePS_($1676, $1677); //@line 670 "lvm.c"
      $init=$1678; //@line 670 "lvm.c"
      var $1679=(($1678)|0)!=0; //@line 670 "lvm.c"
      if ($1679) { __label__ = 212; break; } else { __label__ = 211; break; } //@line 670 "lvm.c"
    case 211: 
      var $1681=$1; //@line 671 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($1681, ((STRING_TABLE.__str6226)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 671 "lvm.c"
      __label__ = 220; break; //@line 671 "lvm.c"
    case 212: 
      var $1683=$plimit; //@line 672 "lvm.c"
      var $1684=(($1683+8)|0); //@line 672 "lvm.c"
      var $1685=HEAP32[(($1684)>>2)]; //@line 672 "lvm.c"
      var $1686=(($1685)|0)==3; //@line 672 "lvm.c"
      if ($1686) { __label__ = 215; break; } else { __label__ = 213; break; } //@line 672 "lvm.c"
    case 213: 
      var $1688=$plimit; //@line 672 "lvm.c"
      var $1689=$ra; //@line 672 "lvm.c"
      var $1690=(($1689+12)|0); //@line 672 "lvm.c"
      var $1691=__Z13luaV_tonumberPK10lua_TValuePS_($1688, $1690); //@line 672 "lvm.c"
      $plimit=$1691; //@line 672 "lvm.c"
      var $1692=(($1691)|0)!=0; //@line 672 "lvm.c"
      if ($1692) { __label__ = 215; break; } else { __label__ = 214; break; } //@line 672 "lvm.c"
    case 214: 
      var $1694=$1; //@line 673 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($1694, ((STRING_TABLE.__str7227)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 673 "lvm.c"
      __label__ = 219; break; //@line 673 "lvm.c"
    case 215: 
      var $1696=$pstep; //@line 674 "lvm.c"
      var $1697=(($1696+8)|0); //@line 674 "lvm.c"
      var $1698=HEAP32[(($1697)>>2)]; //@line 674 "lvm.c"
      var $1699=(($1698)|0)==3; //@line 674 "lvm.c"
      if ($1699) { __label__ = 218; break; } else { __label__ = 216; break; } //@line 674 "lvm.c"
    case 216: 
      var $1701=$pstep; //@line 674 "lvm.c"
      var $1702=$ra; //@line 674 "lvm.c"
      var $1703=(($1702+24)|0); //@line 674 "lvm.c"
      var $1704=__Z13luaV_tonumberPK10lua_TValuePS_($1701, $1703); //@line 674 "lvm.c"
      $pstep=$1704; //@line 674 "lvm.c"
      var $1705=(($1704)|0)!=0; //@line 674 "lvm.c"
      if ($1705) { __label__ = 218; break; } else { __label__ = 217; break; } //@line 674 "lvm.c"
    case 217: 
      var $1707=$1; //@line 675 "lvm.c"
      __Z13luaG_runerrorP9lua_StatePKcz($1707, ((STRING_TABLE.__str8228)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 675 "lvm.c"
      __label__ = 218; break; //@line 675 "lvm.c"
    case 218: 
      __label__ = 219; break; //@line 675 "lvm.c"
    case 219: 
      __label__ = 220; break; //@line 675 "lvm.c"
    case 220: 
      var $1711=$ra; //@line 676 "lvm.c"
      $i_o66=$1711; //@line 676 "lvm.c"
      var $1712=$ra; //@line 676 "lvm.c"
      var $1713=(($1712)|0); //@line 676 "lvm.c"
      var $1714=$1713; //@line 676 "lvm.c"
      var $1715=(tempDoubleI32[0]=HEAP32[(($1714)>>2)],tempDoubleI32[1]=HEAP32[((($1714)+(4))>>2)],tempDoubleF64[0]); //@line 676 "lvm.c"
      var $1716=$pstep; //@line 676 "lvm.c"
      var $1717=(($1716)|0); //@line 676 "lvm.c"
      var $1718=$1717; //@line 676 "lvm.c"
      var $1719=(tempDoubleI32[0]=HEAP32[(($1718)>>2)],tempDoubleI32[1]=HEAP32[((($1718)+(4))>>2)],tempDoubleF64[0]); //@line 676 "lvm.c"
      var $1720=($1715)-($1719); //@line 676 "lvm.c"
      var $1721=$i_o66; //@line 676 "lvm.c"
      var $1722=(($1721)|0); //@line 676 "lvm.c"
      var $1723=$1722; //@line 676 "lvm.c"
      (tempDoubleF64[0]=$1720,HEAP32[(($1723)>>2)]=tempDoubleI32[0],HEAP32[((($1723)+(4))>>2)]=tempDoubleI32[1]); //@line 676 "lvm.c"
      var $1724=$i_o66; //@line 676 "lvm.c"
      var $1725=(($1724+8)|0); //@line 676 "lvm.c"
      HEAP32[(($1725)>>2)]=3; //@line 676 "lvm.c"
      var $1726=$i; //@line 677 "lvm.c"
      var $1727=$1726 >>> 14; //@line 677 "lvm.c"
      var $1728=$1727 & 262143; //@line 677 "lvm.c"
      var $1729=((($1728)-(131071))|0); //@line 677 "lvm.c"
      var $1730=$pc; //@line 677 "lvm.c"
      var $1731=(($1730+($1729<<2))|0); //@line 677 "lvm.c"
      $pc=$1731; //@line 677 "lvm.c"
      __label__ = 4; break; //@line 678 "lvm.c"
    case 221: 
      var $1733=$ra; //@line 681 "lvm.c"
      var $1734=(($1733+36)|0); //@line 681 "lvm.c"
      $cb=$1734; //@line 681 "lvm.c"
      var $1735=$ra; //@line 682 "lvm.c"
      var $1736=(($1735+24)|0); //@line 682 "lvm.c"
      $o267=$1736; //@line 682 "lvm.c"
      var $1737=$cb; //@line 682 "lvm.c"
      var $1738=(($1737+24)|0); //@line 682 "lvm.c"
      $o168=$1738; //@line 682 "lvm.c"
      var $1739=$o168; //@line 682 "lvm.c"
      var $1740=(($1739)|0); //@line 682 "lvm.c"
      var $1741=$o267; //@line 682 "lvm.c"
      var $1742=(($1741)|0); //@line 682 "lvm.c"
      var $1743=$1740; //@line 682 "lvm.c"
      var $1744=$1742; //@line 682 "lvm.c"
      HEAP32[(($1743)>>2)]=HEAP32[(($1744)>>2)];HEAP32[((($1743)+(4))>>2)]=HEAP32[((($1744)+(4))>>2)]; //@line 682 "lvm.c"
      var $1745=$o267; //@line 682 "lvm.c"
      var $1746=(($1745+8)|0); //@line 682 "lvm.c"
      var $1747=HEAP32[(($1746)>>2)]; //@line 682 "lvm.c"
      var $1748=$o168; //@line 682 "lvm.c"
      var $1749=(($1748+8)|0); //@line 682 "lvm.c"
      HEAP32[(($1749)>>2)]=$1747; //@line 682 "lvm.c"
      var $1750=$ra; //@line 683 "lvm.c"
      var $1751=(($1750+12)|0); //@line 683 "lvm.c"
      $o269=$1751; //@line 683 "lvm.c"
      var $1752=$cb; //@line 683 "lvm.c"
      var $1753=(($1752+12)|0); //@line 683 "lvm.c"
      $o170=$1753; //@line 683 "lvm.c"
      var $1754=$o170; //@line 683 "lvm.c"
      var $1755=(($1754)|0); //@line 683 "lvm.c"
      var $1756=$o269; //@line 683 "lvm.c"
      var $1757=(($1756)|0); //@line 683 "lvm.c"
      var $1758=$1755; //@line 683 "lvm.c"
      var $1759=$1757; //@line 683 "lvm.c"
      HEAP32[(($1758)>>2)]=HEAP32[(($1759)>>2)];HEAP32[((($1758)+(4))>>2)]=HEAP32[((($1759)+(4))>>2)]; //@line 683 "lvm.c"
      var $1760=$o269; //@line 683 "lvm.c"
      var $1761=(($1760+8)|0); //@line 683 "lvm.c"
      var $1762=HEAP32[(($1761)>>2)]; //@line 683 "lvm.c"
      var $1763=$o170; //@line 683 "lvm.c"
      var $1764=(($1763+8)|0); //@line 683 "lvm.c"
      HEAP32[(($1764)>>2)]=$1762; //@line 683 "lvm.c"
      var $1765=$ra; //@line 684 "lvm.c"
      $o271=$1765; //@line 684 "lvm.c"
      var $1766=$cb; //@line 684 "lvm.c"
      $o172=$1766; //@line 684 "lvm.c"
      var $1767=$o172; //@line 684 "lvm.c"
      var $1768=(($1767)|0); //@line 684 "lvm.c"
      var $1769=$o271; //@line 684 "lvm.c"
      var $1770=(($1769)|0); //@line 684 "lvm.c"
      var $1771=$1768; //@line 684 "lvm.c"
      var $1772=$1770; //@line 684 "lvm.c"
      HEAP32[(($1771)>>2)]=HEAP32[(($1772)>>2)];HEAP32[((($1771)+(4))>>2)]=HEAP32[((($1772)+(4))>>2)]; //@line 684 "lvm.c"
      var $1773=$o271; //@line 684 "lvm.c"
      var $1774=(($1773+8)|0); //@line 684 "lvm.c"
      var $1775=HEAP32[(($1774)>>2)]; //@line 684 "lvm.c"
      var $1776=$o172; //@line 684 "lvm.c"
      var $1777=(($1776+8)|0); //@line 684 "lvm.c"
      HEAP32[(($1777)>>2)]=$1775; //@line 684 "lvm.c"
      var $1778=$cb; //@line 685 "lvm.c"
      var $1779=(($1778+36)|0); //@line 685 "lvm.c"
      var $1780=$1; //@line 685 "lvm.c"
      var $1781=(($1780+8)|0); //@line 685 "lvm.c"
      HEAP32[(($1781)>>2)]=$1779; //@line 685 "lvm.c"
      var $1782=$pc; //@line 686 "lvm.c"
      var $1783=$1; //@line 686 "lvm.c"
      var $1784=(($1783+24)|0); //@line 686 "lvm.c"
      HEAP32[(($1784)>>2)]=$1782; //@line 686 "lvm.c"
      var $1785=$1; //@line 686 "lvm.c"
      var $1786=$cb; //@line 686 "lvm.c"
      var $1787=$i; //@line 686 "lvm.c"
      var $1788=$1787 >>> 14; //@line 686 "lvm.c"
      var $1789=$1788 & 511; //@line 686 "lvm.c"
      __Z9luaD_callP9lua_StateP10lua_TValuei($1785, $1786, $1789); //@line 686 "lvm.c"
      var $1790=$1; //@line 686 "lvm.c"
      var $1791=(($1790+12)|0); //@line 686 "lvm.c"
      var $1792=HEAP32[(($1791)>>2)]; //@line 686 "lvm.c"
      $base=$1792; //@line 686 "lvm.c"
      var $1793=$1; //@line 687 "lvm.c"
      var $1794=(($1793+20)|0); //@line 687 "lvm.c"
      var $1795=HEAP32[(($1794)>>2)]; //@line 687 "lvm.c"
      var $1796=(($1795+8)|0); //@line 687 "lvm.c"
      var $1797=HEAP32[(($1796)>>2)]; //@line 687 "lvm.c"
      var $1798=$1; //@line 687 "lvm.c"
      var $1799=(($1798+8)|0); //@line 687 "lvm.c"
      HEAP32[(($1799)>>2)]=$1797; //@line 687 "lvm.c"
      var $1800=$base; //@line 688 "lvm.c"
      var $1801=$i; //@line 688 "lvm.c"
      var $1802=$1801 >>> 6; //@line 688 "lvm.c"
      var $1803=$1802 & 255; //@line 688 "lvm.c"
      var $1804=(($1800+($1803)*(12))|0); //@line 688 "lvm.c"
      var $1805=(($1804+36)|0); //@line 688 "lvm.c"
      $cb=$1805; //@line 688 "lvm.c"
      var $1806=$cb; //@line 689 "lvm.c"
      var $1807=(($1806+8)|0); //@line 689 "lvm.c"
      var $1808=HEAP32[(($1807)>>2)]; //@line 689 "lvm.c"
      var $1809=(($1808)|0)==0; //@line 689 "lvm.c"
      if ($1809) { __label__ = 223; break; } else { __label__ = 222; break; } //@line 689 "lvm.c"
    case 222: 
      var $1811=$cb; //@line 690 "lvm.c"
      $o273=$1811; //@line 690 "lvm.c"
      var $1812=$cb; //@line 690 "lvm.c"
      var $1813=((($1812)-(12))|0); //@line 690 "lvm.c"
      $o174=$1813; //@line 690 "lvm.c"
      var $1814=$o174; //@line 690 "lvm.c"
      var $1815=(($1814)|0); //@line 690 "lvm.c"
      var $1816=$o273; //@line 690 "lvm.c"
      var $1817=(($1816)|0); //@line 690 "lvm.c"
      var $1818=$1815; //@line 690 "lvm.c"
      var $1819=$1817; //@line 690 "lvm.c"
      HEAP32[(($1818)>>2)]=HEAP32[(($1819)>>2)];HEAP32[((($1818)+(4))>>2)]=HEAP32[((($1819)+(4))>>2)]; //@line 690 "lvm.c"
      var $1820=$o273; //@line 690 "lvm.c"
      var $1821=(($1820+8)|0); //@line 690 "lvm.c"
      var $1822=HEAP32[(($1821)>>2)]; //@line 690 "lvm.c"
      var $1823=$o174; //@line 690 "lvm.c"
      var $1824=(($1823+8)|0); //@line 690 "lvm.c"
      HEAP32[(($1824)>>2)]=$1822; //@line 690 "lvm.c"
      var $1825=$pc; //@line 691 "lvm.c"
      var $1826=HEAPU32[(($1825)>>2)]; //@line 691 "lvm.c"
      var $1827=$1826 >>> 14; //@line 691 "lvm.c"
      var $1828=$1827 & 262143; //@line 691 "lvm.c"
      var $1829=((($1828)-(131071))|0); //@line 691 "lvm.c"
      var $1830=$pc; //@line 691 "lvm.c"
      var $1831=(($1830+($1829<<2))|0); //@line 691 "lvm.c"
      $pc=$1831; //@line 691 "lvm.c"
      __label__ = 223; break; //@line 692 "lvm.c"
    case 223: 
      var $1833=$pc; //@line 693 "lvm.c"
      var $1834=(($1833+4)|0); //@line 693 "lvm.c"
      $pc=$1834; //@line 693 "lvm.c"
      __label__ = 4; break; //@line 694 "lvm.c"
    case 224: 
      var $1836=$i; //@line 697 "lvm.c"
      var $1837=$1836 >>> 23; //@line 697 "lvm.c"
      var $1838=$1837 & 511; //@line 697 "lvm.c"
      $n=$1838; //@line 697 "lvm.c"
      var $1839=$i; //@line 698 "lvm.c"
      var $1840=$1839 >>> 14; //@line 698 "lvm.c"
      var $1841=$1840 & 511; //@line 698 "lvm.c"
      $c75=$1841; //@line 698 "lvm.c"
      var $1842=$n; //@line 701 "lvm.c"
      var $1843=(($1842)|0)==0; //@line 701 "lvm.c"
      if ($1843) { __label__ = 225; break; } else { __label__ = 226; break; } //@line 701 "lvm.c"
    case 225: 
      var $1845=$1; //@line 702 "lvm.c"
      var $1846=(($1845+8)|0); //@line 702 "lvm.c"
      var $1847=HEAP32[(($1846)>>2)]; //@line 702 "lvm.c"
      var $1848=$ra; //@line 702 "lvm.c"
      var $1849=$1847; //@line 702 "lvm.c"
      var $1850=$1848; //@line 702 "lvm.c"
      var $1851=((($1849)-($1850))|0); //@line 702 "lvm.c"
      var $1852=((((($1851)|0))/(12))&-1); //@line 702 "lvm.c"
      var $1853=((($1852)-(1))|0); //@line 702 "lvm.c"
      $n=$1853; //@line 702 "lvm.c"
      var $1854=$1; //@line 703 "lvm.c"
      var $1855=(($1854+20)|0); //@line 703 "lvm.c"
      var $1856=HEAP32[(($1855)>>2)]; //@line 703 "lvm.c"
      var $1857=(($1856+8)|0); //@line 703 "lvm.c"
      var $1858=HEAP32[(($1857)>>2)]; //@line 703 "lvm.c"
      var $1859=$1; //@line 703 "lvm.c"
      var $1860=(($1859+8)|0); //@line 703 "lvm.c"
      HEAP32[(($1860)>>2)]=$1858; //@line 703 "lvm.c"
      __label__ = 226; break; //@line 704 "lvm.c"
    case 226: 
      var $1862=$c75; //@line 705 "lvm.c"
      var $1863=(($1862)|0)==0; //@line 705 "lvm.c"
      if ($1863) { __label__ = 227; break; } else { __label__ = 228; break; } //@line 705 "lvm.c"
    case 227: 
      var $1865=$pc; //@line 705 "lvm.c"
      var $1866=(($1865+4)|0); //@line 705 "lvm.c"
      $pc=$1866; //@line 705 "lvm.c"
      var $1867=HEAP32[(($1865)>>2)]; //@line 705 "lvm.c"
      $c75=$1867; //@line 705 "lvm.c"
      __label__ = 228; break; //@line 705 "lvm.c"
    case 228: 
      var $1869=$ra; //@line 706 "lvm.c"
      var $1870=(($1869+8)|0); //@line 706 "lvm.c"
      var $1871=HEAP32[(($1870)>>2)]; //@line 706 "lvm.c"
      var $1872=(($1871)|0)==5; //@line 706 "lvm.c"
      if ($1872) { __label__ = 230; break; } else { __label__ = 229; break; } //@line 706 "lvm.c"
    case 229: 
      __label__ = 265; break; //@line 706 "lvm.c"
    case 230: 
      var $1875=$ra; //@line 707 "lvm.c"
      var $1876=(($1875)|0); //@line 707 "lvm.c"
      var $1877=$1876; //@line 707 "lvm.c"
      var $1878=HEAP32[(($1877)>>2)]; //@line 707 "lvm.c"
      var $1879=$1878; //@line 707 "lvm.c"
      $h=$1879; //@line 707 "lvm.c"
      var $1880=$c75; //@line 708 "lvm.c"
      var $1881=((($1880)-(1))|0); //@line 708 "lvm.c"
      var $1882=((($1881)*(50))|0); //@line 708 "lvm.c"
      var $1883=$n; //@line 708 "lvm.c"
      var $1884=((($1882)+($1883))|0); //@line 708 "lvm.c"
      $last=$1884; //@line 708 "lvm.c"
      var $1885=$last; //@line 709 "lvm.c"
      var $1886=$h; //@line 709 "lvm.c"
      var $1887=(($1886+28)|0); //@line 709 "lvm.c"
      var $1888=HEAP32[(($1887)>>2)]; //@line 709 "lvm.c"
      var $1889=(($1885)|0) > (($1888)|0); //@line 709 "lvm.c"
      if ($1889) { __label__ = 231; break; } else { __label__ = 232; break; } //@line 709 "lvm.c"
    case 231: 
      var $1891=$1; //@line 710 "lvm.c"
      var $1892=$h; //@line 710 "lvm.c"
      var $1893=$last; //@line 710 "lvm.c"
      __Z16luaH_resizearrayP9lua_StateP5Tablei($1891, $1892, $1893); //@line 710 "lvm.c"
      __label__ = 232; break; //@line 710 "lvm.c"
    case 232: 
      __label__ = 233; break; //@line 711 "lvm.c"
    case 233: 
      var $1896=$n; //@line 711 "lvm.c"
      var $1897=(($1896)|0) > 0; //@line 711 "lvm.c"
      if ($1897) { __label__ = 234; break; } else { __label__ = 240; break; } //@line 711 "lvm.c"
    case 234: 
      var $1899=$ra; //@line 712 "lvm.c"
      var $1900=$n; //@line 712 "lvm.c"
      var $1901=(($1899+($1900)*(12))|0); //@line 712 "lvm.c"
      $val=$1901; //@line 712 "lvm.c"
      var $1902=$val; //@line 713 "lvm.c"
      $o276=$1902; //@line 713 "lvm.c"
      var $1903=$1; //@line 713 "lvm.c"
      var $1904=$h; //@line 713 "lvm.c"
      var $1905=$last; //@line 713 "lvm.c"
      var $1906=((($1905)-(1))|0); //@line 713 "lvm.c"
      $last=$1906; //@line 713 "lvm.c"
      var $1907=__Z11luaH_setnumP9lua_StateP5Tablei($1903, $1904, $1905); //@line 713 "lvm.c"
      $o177=$1907; //@line 713 "lvm.c"
      var $1908=$o177; //@line 713 "lvm.c"
      var $1909=(($1908)|0); //@line 713 "lvm.c"
      var $1910=$o276; //@line 713 "lvm.c"
      var $1911=(($1910)|0); //@line 713 "lvm.c"
      var $1912=$1909; //@line 713 "lvm.c"
      var $1913=$1911; //@line 713 "lvm.c"
      HEAP32[(($1912)>>2)]=HEAP32[(($1913)>>2)];HEAP32[((($1912)+(4))>>2)]=HEAP32[((($1913)+(4))>>2)]; //@line 713 "lvm.c"
      var $1914=$o276; //@line 713 "lvm.c"
      var $1915=(($1914+8)|0); //@line 713 "lvm.c"
      var $1916=HEAP32[(($1915)>>2)]; //@line 713 "lvm.c"
      var $1917=$o177; //@line 713 "lvm.c"
      var $1918=(($1917+8)|0); //@line 713 "lvm.c"
      HEAP32[(($1918)>>2)]=$1916; //@line 713 "lvm.c"
      var $1919=$val; //@line 714 "lvm.c"
      var $1920=(($1919+8)|0); //@line 714 "lvm.c"
      var $1921=HEAP32[(($1920)>>2)]; //@line 714 "lvm.c"
      var $1922=(($1921)|0) >= 4; //@line 714 "lvm.c"
      if ($1922) { __label__ = 235; break; } else { __label__ = 238; break; } //@line 714 "lvm.c"
    case 235: 
      var $1924=$val; //@line 714 "lvm.c"
      var $1925=(($1924)|0); //@line 714 "lvm.c"
      var $1926=$1925; //@line 714 "lvm.c"
      var $1927=HEAP32[(($1926)>>2)]; //@line 714 "lvm.c"
      var $1928=$1927; //@line 714 "lvm.c"
      var $1929=(($1928+5)|0); //@line 714 "lvm.c"
      var $1930=HEAPU8[($1929)]; //@line 714 "lvm.c"
      var $1931=(($1930)&255); //@line 714 "lvm.c"
      var $1932=$1931 & 3; //@line 714 "lvm.c"
      var $1933=(($1932)|0)!=0; //@line 714 "lvm.c"
      if ($1933) { __label__ = 236; break; } else { __label__ = 238; break; } //@line 714 "lvm.c"
    case 236: 
      var $1935=$h; //@line 714 "lvm.c"
      var $1936=$1935; //@line 714 "lvm.c"
      var $1937=$1936; //@line 714 "lvm.c"
      var $1938=(($1937+5)|0); //@line 714 "lvm.c"
      var $1939=HEAPU8[($1938)]; //@line 714 "lvm.c"
      var $1940=(($1939)&255); //@line 714 "lvm.c"
      var $1941=$1940 & 4; //@line 714 "lvm.c"
      var $1942=(($1941)|0)!=0; //@line 714 "lvm.c"
      if ($1942) { __label__ = 237; break; } else { __label__ = 238; break; } //@line 714 "lvm.c"
    case 237: 
      var $1944=$1; //@line 714 "lvm.c"
      var $1945=$h; //@line 714 "lvm.c"
      __Z16luaC_barrierbackP9lua_StateP5Table($1944, $1945); //@line 714 "lvm.c"
      __label__ = 238; break; //@line 714 "lvm.c"
    case 238: 
      __label__ = 239; break; //@line 715 "lvm.c"
    case 239: 
      var $1948=$n; //@line 711 "lvm.c"
      var $1949=((($1948)-(1))|0); //@line 711 "lvm.c"
      $n=$1949; //@line 711 "lvm.c"
      __label__ = 233; break; //@line 711 "lvm.c"
    case 240: 
      __label__ = 4; break; //@line 716 "lvm.c"
    case 241: 
      var $1952=$1; //@line 719 "lvm.c"
      var $1953=$ra; //@line 719 "lvm.c"
      __Z10luaF_closeP9lua_StateP10lua_TValue($1952, $1953); //@line 719 "lvm.c"
      __label__ = 4; break; //@line 720 "lvm.c"
    case 242: 
      var $1955=$i; //@line 726 "lvm.c"
      var $1956=$1955 >>> 14; //@line 726 "lvm.c"
      var $1957=$1956 & 262143; //@line 726 "lvm.c"
      var $1958=$cl; //@line 726 "lvm.c"
      var $1959=(($1958+16)|0); //@line 726 "lvm.c"
      var $1960=HEAP32[(($1959)>>2)]; //@line 726 "lvm.c"
      var $1961=(($1960+16)|0); //@line 726 "lvm.c"
      var $1962=HEAP32[(($1961)>>2)]; //@line 726 "lvm.c"
      var $1963=(($1962+($1957<<2))|0); //@line 726 "lvm.c"
      var $1964=HEAP32[(($1963)>>2)]; //@line 726 "lvm.c"
      $p=$1964; //@line 726 "lvm.c"
      var $1965=$p; //@line 727 "lvm.c"
      var $1966=(($1965+72)|0); //@line 727 "lvm.c"
      var $1967=HEAPU8[($1966)]; //@line 727 "lvm.c"
      var $1968=(($1967)&255); //@line 727 "lvm.c"
      $nup=$1968; //@line 727 "lvm.c"
      var $1969=$1; //@line 728 "lvm.c"
      var $1970=$nup; //@line 728 "lvm.c"
      var $1971=$cl; //@line 728 "lvm.c"
      var $1972=(($1971+12)|0); //@line 728 "lvm.c"
      var $1973=HEAP32[(($1972)>>2)]; //@line 728 "lvm.c"
      var $1974=__Z16luaF_newLclosureP9lua_StateiP5Table($1969, $1970, $1973); //@line 728 "lvm.c"
      $ncl=$1974; //@line 728 "lvm.c"
      var $1975=$p; //@line 729 "lvm.c"
      var $1976=$ncl; //@line 729 "lvm.c"
      var $1977=$1976; //@line 729 "lvm.c"
      var $1978=(($1977+16)|0); //@line 729 "lvm.c"
      HEAP32[(($1978)>>2)]=$1975; //@line 729 "lvm.c"
      $j=0; //@line 730 "lvm.c"
      __label__ = 243; break; //@line 730 "lvm.c"
    case 243: 
      var $1980=$j; //@line 730 "lvm.c"
      var $1981=$nup; //@line 730 "lvm.c"
      var $1982=(($1980)|0) < (($1981)|0); //@line 730 "lvm.c"
      if ($1982) { __label__ = 244; break; } else { __label__ = 249; break; } //@line 730 "lvm.c"
    case 244: 
      var $1984=$pc; //@line 731 "lvm.c"
      var $1985=HEAPU32[(($1984)>>2)]; //@line 731 "lvm.c"
      var $1986=$1985 >>> 0; //@line 731 "lvm.c"
      var $1987=$1986 & 63; //@line 731 "lvm.c"
      var $1988=(($1987)|0)==4; //@line 731 "lvm.c"
      if ($1988) { __label__ = 245; break; } else { __label__ = 246; break; } //@line 731 "lvm.c"
    case 245: 
      var $1990=$pc; //@line 732 "lvm.c"
      var $1991=HEAPU32[(($1990)>>2)]; //@line 732 "lvm.c"
      var $1992=$1991 >>> 23; //@line 732 "lvm.c"
      var $1993=$1992 & 511; //@line 732 "lvm.c"
      var $1994=$cl; //@line 732 "lvm.c"
      var $1995=(($1994+20)|0); //@line 732 "lvm.c"
      var $1996=(($1995+($1993<<2))|0); //@line 732 "lvm.c"
      var $1997=HEAP32[(($1996)>>2)]; //@line 732 "lvm.c"
      var $1998=$j; //@line 732 "lvm.c"
      var $1999=$ncl; //@line 732 "lvm.c"
      var $2000=$1999; //@line 732 "lvm.c"
      var $2001=(($2000+20)|0); //@line 732 "lvm.c"
      var $2002=(($2001+($1998<<2))|0); //@line 732 "lvm.c"
      HEAP32[(($2002)>>2)]=$1997; //@line 732 "lvm.c"
      __label__ = 247; break; //@line 732 "lvm.c"
    case 246: 
      var $2004=$1; //@line 735 "lvm.c"
      var $2005=$base; //@line 735 "lvm.c"
      var $2006=$pc; //@line 735 "lvm.c"
      var $2007=HEAPU32[(($2006)>>2)]; //@line 735 "lvm.c"
      var $2008=$2007 >>> 23; //@line 735 "lvm.c"
      var $2009=$2008 & 511; //@line 735 "lvm.c"
      var $2010=(($2005+($2009)*(12))|0); //@line 735 "lvm.c"
      var $2011=__Z14luaF_findupvalP9lua_StateP10lua_TValue($2004, $2010); //@line 735 "lvm.c"
      var $2012=$j; //@line 735 "lvm.c"
      var $2013=$ncl; //@line 735 "lvm.c"
      var $2014=$2013; //@line 735 "lvm.c"
      var $2015=(($2014+20)|0); //@line 735 "lvm.c"
      var $2016=(($2015+($2012<<2))|0); //@line 735 "lvm.c"
      HEAP32[(($2016)>>2)]=$2011; //@line 735 "lvm.c"
      __label__ = 247; break; //@line 736 "lvm.c"
    case 247: 
      __label__ = 248; break; //@line 737 "lvm.c"
    case 248: 
      var $2019=$j; //@line 730 "lvm.c"
      var $2020=((($2019)+(1))|0); //@line 730 "lvm.c"
      $j=$2020; //@line 730 "lvm.c"
      var $2021=$pc; //@line 730 "lvm.c"
      var $2022=(($2021+4)|0); //@line 730 "lvm.c"
      $pc=$2022; //@line 730 "lvm.c"
      __label__ = 243; break; //@line 730 "lvm.c"
    case 249: 
      var $2024=$ra; //@line 738 "lvm.c"
      $i_o78=$2024; //@line 738 "lvm.c"
      var $2025=$ncl; //@line 738 "lvm.c"
      var $2026=$2025; //@line 738 "lvm.c"
      var $2027=$i_o78; //@line 738 "lvm.c"
      var $2028=(($2027)|0); //@line 738 "lvm.c"
      var $2029=$2028; //@line 738 "lvm.c"
      HEAP32[(($2029)>>2)]=$2026; //@line 738 "lvm.c"
      var $2030=$i_o78; //@line 738 "lvm.c"
      var $2031=(($2030+8)|0); //@line 738 "lvm.c"
      HEAP32[(($2031)>>2)]=6; //@line 738 "lvm.c"
      var $2032=$pc; //@line 739 "lvm.c"
      var $2033=$1; //@line 739 "lvm.c"
      var $2034=(($2033+24)|0); //@line 739 "lvm.c"
      HEAP32[(($2034)>>2)]=$2032; //@line 739 "lvm.c"
      var $2035=$1; //@line 739 "lvm.c"
      var $2036=(($2035+16)|0); //@line 739 "lvm.c"
      var $2037=HEAP32[(($2036)>>2)]; //@line 739 "lvm.c"
      var $2038=(($2037+68)|0); //@line 739 "lvm.c"
      var $2039=HEAPU32[(($2038)>>2)]; //@line 739 "lvm.c"
      var $2040=$1; //@line 739 "lvm.c"
      var $2041=(($2040+16)|0); //@line 739 "lvm.c"
      var $2042=HEAP32[(($2041)>>2)]; //@line 739 "lvm.c"
      var $2043=(($2042+64)|0); //@line 739 "lvm.c"
      var $2044=HEAPU32[(($2043)>>2)]; //@line 739 "lvm.c"
      var $2045=(($2039)>>>0) >= (($2044)>>>0); //@line 739 "lvm.c"
      if ($2045) { __label__ = 250; break; } else { __label__ = 251; break; } //@line 739 "lvm.c"
    case 250: 
      var $2047=$1; //@line 739 "lvm.c"
      __Z9luaC_stepP9lua_State($2047); //@line 739 "lvm.c"
      __label__ = 251; break; //@line 739 "lvm.c"
    case 251: 
      var $2049=$1; //@line 739 "lvm.c"
      var $2050=(($2049+12)|0); //@line 739 "lvm.c"
      var $2051=HEAP32[(($2050)>>2)]; //@line 739 "lvm.c"
      $base=$2051; //@line 739 "lvm.c"
      __label__ = 4; break; //@line 740 "lvm.c"
    case 252: 
      var $2053=$i; //@line 743 "lvm.c"
      var $2054=$2053 >>> 23; //@line 743 "lvm.c"
      var $2055=$2054 & 511; //@line 743 "lvm.c"
      var $2056=((($2055)-(1))|0); //@line 743 "lvm.c"
      $b79=$2056; //@line 743 "lvm.c"
      var $2057=$1; //@line 745 "lvm.c"
      var $2058=(($2057+20)|0); //@line 745 "lvm.c"
      var $2059=HEAP32[(($2058)>>2)]; //@line 745 "lvm.c"
      $ci81=$2059; //@line 745 "lvm.c"
      var $2060=$ci81; //@line 746 "lvm.c"
      var $2061=(($2060)|0); //@line 746 "lvm.c"
      var $2062=HEAP32[(($2061)>>2)]; //@line 746 "lvm.c"
      var $2063=$ci81; //@line 746 "lvm.c"
      var $2064=(($2063+4)|0); //@line 746 "lvm.c"
      var $2065=HEAP32[(($2064)>>2)]; //@line 746 "lvm.c"
      var $2066=$2062; //@line 746 "lvm.c"
      var $2067=$2065; //@line 746 "lvm.c"
      var $2068=((($2066)-($2067))|0); //@line 746 "lvm.c"
      var $2069=((((($2068)|0))/(12))&-1); //@line 746 "lvm.c"
      var $2070=$cl; //@line 746 "lvm.c"
      var $2071=(($2070+16)|0); //@line 746 "lvm.c"
      var $2072=HEAP32[(($2071)>>2)]; //@line 746 "lvm.c"
      var $2073=(($2072+73)|0); //@line 746 "lvm.c"
      var $2074=HEAPU8[($2073)]; //@line 746 "lvm.c"
      var $2075=(($2074)&255); //@line 746 "lvm.c"
      var $2076=((($2069)-($2075))|0); //@line 746 "lvm.c"
      var $2077=((($2076)-(1))|0); //@line 746 "lvm.c"
      $n82=$2077; //@line 746 "lvm.c"
      var $2078=$b79; //@line 747 "lvm.c"
      var $2079=(($2078)|0)==-1; //@line 747 "lvm.c"
      if ($2079) { __label__ = 253; break; } else { __label__ = 257; break; } //@line 747 "lvm.c"
    case 253: 
      var $2081=$pc; //@line 748 "lvm.c"
      var $2082=$1; //@line 748 "lvm.c"
      var $2083=(($2082+24)|0); //@line 748 "lvm.c"
      HEAP32[(($2083)>>2)]=$2081; //@line 748 "lvm.c"
      var $2084=$1; //@line 748 "lvm.c"
      var $2085=(($2084+28)|0); //@line 748 "lvm.c"
      var $2086=HEAP32[(($2085)>>2)]; //@line 748 "lvm.c"
      var $2087=$2086; //@line 748 "lvm.c"
      var $2088=$1; //@line 748 "lvm.c"
      var $2089=(($2088+8)|0); //@line 748 "lvm.c"
      var $2090=HEAP32[(($2089)>>2)]; //@line 748 "lvm.c"
      var $2091=$2090; //@line 748 "lvm.c"
      var $2092=$2087; //@line 748 "lvm.c"
      var $2093=$2091; //@line 748 "lvm.c"
      var $2094=((($2092)-($2093))|0); //@line 748 "lvm.c"
      var $2095=$n82; //@line 748 "lvm.c"
      var $2096=((($2095)*(12))|0); //@line 748 "lvm.c"
      var $2097=(($2094)|0) <= (($2096)|0); //@line 748 "lvm.c"
      if ($2097) { __label__ = 254; break; } else { __label__ = 255; break; } //@line 748 "lvm.c"
    case 254: 
      var $2099=$1; //@line 748 "lvm.c"
      var $2100=$n82; //@line 748 "lvm.c"
      __Z14luaD_growstackP9lua_Statei($2099, $2100); //@line 748 "lvm.c"
      __label__ = 256; break; //@line 748 "lvm.c"
    case 255: 
      __label__ = 256; break; //@line 748 "lvm.c"
    case 256: 
      var $2103=$1; //@line 748 "lvm.c"
      var $2104=(($2103+12)|0); //@line 748 "lvm.c"
      var $2105=HEAP32[(($2104)>>2)]; //@line 748 "lvm.c"
      $base=$2105; //@line 748 "lvm.c"
      var $2106=$base; //@line 749 "lvm.c"
      var $2107=$i; //@line 749 "lvm.c"
      var $2108=$2107 >>> 6; //@line 749 "lvm.c"
      var $2109=$2108 & 255; //@line 749 "lvm.c"
      var $2110=(($2106+($2109)*(12))|0); //@line 749 "lvm.c"
      $ra=$2110; //@line 749 "lvm.c"
      var $2111=$n82; //@line 750 "lvm.c"
      $b79=$2111; //@line 750 "lvm.c"
      var $2112=$ra; //@line 751 "lvm.c"
      var $2113=$n82; //@line 751 "lvm.c"
      var $2114=(($2112+($2113)*(12))|0); //@line 751 "lvm.c"
      var $2115=$1; //@line 751 "lvm.c"
      var $2116=(($2115+8)|0); //@line 751 "lvm.c"
      HEAP32[(($2116)>>2)]=$2114; //@line 751 "lvm.c"
      __label__ = 257; break; //@line 752 "lvm.c"
    case 257: 
      $j80=0; //@line 753 "lvm.c"
      __label__ = 258; break; //@line 753 "lvm.c"
    case 258: 
      var $2119=$j80; //@line 753 "lvm.c"
      var $2120=$b79; //@line 753 "lvm.c"
      var $2121=(($2119)|0) < (($2120)|0); //@line 753 "lvm.c"
      if ($2121) { __label__ = 259; break; } else { __label__ = 264; break; } //@line 753 "lvm.c"
    case 259: 
      var $2123=$j80; //@line 754 "lvm.c"
      var $2124=$n82; //@line 754 "lvm.c"
      var $2125=(($2123)|0) < (($2124)|0); //@line 754 "lvm.c"
      if ($2125) { __label__ = 260; break; } else { __label__ = 261; break; } //@line 754 "lvm.c"
    case 260: 
      var $2127=$ci81; //@line 755 "lvm.c"
      var $2128=(($2127)|0); //@line 755 "lvm.c"
      var $2129=HEAP32[(($2128)>>2)]; //@line 755 "lvm.c"
      var $2130=$n82; //@line 755 "lvm.c"
      var $2131=(((-$2130))|0); //@line 755 "lvm.c"
      var $2132=(($2129+($2131)*(12))|0); //@line 755 "lvm.c"
      var $2133=$j80; //@line 755 "lvm.c"
      var $2134=(($2132+($2133)*(12))|0); //@line 755 "lvm.c"
      $o283=$2134; //@line 755 "lvm.c"
      var $2135=$ra; //@line 755 "lvm.c"
      var $2136=$j80; //@line 755 "lvm.c"
      var $2137=(($2135+($2136)*(12))|0); //@line 755 "lvm.c"
      $o184=$2137; //@line 755 "lvm.c"
      var $2138=$o184; //@line 755 "lvm.c"
      var $2139=(($2138)|0); //@line 755 "lvm.c"
      var $2140=$o283; //@line 755 "lvm.c"
      var $2141=(($2140)|0); //@line 755 "lvm.c"
      var $2142=$2139; //@line 755 "lvm.c"
      var $2143=$2141; //@line 755 "lvm.c"
      HEAP32[(($2142)>>2)]=HEAP32[(($2143)>>2)];HEAP32[((($2142)+(4))>>2)]=HEAP32[((($2143)+(4))>>2)]; //@line 755 "lvm.c"
      var $2144=$o283; //@line 755 "lvm.c"
      var $2145=(($2144+8)|0); //@line 755 "lvm.c"
      var $2146=HEAP32[(($2145)>>2)]; //@line 755 "lvm.c"
      var $2147=$o184; //@line 755 "lvm.c"
      var $2148=(($2147+8)|0); //@line 755 "lvm.c"
      HEAP32[(($2148)>>2)]=$2146; //@line 755 "lvm.c"
      __label__ = 262; break; //@line 756 "lvm.c"
    case 261: 
      var $2150=$ra; //@line 758 "lvm.c"
      var $2151=$j80; //@line 758 "lvm.c"
      var $2152=(($2150+($2151)*(12))|0); //@line 758 "lvm.c"
      var $2153=(($2152+8)|0); //@line 758 "lvm.c"
      HEAP32[(($2153)>>2)]=0; //@line 758 "lvm.c"
      __label__ = 262; break; //@line 759 "lvm.c"
    case 262: 
      __label__ = 263; break; //@line 760 "lvm.c"
    case 263: 
      var $2156=$j80; //@line 753 "lvm.c"
      var $2157=((($2156)+(1))|0); //@line 753 "lvm.c"
      $j80=$2157; //@line 753 "lvm.c"
      __label__ = 258; break; //@line 753 "lvm.c"
    case 264: 
      __label__ = 4; break; //@line 761 "lvm.c"
    case 265: 
      __label__ = 4; break; //@line 764 "lvm.c"
    case 266: 
      STACKTOP = __stackBase__;
      return; //@line 765 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12luaV_executeP9lua_Statei["X"]=1;

function __Z9luaZ_initP9lua_StateP3ZioPFPKcS0_PvPjES5_($L, $z, $reader, $data) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$L;
  $2=$z;
  $3=$reader;
  $4=$data;
  var $5=$1; //@line 49 "lzio.c"
  var $6=$2; //@line 49 "lzio.c"
  var $7=(($6+16)|0); //@line 49 "lzio.c"
  HEAP32[(($7)>>2)]=$5; //@line 49 "lzio.c"
  var $8=$3; //@line 50 "lzio.c"
  var $9=$2; //@line 50 "lzio.c"
  var $10=(($9+8)|0); //@line 50 "lzio.c"
  HEAP32[(($10)>>2)]=$8; //@line 50 "lzio.c"
  var $11=$4; //@line 51 "lzio.c"
  var $12=$2; //@line 51 "lzio.c"
  var $13=(($12+12)|0); //@line 51 "lzio.c"
  HEAP32[(($13)>>2)]=$11; //@line 51 "lzio.c"
  var $14=$2; //@line 52 "lzio.c"
  var $15=(($14)|0); //@line 52 "lzio.c"
  HEAP32[(($15)>>2)]=0; //@line 52 "lzio.c"
  var $16=$2; //@line 53 "lzio.c"
  var $17=(($16+4)|0); //@line 53 "lzio.c"
  HEAP32[(($17)>>2)]=0; //@line 53 "lzio.c"
  ;
  return; //@line 54 "lzio.c"
}


function __Z9traceexecP9lua_StatePKj($L, $pc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $mask;
      var $oldpc;
      var $p;
      var $npc;
      var $newline;
      $1=$L;
      $2=$pc;
      var $3=$1; //@line 61 "lvm.c"
      var $4=(($3+56)|0); //@line 61 "lvm.c"
      var $5=HEAP8[($4)]; //@line 61 "lvm.c"
      $mask=$5; //@line 61 "lvm.c"
      var $6=$1; //@line 62 "lvm.c"
      var $7=(($6+24)|0); //@line 62 "lvm.c"
      var $8=HEAP32[(($7)>>2)]; //@line 62 "lvm.c"
      $oldpc=$8; //@line 62 "lvm.c"
      var $9=$2; //@line 63 "lvm.c"
      var $10=$1; //@line 63 "lvm.c"
      var $11=(($10+24)|0); //@line 63 "lvm.c"
      HEAP32[(($11)>>2)]=$9; //@line 63 "lvm.c"
      var $12=$mask; //@line 64 "lvm.c"
      var $13=(($12)&255); //@line 64 "lvm.c"
      var $14=$13 & 8; //@line 64 "lvm.c"
      var $15=(($14)|0)!=0; //@line 64 "lvm.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 64 "lvm.c"
    case 3: 
      var $17=$1; //@line 64 "lvm.c"
      var $18=(($17+64)|0); //@line 64 "lvm.c"
      var $19=HEAP32[(($18)>>2)]; //@line 64 "lvm.c"
      var $20=(($19)|0)==0; //@line 64 "lvm.c"
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 64 "lvm.c"
    case 4: 
      var $22=$1; //@line 65 "lvm.c"
      var $23=(($22+60)|0); //@line 65 "lvm.c"
      var $24=HEAP32[(($23)>>2)]; //@line 65 "lvm.c"
      var $25=$1; //@line 65 "lvm.c"
      var $26=(($25+64)|0); //@line 65 "lvm.c"
      HEAP32[(($26)>>2)]=$24; //@line 65 "lvm.c"
      var $27=$1; //@line 66 "lvm.c"
      __Z13luaD_callhookP9lua_Stateii($27, 3, -1); //@line 66 "lvm.c"
      __label__ = 5; break; //@line 67 "lvm.c"
    case 5: 
      var $29=$mask; //@line 68 "lvm.c"
      var $30=(($29)&255); //@line 68 "lvm.c"
      var $31=$30 & 4; //@line 68 "lvm.c"
      var $32=(($31)|0)!=0; //@line 68 "lvm.c"
      if ($32) { __label__ = 6; break; } else { __label__ = 17; break; } //@line 68 "lvm.c"
    case 6: 
      var $34=$1; //@line 69 "lvm.c"
      var $35=(($34+20)|0); //@line 69 "lvm.c"
      var $36=HEAP32[(($35)>>2)]; //@line 69 "lvm.c"
      var $37=(($36+4)|0); //@line 69 "lvm.c"
      var $38=HEAP32[(($37)>>2)]; //@line 69 "lvm.c"
      var $39=(($38)|0); //@line 69 "lvm.c"
      var $40=$39; //@line 69 "lvm.c"
      var $41=HEAP32[(($40)>>2)]; //@line 69 "lvm.c"
      var $42=$41; //@line 69 "lvm.c"
      var $43=$42; //@line 69 "lvm.c"
      var $44=(($43+16)|0); //@line 69 "lvm.c"
      var $45=HEAP32[(($44)>>2)]; //@line 69 "lvm.c"
      $p=$45; //@line 69 "lvm.c"
      var $46=$2; //@line 70 "lvm.c"
      var $47=$p; //@line 70 "lvm.c"
      var $48=(($47+12)|0); //@line 70 "lvm.c"
      var $49=HEAP32[(($48)>>2)]; //@line 70 "lvm.c"
      var $50=$46; //@line 70 "lvm.c"
      var $51=$49; //@line 70 "lvm.c"
      var $52=((($50)-($51))|0); //@line 70 "lvm.c"
      var $53=((((($52)|0))/(4))&-1); //@line 70 "lvm.c"
      var $54=((($53)-(1))|0); //@line 70 "lvm.c"
      $npc=$54; //@line 70 "lvm.c"
      var $55=$p; //@line 71 "lvm.c"
      var $56=(($55+20)|0); //@line 71 "lvm.c"
      var $57=HEAP32[(($56)>>2)]; //@line 71 "lvm.c"
      var $58=(($57)|0)!=0; //@line 71 "lvm.c"
      if ($58) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 71 "lvm.c"
    case 7: 
      var $60=$npc; //@line 71 "lvm.c"
      var $61=$p; //@line 71 "lvm.c"
      var $62=(($61+20)|0); //@line 71 "lvm.c"
      var $63=HEAP32[(($62)>>2)]; //@line 71 "lvm.c"
      var $64=(($63+($60<<2))|0); //@line 71 "lvm.c"
      var $65=HEAP32[(($64)>>2)]; //@line 71 "lvm.c"
      var $68 = $65;__label__ = 9; break; //@line 71 "lvm.c"
    case 8: 
      var $68 = 0;__label__ = 9; break; //@line 71 "lvm.c"
    case 9: 
      var $68; //@line 71 "lvm.c"
      $newline=$68; //@line 71 "lvm.c"
      var $69=$npc; //@line 74 "lvm.c"
      var $70=(($69)|0)==0; //@line 74 "lvm.c"
      if ($70) { __label__ = 15; break; } else { __label__ = 10; break; } //@line 74 "lvm.c"
    case 10: 
      var $72=$2; //@line 74 "lvm.c"
      var $73=$oldpc; //@line 74 "lvm.c"
      var $74=(($72)>>>0) <= (($73)>>>0); //@line 74 "lvm.c"
      if ($74) { __label__ = 15; break; } else { __label__ = 11; break; } //@line 74 "lvm.c"
    case 11: 
      var $76=$newline; //@line 74 "lvm.c"
      var $77=$p; //@line 74 "lvm.c"
      var $78=(($77+20)|0); //@line 74 "lvm.c"
      var $79=HEAP32[(($78)>>2)]; //@line 74 "lvm.c"
      var $80=(($79)|0)!=0; //@line 74 "lvm.c"
      if ($80) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 74 "lvm.c"
    case 12: 
      var $82=$oldpc; //@line 74 "lvm.c"
      var $83=$p; //@line 74 "lvm.c"
      var $84=(($83+12)|0); //@line 74 "lvm.c"
      var $85=HEAP32[(($84)>>2)]; //@line 74 "lvm.c"
      var $86=$82; //@line 74 "lvm.c"
      var $87=$85; //@line 74 "lvm.c"
      var $88=((($86)-($87))|0); //@line 74 "lvm.c"
      var $89=((((($88)|0))/(4))&-1); //@line 74 "lvm.c"
      var $90=((($89)-(1))|0); //@line 74 "lvm.c"
      var $91=$p; //@line 74 "lvm.c"
      var $92=(($91+20)|0); //@line 74 "lvm.c"
      var $93=HEAP32[(($92)>>2)]; //@line 74 "lvm.c"
      var $94=(($93+($90<<2))|0); //@line 74 "lvm.c"
      var $95=HEAP32[(($94)>>2)]; //@line 74 "lvm.c"
      var $98 = $95;__label__ = 14; break; //@line 74 "lvm.c"
    case 13: 
      var $98 = 0;__label__ = 14; break; //@line 74 "lvm.c"
    case 14: 
      var $98; //@line 74 "lvm.c"
      var $99=(($76)|0)!=(($98)|0); //@line 74 "lvm.c"
      if ($99) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 74 "lvm.c"
    case 15: 
      var $101=$1; //@line 75 "lvm.c"
      var $102=$newline; //@line 75 "lvm.c"
      __Z13luaD_callhookP9lua_Stateii($101, 2, $102); //@line 75 "lvm.c"
      __label__ = 16; break; //@line 75 "lvm.c"
    case 16: 
      __label__ = 17; break; //@line 76 "lvm.c"
    case 17: 
      ;
      return; //@line 77 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9traceexecP9lua_StatePKj["X"]=1;

function __Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS($L, $ra, $rb, $rc, $op) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; _memset(__stackBase__, 0, 24);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tempb=__stackBase__;
      var $tempc=(__stackBase__)+(12);
      var $b;
      var $c;
      var $nb;
      var $nc;
      var $i_o;
      var $i_o1;
      var $i_o2;
      var $i_o3;
      var $i_o4;
      var $i_o5;
      var $i_o6;
      $1=$L;
      $2=$ra;
      $3=$rb;
      $4=$rc;
      $5=$op;
      var $6=$3; //@line 320 "lvm.c"
      var $7=__Z13luaV_tonumberPK10lua_TValuePS_($6, $tempb); //@line 320 "lvm.c"
      $b=$7; //@line 320 "lvm.c"
      var $8=(($7)|0)!=0; //@line 320 "lvm.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 320 "lvm.c"
    case 3: 
      var $10=$4; //@line 321 "lvm.c"
      var $11=__Z13luaV_tonumberPK10lua_TValuePS_($10, $tempc); //@line 321 "lvm.c"
      $c=$11; //@line 321 "lvm.c"
      var $12=(($11)|0)!=0; //@line 321 "lvm.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 14; break; } //@line 321 "lvm.c"
    case 4: 
      var $14=$b; //@line 322 "lvm.c"
      var $15=(($14)|0); //@line 322 "lvm.c"
      var $16=$15; //@line 322 "lvm.c"
      var $17=(tempDoubleI32[0]=HEAP32[(($16)>>2)],tempDoubleI32[1]=HEAP32[((($16)+(4))>>2)],tempDoubleF64[0]); //@line 322 "lvm.c"
      $nb=$17; //@line 322 "lvm.c"
      var $18=$c; //@line 322 "lvm.c"
      var $19=(($18)|0); //@line 322 "lvm.c"
      var $20=$19; //@line 322 "lvm.c"
      var $21=(tempDoubleI32[0]=HEAP32[(($20)>>2)],tempDoubleI32[1]=HEAP32[((($20)+(4))>>2)],tempDoubleF64[0]); //@line 322 "lvm.c"
      $nc=$21; //@line 322 "lvm.c"
      var $22=$5; //@line 323 "lvm.c"
      if ((($22)|0) == 5) {
        __label__ = 5; break;
      }
      else if ((($22)|0) == 6) {
        __label__ = 6; break;
      }
      else if ((($22)|0) == 7) {
        __label__ = 7; break;
      }
      else if ((($22)|0) == 8) {
        __label__ = 8; break;
      }
      else if ((($22)|0) == 9) {
        __label__ = 9; break;
      }
      else if ((($22)|0) == 10) {
        __label__ = 10; break;
      }
      else if ((($22)|0) == 11) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 5: 
      var $24=$2; //@line 324 "lvm.c"
      $i_o=$24; //@line 324 "lvm.c"
      var $25=$nb; //@line 324 "lvm.c"
      var $26=$nc; //@line 324 "lvm.c"
      var $27=($25)+($26); //@line 324 "lvm.c"
      var $28=$i_o; //@line 324 "lvm.c"
      var $29=(($28)|0); //@line 324 "lvm.c"
      var $30=$29; //@line 324 "lvm.c"
      (tempDoubleF64[0]=$27,HEAP32[(($30)>>2)]=tempDoubleI32[0],HEAP32[((($30)+(4))>>2)]=tempDoubleI32[1]); //@line 324 "lvm.c"
      var $31=$i_o; //@line 324 "lvm.c"
      var $32=(($31+8)|0); //@line 324 "lvm.c"
      HEAP32[(($32)>>2)]=3; //@line 324 "lvm.c"
      __label__ = 13; break; //@line 324 "lvm.c"
    case 6: 
      var $34=$2; //@line 325 "lvm.c"
      $i_o1=$34; //@line 325 "lvm.c"
      var $35=$nb; //@line 325 "lvm.c"
      var $36=$nc; //@line 325 "lvm.c"
      var $37=($35)-($36); //@line 325 "lvm.c"
      var $38=$i_o1; //@line 325 "lvm.c"
      var $39=(($38)|0); //@line 325 "lvm.c"
      var $40=$39; //@line 325 "lvm.c"
      (tempDoubleF64[0]=$37,HEAP32[(($40)>>2)]=tempDoubleI32[0],HEAP32[((($40)+(4))>>2)]=tempDoubleI32[1]); //@line 325 "lvm.c"
      var $41=$i_o1; //@line 325 "lvm.c"
      var $42=(($41+8)|0); //@line 325 "lvm.c"
      HEAP32[(($42)>>2)]=3; //@line 325 "lvm.c"
      __label__ = 13; break; //@line 325 "lvm.c"
    case 7: 
      var $44=$2; //@line 326 "lvm.c"
      $i_o2=$44; //@line 326 "lvm.c"
      var $45=$nb; //@line 326 "lvm.c"
      var $46=$nc; //@line 326 "lvm.c"
      var $47=($45)*($46); //@line 326 "lvm.c"
      var $48=$i_o2; //@line 326 "lvm.c"
      var $49=(($48)|0); //@line 326 "lvm.c"
      var $50=$49; //@line 326 "lvm.c"
      (tempDoubleF64[0]=$47,HEAP32[(($50)>>2)]=tempDoubleI32[0],HEAP32[((($50)+(4))>>2)]=tempDoubleI32[1]); //@line 326 "lvm.c"
      var $51=$i_o2; //@line 326 "lvm.c"
      var $52=(($51+8)|0); //@line 326 "lvm.c"
      HEAP32[(($52)>>2)]=3; //@line 326 "lvm.c"
      __label__ = 13; break; //@line 326 "lvm.c"
    case 8: 
      var $54=$2; //@line 327 "lvm.c"
      $i_o3=$54; //@line 327 "lvm.c"
      var $55=$nb; //@line 327 "lvm.c"
      var $56=$nc; //@line 327 "lvm.c"
      var $57=($55)/($56); //@line 327 "lvm.c"
      var $58=$i_o3; //@line 327 "lvm.c"
      var $59=(($58)|0); //@line 327 "lvm.c"
      var $60=$59; //@line 327 "lvm.c"
      (tempDoubleF64[0]=$57,HEAP32[(($60)>>2)]=tempDoubleI32[0],HEAP32[((($60)+(4))>>2)]=tempDoubleI32[1]); //@line 327 "lvm.c"
      var $61=$i_o3; //@line 327 "lvm.c"
      var $62=(($61+8)|0); //@line 327 "lvm.c"
      HEAP32[(($62)>>2)]=3; //@line 327 "lvm.c"
      __label__ = 13; break; //@line 327 "lvm.c"
    case 9: 
      var $64=$2; //@line 328 "lvm.c"
      $i_o4=$64; //@line 328 "lvm.c"
      var $65=$nb; //@line 328 "lvm.c"
      var $66=$nb; //@line 328 "lvm.c"
      var $67=$nc; //@line 328 "lvm.c"
      var $68=($66)/($67); //@line 328 "lvm.c"
      var $69=_floor($68); //@line 328 "lvm.c"
      var $70=$nc; //@line 328 "lvm.c"
      var $71=($69)*($70); //@line 328 "lvm.c"
      var $72=($65)-($71); //@line 328 "lvm.c"
      var $73=$i_o4; //@line 328 "lvm.c"
      var $74=(($73)|0); //@line 328 "lvm.c"
      var $75=$74; //@line 328 "lvm.c"
      (tempDoubleF64[0]=$72,HEAP32[(($75)>>2)]=tempDoubleI32[0],HEAP32[((($75)+(4))>>2)]=tempDoubleI32[1]); //@line 328 "lvm.c"
      var $76=$i_o4; //@line 328 "lvm.c"
      var $77=(($76+8)|0); //@line 328 "lvm.c"
      HEAP32[(($77)>>2)]=3; //@line 328 "lvm.c"
      __label__ = 13; break; //@line 328 "lvm.c"
    case 10: 
      var $79=$2; //@line 329 "lvm.c"
      $i_o5=$79; //@line 329 "lvm.c"
      var $80=$nb; //@line 329 "lvm.c"
      var $81=$nc; //@line 329 "lvm.c"
      var $82=_llvm_pow_f64($80, $81); //@line 329 "lvm.c"
      var $83=$i_o5; //@line 329 "lvm.c"
      var $84=(($83)|0); //@line 329 "lvm.c"
      var $85=$84; //@line 329 "lvm.c"
      (tempDoubleF64[0]=$82,HEAP32[(($85)>>2)]=tempDoubleI32[0],HEAP32[((($85)+(4))>>2)]=tempDoubleI32[1]); //@line 329 "lvm.c"
      var $86=$i_o5; //@line 329 "lvm.c"
      var $87=(($86+8)|0); //@line 329 "lvm.c"
      HEAP32[(($87)>>2)]=3; //@line 329 "lvm.c"
      __label__ = 13; break; //@line 329 "lvm.c"
    case 11: 
      var $89=$2; //@line 330 "lvm.c"
      $i_o6=$89; //@line 330 "lvm.c"
      var $90=$nb; //@line 330 "lvm.c"
      var $91=(-$90); //@line 330 "lvm.c"
      var $92=$i_o6; //@line 330 "lvm.c"
      var $93=(($92)|0); //@line 330 "lvm.c"
      var $94=$93; //@line 330 "lvm.c"
      (tempDoubleF64[0]=$91,HEAP32[(($94)>>2)]=tempDoubleI32[0],HEAP32[((($94)+(4))>>2)]=tempDoubleI32[1]); //@line 330 "lvm.c"
      var $95=$i_o6; //@line 330 "lvm.c"
      var $96=(($95+8)|0); //@line 330 "lvm.c"
      HEAP32[(($96)>>2)]=3; //@line 330 "lvm.c"
      __label__ = 13; break; //@line 330 "lvm.c"
    case 12: 
      __label__ = 13; break; //@line 331 "lvm.c"
    case 13: 
      __label__ = 17; break; //@line 333 "lvm.c"
    case 14: 
      var $100=$1; //@line 334 "lvm.c"
      var $101=$3; //@line 334 "lvm.c"
      var $102=$4; //@line 334 "lvm.c"
      var $103=$2; //@line 334 "lvm.c"
      var $104=$5; //@line 334 "lvm.c"
      var $105=__Z10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS($100, $101, $102, $103, $104); //@line 334 "lvm.c"
      var $106=(($105)|0)!=0; //@line 334 "lvm.c"
      if ($106) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 334 "lvm.c"
    case 15: 
      var $108=$1; //@line 335 "lvm.c"
      var $109=$3; //@line 335 "lvm.c"
      var $110=$4; //@line 335 "lvm.c"
      __Z15luaG_aritherrorP9lua_StatePK10lua_TValueS3_($108, $109, $110); //@line 335 "lvm.c"
      __label__ = 16; break; //@line 335 "lvm.c"
    case 16: 
      __label__ = 17; break; //@line 335 "lvm.c"
    case 17: 
      STACKTOP = __stackBase__;
      return; //@line 336 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS["X"]=1;

function __Z9lessequalP9lua_StatePK10lua_TValueS3_($L, $l, $r) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$l;
      $4=$r;
      var $5=$3; //@line 240 "lvm.c"
      var $6=(($5+8)|0); //@line 240 "lvm.c"
      var $7=HEAP32[(($6)>>2)]; //@line 240 "lvm.c"
      var $8=$4; //@line 240 "lvm.c"
      var $9=(($8+8)|0); //@line 240 "lvm.c"
      var $10=HEAP32[(($9)>>2)]; //@line 240 "lvm.c"
      var $11=(($7)|0)!=(($10)|0); //@line 240 "lvm.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 240 "lvm.c"
    case 3: 
      var $13=$2; //@line 241 "lvm.c"
      var $14=$3; //@line 241 "lvm.c"
      var $15=$4; //@line 241 "lvm.c"
      var $16=__Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($13, $14, $15); //@line 241 "lvm.c"
      $1=$16; //@line 241 "lvm.c"
      __label__ = 17; break; //@line 241 "lvm.c"
    case 4: 
      var $18=$3; //@line 242 "lvm.c"
      var $19=(($18+8)|0); //@line 242 "lvm.c"
      var $20=HEAP32[(($19)>>2)]; //@line 242 "lvm.c"
      var $21=(($20)|0)==3; //@line 242 "lvm.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 242 "lvm.c"
    case 5: 
      var $23=$3; //@line 243 "lvm.c"
      var $24=(($23)|0); //@line 243 "lvm.c"
      var $25=$24; //@line 243 "lvm.c"
      var $26=(tempDoubleI32[0]=HEAP32[(($25)>>2)],tempDoubleI32[1]=HEAP32[((($25)+(4))>>2)],tempDoubleF64[0]); //@line 243 "lvm.c"
      var $27=$4; //@line 243 "lvm.c"
      var $28=(($27)|0); //@line 243 "lvm.c"
      var $29=$28; //@line 243 "lvm.c"
      var $30=(tempDoubleI32[0]=HEAP32[(($29)>>2)],tempDoubleI32[1]=HEAP32[((($29)+(4))>>2)],tempDoubleF64[0]); //@line 243 "lvm.c"
      var $31=$26 <= $30; //@line 243 "lvm.c"
      var $32=(($31)&1); //@line 243 "lvm.c"
      $1=$32; //@line 243 "lvm.c"
      __label__ = 17; break; //@line 243 "lvm.c"
    case 6: 
      var $34=$3; //@line 244 "lvm.c"
      var $35=(($34+8)|0); //@line 244 "lvm.c"
      var $36=HEAP32[(($35)>>2)]; //@line 244 "lvm.c"
      var $37=(($36)|0)==4; //@line 244 "lvm.c"
      if ($37) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 244 "lvm.c"
    case 7: 
      var $39=$3; //@line 245 "lvm.c"
      var $40=(($39)|0); //@line 245 "lvm.c"
      var $41=$40; //@line 245 "lvm.c"
      var $42=HEAP32[(($41)>>2)]; //@line 245 "lvm.c"
      var $43=$42; //@line 245 "lvm.c"
      var $44=$4; //@line 245 "lvm.c"
      var $45=(($44)|0); //@line 245 "lvm.c"
      var $46=$45; //@line 245 "lvm.c"
      var $47=HEAP32[(($46)>>2)]; //@line 245 "lvm.c"
      var $48=$47; //@line 245 "lvm.c"
      var $49=__Z8l_strcmpPK7TStringS1_($43, $48); //@line 245 "lvm.c"
      var $50=(($49)|0) <= 0; //@line 245 "lvm.c"
      var $51=(($50)&1); //@line 245 "lvm.c"
      $1=$51; //@line 245 "lvm.c"
      __label__ = 17; break; //@line 245 "lvm.c"
    case 8: 
      var $53=$2; //@line 246 "lvm.c"
      var $54=$3; //@line 246 "lvm.c"
      var $55=$4; //@line 246 "lvm.c"
      var $56=__Z12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($53, $54, $55, 14); //@line 246 "lvm.c"
      $res=$56; //@line 246 "lvm.c"
      var $57=(($56)|0)!=-1; //@line 246 "lvm.c"
      if ($57) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 246 "lvm.c"
    case 9: 
      var $59=$res; //@line 247 "lvm.c"
      $1=$59; //@line 247 "lvm.c"
      __label__ = 17; break; //@line 247 "lvm.c"
    case 10: 
      var $61=$2; //@line 248 "lvm.c"
      var $62=$4; //@line 248 "lvm.c"
      var $63=$3; //@line 248 "lvm.c"
      var $64=__Z12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS($61, $62, $63, 13); //@line 248 "lvm.c"
      $res=$64; //@line 248 "lvm.c"
      var $65=(($64)|0)!=-1; //@line 248 "lvm.c"
      if ($65) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 248 "lvm.c"
    case 11: 
      var $67=$res; //@line 249 "lvm.c"
      var $68=(($67)|0)!=0; //@line 249 "lvm.c"
      var $69=$68 ^ 1; //@line 249 "lvm.c"
      var $70=(($69)&1); //@line 249 "lvm.c"
      $1=$70; //@line 249 "lvm.c"
      __label__ = 17; break; //@line 249 "lvm.c"
    case 12: 
      __label__ = 13; break; //@line 249 "lvm.c"
    case 13: 
      __label__ = 14; break; //@line 249 "lvm.c"
    case 14: 
      __label__ = 15; break; //@line 249 "lvm.c"
    case 15: 
      __label__ = 16; break; //@line 249 "lvm.c"
    case 16: 
      var $76=$2; //@line 250 "lvm.c"
      var $77=$3; //@line 250 "lvm.c"
      var $78=$4; //@line 250 "lvm.c"
      var $79=__Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_($76, $77, $78); //@line 250 "lvm.c"
      $1=$79; //@line 250 "lvm.c"
      __label__ = 17; break; //@line 250 "lvm.c"
    case 17: 
      var $81=$1; //@line 251 "lvm.c"
      ;
      return $81; //@line 251 "lvm.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9lessequalP9lua_StatePK10lua_TValueS3_["X"]=1;

function __Z9luaZ_fillP3Zio($z) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $size=__stackBase__;
      var $L;
      var $buff;
      $2=$z;
      var $3=$2; //@line 23 "lzio.c"
      var $4=(($3+16)|0); //@line 23 "lzio.c"
      var $5=HEAP32[(($4)>>2)]; //@line 23 "lzio.c"
      $L=$5; //@line 23 "lzio.c"
      var $6=$2; //@line 26 "lzio.c"
      var $7=(($6+8)|0); //@line 26 "lzio.c"
      var $8=HEAP32[(($7)>>2)]; //@line 26 "lzio.c"
      var $9=$L; //@line 26 "lzio.c"
      var $10=$2; //@line 26 "lzio.c"
      var $11=(($10+12)|0); //@line 26 "lzio.c"
      var $12=HEAP32[(($11)>>2)]; //@line 26 "lzio.c"
      var $13=FUNCTION_TABLE[$8]($9, $12, $size); //@line 26 "lzio.c"
      $buff=$13; //@line 26 "lzio.c"
      var $14=$buff; //@line 28 "lzio.c"
      var $15=(($14)|0)==0; //@line 28 "lzio.c"
      if ($15) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 28 "lzio.c"
    case 3: 
      var $17=HEAP32[(($size)>>2)]; //@line 28 "lzio.c"
      var $18=(($17)|0)==0; //@line 28 "lzio.c"
      if ($18) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 28 "lzio.c"
    case 4: 
      $1=-1; //@line 28 "lzio.c"
      __label__ = 6; break; //@line 28 "lzio.c"
    case 5: 
      var $21=HEAP32[(($size)>>2)]; //@line 29 "lzio.c"
      var $22=((($21)-(1))|0); //@line 29 "lzio.c"
      var $23=$2; //@line 29 "lzio.c"
      var $24=(($23)|0); //@line 29 "lzio.c"
      HEAP32[(($24)>>2)]=$22; //@line 29 "lzio.c"
      var $25=$buff; //@line 30 "lzio.c"
      var $26=$2; //@line 30 "lzio.c"
      var $27=(($26+4)|0); //@line 30 "lzio.c"
      HEAP32[(($27)>>2)]=$25; //@line 30 "lzio.c"
      var $28=$2; //@line 31 "lzio.c"
      var $29=(($28+4)|0); //@line 31 "lzio.c"
      var $30=HEAP32[(($29)>>2)]; //@line 31 "lzio.c"
      var $31=(($30+1)|0); //@line 31 "lzio.c"
      HEAP32[(($29)>>2)]=$31; //@line 31 "lzio.c"
      var $32=HEAPU8[($30)]; //@line 31 "lzio.c"
      var $33=(($32)&255); //@line 31 "lzio.c"
      $1=$33; //@line 31 "lzio.c"
      __label__ = 6; break; //@line 31 "lzio.c"
    case 6: 
      var $35=$1; //@line 32 "lzio.c"
      STACKTOP = __stackBase__;
      return $35; //@line 32 "lzio.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaZ_lookaheadP3Zio($z) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$z;
      var $3=$2; //@line 36 "lzio.c"
      var $4=(($3)|0); //@line 36 "lzio.c"
      var $5=HEAP32[(($4)>>2)]; //@line 36 "lzio.c"
      var $6=(($5)|0)==0; //@line 36 "lzio.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 36 "lzio.c"
    case 3: 
      var $8=$2; //@line 37 "lzio.c"
      var $9=__Z9luaZ_fillP3Zio($8); //@line 37 "lzio.c"
      var $10=(($9)|0)==-1; //@line 37 "lzio.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 37 "lzio.c"
    case 4: 
      $1=-1; //@line 38 "lzio.c"
      __label__ = 8; break; //@line 38 "lzio.c"
    case 5: 
      var $13=$2; //@line 40 "lzio.c"
      var $14=(($13)|0); //@line 40 "lzio.c"
      var $15=HEAP32[(($14)>>2)]; //@line 40 "lzio.c"
      var $16=((($15)+(1))|0); //@line 40 "lzio.c"
      HEAP32[(($14)>>2)]=$16; //@line 40 "lzio.c"
      var $17=$2; //@line 41 "lzio.c"
      var $18=(($17+4)|0); //@line 41 "lzio.c"
      var $19=HEAP32[(($18)>>2)]; //@line 41 "lzio.c"
      var $20=((($19)-(1))|0); //@line 41 "lzio.c"
      HEAP32[(($18)>>2)]=$20; //@line 41 "lzio.c"
      __label__ = 6; break; //@line 42 "lzio.c"
    case 6: 
      __label__ = 7; break; //@line 43 "lzio.c"
    case 7: 
      var $23=$2; //@line 44 "lzio.c"
      var $24=(($23+4)|0); //@line 44 "lzio.c"
      var $25=HEAP32[(($24)>>2)]; //@line 44 "lzio.c"
      var $26=HEAPU8[($25)]; //@line 44 "lzio.c"
      var $27=(($26)&255); //@line 44 "lzio.c"
      $1=$27; //@line 44 "lzio.c"
      __label__ = 8; break; //@line 44 "lzio.c"
    case 8: 
      var $29=$1; //@line 45 "lzio.c"
      ;
      return $29; //@line 45 "lzio.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9luaZ_readP3ZioPvj($z, $b, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $m;
      $2=$z;
      $3=$b;
      $4=$n;
      __label__ = 3; break; //@line 59 "lzio.c"
    case 3: 
      var $6=$4; //@line 59 "lzio.c"
      var $7=(($6)|0)!=0; //@line 59 "lzio.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 59 "lzio.c"
    case 4: 
      var $9=$2; //@line 61 "lzio.c"
      var $10=__Z14luaZ_lookaheadP3Zio($9); //@line 61 "lzio.c"
      var $11=(($10)|0)==-1; //@line 61 "lzio.c"
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 61 "lzio.c"
    case 5: 
      var $13=$4; //@line 62 "lzio.c"
      $1=$13; //@line 62 "lzio.c"
      __label__ = 11; break; //@line 62 "lzio.c"
    case 6: 
      var $15=$4; //@line 63 "lzio.c"
      var $16=$2; //@line 63 "lzio.c"
      var $17=(($16)|0); //@line 63 "lzio.c"
      var $18=HEAPU32[(($17)>>2)]; //@line 63 "lzio.c"
      var $19=(($15)>>>0) <= (($18)>>>0); //@line 63 "lzio.c"
      if ($19) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 63 "lzio.c"
    case 7: 
      var $21=$4; //@line 63 "lzio.c"
      var $27 = $21;__label__ = 9; break; //@line 63 "lzio.c"
    case 8: 
      var $23=$2; //@line 63 "lzio.c"
      var $24=(($23)|0); //@line 63 "lzio.c"
      var $25=HEAP32[(($24)>>2)]; //@line 63 "lzio.c"
      var $27 = $25;__label__ = 9; break; //@line 63 "lzio.c"
    case 9: 
      var $27; //@line 63 "lzio.c"
      $m=$27; //@line 63 "lzio.c"
      var $28=$3; //@line 64 "lzio.c"
      var $29=$2; //@line 64 "lzio.c"
      var $30=(($29+4)|0); //@line 64 "lzio.c"
      var $31=HEAP32[(($30)>>2)]; //@line 64 "lzio.c"
      var $32=$m; //@line 64 "lzio.c"
      _memcpy($28, $31, $32, 1); //@line 64 "lzio.c"
      var $33=$m; //@line 65 "lzio.c"
      var $34=$2; //@line 65 "lzio.c"
      var $35=(($34)|0); //@line 65 "lzio.c"
      var $36=HEAP32[(($35)>>2)]; //@line 65 "lzio.c"
      var $37=((($36)-($33))|0); //@line 65 "lzio.c"
      HEAP32[(($35)>>2)]=$37; //@line 65 "lzio.c"
      var $38=$m; //@line 66 "lzio.c"
      var $39=$2; //@line 66 "lzio.c"
      var $40=(($39+4)|0); //@line 66 "lzio.c"
      var $41=HEAP32[(($40)>>2)]; //@line 66 "lzio.c"
      var $42=(($41+$38)|0); //@line 66 "lzio.c"
      HEAP32[(($40)>>2)]=$42; //@line 66 "lzio.c"
      var $43=$3; //@line 67 "lzio.c"
      var $44=$m; //@line 67 "lzio.c"
      var $45=(($43+$44)|0); //@line 67 "lzio.c"
      $3=$45; //@line 67 "lzio.c"
      var $46=$m; //@line 68 "lzio.c"
      var $47=$4; //@line 68 "lzio.c"
      var $48=((($47)-($46))|0); //@line 68 "lzio.c"
      $4=$48; //@line 68 "lzio.c"
      __label__ = 3; break; //@line 69 "lzio.c"
    case 10: 
      $1=0; //@line 70 "lzio.c"
      __label__ = 11; break; //@line 70 "lzio.c"
    case 11: 
      var $51=$1; //@line 71 "lzio.c"
      ;
      return $51; //@line 71 "lzio.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9luaZ_readP3ZioPvj["X"]=1;

function __Z14luaZ_openspaceP9lua_StateP7Mbufferj($L, $buff, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$buff;
      $3=$n;
      var $4=$3; //@line 75 "lzio.c"
      var $5=$2; //@line 75 "lzio.c"
      var $6=(($5+8)|0); //@line 75 "lzio.c"
      var $7=HEAPU32[(($6)>>2)]; //@line 75 "lzio.c"
      var $8=(($4)>>>0) > (($7)>>>0); //@line 75 "lzio.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 75 "lzio.c"
    case 3: 
      var $10=$3; //@line 76 "lzio.c"
      var $11=(($10)>>>0) < 32; //@line 76 "lzio.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 76 "lzio.c"
    case 4: 
      $3=32; //@line 76 "lzio.c"
      __label__ = 5; break; //@line 76 "lzio.c"
    case 5: 
      var $14=$3; //@line 77 "lzio.c"
      var $15=((($14)+(1))|0); //@line 77 "lzio.c"
      var $16=(($15)>>>0) <= 4294967293; //@line 77 "lzio.c"
      if ($16) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 77 "lzio.c"
    case 6: 
      var $18=$1; //@line 77 "lzio.c"
      var $19=$2; //@line 77 "lzio.c"
      var $20=(($19)|0); //@line 77 "lzio.c"
      var $21=HEAP32[(($20)>>2)]; //@line 77 "lzio.c"
      var $22=$2; //@line 77 "lzio.c"
      var $23=(($22+8)|0); //@line 77 "lzio.c"
      var $24=HEAP32[(($23)>>2)]; //@line 77 "lzio.c"
      var $25=(($24)|0); //@line 77 "lzio.c"
      var $26=$3; //@line 77 "lzio.c"
      var $27=(($26)|0); //@line 77 "lzio.c"
      var $28=__Z13luaM_realloc_P9lua_StatePvjj($18, $21, $25, $27); //@line 77 "lzio.c"
      var $33 = $28;__label__ = 8; break; //@line 77 "lzio.c"
    case 7: 
      var $30=$1; //@line 77 "lzio.c"
      var $31=__Z11luaM_toobigP9lua_State($30); //@line 77 "lzio.c"
      var $33 = $31;__label__ = 8; break; //@line 77 "lzio.c"
    case 8: 
      var $33; //@line 77 "lzio.c"
      var $34=$2; //@line 77 "lzio.c"
      var $35=(($34)|0); //@line 77 "lzio.c"
      HEAP32[(($35)>>2)]=$33; //@line 77 "lzio.c"
      var $36=$3; //@line 77 "lzio.c"
      var $37=$2; //@line 77 "lzio.c"
      var $38=(($37+8)|0); //@line 77 "lzio.c"
      HEAP32[(($38)>>2)]=$36; //@line 77 "lzio.c"
      __label__ = 9; break; //@line 78 "lzio.c"
    case 9: 
      var $40=$2; //@line 79 "lzio.c"
      var $41=(($40)|0); //@line 79 "lzio.c"
      var $42=HEAP32[(($41)>>2)]; //@line 79 "lzio.c"
      ;
      return $42; //@line 79 "lzio.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_argerror($L, $narg, $extramsg) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; _memset(__stackBase__, 0, 100);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ar=__stackBase__;
      $2=$L;
      $3=$narg;
      $4=$extramsg;
      var $5=$2; //@line 45 "lauxlib.c"
      var $6=_lua_getstack($5, 0, $ar); //@line 45 "lauxlib.c"
      var $7=(($6)|0)!=0; //@line 45 "lauxlib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 45 "lauxlib.c"
    case 3: 
      var $9=$2; //@line 46 "lauxlib.c"
      var $10=$3; //@line 46 "lauxlib.c"
      var $11=$4; //@line 46 "lauxlib.c"
      var $12=_luaL_error($9, ((STRING_TABLE.__str242)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$10,HEAP32[(((tempInt)+(4))>>2)]=$11,tempInt)); //@line 46 "lauxlib.c"
      $1=$12; //@line 46 "lauxlib.c"
      __label__ = 11; break; //@line 46 "lauxlib.c"
    case 4: 
      var $14=$2; //@line 47 "lauxlib.c"
      var $15=_lua_getinfo($14, ((STRING_TABLE.__str1243)|0), $ar); //@line 47 "lauxlib.c"
      var $16=(($ar+8)|0); //@line 48 "lauxlib.c"
      var $17=HEAP32[(($16)>>2)]; //@line 48 "lauxlib.c"
      var $18=_strcmp($17, ((STRING_TABLE.__str2244)|0)); //@line 48 "lauxlib.c"
      var $19=(($18)|0)==0; //@line 48 "lauxlib.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 48 "lauxlib.c"
    case 5: 
      var $21=$3; //@line 49 "lauxlib.c"
      var $22=((($21)-(1))|0); //@line 49 "lauxlib.c"
      $3=$22; //@line 49 "lauxlib.c"
      var $23=$3; //@line 50 "lauxlib.c"
      var $24=(($23)|0)==0; //@line 50 "lauxlib.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 50 "lauxlib.c"
    case 6: 
      var $26=$2; //@line 51 "lauxlib.c"
      var $27=(($ar+4)|0); //@line 51 "lauxlib.c"
      var $28=HEAP32[(($27)>>2)]; //@line 51 "lauxlib.c"
      var $29=$4; //@line 51 "lauxlib.c"
      var $30=_luaL_error($26, ((STRING_TABLE.__str3245)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$28,HEAP32[(((tempInt)+(4))>>2)]=$29,tempInt)); //@line 51 "lauxlib.c"
      $1=$30; //@line 51 "lauxlib.c"
      __label__ = 11; break; //@line 51 "lauxlib.c"
    case 7: 
      __label__ = 8; break; //@line 53 "lauxlib.c"
    case 8: 
      var $33=(($ar+4)|0); //@line 54 "lauxlib.c"
      var $34=HEAP32[(($33)>>2)]; //@line 54 "lauxlib.c"
      var $35=(($34)|0)==0; //@line 54 "lauxlib.c"
      if ($35) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 54 "lauxlib.c"
    case 9: 
      var $37=(($ar+4)|0); //@line 55 "lauxlib.c"
      HEAP32[(($37)>>2)]=((STRING_TABLE.__str4246)|0); //@line 55 "lauxlib.c"
      __label__ = 10; break; //@line 55 "lauxlib.c"
    case 10: 
      var $39=$2; //@line 56 "lauxlib.c"
      var $40=$3; //@line 56 "lauxlib.c"
      var $41=(($ar+4)|0); //@line 56 "lauxlib.c"
      var $42=HEAP32[(($41)>>2)]; //@line 56 "lauxlib.c"
      var $43=$4; //@line 56 "lauxlib.c"
      var $44=_luaL_error($39, ((STRING_TABLE.__str5247)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$40,HEAP32[(((tempInt)+(4))>>2)]=$42,HEAP32[(((tempInt)+(8))>>2)]=$43,tempInt)); //@line 56 "lauxlib.c"
      $1=$44; //@line 56 "lauxlib.c"
      __label__ = 11; break; //@line 56 "lauxlib.c"
    case 11: 
      var $46=$1; //@line 58 "lauxlib.c"
      STACKTOP = __stackBase__;
      return $46; //@line 58 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_argerror["X"]=1;

function _luaL_error($L, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $2;
  var $argp=__stackBase__;
  $1=$L;
  $2=$fmt;
  var $3=$argp; //@line 88 "lauxlib.c"
  HEAP32[(($3)>>2)]=arguments[_luaL_error.length]; //@line 88 "lauxlib.c"
  var $4=$1; //@line 89 "lauxlib.c"
  _luaL_where($4, 1); //@line 89 "lauxlib.c"
  var $5=$1; //@line 90 "lauxlib.c"
  var $6=$2; //@line 90 "lauxlib.c"
  var $7=HEAP32[(($argp)>>2)]; //@line 90 "lauxlib.c"
  var $8=_lua_pushvfstring($5, $6, $7); //@line 90 "lauxlib.c"
  var $9=$argp; //@line 91 "lauxlib.c"
  ; //@line 91 "lauxlib.c"
  var $10=$1; //@line 92 "lauxlib.c"
  _lua_concat($10, 2); //@line 92 "lauxlib.c"
  var $11=$1; //@line 93 "lauxlib.c"
  var $12=_lua_error($11); //@line 93 "lauxlib.c"
  STACKTOP = __stackBase__;
  return $12; //@line 93 "lauxlib.c"
}


function _luaL_typerror($L, $narg, $tname) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $msg;
  $1=$L;
  $2=$narg;
  $3=$tname;
  var $4=$1; //@line 62 "lauxlib.c"
  var $5=$3; //@line 62 "lauxlib.c"
  var $6=$1; //@line 63 "lauxlib.c"
  var $7=$1; //@line 63 "lauxlib.c"
  var $8=$2; //@line 63 "lauxlib.c"
  var $9=_lua_type($7, $8); //@line 63 "lauxlib.c"
  var $10=_lua_typename($6, $9); //@line 63 "lauxlib.c"
  var $11=_lua_pushfstring($4, ((STRING_TABLE.__str6248)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$10,tempInt)); //@line 63 "lauxlib.c"
  $msg=$11; //@line 63 "lauxlib.c"
  var $12=$1; //@line 64 "lauxlib.c"
  var $13=$2; //@line 64 "lauxlib.c"
  var $14=$msg; //@line 64 "lauxlib.c"
  var $15=_luaL_argerror($12, $13, $14); //@line 64 "lauxlib.c"
  STACKTOP = __stackBase__;
  return $15; //@line 64 "lauxlib.c"
}


function _luaL_where($L, $level) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; _memset(__stackBase__, 0, 100);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ar=__stackBase__;
      $1=$L;
      $2=$level;
      var $3=$1; //@line 75 "lauxlib.c"
      var $4=$2; //@line 75 "lauxlib.c"
      var $5=_lua_getstack($3, $4, $ar); //@line 75 "lauxlib.c"
      var $6=(($5)|0)!=0; //@line 75 "lauxlib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 75 "lauxlib.c"
    case 3: 
      var $8=$1; //@line 76 "lauxlib.c"
      var $9=_lua_getinfo($8, ((STRING_TABLE.__str7249)|0), $ar); //@line 76 "lauxlib.c"
      var $10=(($ar+20)|0); //@line 77 "lauxlib.c"
      var $11=HEAP32[(($10)>>2)]; //@line 77 "lauxlib.c"
      var $12=(($11)|0) > 0; //@line 77 "lauxlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 77 "lauxlib.c"
    case 4: 
      var $14=$1; //@line 78 "lauxlib.c"
      var $15=(($ar+36)|0); //@line 78 "lauxlib.c"
      var $16=(($15)|0); //@line 78 "lauxlib.c"
      var $17=(($ar+20)|0); //@line 78 "lauxlib.c"
      var $18=HEAP32[(($17)>>2)]; //@line 78 "lauxlib.c"
      var $19=_lua_pushfstring($14, ((STRING_TABLE.__str8250)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$16,HEAP32[(((tempInt)+(4))>>2)]=$18,tempInt)); //@line 78 "lauxlib.c"
      __label__ = 7; break; //@line 79 "lauxlib.c"
    case 5: 
      __label__ = 6; break; //@line 81 "lauxlib.c"
    case 6: 
      var $22=$1; //@line 82 "lauxlib.c"
      _lua_pushlstring($22, ((__str9251)|0), 0); //@line 82 "lauxlib.c"
      __label__ = 7; break; //@line 83 "lauxlib.c"
    case 7: 
      STACKTOP = __stackBase__;
      return; //@line 83 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7libsizePK8luaL_Reg($l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $size;
      $1=$l;
      $size=0; //@line 236 "lauxlib.c"
      __label__ = 3; break; //@line 237 "lauxlib.c"
    case 3: 
      var $3=$1; //@line 237 "lauxlib.c"
      var $4=(($3)|0); //@line 237 "lauxlib.c"
      var $5=HEAP32[(($4)>>2)]; //@line 237 "lauxlib.c"
      var $6=(($5)|0)!=0; //@line 237 "lauxlib.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 237 "lauxlib.c"
    case 4: 
      var $8=$size; //@line 237 "lauxlib.c"
      var $9=((($8)+(1))|0); //@line 237 "lauxlib.c"
      $size=$9; //@line 237 "lauxlib.c"
      __label__ = 5; break; //@line 237 "lauxlib.c"
    case 5: 
      var $11=$1; //@line 237 "lauxlib.c"
      var $12=(($11+8)|0); //@line 237 "lauxlib.c"
      $1=$12; //@line 237 "lauxlib.c"
      __label__ = 3; break; //@line 237 "lauxlib.c"
    case 6: 
      var $14=$size; //@line 238 "lauxlib.c"
      ;
      return $14; //@line 238 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_buffinit($L, $B) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$B;
  var $3=$1; //@line 473 "lauxlib.c"
  var $4=$2; //@line 473 "lauxlib.c"
  var $5=(($4+8)|0); //@line 473 "lauxlib.c"
  HEAP32[(($5)>>2)]=$3; //@line 473 "lauxlib.c"
  var $6=$2; //@line 474 "lauxlib.c"
  var $7=(($6+12)|0); //@line 474 "lauxlib.c"
  var $8=(($7)|0); //@line 474 "lauxlib.c"
  var $9=$2; //@line 474 "lauxlib.c"
  var $10=(($9)|0); //@line 474 "lauxlib.c"
  HEAP32[(($10)>>2)]=$8; //@line 474 "lauxlib.c"
  var $11=$2; //@line 475 "lauxlib.c"
  var $12=(($11+4)|0); //@line 475 "lauxlib.c"
  HEAP32[(($12)>>2)]=0; //@line 475 "lauxlib.c"
  ;
  return; //@line 476 "lauxlib.c"
}


function _luaL_checkoption($L, $narg, $def, $lst) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $name;
      var $i;
      $2=$L;
      $3=$narg;
      $4=$def;
      $5=$lst;
      var $6=$4; //@line 102 "lauxlib.c"
      var $7=(($6)|0)!=0; //@line 102 "lauxlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 102 "lauxlib.c"
    case 3: 
      var $9=$2; //@line 101 "lauxlib.c"
      var $10=$3; //@line 101 "lauxlib.c"
      var $11=$4; //@line 101 "lauxlib.c"
      var $12=_luaL_optlstring($9, $10, $11, 0); //@line 101 "lauxlib.c"
      var $18 = $12;__label__ = 5; break; //@line 101 "lauxlib.c"
    case 4: 
      var $14=$2; //@line 102 "lauxlib.c"
      var $15=$3; //@line 102 "lauxlib.c"
      var $16=_luaL_checklstring($14, $15, 0); //@line 102 "lauxlib.c"
      var $18 = $16;__label__ = 5; break; //@line 102 "lauxlib.c"
    case 5: 
      var $18; //@line 102 "lauxlib.c"
      $name=$18; //@line 102 "lauxlib.c"
      $i=0; //@line 104 "lauxlib.c"
      __label__ = 6; break; //@line 104 "lauxlib.c"
    case 6: 
      var $20=$i; //@line 104 "lauxlib.c"
      var $21=$5; //@line 104 "lauxlib.c"
      var $22=(($21+($20<<2))|0); //@line 104 "lauxlib.c"
      var $23=HEAP32[(($22)>>2)]; //@line 104 "lauxlib.c"
      var $24=(($23)|0)!=0; //@line 104 "lauxlib.c"
      if ($24) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 104 "lauxlib.c"
    case 7: 
      var $26=$i; //@line 105 "lauxlib.c"
      var $27=$5; //@line 105 "lauxlib.c"
      var $28=(($27+($26<<2))|0); //@line 105 "lauxlib.c"
      var $29=HEAP32[(($28)>>2)]; //@line 105 "lauxlib.c"
      var $30=$name; //@line 105 "lauxlib.c"
      var $31=_strcmp($29, $30); //@line 105 "lauxlib.c"
      var $32=(($31)|0)==0; //@line 105 "lauxlib.c"
      if ($32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 105 "lauxlib.c"
    case 8: 
      var $34=$i; //@line 106 "lauxlib.c"
      $1=$34; //@line 106 "lauxlib.c"
      __label__ = 12; break; //@line 106 "lauxlib.c"
    case 9: 
      __label__ = 10; break; //@line 106 "lauxlib.c"
    case 10: 
      var $37=$i; //@line 104 "lauxlib.c"
      var $38=((($37)+(1))|0); //@line 104 "lauxlib.c"
      $i=$38; //@line 104 "lauxlib.c"
      __label__ = 6; break; //@line 104 "lauxlib.c"
    case 11: 
      var $40=$2; //@line 107 "lauxlib.c"
      var $41=$3; //@line 107 "lauxlib.c"
      var $42=$2; //@line 108 "lauxlib.c"
      var $43=$name; //@line 108 "lauxlib.c"
      var $44=_lua_pushfstring($42, ((STRING_TABLE.__str10252)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$43,tempInt)); //@line 108 "lauxlib.c"
      var $45=_luaL_argerror($40, $41, $44); //@line 108 "lauxlib.c"
      $1=$45; //@line 108 "lauxlib.c"
      __label__ = 12; break; //@line 108 "lauxlib.c"
    case 12: 
      var $47=$1; //@line 109 "lauxlib.c"
      STACKTOP = __stackBase__;
      return $47; //@line 109 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_checkoption["X"]=1;

function _luaL_optlstring($L, $narg, $def, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$L;
      $3=$narg;
      $4=$def;
      $5=$len;
      var $6=$2; //@line 167 "lauxlib.c"
      var $7=$3; //@line 167 "lauxlib.c"
      var $8=_lua_type($6, $7); //@line 167 "lauxlib.c"
      var $9=(($8)|0) <= 0; //@line 167 "lauxlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 167 "lauxlib.c"
    case 3: 
      var $11=$5; //@line 168 "lauxlib.c"
      var $12=(($11)|0)!=0; //@line 168 "lauxlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 168 "lauxlib.c"
    case 4: 
      var $14=$4; //@line 169 "lauxlib.c"
      var $15=(($14)|0)!=0; //@line 169 "lauxlib.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 169 "lauxlib.c"
    case 5: 
      var $17=$4; //@line 169 "lauxlib.c"
      var $18=_strlen($17); //@line 169 "lauxlib.c"
      var $21 = $18;__label__ = 7; break; //@line 169 "lauxlib.c"
    case 6: 
      var $21 = 0;__label__ = 7; break; //@line 169 "lauxlib.c"
    case 7: 
      var $21; //@line 169 "lauxlib.c"
      var $22=$5; //@line 169 "lauxlib.c"
      HEAP32[(($22)>>2)]=$21; //@line 169 "lauxlib.c"
      __label__ = 8; break; //@line 169 "lauxlib.c"
    case 8: 
      var $24=$4; //@line 170 "lauxlib.c"
      $1=$24; //@line 170 "lauxlib.c"
      __label__ = 10; break; //@line 170 "lauxlib.c"
    case 9: 
      var $26=$2; //@line 172 "lauxlib.c"
      var $27=$3; //@line 172 "lauxlib.c"
      var $28=$5; //@line 172 "lauxlib.c"
      var $29=_luaL_checklstring($26, $27, $28); //@line 172 "lauxlib.c"
      $1=$29; //@line 172 "lauxlib.c"
      __label__ = 10; break; //@line 172 "lauxlib.c"
    case 10: 
      var $31=$1; //@line 173 "lauxlib.c"
      ;
      return $31; //@line 173 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checklstring($L, $narg, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $s;
      $1=$L;
      $2=$narg;
      $3=$len;
      var $4=$1; //@line 159 "lauxlib.c"
      var $5=$2; //@line 159 "lauxlib.c"
      var $6=$3; //@line 159 "lauxlib.c"
      var $7=_lua_tolstring($4, $5, $6); //@line 159 "lauxlib.c"
      $s=$7; //@line 159 "lauxlib.c"
      var $8=$s; //@line 160 "lauxlib.c"
      var $9=(($8)|0)!=0; //@line 160 "lauxlib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 160 "lauxlib.c"
    case 3: 
      var $11=$1; //@line 160 "lauxlib.c"
      var $12=$2; //@line 160 "lauxlib.c"
      __Z9tag_errorP9lua_Stateii($11, $12, 4); //@line 160 "lauxlib.c"
      __label__ = 4; break; //@line 160 "lauxlib.c"
    case 4: 
      var $14=$s; //@line 161 "lauxlib.c"
      ;
      return $14; //@line 161 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_newmetatable($L, $tname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$tname;
      var $4=$2; //@line 113 "lauxlib.c"
      var $5=$3; //@line 113 "lauxlib.c"
      _lua_getfield($4, -10000, $5); //@line 113 "lauxlib.c"
      var $6=$2; //@line 114 "lauxlib.c"
      var $7=_lua_type($6, -1); //@line 114 "lauxlib.c"
      var $8=(($7)|0)==0; //@line 114 "lauxlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 114 "lauxlib.c"
    case 3: 
      $1=0; //@line 115 "lauxlib.c"
      __label__ = 5; break; //@line 115 "lauxlib.c"
    case 4: 
      var $11=$2; //@line 116 "lauxlib.c"
      _lua_settop($11, -2); //@line 116 "lauxlib.c"
      var $12=$2; //@line 117 "lauxlib.c"
      _lua_createtable($12, 0, 0); //@line 117 "lauxlib.c"
      var $13=$2; //@line 118 "lauxlib.c"
      _lua_pushvalue($13, -1); //@line 118 "lauxlib.c"
      var $14=$2; //@line 119 "lauxlib.c"
      var $15=$3; //@line 119 "lauxlib.c"
      _lua_setfield($14, -10000, $15); //@line 119 "lauxlib.c"
      $1=1; //@line 120 "lauxlib.c"
      __label__ = 5; break; //@line 120 "lauxlib.c"
    case 5: 
      var $17=$1; //@line 121 "lauxlib.c"
      ;
      return $17; //@line 121 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checkudata($L, $ud, $tname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      $2=$L;
      $3=$ud;
      $4=$tname;
      var $5=$2; //@line 125 "lauxlib.c"
      var $6=$3; //@line 125 "lauxlib.c"
      var $7=_lua_touserdata($5, $6); //@line 125 "lauxlib.c"
      $p=$7; //@line 125 "lauxlib.c"
      var $8=$p; //@line 126 "lauxlib.c"
      var $9=(($8)|0)!=0; //@line 126 "lauxlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 126 "lauxlib.c"
    case 3: 
      var $11=$2; //@line 127 "lauxlib.c"
      var $12=$3; //@line 127 "lauxlib.c"
      var $13=_lua_getmetatable($11, $12); //@line 127 "lauxlib.c"
      var $14=(($13)|0)!=0; //@line 127 "lauxlib.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 127 "lauxlib.c"
    case 4: 
      var $16=$2; //@line 128 "lauxlib.c"
      var $17=$4; //@line 128 "lauxlib.c"
      _lua_getfield($16, -10000, $17); //@line 128 "lauxlib.c"
      var $18=$2; //@line 129 "lauxlib.c"
      var $19=_lua_rawequal($18, -1, -2); //@line 129 "lauxlib.c"
      var $20=(($19)|0)!=0; //@line 129 "lauxlib.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 129 "lauxlib.c"
    case 5: 
      var $22=$2; //@line 130 "lauxlib.c"
      _lua_settop($22, -3); //@line 130 "lauxlib.c"
      var $23=$p; //@line 131 "lauxlib.c"
      $1=$23; //@line 131 "lauxlib.c"
      __label__ = 9; break; //@line 131 "lauxlib.c"
    case 6: 
      __label__ = 7; break; //@line 133 "lauxlib.c"
    case 7: 
      __label__ = 8; break; //@line 134 "lauxlib.c"
    case 8: 
      var $27=$2; //@line 135 "lauxlib.c"
      var $28=$3; //@line 135 "lauxlib.c"
      var $29=$4; //@line 135 "lauxlib.c"
      var $30=_luaL_typerror($27, $28, $29); //@line 135 "lauxlib.c"
      $1=0; //@line 136 "lauxlib.c"
      __label__ = 9; break; //@line 136 "lauxlib.c"
    case 9: 
      var $32=$1; //@line 137 "lauxlib.c"
      ;
      return $32; //@line 137 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checkstack($L, $space, $mes) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$space;
      $3=$mes;
      var $4=$1; //@line 141 "lauxlib.c"
      var $5=$2; //@line 141 "lauxlib.c"
      var $6=_lua_checkstack($4, $5); //@line 141 "lauxlib.c"
      var $7=(($6)|0)!=0; //@line 141 "lauxlib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 141 "lauxlib.c"
    case 3: 
      var $9=$1; //@line 142 "lauxlib.c"
      var $10=$3; //@line 142 "lauxlib.c"
      var $11=_luaL_error($9, ((STRING_TABLE.__str11253)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$10,tempInt)); //@line 142 "lauxlib.c"
      __label__ = 4; break; //@line 142 "lauxlib.c"
    case 4: 
      STACKTOP = __stackBase__;
      return; //@line 143 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checktype($L, $narg, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$narg;
      $3=$t;
      var $4=$1; //@line 147 "lauxlib.c"
      var $5=$2; //@line 147 "lauxlib.c"
      var $6=_lua_type($4, $5); //@line 147 "lauxlib.c"
      var $7=$3; //@line 147 "lauxlib.c"
      var $8=(($6)|0)!=(($7)|0); //@line 147 "lauxlib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 147 "lauxlib.c"
    case 3: 
      var $10=$1; //@line 148 "lauxlib.c"
      var $11=$2; //@line 148 "lauxlib.c"
      var $12=$3; //@line 148 "lauxlib.c"
      __Z9tag_errorP9lua_Stateii($10, $11, $12); //@line 148 "lauxlib.c"
      __label__ = 4; break; //@line 148 "lauxlib.c"
    case 4: 
      ;
      return; //@line 149 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9tag_errorP9lua_Stateii($L, $narg, $tag) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$narg;
  $3=$tag;
  var $4=$1; //@line 69 "lauxlib.c"
  var $5=$2; //@line 69 "lauxlib.c"
  var $6=$1; //@line 69 "lauxlib.c"
  var $7=$3; //@line 69 "lauxlib.c"
  var $8=_lua_typename($6, $7); //@line 69 "lauxlib.c"
  var $9=_luaL_typerror($4, $5, $8); //@line 69 "lauxlib.c"
  ;
  return; //@line 70 "lauxlib.c"
}


function _luaL_checkany($L, $narg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$narg;
      var $3=$1; //@line 153 "lauxlib.c"
      var $4=$2; //@line 153 "lauxlib.c"
      var $5=_lua_type($3, $4); //@line 153 "lauxlib.c"
      var $6=(($5)|0)==-1; //@line 153 "lauxlib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 153 "lauxlib.c"
    case 3: 
      var $8=$1; //@line 154 "lauxlib.c"
      var $9=$2; //@line 154 "lauxlib.c"
      var $10=_luaL_argerror($8, $9, ((STRING_TABLE.__str12254)|0)); //@line 154 "lauxlib.c"
      __label__ = 4; break; //@line 154 "lauxlib.c"
    case 4: 
      ;
      return; //@line 155 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checknumber($L, $narg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $d;
      $1=$L;
      $2=$narg;
      var $3=$1; //@line 177 "lauxlib.c"
      var $4=$2; //@line 177 "lauxlib.c"
      var $5=_lua_tonumber($3, $4); //@line 177 "lauxlib.c"
      $d=$5; //@line 177 "lauxlib.c"
      var $6=$d; //@line 178 "lauxlib.c"
      var $7=$6 == 0; //@line 178 "lauxlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 178 "lauxlib.c"
    case 3: 
      var $9=$1; //@line 178 "lauxlib.c"
      var $10=$2; //@line 178 "lauxlib.c"
      var $11=_lua_isnumber($9, $10); //@line 178 "lauxlib.c"
      var $12=(($11)|0)!=0; //@line 178 "lauxlib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 178 "lauxlib.c"
    case 4: 
      var $14=$1; //@line 179 "lauxlib.c"
      var $15=$2; //@line 179 "lauxlib.c"
      __Z9tag_errorP9lua_Stateii($14, $15, 3); //@line 179 "lauxlib.c"
      __label__ = 5; break; //@line 179 "lauxlib.c"
    case 5: 
      var $17=$d; //@line 180 "lauxlib.c"
      ;
      return $17; //@line 180 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_optnumber($L, $narg, $def) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$narg;
      $3=$def;
      var $4=$1; //@line 185 "lauxlib.c"
      var $5=$2; //@line 185 "lauxlib.c"
      var $6=_lua_type($4, $5); //@line 185 "lauxlib.c"
      var $7=(($6)|0) <= 0; //@line 185 "lauxlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 185 "lauxlib.c"
    case 3: 
      var $9=$3; //@line 185 "lauxlib.c"
      var $15 = $9;__label__ = 5; break; //@line 185 "lauxlib.c"
    case 4: 
      var $11=$1; //@line 185 "lauxlib.c"
      var $12=$2; //@line 185 "lauxlib.c"
      var $13=_luaL_checknumber($11, $12); //@line 185 "lauxlib.c"
      var $15 = $13;__label__ = 5; break; //@line 185 "lauxlib.c"
    case 5: 
      var $15; //@line 185 "lauxlib.c"
      ;
      return $15; //@line 185 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_checkinteger($L, $narg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $d;
      $1=$L;
      $2=$narg;
      var $3=$1; //@line 190 "lauxlib.c"
      var $4=$2; //@line 190 "lauxlib.c"
      var $5=_lua_tointeger($3, $4); //@line 190 "lauxlib.c"
      $d=$5; //@line 190 "lauxlib.c"
      var $6=$d; //@line 191 "lauxlib.c"
      var $7=(($6)|0)==0; //@line 191 "lauxlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 191 "lauxlib.c"
    case 3: 
      var $9=$1; //@line 191 "lauxlib.c"
      var $10=$2; //@line 191 "lauxlib.c"
      var $11=_lua_isnumber($9, $10); //@line 191 "lauxlib.c"
      var $12=(($11)|0)!=0; //@line 191 "lauxlib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 191 "lauxlib.c"
    case 4: 
      var $14=$1; //@line 192 "lauxlib.c"
      var $15=$2; //@line 192 "lauxlib.c"
      __Z9tag_errorP9lua_Stateii($14, $15, 3); //@line 192 "lauxlib.c"
      __label__ = 5; break; //@line 192 "lauxlib.c"
    case 5: 
      var $17=$d; //@line 193 "lauxlib.c"
      ;
      return $17; //@line 193 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_optinteger($L, $narg, $def) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$narg;
      $3=$def;
      var $4=$1; //@line 199 "lauxlib.c"
      var $5=$2; //@line 199 "lauxlib.c"
      var $6=_lua_type($4, $5); //@line 199 "lauxlib.c"
      var $7=(($6)|0) <= 0; //@line 199 "lauxlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 199 "lauxlib.c"
    case 3: 
      var $9=$3; //@line 199 "lauxlib.c"
      var $15 = $9;__label__ = 5; break; //@line 199 "lauxlib.c"
    case 4: 
      var $11=$1; //@line 199 "lauxlib.c"
      var $12=$2; //@line 199 "lauxlib.c"
      var $13=_luaL_checkinteger($11, $12); //@line 199 "lauxlib.c"
      var $15 = $13;__label__ = 5; break; //@line 199 "lauxlib.c"
    case 5: 
      var $15; //@line 199 "lauxlib.c"
      ;
      return $15; //@line 199 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_getmetafield($L, $obj, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$obj;
      $4=$event;
      var $5=$2; //@line 204 "lauxlib.c"
      var $6=$3; //@line 204 "lauxlib.c"
      var $7=_lua_getmetatable($5, $6); //@line 204 "lauxlib.c"
      var $8=(($7)|0)!=0; //@line 204 "lauxlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 204 "lauxlib.c"
    case 3: 
      $1=0; //@line 205 "lauxlib.c"
      __label__ = 7; break; //@line 205 "lauxlib.c"
    case 4: 
      var $11=$2; //@line 206 "lauxlib.c"
      var $12=$4; //@line 206 "lauxlib.c"
      _lua_pushstring($11, $12); //@line 206 "lauxlib.c"
      var $13=$2; //@line 207 "lauxlib.c"
      _lua_rawget($13, -2); //@line 207 "lauxlib.c"
      var $14=$2; //@line 208 "lauxlib.c"
      var $15=_lua_type($14, -1); //@line 208 "lauxlib.c"
      var $16=(($15)|0)==0; //@line 208 "lauxlib.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 208 "lauxlib.c"
    case 5: 
      var $18=$2; //@line 209 "lauxlib.c"
      _lua_settop($18, -3); //@line 209 "lauxlib.c"
      $1=0; //@line 210 "lauxlib.c"
      __label__ = 7; break; //@line 210 "lauxlib.c"
    case 6: 
      var $20=$2; //@line 213 "lauxlib.c"
      _lua_remove($20, -2); //@line 213 "lauxlib.c"
      $1=1; //@line 214 "lauxlib.c"
      __label__ = 7; break; //@line 214 "lauxlib.c"
    case 7: 
      var $22=$1; //@line 216 "lauxlib.c"
      ;
      return $22; //@line 216 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_callmeta($L, $obj, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$obj;
      $4=$event;
      var $5=$3; //@line 220 "lauxlib.c"
      var $6=(($5)|0) > 0; //@line 220 "lauxlib.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 220 "lauxlib.c"
    case 3: 
      var $8=$3; //@line 220 "lauxlib.c"
      var $9=(($8)|0) <= -10000; //@line 220 "lauxlib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 220 "lauxlib.c"
    case 4: 
      var $11=$3; //@line 220 "lauxlib.c"
      var $19 = $11;__label__ = 6; break; //@line 220 "lauxlib.c"
    case 5: 
      var $13=$2; //@line 220 "lauxlib.c"
      var $14=_lua_gettop($13); //@line 220 "lauxlib.c"
      var $15=$3; //@line 220 "lauxlib.c"
      var $16=((($14)+($15))|0); //@line 220 "lauxlib.c"
      var $17=((($16)+(1))|0); //@line 220 "lauxlib.c"
      var $19 = $17;__label__ = 6; break; //@line 220 "lauxlib.c"
    case 6: 
      var $19; //@line 220 "lauxlib.c"
      $3=$19; //@line 220 "lauxlib.c"
      var $20=$2; //@line 221 "lauxlib.c"
      var $21=$3; //@line 221 "lauxlib.c"
      var $22=$4; //@line 221 "lauxlib.c"
      var $23=_luaL_getmetafield($20, $21, $22); //@line 221 "lauxlib.c"
      var $24=(($23)|0)!=0; //@line 221 "lauxlib.c"
      if ($24) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 221 "lauxlib.c"
    case 7: 
      $1=0; //@line 222 "lauxlib.c"
      __label__ = 9; break; //@line 222 "lauxlib.c"
    case 8: 
      var $27=$2; //@line 223 "lauxlib.c"
      var $28=$3; //@line 223 "lauxlib.c"
      _lua_pushvalue($27, $28); //@line 223 "lauxlib.c"
      var $29=$2; //@line 224 "lauxlib.c"
      _lua_call($29, 1, 1); //@line 224 "lauxlib.c"
      $1=1; //@line 225 "lauxlib.c"
      __label__ = 9; break; //@line 225 "lauxlib.c"
    case 9: 
      var $31=$1; //@line 226 "lauxlib.c"
      ;
      return $31; //@line 226 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_register($L, $libname, $l) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$libname;
  $3=$l;
  var $4=$1; //@line 231 "lauxlib.c"
  var $5=$2; //@line 231 "lauxlib.c"
  var $6=$3; //@line 231 "lauxlib.c"
  _luaL_openlib($4, $5, $6, 0); //@line 231 "lauxlib.c"
  ;
  return; //@line 232 "lauxlib.c"
}


function _luaL_openlib($L, $libname, $l, $nup) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $size;
      var $i;
      $1=$L;
      $2=$libname;
      $3=$l;
      $4=$nup;
      var $5=$2; //@line 244 "lauxlib.c"
      var $6=(($5)|0)!=0; //@line 244 "lauxlib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 244 "lauxlib.c"
    case 3: 
      var $8=$3; //@line 245 "lauxlib.c"
      var $9=__Z7libsizePK8luaL_Reg($8); //@line 245 "lauxlib.c"
      $size=$9; //@line 245 "lauxlib.c"
      var $10=$1; //@line 247 "lauxlib.c"
      var $11=_luaL_findtable($10, -10000, ((STRING_TABLE.__str13255)|0), 1); //@line 247 "lauxlib.c"
      var $12=$1; //@line 248 "lauxlib.c"
      var $13=$2; //@line 248 "lauxlib.c"
      _lua_getfield($12, -1, $13); //@line 248 "lauxlib.c"
      var $14=$1; //@line 249 "lauxlib.c"
      var $15=_lua_type($14, -1); //@line 249 "lauxlib.c"
      var $16=(($15)|0)==5; //@line 249 "lauxlib.c"
      if ($16) { __label__ = 7; break; } else { __label__ = 4; break; } //@line 249 "lauxlib.c"
    case 4: 
      var $18=$1; //@line 250 "lauxlib.c"
      _lua_settop($18, -2); //@line 250 "lauxlib.c"
      var $19=$1; //@line 252 "lauxlib.c"
      var $20=$2; //@line 252 "lauxlib.c"
      var $21=$size; //@line 252 "lauxlib.c"
      var $22=_luaL_findtable($19, -10002, $20, $21); //@line 252 "lauxlib.c"
      var $23=(($22)|0)!=0; //@line 252 "lauxlib.c"
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 252 "lauxlib.c"
    case 5: 
      var $25=$1; //@line 253 "lauxlib.c"
      var $26=$2; //@line 253 "lauxlib.c"
      var $27=_luaL_error($25, ((STRING_TABLE.__str14256)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$26,tempInt)); //@line 253 "lauxlib.c"
      __label__ = 6; break; //@line 253 "lauxlib.c"
    case 6: 
      var $29=$1; //@line 254 "lauxlib.c"
      _lua_pushvalue($29, -1); //@line 254 "lauxlib.c"
      var $30=$1; //@line 255 "lauxlib.c"
      var $31=$2; //@line 255 "lauxlib.c"
      _lua_setfield($30, -3, $31); //@line 255 "lauxlib.c"
      __label__ = 7; break; //@line 256 "lauxlib.c"
    case 7: 
      var $33=$1; //@line 257 "lauxlib.c"
      _lua_remove($33, -2); //@line 257 "lauxlib.c"
      var $34=$1; //@line 258 "lauxlib.c"
      var $35=$4; //@line 258 "lauxlib.c"
      var $36=((($35)+(1))|0); //@line 258 "lauxlib.c"
      var $37=(((-$36))|0); //@line 258 "lauxlib.c"
      _lua_insert($34, $37); //@line 258 "lauxlib.c"
      __label__ = 8; break; //@line 259 "lauxlib.c"
    case 8: 
      __label__ = 9; break; //@line 260 "lauxlib.c"
    case 9: 
      var $40=$3; //@line 260 "lauxlib.c"
      var $41=(($40)|0); //@line 260 "lauxlib.c"
      var $42=HEAP32[(($41)>>2)]; //@line 260 "lauxlib.c"
      var $43=(($42)|0)!=0; //@line 260 "lauxlib.c"
      if ($43) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 260 "lauxlib.c"
    case 10: 
      $i=0; //@line 262 "lauxlib.c"
      __label__ = 11; break; //@line 262 "lauxlib.c"
    case 11: 
      var $46=$i; //@line 262 "lauxlib.c"
      var $47=$4; //@line 262 "lauxlib.c"
      var $48=(($46)|0) < (($47)|0); //@line 262 "lauxlib.c"
      if ($48) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 262 "lauxlib.c"
    case 12: 
      var $50=$1; //@line 263 "lauxlib.c"
      var $51=$4; //@line 263 "lauxlib.c"
      var $52=(((-$51))|0); //@line 263 "lauxlib.c"
      _lua_pushvalue($50, $52); //@line 263 "lauxlib.c"
      __label__ = 13; break; //@line 263 "lauxlib.c"
    case 13: 
      var $54=$i; //@line 262 "lauxlib.c"
      var $55=((($54)+(1))|0); //@line 262 "lauxlib.c"
      $i=$55; //@line 262 "lauxlib.c"
      __label__ = 11; break; //@line 262 "lauxlib.c"
    case 14: 
      var $57=$1; //@line 264 "lauxlib.c"
      var $58=$3; //@line 264 "lauxlib.c"
      var $59=(($58+4)|0); //@line 264 "lauxlib.c"
      var $60=HEAP32[(($59)>>2)]; //@line 264 "lauxlib.c"
      var $61=$4; //@line 264 "lauxlib.c"
      _lua_pushcclosure($57, $60, $61); //@line 264 "lauxlib.c"
      var $62=$1; //@line 265 "lauxlib.c"
      var $63=$4; //@line 265 "lauxlib.c"
      var $64=((($63)+(2))|0); //@line 265 "lauxlib.c"
      var $65=(((-$64))|0); //@line 265 "lauxlib.c"
      var $66=$3; //@line 265 "lauxlib.c"
      var $67=(($66)|0); //@line 265 "lauxlib.c"
      var $68=HEAP32[(($67)>>2)]; //@line 265 "lauxlib.c"
      _lua_setfield($62, $65, $68); //@line 265 "lauxlib.c"
      __label__ = 15; break; //@line 266 "lauxlib.c"
    case 15: 
      var $70=$3; //@line 260 "lauxlib.c"
      var $71=(($70+8)|0); //@line 260 "lauxlib.c"
      $3=$71; //@line 260 "lauxlib.c"
      __label__ = 9; break; //@line 260 "lauxlib.c"
    case 16: 
      var $73=$1; //@line 267 "lauxlib.c"
      var $74=$4; //@line 267 "lauxlib.c"
      var $75=(((-$74))|0); //@line 267 "lauxlib.c"
      var $76=((($75)-(1))|0); //@line 267 "lauxlib.c"
      _lua_settop($73, $76); //@line 267 "lauxlib.c"
      STACKTOP = __stackBase__;
      return; //@line 268 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_openlib["X"]=1;

function _luaL_findtable($L, $idx, $fname, $szhint) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $e;
      $2=$L;
      $3=$idx;
      $4=$fname;
      $5=$szhint;
      var $6=$2; //@line 360 "lauxlib.c"
      var $7=$3; //@line 360 "lauxlib.c"
      _lua_pushvalue($6, $7); //@line 360 "lauxlib.c"
      __label__ = 3; break; //@line 361 "lauxlib.c"
    case 3: 
      var $9=$4; //@line 362 "lauxlib.c"
      var $10=_strchr($9, 46); //@line 362 "lauxlib.c"
      $e=$10; //@line 362 "lauxlib.c"
      var $11=$e; //@line 363 "lauxlib.c"
      var $12=(($11)|0)==0; //@line 363 "lauxlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 363 "lauxlib.c"
    case 4: 
      var $14=$4; //@line 363 "lauxlib.c"
      var $15=$4; //@line 363 "lauxlib.c"
      var $16=_strlen($15); //@line 363 "lauxlib.c"
      var $17=(($14+$16)|0); //@line 363 "lauxlib.c"
      $e=$17; //@line 363 "lauxlib.c"
      __label__ = 5; break; //@line 363 "lauxlib.c"
    case 5: 
      var $19=$2; //@line 364 "lauxlib.c"
      var $20=$4; //@line 364 "lauxlib.c"
      var $21=$e; //@line 364 "lauxlib.c"
      var $22=$4; //@line 364 "lauxlib.c"
      var $23=$21; //@line 364 "lauxlib.c"
      var $24=$22; //@line 364 "lauxlib.c"
      var $25=((($23)-($24))|0); //@line 364 "lauxlib.c"
      _lua_pushlstring($19, $20, $25); //@line 364 "lauxlib.c"
      var $26=$2; //@line 365 "lauxlib.c"
      _lua_rawget($26, -2); //@line 365 "lauxlib.c"
      var $27=$2; //@line 366 "lauxlib.c"
      var $28=_lua_type($27, -1); //@line 366 "lauxlib.c"
      var $29=(($28)|0)==0; //@line 366 "lauxlib.c"
      if ($29) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 366 "lauxlib.c"
    case 6: 
      var $31=$2; //@line 367 "lauxlib.c"
      _lua_settop($31, -2); //@line 367 "lauxlib.c"
      var $32=$2; //@line 368 "lauxlib.c"
      var $33=$e; //@line 368 "lauxlib.c"
      var $34=HEAP8[($33)]; //@line 368 "lauxlib.c"
      var $35=(($34 << 24) >> 24); //@line 368 "lauxlib.c"
      var $36=(($35)|0)==46; //@line 368 "lauxlib.c"
      if ($36) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 368 "lauxlib.c"
    case 7: 
      var $41 = 1;__label__ = 9; break; //@line 368 "lauxlib.c"
    case 8: 
      var $39=$5; //@line 368 "lauxlib.c"
      var $41 = $39;__label__ = 9; break; //@line 368 "lauxlib.c"
    case 9: 
      var $41; //@line 368 "lauxlib.c"
      _lua_createtable($32, 0, $41); //@line 368 "lauxlib.c"
      var $42=$2; //@line 369 "lauxlib.c"
      var $43=$4; //@line 369 "lauxlib.c"
      var $44=$e; //@line 369 "lauxlib.c"
      var $45=$4; //@line 369 "lauxlib.c"
      var $46=$44; //@line 369 "lauxlib.c"
      var $47=$45; //@line 369 "lauxlib.c"
      var $48=((($46)-($47))|0); //@line 369 "lauxlib.c"
      _lua_pushlstring($42, $43, $48); //@line 369 "lauxlib.c"
      var $49=$2; //@line 370 "lauxlib.c"
      _lua_pushvalue($49, -2); //@line 370 "lauxlib.c"
      var $50=$2; //@line 371 "lauxlib.c"
      _lua_settable($50, -4); //@line 371 "lauxlib.c"
      __label__ = 13; break; //@line 372 "lauxlib.c"
    case 10: 
      var $52=$2; //@line 373 "lauxlib.c"
      var $53=_lua_type($52, -1); //@line 373 "lauxlib.c"
      var $54=(($53)|0)==5; //@line 373 "lauxlib.c"
      if ($54) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 373 "lauxlib.c"
    case 11: 
      var $56=$2; //@line 374 "lauxlib.c"
      _lua_settop($56, -3); //@line 374 "lauxlib.c"
      var $57=$4; //@line 375 "lauxlib.c"
      $1=$57; //@line 375 "lauxlib.c"
      __label__ = 16; break; //@line 375 "lauxlib.c"
    case 12: 
      __label__ = 13; break; //@line 376 "lauxlib.c"
    case 13: 
      var $60=$2; //@line 377 "lauxlib.c"
      _lua_remove($60, -2); //@line 377 "lauxlib.c"
      var $61=$e; //@line 378 "lauxlib.c"
      var $62=(($61+1)|0); //@line 378 "lauxlib.c"
      $4=$62; //@line 378 "lauxlib.c"
      __label__ = 14; break; //@line 379 "lauxlib.c"
    case 14: 
      var $64=$e; //@line 379 "lauxlib.c"
      var $65=HEAP8[($64)]; //@line 379 "lauxlib.c"
      var $66=(($65 << 24) >> 24); //@line 379 "lauxlib.c"
      var $67=(($66)|0)==46; //@line 379 "lauxlib.c"
      if ($67) { __label__ = 3; break; } else { __label__ = 15; break; } //@line 379 "lauxlib.c"
    case 15: 
      $1=0; //@line 380 "lauxlib.c"
      __label__ = 16; break; //@line 380 "lauxlib.c"
    case 16: 
      var $70=$1; //@line 381 "lauxlib.c"
      ;
      return $70; //@line 381 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_findtable["X"]=1;

function _luaL_gsub($L, $s, $p, $r) {
  var __stackBase__  = STACKTOP; STACKTOP += 8204; _memset(__stackBase__, 0, 8204);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $wild;
      var $l;
      var $b=__stackBase__;
      $1=$L;
      $2=$s;
      $3=$p;
      $4=$r;
      var $5=$3; //@line 343 "lauxlib.c"
      var $6=_strlen($5); //@line 343 "lauxlib.c"
      $l=$6; //@line 343 "lauxlib.c"
      var $7=$1; //@line 345 "lauxlib.c"
      _luaL_buffinit($7, $b); //@line 345 "lauxlib.c"
      __label__ = 3; break; //@line 346 "lauxlib.c"
    case 3: 
      var $9=$2; //@line 346 "lauxlib.c"
      var $10=$3; //@line 346 "lauxlib.c"
      var $11=_strstr($9, $10); //@line 346 "lauxlib.c"
      $wild=$11; //@line 346 "lauxlib.c"
      var $12=(($11)|0)!=0; //@line 346 "lauxlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 346 "lauxlib.c"
    case 4: 
      var $14=$2; //@line 347 "lauxlib.c"
      var $15=$wild; //@line 347 "lauxlib.c"
      var $16=$2; //@line 347 "lauxlib.c"
      var $17=$15; //@line 347 "lauxlib.c"
      var $18=$16; //@line 347 "lauxlib.c"
      var $19=((($17)-($18))|0); //@line 347 "lauxlib.c"
      _luaL_addlstring($b, $14, $19); //@line 347 "lauxlib.c"
      var $20=$4; //@line 348 "lauxlib.c"
      _luaL_addstring($b, $20); //@line 348 "lauxlib.c"
      var $21=$wild; //@line 349 "lauxlib.c"
      var $22=$l; //@line 349 "lauxlib.c"
      var $23=(($21+$22)|0); //@line 349 "lauxlib.c"
      $2=$23; //@line 349 "lauxlib.c"
      __label__ = 3; break; //@line 350 "lauxlib.c"
    case 5: 
      var $25=$2; //@line 351 "lauxlib.c"
      _luaL_addstring($b, $25); //@line 351 "lauxlib.c"
      _luaL_pushresult($b); //@line 352 "lauxlib.c"
      var $26=$1; //@line 353 "lauxlib.c"
      var $27=_lua_tolstring($26, -1, 0); //@line 353 "lauxlib.c"
      STACKTOP = __stackBase__;
      return $27; //@line 353 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z4getSP9lua_StatePvPj($L, $ud, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ls;
      $2=$L;
      $3=$ud;
      $4=$size;
      var $5=$3; //@line 600 "lauxlib.c"
      var $6=$5; //@line 600 "lauxlib.c"
      $ls=$6; //@line 600 "lauxlib.c"
      var $7=$ls; //@line 602 "lauxlib.c"
      var $8=(($7+4)|0); //@line 602 "lauxlib.c"
      var $9=HEAP32[(($8)>>2)]; //@line 602 "lauxlib.c"
      var $10=(($9)|0)==0; //@line 602 "lauxlib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 602 "lauxlib.c"
    case 3: 
      $1=0; //@line 602 "lauxlib.c"
      __label__ = 5; break; //@line 602 "lauxlib.c"
    case 4: 
      var $13=$ls; //@line 603 "lauxlib.c"
      var $14=(($13+4)|0); //@line 603 "lauxlib.c"
      var $15=HEAP32[(($14)>>2)]; //@line 603 "lauxlib.c"
      var $16=$4; //@line 603 "lauxlib.c"
      HEAP32[(($16)>>2)]=$15; //@line 603 "lauxlib.c"
      var $17=$ls; //@line 604 "lauxlib.c"
      var $18=(($17+4)|0); //@line 604 "lauxlib.c"
      HEAP32[(($18)>>2)]=0; //@line 604 "lauxlib.c"
      var $19=$ls; //@line 605 "lauxlib.c"
      var $20=(($19)|0); //@line 605 "lauxlib.c"
      var $21=HEAP32[(($20)>>2)]; //@line 605 "lauxlib.c"
      $1=$21; //@line 605 "lauxlib.c"
      __label__ = 5; break; //@line 605 "lauxlib.c"
    case 5: 
      var $23=$1; //@line 606 "lauxlib.c"
      ;
      return $23; //@line 606 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_addlstring($B, $s, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$B;
      $2=$s;
      $3=$l;
      __label__ = 3; break; //@line 437 "lauxlib.c"
    case 3: 
      var $5=$3; //@line 437 "lauxlib.c"
      var $6=((($5)-(1))|0); //@line 437 "lauxlib.c"
      $3=$6; //@line 437 "lauxlib.c"
      var $7=(($5)|0)!=0; //@line 437 "lauxlib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 437 "lauxlib.c"
    case 4: 
      var $9=$1; //@line 438 "lauxlib.c"
      var $10=(($9)|0); //@line 438 "lauxlib.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 438 "lauxlib.c"
      var $12=$1; //@line 438 "lauxlib.c"
      var $13=(($12+12)|0); //@line 438 "lauxlib.c"
      var $14=(($13)|0); //@line 438 "lauxlib.c"
      var $15=(($14+8192)|0); //@line 438 "lauxlib.c"
      var $16=(($11)>>>0) < (($15)>>>0); //@line 438 "lauxlib.c"
      if ($16) { var $22 = 1;__label__ = 6; break; } else { __label__ = 5; break; } //@line 438 "lauxlib.c"
    case 5: 
      var $18=$1; //@line 438 "lauxlib.c"
      var $19=_luaL_prepbuffer($18); //@line 438 "lauxlib.c"
      var $20=(($19)|0)!=0; //@line 438 "lauxlib.c"
      var $22 = $20;__label__ = 6; break; //@line 438 "lauxlib.c"
    case 6: 
      var $22;
      var $23=$2; //@line 438 "lauxlib.c"
      var $24=(($23+1)|0); //@line 438 "lauxlib.c"
      $2=$24; //@line 438 "lauxlib.c"
      var $25=HEAP8[($23)]; //@line 438 "lauxlib.c"
      var $26=$1; //@line 438 "lauxlib.c"
      var $27=(($26)|0); //@line 438 "lauxlib.c"
      var $28=HEAP32[(($27)>>2)]; //@line 438 "lauxlib.c"
      var $29=(($28+1)|0); //@line 438 "lauxlib.c"
      HEAP32[(($27)>>2)]=$29; //@line 438 "lauxlib.c"
      HEAP8[($28)]=$25; //@line 438 "lauxlib.c"
      __label__ = 3; break; //@line 438 "lauxlib.c"
    case 7: 
      ;
      return; //@line 439 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_addstring($B, $s) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$B;
  $2=$s;
  var $3=$1; //@line 443 "lauxlib.c"
  var $4=$2; //@line 443 "lauxlib.c"
  var $5=$2; //@line 443 "lauxlib.c"
  var $6=_strlen($5); //@line 443 "lauxlib.c"
  _luaL_addlstring($3, $4, $6); //@line 443 "lauxlib.c"
  ;
  return; //@line 444 "lauxlib.c"
}


function _luaL_pushresult($B) {
  ;
  var __label__;

  var $1;
  $1=$B;
  var $2=$1; //@line 448 "lauxlib.c"
  var $3=__Z11emptybufferP11luaL_Buffer($2); //@line 448 "lauxlib.c"
  var $4=$1; //@line 449 "lauxlib.c"
  var $5=(($4+8)|0); //@line 449 "lauxlib.c"
  var $6=HEAP32[(($5)>>2)]; //@line 449 "lauxlib.c"
  var $7=$1; //@line 449 "lauxlib.c"
  var $8=(($7+4)|0); //@line 449 "lauxlib.c"
  var $9=HEAP32[(($8)>>2)]; //@line 449 "lauxlib.c"
  _lua_concat($6, $9); //@line 449 "lauxlib.c"
  var $10=$1; //@line 450 "lauxlib.c"
  var $11=(($10+4)|0); //@line 450 "lauxlib.c"
  HEAP32[(($11)>>2)]=1; //@line 450 "lauxlib.c"
  ;
  return; //@line 451 "lauxlib.c"
}


function _luaL_prepbuffer($B) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$B;
      var $2=$1; //@line 430 "lauxlib.c"
      var $3=__Z11emptybufferP11luaL_Buffer($2); //@line 430 "lauxlib.c"
      var $4=(($3)|0)!=0; //@line 430 "lauxlib.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 430 "lauxlib.c"
    case 3: 
      var $6=$1; //@line 431 "lauxlib.c"
      __Z11adjuststackP11luaL_Buffer($6); //@line 431 "lauxlib.c"
      __label__ = 4; break; //@line 431 "lauxlib.c"
    case 4: 
      var $8=$1; //@line 432 "lauxlib.c"
      var $9=(($8+12)|0); //@line 432 "lauxlib.c"
      var $10=(($9)|0); //@line 432 "lauxlib.c"
      ;
      return $10; //@line 432 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11emptybufferP11luaL_Buffer($B) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $l;
      $2=$B;
      var $3=$2; //@line 399 "lauxlib.c"
      var $4=(($3)|0); //@line 399 "lauxlib.c"
      var $5=HEAP32[(($4)>>2)]; //@line 399 "lauxlib.c"
      var $6=$2; //@line 399 "lauxlib.c"
      var $7=(($6+12)|0); //@line 399 "lauxlib.c"
      var $8=(($7)|0); //@line 399 "lauxlib.c"
      var $9=$5; //@line 399 "lauxlib.c"
      var $10=$8; //@line 399 "lauxlib.c"
      var $11=((($9)-($10))|0); //@line 399 "lauxlib.c"
      $l=$11; //@line 399 "lauxlib.c"
      var $12=$l; //@line 400 "lauxlib.c"
      var $13=(($12)|0)==0; //@line 400 "lauxlib.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 400 "lauxlib.c"
    case 3: 
      $1=0; //@line 400 "lauxlib.c"
      __label__ = 5; break; //@line 400 "lauxlib.c"
    case 4: 
      var $16=$2; //@line 402 "lauxlib.c"
      var $17=(($16+8)|0); //@line 402 "lauxlib.c"
      var $18=HEAP32[(($17)>>2)]; //@line 402 "lauxlib.c"
      var $19=$2; //@line 402 "lauxlib.c"
      var $20=(($19+12)|0); //@line 402 "lauxlib.c"
      var $21=(($20)|0); //@line 402 "lauxlib.c"
      var $22=$l; //@line 402 "lauxlib.c"
      _lua_pushlstring($18, $21, $22); //@line 402 "lauxlib.c"
      var $23=$2; //@line 403 "lauxlib.c"
      var $24=(($23+12)|0); //@line 403 "lauxlib.c"
      var $25=(($24)|0); //@line 403 "lauxlib.c"
      var $26=$2; //@line 403 "lauxlib.c"
      var $27=(($26)|0); //@line 403 "lauxlib.c"
      HEAP32[(($27)>>2)]=$25; //@line 403 "lauxlib.c"
      var $28=$2; //@line 404 "lauxlib.c"
      var $29=(($28+4)|0); //@line 404 "lauxlib.c"
      var $30=HEAP32[(($29)>>2)]; //@line 404 "lauxlib.c"
      var $31=((($30)+(1))|0); //@line 404 "lauxlib.c"
      HEAP32[(($29)>>2)]=$31; //@line 404 "lauxlib.c"
      $1=1; //@line 405 "lauxlib.c"
      __label__ = 5; break; //@line 405 "lauxlib.c"
    case 5: 
      var $33=$1; //@line 407 "lauxlib.c"
      ;
      return $33; //@line 407 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11adjuststackP11luaL_Buffer($B) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $toget;
      var $toplen;
      var $l;
      $1=$B;
      var $2=$1; //@line 411 "lauxlib.c"
      var $3=(($2+4)|0); //@line 411 "lauxlib.c"
      var $4=HEAP32[(($3)>>2)]; //@line 411 "lauxlib.c"
      var $5=(($4)|0) > 1; //@line 411 "lauxlib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 11; break; } //@line 411 "lauxlib.c"
    case 3: 
      var $7=$1; //@line 412 "lauxlib.c"
      var $8=(($7+8)|0); //@line 412 "lauxlib.c"
      var $9=HEAP32[(($8)>>2)]; //@line 412 "lauxlib.c"
      $L=$9; //@line 412 "lauxlib.c"
      $toget=1; //@line 413 "lauxlib.c"
      var $10=$L; //@line 414 "lauxlib.c"
      var $11=_lua_objlen($10, -1); //@line 414 "lauxlib.c"
      $toplen=$11; //@line 414 "lauxlib.c"
      __label__ = 4; break; //@line 415 "lauxlib.c"
    case 4: 
      var $13=$L; //@line 416 "lauxlib.c"
      var $14=$toget; //@line 416 "lauxlib.c"
      var $15=((($14)+(1))|0); //@line 416 "lauxlib.c"
      var $16=(((-$15))|0); //@line 416 "lauxlib.c"
      var $17=_lua_objlen($13, $16); //@line 416 "lauxlib.c"
      $l=$17; //@line 416 "lauxlib.c"
      var $18=$1; //@line 417 "lauxlib.c"
      var $19=(($18+4)|0); //@line 417 "lauxlib.c"
      var $20=HEAP32[(($19)>>2)]; //@line 417 "lauxlib.c"
      var $21=$toget; //@line 417 "lauxlib.c"
      var $22=((($20)-($21))|0); //@line 417 "lauxlib.c"
      var $23=((($22)+(1))|0); //@line 417 "lauxlib.c"
      var $24=(($23)|0) >= 10; //@line 417 "lauxlib.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 417 "lauxlib.c"
    case 5: 
      var $26=$toplen; //@line 417 "lauxlib.c"
      var $27=$l; //@line 417 "lauxlib.c"
      var $28=(($26)>>>0) > (($27)>>>0); //@line 417 "lauxlib.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 417 "lauxlib.c"
    case 6: 
      var $30=$l; //@line 418 "lauxlib.c"
      var $31=$toplen; //@line 418 "lauxlib.c"
      var $32=((($31)+($30))|0); //@line 418 "lauxlib.c"
      $toplen=$32; //@line 418 "lauxlib.c"
      var $33=$toget; //@line 419 "lauxlib.c"
      var $34=((($33)+(1))|0); //@line 419 "lauxlib.c"
      $toget=$34; //@line 419 "lauxlib.c"
      __label__ = 8; break; //@line 420 "lauxlib.c"
    case 7: 
      __label__ = 10; break; //@line 421 "lauxlib.c"
    case 8: 
      __label__ = 9; break; //@line 422 "lauxlib.c"
    case 9: 
      var $38=$toget; //@line 422 "lauxlib.c"
      var $39=$1; //@line 422 "lauxlib.c"
      var $40=(($39+4)|0); //@line 422 "lauxlib.c"
      var $41=HEAP32[(($40)>>2)]; //@line 422 "lauxlib.c"
      var $42=(($38)|0) < (($41)|0); //@line 422 "lauxlib.c"
      if ($42) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 422 "lauxlib.c"
    case 10: 
      var $44=$L; //@line 423 "lauxlib.c"
      var $45=$toget; //@line 423 "lauxlib.c"
      _lua_concat($44, $45); //@line 423 "lauxlib.c"
      var $46=$1; //@line 424 "lauxlib.c"
      var $47=(($46+4)|0); //@line 424 "lauxlib.c"
      var $48=HEAP32[(($47)>>2)]; //@line 424 "lauxlib.c"
      var $49=$toget; //@line 424 "lauxlib.c"
      var $50=((($48)-($49))|0); //@line 424 "lauxlib.c"
      var $51=((($50)+(1))|0); //@line 424 "lauxlib.c"
      var $52=$1; //@line 424 "lauxlib.c"
      var $53=(($52+4)|0); //@line 424 "lauxlib.c"
      HEAP32[(($53)>>2)]=$51; //@line 424 "lauxlib.c"
      __label__ = 11; break; //@line 425 "lauxlib.c"
    case 11: 
      ;
      return; //@line 426 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11adjuststackP11luaL_Buffer["X"]=1;

function _luaL_addvalue($B) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $L;
      var $vl=__stackBase__;
      var $s;
      $1=$B;
      var $2=$1; //@line 455 "lauxlib.c"
      var $3=(($2+8)|0); //@line 455 "lauxlib.c"
      var $4=HEAP32[(($3)>>2)]; //@line 455 "lauxlib.c"
      $L=$4; //@line 455 "lauxlib.c"
      var $5=$L; //@line 457 "lauxlib.c"
      var $6=_lua_tolstring($5, -1, $vl); //@line 457 "lauxlib.c"
      $s=$6; //@line 457 "lauxlib.c"
      var $7=HEAPU32[(($vl)>>2)]; //@line 458 "lauxlib.c"
      var $8=$1; //@line 458 "lauxlib.c"
      var $9=(($8)|0); //@line 458 "lauxlib.c"
      var $10=HEAP32[(($9)>>2)]; //@line 458 "lauxlib.c"
      var $11=$1; //@line 458 "lauxlib.c"
      var $12=(($11+12)|0); //@line 458 "lauxlib.c"
      var $13=(($12)|0); //@line 458 "lauxlib.c"
      var $14=$10; //@line 458 "lauxlib.c"
      var $15=$13; //@line 458 "lauxlib.c"
      var $16=((($14)-($15))|0); //@line 458 "lauxlib.c"
      var $17=(((8192)-($16))|0); //@line 458 "lauxlib.c"
      var $18=(($7)>>>0) <= (($17)>>>0); //@line 458 "lauxlib.c"
      if ($18) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 458 "lauxlib.c"
    case 3: 
      var $20=$1; //@line 459 "lauxlib.c"
      var $21=(($20)|0); //@line 459 "lauxlib.c"
      var $22=HEAP32[(($21)>>2)]; //@line 459 "lauxlib.c"
      var $23=$s; //@line 459 "lauxlib.c"
      var $24=HEAP32[(($vl)>>2)]; //@line 459 "lauxlib.c"
      _memcpy($22, $23, $24, 1); //@line 459 "lauxlib.c"
      var $25=HEAP32[(($vl)>>2)]; //@line 460 "lauxlib.c"
      var $26=$1; //@line 460 "lauxlib.c"
      var $27=(($26)|0); //@line 460 "lauxlib.c"
      var $28=HEAP32[(($27)>>2)]; //@line 460 "lauxlib.c"
      var $29=(($28+$25)|0); //@line 460 "lauxlib.c"
      HEAP32[(($27)>>2)]=$29; //@line 460 "lauxlib.c"
      var $30=$L; //@line 461 "lauxlib.c"
      _lua_settop($30, -2); //@line 461 "lauxlib.c"
      __label__ = 7; break; //@line 462 "lauxlib.c"
    case 4: 
      var $32=$1; //@line 464 "lauxlib.c"
      var $33=__Z11emptybufferP11luaL_Buffer($32); //@line 464 "lauxlib.c"
      var $34=(($33)|0)!=0; //@line 464 "lauxlib.c"
      if ($34) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 464 "lauxlib.c"
    case 5: 
      var $36=$L; //@line 465 "lauxlib.c"
      _lua_insert($36, -2); //@line 465 "lauxlib.c"
      __label__ = 6; break; //@line 465 "lauxlib.c"
    case 6: 
      var $38=$1; //@line 466 "lauxlib.c"
      var $39=(($38+4)|0); //@line 466 "lauxlib.c"
      var $40=HEAP32[(($39)>>2)]; //@line 466 "lauxlib.c"
      var $41=((($40)+(1))|0); //@line 466 "lauxlib.c"
      HEAP32[(($39)>>2)]=$41; //@line 466 "lauxlib.c"
      var $42=$1; //@line 467 "lauxlib.c"
      __Z11adjuststackP11luaL_Buffer($42); //@line 467 "lauxlib.c"
      __label__ = 7; break; //@line 468 "lauxlib.c"
    case 7: 
      STACKTOP = __stackBase__;
      return; //@line 469 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_addvalue["X"]=1;

function _luaL_ref($L, $t) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ref;
      $2=$L;
      $3=$t;
      var $4=$3; //@line 483 "lauxlib.c"
      var $5=(($4)|0) > 0; //@line 483 "lauxlib.c"
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 483 "lauxlib.c"
    case 3: 
      var $7=$3; //@line 483 "lauxlib.c"
      var $8=(($7)|0) <= -10000; //@line 483 "lauxlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 483 "lauxlib.c"
    case 4: 
      var $10=$3; //@line 483 "lauxlib.c"
      var $18 = $10;__label__ = 6; break; //@line 483 "lauxlib.c"
    case 5: 
      var $12=$2; //@line 483 "lauxlib.c"
      var $13=_lua_gettop($12); //@line 483 "lauxlib.c"
      var $14=$3; //@line 483 "lauxlib.c"
      var $15=((($13)+($14))|0); //@line 483 "lauxlib.c"
      var $16=((($15)+(1))|0); //@line 483 "lauxlib.c"
      var $18 = $16;__label__ = 6; break; //@line 483 "lauxlib.c"
    case 6: 
      var $18; //@line 483 "lauxlib.c"
      $3=$18; //@line 483 "lauxlib.c"
      var $19=$2; //@line 484 "lauxlib.c"
      var $20=_lua_type($19, -1); //@line 484 "lauxlib.c"
      var $21=(($20)|0)==0; //@line 484 "lauxlib.c"
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 484 "lauxlib.c"
    case 7: 
      var $23=$2; //@line 485 "lauxlib.c"
      _lua_settop($23, -2); //@line 485 "lauxlib.c"
      $1=-1; //@line 486 "lauxlib.c"
      __label__ = 12; break; //@line 486 "lauxlib.c"
    case 8: 
      var $25=$2; //@line 488 "lauxlib.c"
      var $26=$3; //@line 488 "lauxlib.c"
      _lua_rawgeti($25, $26, 0); //@line 488 "lauxlib.c"
      var $27=$2; //@line 489 "lauxlib.c"
      var $28=_lua_tointeger($27, -1); //@line 489 "lauxlib.c"
      $ref=$28; //@line 489 "lauxlib.c"
      var $29=$2; //@line 490 "lauxlib.c"
      _lua_settop($29, -2); //@line 490 "lauxlib.c"
      var $30=$ref; //@line 491 "lauxlib.c"
      var $31=(($30)|0)!=0; //@line 491 "lauxlib.c"
      if ($31) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 491 "lauxlib.c"
    case 9: 
      var $33=$2; //@line 492 "lauxlib.c"
      var $34=$3; //@line 492 "lauxlib.c"
      var $35=$ref; //@line 492 "lauxlib.c"
      _lua_rawgeti($33, $34, $35); //@line 492 "lauxlib.c"
      var $36=$2; //@line 493 "lauxlib.c"
      var $37=$3; //@line 493 "lauxlib.c"
      _lua_rawseti($36, $37, 0); //@line 493 "lauxlib.c"
      __label__ = 11; break; //@line 494 "lauxlib.c"
    case 10: 
      var $39=$2; //@line 496 "lauxlib.c"
      var $40=$3; //@line 496 "lauxlib.c"
      var $41=_lua_objlen($39, $40); //@line 496 "lauxlib.c"
      $ref=$41; //@line 496 "lauxlib.c"
      var $42=$ref; //@line 497 "lauxlib.c"
      var $43=((($42)+(1))|0); //@line 497 "lauxlib.c"
      $ref=$43; //@line 497 "lauxlib.c"
      __label__ = 11; break; //@line 498 "lauxlib.c"
    case 11: 
      var $45=$2; //@line 499 "lauxlib.c"
      var $46=$3; //@line 499 "lauxlib.c"
      var $47=$ref; //@line 499 "lauxlib.c"
      _lua_rawseti($45, $46, $47); //@line 499 "lauxlib.c"
      var $48=$ref; //@line 500 "lauxlib.c"
      $1=$48; //@line 500 "lauxlib.c"
      __label__ = 12; break; //@line 500 "lauxlib.c"
    case 12: 
      var $50=$1; //@line 501 "lauxlib.c"
      ;
      return $50; //@line 501 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_ref["X"]=1;

function _luaL_unref($L, $t, $ref) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$t;
      $3=$ref;
      var $4=$3; //@line 505 "lauxlib.c"
      var $5=(($4)|0) >= 0; //@line 505 "lauxlib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 8; break; } //@line 505 "lauxlib.c"
    case 3: 
      var $7=$2; //@line 506 "lauxlib.c"
      var $8=(($7)|0) > 0; //@line 506 "lauxlib.c"
      if ($8) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 506 "lauxlib.c"
    case 4: 
      var $10=$2; //@line 506 "lauxlib.c"
      var $11=(($10)|0) <= -10000; //@line 506 "lauxlib.c"
      if ($11) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 506 "lauxlib.c"
    case 5: 
      var $13=$2; //@line 506 "lauxlib.c"
      var $21 = $13;__label__ = 7; break; //@line 506 "lauxlib.c"
    case 6: 
      var $15=$1; //@line 506 "lauxlib.c"
      var $16=_lua_gettop($15); //@line 506 "lauxlib.c"
      var $17=$2; //@line 506 "lauxlib.c"
      var $18=((($16)+($17))|0); //@line 506 "lauxlib.c"
      var $19=((($18)+(1))|0); //@line 506 "lauxlib.c"
      var $21 = $19;__label__ = 7; break; //@line 506 "lauxlib.c"
    case 7: 
      var $21; //@line 506 "lauxlib.c"
      $2=$21; //@line 506 "lauxlib.c"
      var $22=$1; //@line 507 "lauxlib.c"
      var $23=$2; //@line 507 "lauxlib.c"
      _lua_rawgeti($22, $23, 0); //@line 507 "lauxlib.c"
      var $24=$1; //@line 508 "lauxlib.c"
      var $25=$2; //@line 508 "lauxlib.c"
      var $26=$3; //@line 508 "lauxlib.c"
      _lua_rawseti($24, $25, $26); //@line 508 "lauxlib.c"
      var $27=$1; //@line 509 "lauxlib.c"
      var $28=$3; //@line 509 "lauxlib.c"
      _lua_pushinteger($27, $28); //@line 509 "lauxlib.c"
      var $29=$1; //@line 510 "lauxlib.c"
      var $30=$2; //@line 510 "lauxlib.c"
      _lua_rawseti($29, $30, 0); //@line 510 "lauxlib.c"
      __label__ = 8; break; //@line 511 "lauxlib.c"
    case 8: 
      ;
      return; //@line 512 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_loadfile($L, $filename) {
  var __stackBase__  = STACKTOP; STACKTOP += 8200; _memset(__stackBase__, 0, 8200);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $lf=__stackBase__;
      var $status;
      var $readstatus;
      var $c;
      var $fnameindex;
      $2=$L;
      $3=$filename;
      var $4=$2; //@line 556 "lauxlib.c"
      var $5=_lua_gettop($4); //@line 556 "lauxlib.c"
      var $6=((($5)+(1))|0); //@line 556 "lauxlib.c"
      $fnameindex=$6; //@line 556 "lauxlib.c"
      var $7=(($lf)|0); //@line 557 "lauxlib.c"
      HEAP32[(($7)>>2)]=0; //@line 557 "lauxlib.c"
      var $8=$3; //@line 558 "lauxlib.c"
      var $9=(($8)|0)==0; //@line 558 "lauxlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 558 "lauxlib.c"
    case 3: 
      var $11=$2; //@line 559 "lauxlib.c"
      _lua_pushlstring($11, ((STRING_TABLE.__str15257)|0), 6); //@line 559 "lauxlib.c"
      var $12=HEAP32[((_stdin)>>2)]; //@line 560 "lauxlib.c"
      var $13=(($lf+4)|0); //@line 560 "lauxlib.c"
      HEAP32[(($13)>>2)]=$12; //@line 560 "lauxlib.c"
      __label__ = 7; break; //@line 561 "lauxlib.c"
    case 4: 
      var $15=$2; //@line 563 "lauxlib.c"
      var $16=$3; //@line 563 "lauxlib.c"
      var $17=_lua_pushfstring($15, ((STRING_TABLE.__str16258)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$16,tempInt)); //@line 563 "lauxlib.c"
      var $18=$3; //@line 564 "lauxlib.c"
      var $19=_fopen($18, ((STRING_TABLE.__str17259)|0)); //@line 564 "lauxlib.c"
      var $20=(($lf+4)|0); //@line 564 "lauxlib.c"
      HEAP32[(($20)>>2)]=$19; //@line 564 "lauxlib.c"
      var $21=(($lf+4)|0); //@line 565 "lauxlib.c"
      var $22=HEAP32[(($21)>>2)]; //@line 565 "lauxlib.c"
      var $23=(($22)|0)==0; //@line 565 "lauxlib.c"
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 565 "lauxlib.c"
    case 5: 
      var $25=$2; //@line 565 "lauxlib.c"
      var $26=$fnameindex; //@line 565 "lauxlib.c"
      var $27=__Z7errfileP9lua_StatePKci($25, ((STRING_TABLE.__str18260)|0), $26); //@line 565 "lauxlib.c"
      $1=$27; //@line 565 "lauxlib.c"
      __label__ = 31; break; //@line 565 "lauxlib.c"
    case 6: 
      __label__ = 7; break; //@line 566 "lauxlib.c"
    case 7: 
      var $30=(($lf+4)|0); //@line 567 "lauxlib.c"
      var $31=HEAP32[(($30)>>2)]; //@line 567 "lauxlib.c"
      var $32=__IO_getc($31); //@line 567 "lauxlib.c"
      $c=$32; //@line 567 "lauxlib.c"
      var $33=$c; //@line 568 "lauxlib.c"
      var $34=(($33)|0)==35; //@line 568 "lauxlib.c"
      if ($34) { __label__ = 8; break; } else { __label__ = 16; break; } //@line 568 "lauxlib.c"
    case 8: 
      var $36=(($lf)|0); //@line 569 "lauxlib.c"
      HEAP32[(($36)>>2)]=1; //@line 569 "lauxlib.c"
      __label__ = 9; break; //@line 570 "lauxlib.c"
    case 9: 
      var $38=(($lf+4)|0); //@line 570 "lauxlib.c"
      var $39=HEAP32[(($38)>>2)]; //@line 570 "lauxlib.c"
      var $40=__IO_getc($39); //@line 570 "lauxlib.c"
      $c=$40; //@line 570 "lauxlib.c"
      var $41=(($40)|0)!=-1; //@line 570 "lauxlib.c"
      if ($41) { __label__ = 10; break; } else { var $46 = 0;__label__ = 11; break; } //@line 570 "lauxlib.c"
    case 10: 
      var $43=$c; //@line 570 "lauxlib.c"
      var $44=(($43)|0)!=10; //@line 570 "lauxlib.c"
      var $46 = $44;__label__ = 11; break; //@line 570 "lauxlib.c"
    case 11: 
      var $46;
      if ($46) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 570 "lauxlib.c"
    case 12: 
      __label__ = 9; break; //@line 570 "lauxlib.c"
    case 13: 
      var $49=$c; //@line 571 "lauxlib.c"
      var $50=(($49)|0)==10; //@line 571 "lauxlib.c"
      if ($50) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 571 "lauxlib.c"
    case 14: 
      var $52=(($lf+4)|0); //@line 571 "lauxlib.c"
      var $53=HEAP32[(($52)>>2)]; //@line 571 "lauxlib.c"
      var $54=__IO_getc($53); //@line 571 "lauxlib.c"
      $c=$54; //@line 571 "lauxlib.c"
      __label__ = 15; break; //@line 571 "lauxlib.c"
    case 15: 
      __label__ = 16; break; //@line 572 "lauxlib.c"
    case 16: 
      var $57=$c; //@line 573 "lauxlib.c"
      var $58=HEAP8[(((STRING_TABLE.__str19261)|0))]; //@line 573 "lauxlib.c"
      var $59=(($58 << 24) >> 24); //@line 573 "lauxlib.c"
      var $60=(($57)|0)==(($59)|0); //@line 573 "lauxlib.c"
      if ($60) { __label__ = 17; break; } else { __label__ = 26; break; } //@line 573 "lauxlib.c"
    case 17: 
      var $62=$3; //@line 573 "lauxlib.c"
      var $63=(($62)|0)!=0; //@line 573 "lauxlib.c"
      if ($63) { __label__ = 18; break; } else { __label__ = 26; break; } //@line 573 "lauxlib.c"
    case 18: 
      var $65=$3; //@line 574 "lauxlib.c"
      var $66=(($lf+4)|0); //@line 574 "lauxlib.c"
      var $67=HEAP32[(($66)>>2)]; //@line 574 "lauxlib.c"
      var $68=_freopen($65, ((STRING_TABLE.__str20262)|0), $67); //@line 574 "lauxlib.c"
      var $69=(($lf+4)|0); //@line 574 "lauxlib.c"
      HEAP32[(($69)>>2)]=$68; //@line 574 "lauxlib.c"
      var $70=(($lf+4)|0); //@line 575 "lauxlib.c"
      var $71=HEAP32[(($70)>>2)]; //@line 575 "lauxlib.c"
      var $72=(($71)|0)==0; //@line 575 "lauxlib.c"
      if ($72) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 575 "lauxlib.c"
    case 19: 
      var $74=$2; //@line 575 "lauxlib.c"
      var $75=$fnameindex; //@line 575 "lauxlib.c"
      var $76=__Z7errfileP9lua_StatePKci($74, ((STRING_TABLE.__str21263)|0), $75); //@line 575 "lauxlib.c"
      $1=$76; //@line 575 "lauxlib.c"
      __label__ = 31; break; //@line 575 "lauxlib.c"
    case 20: 
      __label__ = 21; break; //@line 577 "lauxlib.c"
    case 21: 
      var $79=(($lf+4)|0); //@line 577 "lauxlib.c"
      var $80=HEAP32[(($79)>>2)]; //@line 577 "lauxlib.c"
      var $81=__IO_getc($80); //@line 577 "lauxlib.c"
      $c=$81; //@line 577 "lauxlib.c"
      var $82=(($81)|0)!=-1; //@line 577 "lauxlib.c"
      if ($82) { __label__ = 22; break; } else { var $89 = 0;__label__ = 23; break; } //@line 577 "lauxlib.c"
    case 22: 
      var $84=$c; //@line 577 "lauxlib.c"
      var $85=HEAP8[(((STRING_TABLE.__str19261)|0))]; //@line 577 "lauxlib.c"
      var $86=(($85 << 24) >> 24); //@line 577 "lauxlib.c"
      var $87=(($84)|0)!=(($86)|0); //@line 577 "lauxlib.c"
      var $89 = $87;__label__ = 23; break; //@line 577 "lauxlib.c"
    case 23: 
      var $89;
      if ($89) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 577 "lauxlib.c"
    case 24: 
      __label__ = 21; break; //@line 577 "lauxlib.c"
    case 25: 
      var $92=(($lf)|0); //@line 578 "lauxlib.c"
      HEAP32[(($92)>>2)]=0; //@line 578 "lauxlib.c"
      __label__ = 26; break; //@line 579 "lauxlib.c"
    case 26: 
      var $94=$c; //@line 580 "lauxlib.c"
      var $95=(($lf+4)|0); //@line 580 "lauxlib.c"
      var $96=HEAP32[(($95)>>2)]; //@line 580 "lauxlib.c"
      var $97=_ungetc($94, $96); //@line 580 "lauxlib.c"
      var $98=$2; //@line 581 "lauxlib.c"
      var $99=$lf; //@line 581 "lauxlib.c"
      var $100=$2; //@line 581 "lauxlib.c"
      var $101=_lua_tolstring($100, -1, 0); //@line 581 "lauxlib.c"
      var $102=_lua_load($98, 20, $99, $101); //@line 581 "lauxlib.c"
      $status=$102; //@line 581 "lauxlib.c"
      var $103=(($lf+4)|0); //@line 582 "lauxlib.c"
      var $104=HEAP32[(($103)>>2)]; //@line 582 "lauxlib.c"
      var $105=_ferror($104); //@line 582 "lauxlib.c"
      $readstatus=$105; //@line 582 "lauxlib.c"
      var $106=$3; //@line 583 "lauxlib.c"
      var $107=(($106)|0)!=0; //@line 583 "lauxlib.c"
      if ($107) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 583 "lauxlib.c"
    case 27: 
      var $109=(($lf+4)|0); //@line 583 "lauxlib.c"
      var $110=HEAP32[(($109)>>2)]; //@line 583 "lauxlib.c"
      var $111=_fclose($110); //@line 583 "lauxlib.c"
      __label__ = 28; break; //@line 583 "lauxlib.c"
    case 28: 
      var $113=$readstatus; //@line 584 "lauxlib.c"
      var $114=(($113)|0)!=0; //@line 584 "lauxlib.c"
      if ($114) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 584 "lauxlib.c"
    case 29: 
      var $116=$2; //@line 585 "lauxlib.c"
      var $117=$fnameindex; //@line 585 "lauxlib.c"
      _lua_settop($116, $117); //@line 585 "lauxlib.c"
      var $118=$2; //@line 586 "lauxlib.c"
      var $119=$fnameindex; //@line 586 "lauxlib.c"
      var $120=__Z7errfileP9lua_StatePKci($118, ((STRING_TABLE.__str22264)|0), $119); //@line 586 "lauxlib.c"
      $1=$120; //@line 586 "lauxlib.c"
      __label__ = 31; break; //@line 586 "lauxlib.c"
    case 30: 
      var $122=$2; //@line 588 "lauxlib.c"
      var $123=$fnameindex; //@line 588 "lauxlib.c"
      _lua_remove($122, $123); //@line 588 "lauxlib.c"
      var $124=$status; //@line 589 "lauxlib.c"
      $1=$124; //@line 589 "lauxlib.c"
      __label__ = 31; break; //@line 589 "lauxlib.c"
    case 31: 
      var $126=$1; //@line 590 "lauxlib.c"
      STACKTOP = __stackBase__;
      return $126; //@line 590 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaL_loadfile["X"]=1;

function __Z7errfileP9lua_StatePKci($L, $what, $fnameindex) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $serr;
  var $filename;
  $1=$L;
  $2=$what;
  $3=$fnameindex;
  var $4=___errno_location(); //@line 544 "lauxlib.c"
  var $5=HEAP32[(($4)>>2)]; //@line 544 "lauxlib.c"
  var $6=_strerror($5); //@line 544 "lauxlib.c"
  $serr=$6; //@line 544 "lauxlib.c"
  var $7=$1; //@line 545 "lauxlib.c"
  var $8=$3; //@line 545 "lauxlib.c"
  var $9=_lua_tolstring($7, $8, 0); //@line 545 "lauxlib.c"
  var $10=(($9+1)|0); //@line 545 "lauxlib.c"
  $filename=$10; //@line 545 "lauxlib.c"
  var $11=$1; //@line 546 "lauxlib.c"
  var $12=$2; //@line 546 "lauxlib.c"
  var $13=$filename; //@line 546 "lauxlib.c"
  var $14=$serr; //@line 546 "lauxlib.c"
  var $15=_lua_pushfstring($11, ((STRING_TABLE.__str25267)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$12,HEAP32[(((tempInt)+(4))>>2)]=$13,HEAP32[(((tempInt)+(8))>>2)]=$14,tempInt)); //@line 546 "lauxlib.c"
  var $16=$1; //@line 547 "lauxlib.c"
  var $17=$3; //@line 547 "lauxlib.c"
  _lua_remove($16, $17); //@line 547 "lauxlib.c"
  STACKTOP = __stackBase__;
  return 6; //@line 548 "lauxlib.c"
}


function __Z4getFP9lua_StatePvPj($L, $ud, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $lf;
      $2=$L;
      $3=$ud;
      $4=$size;
      var $5=$3; //@line 530 "lauxlib.c"
      var $6=$5; //@line 530 "lauxlib.c"
      $lf=$6; //@line 530 "lauxlib.c"
      var $7=$lf; //@line 532 "lauxlib.c"
      var $8=(($7)|0); //@line 532 "lauxlib.c"
      var $9=HEAP32[(($8)>>2)]; //@line 532 "lauxlib.c"
      var $10=(($9)|0)!=0; //@line 532 "lauxlib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 532 "lauxlib.c"
    case 3: 
      var $12=$lf; //@line 533 "lauxlib.c"
      var $13=(($12)|0); //@line 533 "lauxlib.c"
      HEAP32[(($13)>>2)]=0; //@line 533 "lauxlib.c"
      var $14=$4; //@line 534 "lauxlib.c"
      HEAP32[(($14)>>2)]=1; //@line 534 "lauxlib.c"
      $1=((STRING_TABLE.__str24266)|0); //@line 535 "lauxlib.c"
      __label__ = 10; break; //@line 535 "lauxlib.c"
    case 4: 
      var $16=$lf; //@line 537 "lauxlib.c"
      var $17=(($16+4)|0); //@line 537 "lauxlib.c"
      var $18=HEAP32[(($17)>>2)]; //@line 537 "lauxlib.c"
      var $19=_feof($18); //@line 537 "lauxlib.c"
      var $20=(($19)|0)!=0; //@line 537 "lauxlib.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 537 "lauxlib.c"
    case 5: 
      $1=0; //@line 537 "lauxlib.c"
      __label__ = 10; break; //@line 537 "lauxlib.c"
    case 6: 
      var $23=$lf; //@line 538 "lauxlib.c"
      var $24=(($23+8)|0); //@line 538 "lauxlib.c"
      var $25=(($24)|0); //@line 538 "lauxlib.c"
      var $26=$lf; //@line 538 "lauxlib.c"
      var $27=(($26+4)|0); //@line 538 "lauxlib.c"
      var $28=HEAP32[(($27)>>2)]; //@line 538 "lauxlib.c"
      var $29=_fread($25, 1, 8192, $28); //@line 538 "lauxlib.c"
      var $30=$4; //@line 538 "lauxlib.c"
      HEAP32[(($30)>>2)]=$29; //@line 538 "lauxlib.c"
      var $31=$4; //@line 539 "lauxlib.c"
      var $32=HEAPU32[(($31)>>2)]; //@line 539 "lauxlib.c"
      var $33=(($32)>>>0) > 0; //@line 539 "lauxlib.c"
      if ($33) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 539 "lauxlib.c"
    case 7: 
      var $35=$lf; //@line 539 "lauxlib.c"
      var $36=(($35+8)|0); //@line 539 "lauxlib.c"
      var $37=(($36)|0); //@line 539 "lauxlib.c"
      var $40 = $37;__label__ = 9; break; //@line 539 "lauxlib.c"
    case 8: 
      var $40 = 0;__label__ = 9; break; //@line 539 "lauxlib.c"
    case 9: 
      var $40; //@line 539 "lauxlib.c"
      $1=$40; //@line 539 "lauxlib.c"
      __label__ = 10; break; //@line 539 "lauxlib.c"
    case 10: 
      var $42=$1; //@line 540 "lauxlib.c"
      ;
      return $42; //@line 540 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z4getFP9lua_StatePvPj["X"]=1;

function _luaL_loadbuffer($L, $buff, $size, $name) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  var $ls=__stackBase__;
  $1=$L;
  $2=$buff;
  $3=$size;
  $4=$name;
  var $5=$2; //@line 612 "lauxlib.c"
  var $6=(($ls)|0); //@line 612 "lauxlib.c"
  HEAP32[(($6)>>2)]=$5; //@line 612 "lauxlib.c"
  var $7=$3; //@line 613 "lauxlib.c"
  var $8=(($ls+4)|0); //@line 613 "lauxlib.c"
  HEAP32[(($8)>>2)]=$7; //@line 613 "lauxlib.c"
  var $9=$1; //@line 614 "lauxlib.c"
  var $10=$ls; //@line 614 "lauxlib.c"
  var $11=$4; //@line 614 "lauxlib.c"
  var $12=_lua_load($9, 22, $10, $11); //@line 614 "lauxlib.c"
  STACKTOP = __stackBase__;
  return $12; //@line 614 "lauxlib.c"
}


function _luaL_loadstring($L, $s) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$s;
  var $3=$1; //@line 619 "lauxlib.c"
  var $4=$2; //@line 619 "lauxlib.c"
  var $5=$2; //@line 619 "lauxlib.c"
  var $6=_strlen($5); //@line 619 "lauxlib.c"
  var $7=$2; //@line 619 "lauxlib.c"
  var $8=_luaL_loadbuffer($3, $4, $6, $7); //@line 619 "lauxlib.c"
  ;
  return $8; //@line 619 "lauxlib.c"
}


function _luaL_newstate() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $L;
      var $1=_lua_newstate(24, 0); //@line 648 "lauxlib.c"
      $L=$1; //@line 648 "lauxlib.c"
      var $2=$L; //@line 649 "lauxlib.c"
      var $3=(($2)|0)!=0; //@line 649 "lauxlib.c"
      if ($3) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 649 "lauxlib.c"
    case 3: 
      var $5=$L; //@line 649 "lauxlib.c"
      var $6=_lua_atpanic($5, 26); //@line 649 "lauxlib.c"
      __label__ = 4; break; //@line 649 "lauxlib.c"
    case 4: 
      var $8=$L; //@line 650 "lauxlib.c"
      ;
      return $8; //@line 650 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7l_allocPvS_jj($ud, $ptr, $osize, $nsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$ud;
      $3=$ptr;
      $4=$osize;
      $5=$nsize;
      var $6=$5; //@line 630 "lauxlib.c"
      var $7=(($6)|0)==0; //@line 630 "lauxlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 630 "lauxlib.c"
    case 3: 
      var $9=$3; //@line 631 "lauxlib.c"
      ; //@line 631 "lauxlib.c"
      $1=0; //@line 632 "lauxlib.c"
      __label__ = 5; break; //@line 632 "lauxlib.c"
    case 4: 
      var $11=$3; //@line 635 "lauxlib.c"
      var $12=$5; //@line 635 "lauxlib.c"
      var $13=_realloc($11, $12); //@line 635 "lauxlib.c"
      $1=$13; //@line 635 "lauxlib.c"
      __label__ = 5; break; //@line 635 "lauxlib.c"
    case 5: 
      var $15=$1; //@line 636 "lauxlib.c"
      ;
      return $15; //@line 636 "lauxlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z5panicP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  $1=$L;
  var $2=HEAP32[((_stderr)>>2)]; //@line 641 "lauxlib.c"
  var $3=$1; //@line 642 "lauxlib.c"
  var $4=_lua_tolstring($3, -1, 0); //@line 642 "lauxlib.c"
  var $5=_fprintf($2, ((STRING_TABLE.__str23265)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$4,tempInt)); //@line 642 "lauxlib.c"
  STACKTOP = __stackBase__;
  return 0; //@line 643 "lauxlib.c"
}


function __Z11luaB_assertP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2; //@line 335 "lbaselib.c"
      _luaL_checkany($3, 1); //@line 335 "lbaselib.c"
      var $4=$2; //@line 336 "lbaselib.c"
      var $5=_lua_toboolean($4, 1); //@line 336 "lbaselib.c"
      var $6=(($5)|0)!=0; //@line 336 "lbaselib.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 336 "lbaselib.c"
    case 3: 
      var $8=$2; //@line 337 "lbaselib.c"
      var $9=$2; //@line 337 "lbaselib.c"
      var $10=_luaL_optlstring($9, 2, ((STRING_TABLE.__str78)|0), 0); //@line 337 "lbaselib.c"
      var $11=_luaL_error($8, ((STRING_TABLE.__str77317)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$10,tempInt)); //@line 337 "lbaselib.c"
      $1=$11; //@line 337 "lbaselib.c"
      __label__ = 5; break; //@line 337 "lbaselib.c"
    case 4: 
      var $13=$2; //@line 338 "lbaselib.c"
      var $14=_lua_gettop($13); //@line 338 "lbaselib.c"
      $1=$14; //@line 338 "lbaselib.c"
      __label__ = 5; break; //@line 338 "lbaselib.c"
    case 5: 
      var $16=$1; //@line 339 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $16; //@line 339 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z19luaB_collectgarbageP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $o;
      var $ex;
      var $res;
      var $b;
      $2=$L;
      var $3=$2; //@line 198 "lbaselib.c"
      var $4=_luaL_checkoption($3, 1, ((STRING_TABLE.__str72316)|0), ((__ZZ19luaB_collectgarbageP9lua_StateE4opts)|0)); //@line 198 "lbaselib.c"
      $o=$4; //@line 198 "lbaselib.c"
      var $5=$2; //@line 199 "lbaselib.c"
      var $6=_luaL_optinteger($5, 2, 0); //@line 199 "lbaselib.c"
      $ex=$6; //@line 199 "lbaselib.c"
      var $7=$2; //@line 200 "lbaselib.c"
      var $8=$o; //@line 200 "lbaselib.c"
      var $9=((__ZZ19luaB_collectgarbageP9lua_StateE7optsnum+($8<<2))|0); //@line 200 "lbaselib.c"
      var $10=HEAP32[(($9)>>2)]; //@line 200 "lbaselib.c"
      var $11=$ex; //@line 200 "lbaselib.c"
      var $12=_lua_gc($7, $10, $11); //@line 200 "lbaselib.c"
      $res=$12; //@line 200 "lbaselib.c"
      var $13=$o; //@line 201 "lbaselib.c"
      var $14=((__ZZ19luaB_collectgarbageP9lua_StateE7optsnum+($13<<2))|0); //@line 201 "lbaselib.c"
      var $15=HEAP32[(($14)>>2)]; //@line 201 "lbaselib.c"
      if ((($15)|0) == 3) {
        __label__ = 3; break;
      }
      else if ((($15)|0) == 5) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $17=$2; //@line 203 "lbaselib.c"
      var $18=_lua_gc($17, 4, 0); //@line 203 "lbaselib.c"
      $b=$18; //@line 203 "lbaselib.c"
      var $19=$2; //@line 204 "lbaselib.c"
      var $20=$res; //@line 204 "lbaselib.c"
      var $21=(($20)|0); //@line 204 "lbaselib.c"
      var $22=$b; //@line 204 "lbaselib.c"
      var $23=(($22)|0); //@line 204 "lbaselib.c"
      var $24=($23)/(1024); //@line 204 "lbaselib.c"
      var $25=($21)+($24); //@line 204 "lbaselib.c"
      _lua_pushnumber($19, $25); //@line 204 "lbaselib.c"
      $1=1; //@line 205 "lbaselib.c"
      __label__ = 6; break; //@line 205 "lbaselib.c"
    case 4: 
      var $27=$2; //@line 208 "lbaselib.c"
      var $28=$res; //@line 208 "lbaselib.c"
      _lua_pushboolean($27, $28); //@line 208 "lbaselib.c"
      $1=1; //@line 209 "lbaselib.c"
      __label__ = 6; break; //@line 209 "lbaselib.c"
    case 5: 
      var $30=$2; //@line 212 "lbaselib.c"
      var $31=$res; //@line 212 "lbaselib.c"
      var $32=(($31)|0); //@line 212 "lbaselib.c"
      _lua_pushnumber($30, $32); //@line 212 "lbaselib.c"
      $1=1; //@line 213 "lbaselib.c"
      __label__ = 6; break; //@line 213 "lbaselib.c"
    case 6: 
      var $34=$1; //@line 216 "lbaselib.c"
      ;
      return $34; //@line 216 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z19luaB_collectgarbageP9lua_State["X"]=1;

function __Z11luaB_dofileP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $fname;
      var $n;
      $1=$L;
      var $2=$1; //@line 326 "lbaselib.c"
      var $3=_luaL_optlstring($2, 1, 0, 0); //@line 326 "lbaselib.c"
      $fname=$3; //@line 326 "lbaselib.c"
      var $4=$1; //@line 327 "lbaselib.c"
      var $5=_lua_gettop($4); //@line 327 "lbaselib.c"
      $n=$5; //@line 327 "lbaselib.c"
      var $6=$1; //@line 328 "lbaselib.c"
      var $7=$fname; //@line 328 "lbaselib.c"
      var $8=_luaL_loadfile($6, $7); //@line 328 "lbaselib.c"
      var $9=(($8)|0)!=0; //@line 328 "lbaselib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 328 "lbaselib.c"
    case 3: 
      var $11=$1; //@line 328 "lbaselib.c"
      var $12=_lua_error($11); //@line 328 "lbaselib.c"
      __label__ = 4; break; //@line 328 "lbaselib.c"
    case 4: 
      var $14=$1; //@line 329 "lbaselib.c"
      _lua_call($14, 0, -1); //@line 329 "lbaselib.c"
      var $15=$1; //@line 330 "lbaselib.c"
      var $16=_lua_gettop($15); //@line 330 "lbaselib.c"
      var $17=$n; //@line 330 "lbaselib.c"
      var $18=((($16)-($17))|0); //@line 330 "lbaselib.c"
      ;
      return $18; //@line 330 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10luaB_errorP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $level;
      $1=$L;
      var $2=$1; //@line 82 "lbaselib.c"
      var $3=_luaL_optinteger($2, 2, 1); //@line 82 "lbaselib.c"
      $level=$3; //@line 82 "lbaselib.c"
      var $4=$1; //@line 83 "lbaselib.c"
      _lua_settop($4, 1); //@line 83 "lbaselib.c"
      var $5=$1; //@line 84 "lbaselib.c"
      var $6=_lua_isstring($5, 1); //@line 84 "lbaselib.c"
      var $7=(($6)|0)!=0; //@line 84 "lbaselib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 84 "lbaselib.c"
    case 3: 
      var $9=$level; //@line 84 "lbaselib.c"
      var $10=(($9)|0) > 0; //@line 84 "lbaselib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 84 "lbaselib.c"
    case 4: 
      var $12=$1; //@line 85 "lbaselib.c"
      var $13=$level; //@line 85 "lbaselib.c"
      _luaL_where($12, $13); //@line 85 "lbaselib.c"
      var $14=$1; //@line 86 "lbaselib.c"
      _lua_pushvalue($14, 1); //@line 86 "lbaselib.c"
      var $15=$1; //@line 87 "lbaselib.c"
      _lua_concat($15, 2); //@line 87 "lbaselib.c"
      __label__ = 5; break; //@line 88 "lbaselib.c"
    case 5: 
      var $17=$1; //@line 89 "lbaselib.c"
      var $18=_lua_error($17); //@line 89 "lbaselib.c"
      ;
      return $18; //@line 89 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaB_gcinfoP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 188 "lbaselib.c"
  var $3=$1; //@line 188 "lbaselib.c"
  var $4=_lua_gc($3, 3, 0); //@line 188 "lbaselib.c"
  _lua_pushinteger($2, $4); //@line 188 "lbaselib.c"
  ;
  return 1; //@line 189 "lbaselib.c"
}


function __Z12luaB_getfenvP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 134 "lbaselib.c"
      __Z7getfuncP9lua_Statei($2, 1); //@line 134 "lbaselib.c"
      var $3=$1; //@line 135 "lbaselib.c"
      var $4=_lua_iscfunction($3, -1); //@line 135 "lbaselib.c"
      var $5=(($4)|0)!=0; //@line 135 "lbaselib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 135 "lbaselib.c"
    case 3: 
      var $7=$1; //@line 136 "lbaselib.c"
      _lua_pushvalue($7, -10002); //@line 136 "lbaselib.c"
      __label__ = 5; break; //@line 136 "lbaselib.c"
    case 4: 
      var $9=$1; //@line 138 "lbaselib.c"
      _lua_getfenv($9, -1); //@line 138 "lbaselib.c"
      __label__ = 5; break; //@line 138 "lbaselib.c"
    case 5: 
      ;
      return 1; //@line 139 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z17luaB_getmetatableP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2; //@line 94 "lbaselib.c"
      _luaL_checkany($3, 1); //@line 94 "lbaselib.c"
      var $4=$2; //@line 95 "lbaselib.c"
      var $5=_lua_getmetatable($4, 1); //@line 95 "lbaselib.c"
      var $6=(($5)|0)!=0; //@line 95 "lbaselib.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 95 "lbaselib.c"
    case 3: 
      var $8=$2; //@line 96 "lbaselib.c"
      _lua_pushnil($8); //@line 96 "lbaselib.c"
      $1=1; //@line 97 "lbaselib.c"
      __label__ = 5; break; //@line 97 "lbaselib.c"
    case 4: 
      var $10=$2; //@line 99 "lbaselib.c"
      var $11=_luaL_getmetafield($10, 1, ((STRING_TABLE.__str56)|0)); //@line 99 "lbaselib.c"
      $1=1; //@line 100 "lbaselib.c"
      __label__ = 5; break; //@line 100 "lbaselib.c"
    case 5: 
      var $13=$1; //@line 101 "lbaselib.c"
      ;
      return $13; //@line 101 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaB_loadfileP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $fname;
  $1=$L;
  var $2=$1; //@line 286 "lbaselib.c"
  var $3=_luaL_optlstring($2, 1, 0, 0); //@line 286 "lbaselib.c"
  $fname=$3; //@line 286 "lbaselib.c"
  var $4=$1; //@line 287 "lbaselib.c"
  var $5=$1; //@line 287 "lbaselib.c"
  var $6=$fname; //@line 287 "lbaselib.c"
  var $7=_luaL_loadfile($5, $6); //@line 287 "lbaselib.c"
  var $8=__Z8load_auxP9lua_Statei($4, $7); //@line 287 "lbaselib.c"
  ;
  return $8; //@line 287 "lbaselib.c"
}


function __Z9luaB_loadP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $status;
  var $cname;
  $1=$L;
  var $2=$1; //@line 317 "lbaselib.c"
  var $3=_luaL_optlstring($2, 2, ((STRING_TABLE.__str67)|0), 0); //@line 317 "lbaselib.c"
  $cname=$3; //@line 317 "lbaselib.c"
  var $4=$1; //@line 318 "lbaselib.c"
  _luaL_checktype($4, 1, 6); //@line 318 "lbaselib.c"
  var $5=$1; //@line 319 "lbaselib.c"
  _lua_settop($5, 3); //@line 319 "lbaselib.c"
  var $6=$1; //@line 320 "lbaselib.c"
  var $7=$cname; //@line 320 "lbaselib.c"
  var $8=_lua_load($6, 28, 0, $7); //@line 320 "lbaselib.c"
  $status=$8; //@line 320 "lbaselib.c"
  var $9=$1; //@line 321 "lbaselib.c"
  var $10=$status; //@line 321 "lbaselib.c"
  var $11=__Z8load_auxP9lua_Statei($9, $10); //@line 321 "lbaselib.c"
  ;
  return $11; //@line 321 "lbaselib.c"
}


function __Z15luaB_loadstringP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $l=__stackBase__;
  var $s;
  var $chunkname;
  $1=$L;
  var $2=$1; //@line 279 "lbaselib.c"
  var $3=_luaL_checklstring($2, 1, $l); //@line 279 "lbaselib.c"
  $s=$3; //@line 279 "lbaselib.c"
  var $4=$1; //@line 280 "lbaselib.c"
  var $5=$s; //@line 280 "lbaselib.c"
  var $6=_luaL_optlstring($4, 2, $5, 0); //@line 280 "lbaselib.c"
  $chunkname=$6; //@line 280 "lbaselib.c"
  var $7=$1; //@line 281 "lbaselib.c"
  var $8=$1; //@line 281 "lbaselib.c"
  var $9=$s; //@line 281 "lbaselib.c"
  var $10=HEAP32[(($l)>>2)]; //@line 281 "lbaselib.c"
  var $11=$chunkname; //@line 281 "lbaselib.c"
  var $12=_luaL_loadbuffer($8, $9, $10, $11); //@line 281 "lbaselib.c"
  var $13=__Z8load_auxP9lua_Statei($7, $12); //@line 281 "lbaselib.c"
  STACKTOP = __stackBase__;
  return $13; //@line 281 "lbaselib.c"
}


function __Z9luaB_nextP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2; //@line 227 "lbaselib.c"
      _luaL_checktype($3, 1, 5); //@line 227 "lbaselib.c"
      var $4=$2; //@line 228 "lbaselib.c"
      _lua_settop($4, 2); //@line 228 "lbaselib.c"
      var $5=$2; //@line 229 "lbaselib.c"
      var $6=_lua_next($5, 1); //@line 229 "lbaselib.c"
      var $7=(($6)|0)!=0; //@line 229 "lbaselib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 229 "lbaselib.c"
    case 3: 
      $1=2; //@line 230 "lbaselib.c"
      __label__ = 5; break; //@line 230 "lbaselib.c"
    case 4: 
      var $10=$2; //@line 232 "lbaselib.c"
      _lua_pushnil($10); //@line 232 "lbaselib.c"
      $1=1; //@line 233 "lbaselib.c"
      __label__ = 5; break; //@line 233 "lbaselib.c"
    case 5: 
      var $12=$1; //@line 235 "lbaselib.c"
      ;
      return $12; //@line 235 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10luaB_pcallP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $status;
  $1=$L;
  var $2=$1; //@line 376 "lbaselib.c"
  _luaL_checkany($2, 1); //@line 376 "lbaselib.c"
  var $3=$1; //@line 377 "lbaselib.c"
  var $4=$1; //@line 377 "lbaselib.c"
  var $5=_lua_gettop($4); //@line 377 "lbaselib.c"
  var $6=((($5)-(1))|0); //@line 377 "lbaselib.c"
  var $7=_lua_pcall($3, $6, -1, 0); //@line 377 "lbaselib.c"
  $status=$7; //@line 377 "lbaselib.c"
  var $8=$1; //@line 378 "lbaselib.c"
  var $9=$status; //@line 378 "lbaselib.c"
  var $10=(($9)|0)==0; //@line 378 "lbaselib.c"
  var $11=(($10)&1); //@line 378 "lbaselib.c"
  _lua_pushboolean($8, $11); //@line 378 "lbaselib.c"
  var $12=$1; //@line 379 "lbaselib.c"
  _lua_insert($12, 1); //@line 379 "lbaselib.c"
  var $13=$1; //@line 380 "lbaselib.c"
  var $14=_lua_gettop($13); //@line 380 "lbaselib.c"
  ;
  return $14; //@line 380 "lbaselib.c"
}


function __Z10luaB_printP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $i;
      var $s;
      $2=$L;
      var $3=$2; //@line 32 "lbaselib.c"
      var $4=_lua_gettop($3); //@line 32 "lbaselib.c"
      $n=$4; //@line 32 "lbaselib.c"
      var $5=$2; //@line 34 "lbaselib.c"
      _lua_getfield($5, -10002, ((STRING_TABLE.__str20288)|0)); //@line 34 "lbaselib.c"
      $i=1; //@line 35 "lbaselib.c"
      __label__ = 3; break; //@line 35 "lbaselib.c"
    case 3: 
      var $7=$i; //@line 35 "lbaselib.c"
      var $8=$n; //@line 35 "lbaselib.c"
      var $9=(($7)|0) <= (($8)|0); //@line 35 "lbaselib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 35 "lbaselib.c"
    case 4: 
      var $11=$2; //@line 37 "lbaselib.c"
      _lua_pushvalue($11, -1); //@line 37 "lbaselib.c"
      var $12=$2; //@line 38 "lbaselib.c"
      var $13=$i; //@line 38 "lbaselib.c"
      _lua_pushvalue($12, $13); //@line 38 "lbaselib.c"
      var $14=$2; //@line 39 "lbaselib.c"
      _lua_call($14, 1, 1); //@line 39 "lbaselib.c"
      var $15=$2; //@line 40 "lbaselib.c"
      var $16=_lua_tolstring($15, -1, 0); //@line 40 "lbaselib.c"
      $s=$16; //@line 40 "lbaselib.c"
      var $17=$s; //@line 41 "lbaselib.c"
      var $18=(($17)|0)==0; //@line 41 "lbaselib.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 41 "lbaselib.c"
    case 5: 
      var $20=$2; //@line 42 "lbaselib.c"
      var $21=_luaL_error($20, ((STRING_TABLE.__str64)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 42 "lbaselib.c"
      $1=$21; //@line 42 "lbaselib.c"
      __label__ = 11; break; //@line 42 "lbaselib.c"
    case 6: 
      var $23=$i; //@line 44 "lbaselib.c"
      var $24=(($23)|0) > 1; //@line 44 "lbaselib.c"
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 44 "lbaselib.c"
    case 7: 
      var $26=HEAP32[((_stdout)>>2)]; //@line 44 "lbaselib.c"
      var $27=_fputs(((STRING_TABLE.__str65)|0), $26); //@line 44 "lbaselib.c"
      __label__ = 8; break; //@line 44 "lbaselib.c"
    case 8: 
      var $29=$s; //@line 45 "lbaselib.c"
      var $30=HEAP32[((_stdout)>>2)]; //@line 45 "lbaselib.c"
      var $31=_fputs($29, $30); //@line 45 "lbaselib.c"
      var $32=$2; //@line 46 "lbaselib.c"
      _lua_settop($32, -2); //@line 46 "lbaselib.c"
      __label__ = 9; break; //@line 47 "lbaselib.c"
    case 9: 
      var $34=$i; //@line 35 "lbaselib.c"
      var $35=((($34)+(1))|0); //@line 35 "lbaselib.c"
      $i=$35; //@line 35 "lbaselib.c"
      __label__ = 3; break; //@line 35 "lbaselib.c"
    case 10: 
      var $37=HEAP32[((_stdout)>>2)]; //@line 48 "lbaselib.c"
      var $38=_fputs(((STRING_TABLE.__str66)|0), $37); //@line 48 "lbaselib.c"
      $1=0; //@line 49 "lbaselib.c"
      __label__ = 11; break; //@line 49 "lbaselib.c"
    case 11: 
      var $40=$1; //@line 50 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $40; //@line 50 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10luaB_printP9lua_State["X"]=1;

function __Z13luaB_rawequalP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 162 "lbaselib.c"
  _luaL_checkany($2, 1); //@line 162 "lbaselib.c"
  var $3=$1; //@line 163 "lbaselib.c"
  _luaL_checkany($3, 2); //@line 163 "lbaselib.c"
  var $4=$1; //@line 164 "lbaselib.c"
  var $5=$1; //@line 164 "lbaselib.c"
  var $6=_lua_rawequal($5, 1, 2); //@line 164 "lbaselib.c"
  _lua_pushboolean($4, $6); //@line 164 "lbaselib.c"
  ;
  return 1; //@line 165 "lbaselib.c"
}


function __Z11luaB_rawgetP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 170 "lbaselib.c"
  _luaL_checktype($2, 1, 5); //@line 170 "lbaselib.c"
  var $3=$1; //@line 171 "lbaselib.c"
  _luaL_checkany($3, 2); //@line 171 "lbaselib.c"
  var $4=$1; //@line 172 "lbaselib.c"
  _lua_settop($4, 2); //@line 172 "lbaselib.c"
  var $5=$1; //@line 173 "lbaselib.c"
  _lua_rawget($5, 1); //@line 173 "lbaselib.c"
  ;
  return 1; //@line 174 "lbaselib.c"
}


function __Z11luaB_rawsetP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 178 "lbaselib.c"
  _luaL_checktype($2, 1, 5); //@line 178 "lbaselib.c"
  var $3=$1; //@line 179 "lbaselib.c"
  _luaL_checkany($3, 2); //@line 179 "lbaselib.c"
  var $4=$1; //@line 180 "lbaselib.c"
  _luaL_checkany($4, 3); //@line 180 "lbaselib.c"
  var $5=$1; //@line 181 "lbaselib.c"
  _lua_settop($5, 3); //@line 181 "lbaselib.c"
  var $6=$1; //@line 182 "lbaselib.c"
  _lua_rawset($6, 1); //@line 182 "lbaselib.c"
  ;
  return 1; //@line 183 "lbaselib.c"
}


function __Z11luaB_selectP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $i;
      $2=$L;
      var $3=$2; //@line 359 "lbaselib.c"
      var $4=_lua_gettop($3); //@line 359 "lbaselib.c"
      $n=$4; //@line 359 "lbaselib.c"
      var $5=$2; //@line 360 "lbaselib.c"
      var $6=_lua_type($5, 1); //@line 360 "lbaselib.c"
      var $7=(($6)|0)==4; //@line 360 "lbaselib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 360 "lbaselib.c"
    case 3: 
      var $9=$2; //@line 360 "lbaselib.c"
      var $10=_lua_tolstring($9, 1, 0); //@line 360 "lbaselib.c"
      var $11=HEAP8[($10)]; //@line 360 "lbaselib.c"
      var $12=(($11 << 24) >> 24); //@line 360 "lbaselib.c"
      var $13=(($12)|0)==35; //@line 360 "lbaselib.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 360 "lbaselib.c"
    case 4: 
      var $15=$2; //@line 361 "lbaselib.c"
      var $16=$n; //@line 361 "lbaselib.c"
      var $17=((($16)-(1))|0); //@line 361 "lbaselib.c"
      _lua_pushinteger($15, $17); //@line 361 "lbaselib.c"
      $1=1; //@line 362 "lbaselib.c"
      __label__ = 13; break; //@line 362 "lbaselib.c"
    case 5: 
      var $19=$2; //@line 365 "lbaselib.c"
      var $20=_luaL_checkinteger($19, 1); //@line 365 "lbaselib.c"
      $i=$20; //@line 365 "lbaselib.c"
      var $21=$i; //@line 366 "lbaselib.c"
      var $22=(($21)|0) < 0; //@line 366 "lbaselib.c"
      if ($22) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 366 "lbaselib.c"
    case 6: 
      var $24=$n; //@line 366 "lbaselib.c"
      var $25=$i; //@line 366 "lbaselib.c"
      var $26=((($24)+($25))|0); //@line 366 "lbaselib.c"
      $i=$26; //@line 366 "lbaselib.c"
      __label__ = 10; break; //@line 366 "lbaselib.c"
    case 7: 
      var $28=$i; //@line 367 "lbaselib.c"
      var $29=$n; //@line 367 "lbaselib.c"
      var $30=(($28)|0) > (($29)|0); //@line 367 "lbaselib.c"
      if ($30) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 367 "lbaselib.c"
    case 8: 
      var $32=$n; //@line 367 "lbaselib.c"
      $i=$32; //@line 367 "lbaselib.c"
      __label__ = 9; break; //@line 367 "lbaselib.c"
    case 9: 
      __label__ = 10; break; //@line 367 "lbaselib.c"
    case 10: 
      var $35=$i; //@line 368 "lbaselib.c"
      var $36=1 <= (($35)|0); //@line 368 "lbaselib.c"
      if ($36) { var $42 = 1;__label__ = 12; break; } else { __label__ = 11; break; } //@line 368 "lbaselib.c"
    case 11: 
      var $38=$2; //@line 368 "lbaselib.c"
      var $39=_luaL_argerror($38, 1, ((STRING_TABLE.__str63)|0)); //@line 368 "lbaselib.c"
      var $40=(($39)|0)!=0; //@line 368 "lbaselib.c"
      var $42 = $40;__label__ = 12; break; //@line 368 "lbaselib.c"
    case 12: 
      var $42;
      var $43=$n; //@line 369 "lbaselib.c"
      var $44=$i; //@line 369 "lbaselib.c"
      var $45=((($43)-($44))|0); //@line 369 "lbaselib.c"
      $1=$45; //@line 369 "lbaselib.c"
      __label__ = 13; break; //@line 369 "lbaselib.c"
    case 13: 
      var $47=$1; //@line 371 "lbaselib.c"
      ;
      return $47; //@line 371 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaB_selectP9lua_State["X"]=1;

function __Z12luaB_setfenvP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2; //@line 144 "lbaselib.c"
      _luaL_checktype($3, 2, 5); //@line 144 "lbaselib.c"
      var $4=$2; //@line 145 "lbaselib.c"
      __Z7getfuncP9lua_Statei($4, 0); //@line 145 "lbaselib.c"
      var $5=$2; //@line 146 "lbaselib.c"
      _lua_pushvalue($5, 2); //@line 146 "lbaselib.c"
      var $6=$2; //@line 147 "lbaselib.c"
      var $7=_lua_isnumber($6, 1); //@line 147 "lbaselib.c"
      var $8=(($7)|0)!=0; //@line 147 "lbaselib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 147 "lbaselib.c"
    case 3: 
      var $10=$2; //@line 147 "lbaselib.c"
      var $11=_lua_tonumber($10, 1); //@line 147 "lbaselib.c"
      var $12=$11 == 0; //@line 147 "lbaselib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 147 "lbaselib.c"
    case 4: 
      var $14=$2; //@line 149 "lbaselib.c"
      var $15=_lua_pushthread($14); //@line 149 "lbaselib.c"
      var $16=$2; //@line 150 "lbaselib.c"
      _lua_insert($16, -2); //@line 150 "lbaselib.c"
      var $17=$2; //@line 151 "lbaselib.c"
      var $18=_lua_setfenv($17, -2); //@line 151 "lbaselib.c"
      $1=0; //@line 152 "lbaselib.c"
      __label__ = 10; break; //@line 152 "lbaselib.c"
    case 5: 
      var $20=$2; //@line 154 "lbaselib.c"
      var $21=_lua_iscfunction($20, -2); //@line 154 "lbaselib.c"
      var $22=(($21)|0)!=0; //@line 154 "lbaselib.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 154 "lbaselib.c"
    case 6: 
      var $24=$2; //@line 154 "lbaselib.c"
      var $25=_lua_setfenv($24, -2); //@line 154 "lbaselib.c"
      var $26=(($25)|0)==0; //@line 154 "lbaselib.c"
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 154 "lbaselib.c"
    case 7: 
      var $28=$2; //@line 155 "lbaselib.c"
      var $29=_luaL_error($28, ((STRING_TABLE.__str58)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 155 "lbaselib.c"
      __label__ = 8; break; //@line 155 "lbaselib.c"
    case 8: 
      __label__ = 9; break; //@line 155 "lbaselib.c"
    case 9: 
      $1=1; //@line 157 "lbaselib.c"
      __label__ = 10; break; //@line 157 "lbaselib.c"
    case 10: 
      var $33=$1; //@line 158 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $33; //@line 158 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z17luaB_setmetatableP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $t;
      $1=$L;
      var $2=$1; //@line 105 "lbaselib.c"
      var $3=_lua_type($2, 2); //@line 105 "lbaselib.c"
      $t=$3; //@line 105 "lbaselib.c"
      var $4=$1; //@line 106 "lbaselib.c"
      _luaL_checktype($4, 1, 5); //@line 106 "lbaselib.c"
      var $5=$t; //@line 107 "lbaselib.c"
      var $6=(($5)|0)==0; //@line 107 "lbaselib.c"
      if ($6) { var $15 = 1;__label__ = 5; break; } else { __label__ = 3; break; } //@line 107 "lbaselib.c"
    case 3: 
      var $8=$t; //@line 107 "lbaselib.c"
      var $9=(($8)|0)==5; //@line 107 "lbaselib.c"
      if ($9) { var $15 = 1;__label__ = 5; break; } else { __label__ = 4; break; } //@line 107 "lbaselib.c"
    case 4: 
      var $11=$1; //@line 107 "lbaselib.c"
      var $12=_luaL_argerror($11, 2, ((STRING_TABLE.__str55)|0)); //@line 107 "lbaselib.c"
      var $13=(($12)|0)!=0; //@line 107 "lbaselib.c"
      var $15 = $13;__label__ = 5; break; //@line 107 "lbaselib.c"
    case 5: 
      var $15;
      var $16=$1; //@line 109 "lbaselib.c"
      var $17=_luaL_getmetafield($16, 1, ((STRING_TABLE.__str56)|0)); //@line 109 "lbaselib.c"
      var $18=(($17)|0)!=0; //@line 109 "lbaselib.c"
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 109 "lbaselib.c"
    case 6: 
      var $20=$1; //@line 110 "lbaselib.c"
      var $21=_luaL_error($20, ((STRING_TABLE.__str57)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 110 "lbaselib.c"
      __label__ = 7; break; //@line 110 "lbaselib.c"
    case 7: 
      var $23=$1; //@line 111 "lbaselib.c"
      _lua_settop($23, 2); //@line 111 "lbaselib.c"
      var $24=$1; //@line 112 "lbaselib.c"
      var $25=_lua_setmetatable($24, 1); //@line 112 "lbaselib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 113 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaB_tonumberP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $base;
      var $s1;
      var $s2=__stackBase__;
      var $n;
      $2=$L;
      var $3=$2; //@line 54 "lbaselib.c"
      var $4=_luaL_optinteger($3, 2, 10); //@line 54 "lbaselib.c"
      $base=$4; //@line 54 "lbaselib.c"
      var $5=$base; //@line 55 "lbaselib.c"
      var $6=(($5)|0)==10; //@line 55 "lbaselib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 55 "lbaselib.c"
    case 3: 
      var $8=$2; //@line 56 "lbaselib.c"
      _luaL_checkany($8, 1); //@line 56 "lbaselib.c"
      var $9=$2; //@line 57 "lbaselib.c"
      var $10=_lua_isnumber($9, 1); //@line 57 "lbaselib.c"
      var $11=(($10)|0)!=0; //@line 57 "lbaselib.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 57 "lbaselib.c"
    case 4: 
      var $13=$2; //@line 58 "lbaselib.c"
      var $14=$2; //@line 58 "lbaselib.c"
      var $15=_lua_tonumber($14, 1); //@line 58 "lbaselib.c"
      _lua_pushnumber($13, $15); //@line 58 "lbaselib.c"
      $1=1; //@line 59 "lbaselib.c"
      __label__ = 18; break; //@line 59 "lbaselib.c"
    case 5: 
      __label__ = 17; break; //@line 61 "lbaselib.c"
    case 6: 
      var $18=$2; //@line 63 "lbaselib.c"
      var $19=_luaL_checklstring($18, 1, 0); //@line 63 "lbaselib.c"
      $s1=$19; //@line 63 "lbaselib.c"
      var $20=$base; //@line 66 "lbaselib.c"
      var $21=2 <= (($20)|0); //@line 66 "lbaselib.c"
      if ($21) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 66 "lbaselib.c"
    case 7: 
      var $23=$base; //@line 66 "lbaselib.c"
      var $24=(($23)|0) <= 36; //@line 66 "lbaselib.c"
      if ($24) { var $30 = 1;__label__ = 9; break; } else { __label__ = 8; break; } //@line 66 "lbaselib.c"
    case 8: 
      var $26=$2; //@line 66 "lbaselib.c"
      var $27=_luaL_argerror($26, 2, ((STRING_TABLE.__str54)|0)); //@line 66 "lbaselib.c"
      var $28=(($27)|0)!=0; //@line 66 "lbaselib.c"
      var $30 = $28;__label__ = 9; break; //@line 66 "lbaselib.c"
    case 9: 
      var $30;
      var $31=$s1; //@line 67 "lbaselib.c"
      var $32=$base; //@line 67 "lbaselib.c"
      var $33=_strtoul($31, $s2, $32); //@line 67 "lbaselib.c"
      $n=$33; //@line 67 "lbaselib.c"
      var $34=$s1; //@line 68 "lbaselib.c"
      var $35=HEAP32[(($s2)>>2)]; //@line 68 "lbaselib.c"
      var $36=(($34)|0)!=(($35)|0); //@line 68 "lbaselib.c"
      if ($36) { __label__ = 10; break; } else { __label__ = 16; break; } //@line 68 "lbaselib.c"
    case 10: 
      __label__ = 11; break; //@line 69 "lbaselib.c"
    case 11: 
      var $39=HEAP32[(($s2)>>2)]; //@line 69 "lbaselib.c"
      var $40=HEAPU8[($39)]; //@line 69 "lbaselib.c"
      var $41=(($40)&255); //@line 69 "lbaselib.c"
      var $42=_isspace($41); //@line 69 "lbaselib.c"
      var $43=(($42)|0)!=0; //@line 69 "lbaselib.c"
      if ($43) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 69 "lbaselib.c"
    case 12: 
      var $45=HEAP32[(($s2)>>2)]; //@line 69 "lbaselib.c"
      var $46=(($45+1)|0); //@line 69 "lbaselib.c"
      HEAP32[(($s2)>>2)]=$46; //@line 69 "lbaselib.c"
      __label__ = 11; break; //@line 69 "lbaselib.c"
    case 13: 
      var $48=HEAP32[(($s2)>>2)]; //@line 70 "lbaselib.c"
      var $49=HEAP8[($48)]; //@line 70 "lbaselib.c"
      var $50=(($49 << 24) >> 24); //@line 70 "lbaselib.c"
      var $51=(($50)|0)==0; //@line 70 "lbaselib.c"
      if ($51) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 70 "lbaselib.c"
    case 14: 
      var $53=$2; //@line 71 "lbaselib.c"
      var $54=$n; //@line 71 "lbaselib.c"
      var $55=(($54)>>>0); //@line 71 "lbaselib.c"
      _lua_pushnumber($53, $55); //@line 71 "lbaselib.c"
      $1=1; //@line 72 "lbaselib.c"
      __label__ = 18; break; //@line 72 "lbaselib.c"
    case 15: 
      __label__ = 16; break; //@line 74 "lbaselib.c"
    case 16: 
      __label__ = 17; break; //@line 75 "lbaselib.c"
    case 17: 
      var $59=$2; //@line 76 "lbaselib.c"
      _lua_pushnil($59); //@line 76 "lbaselib.c"
      $1=1; //@line 77 "lbaselib.c"
      __label__ = 18; break; //@line 77 "lbaselib.c"
    case 18: 
      var $61=$1; //@line 78 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $61; //@line 78 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaB_tonumberP9lua_State["X"]=1;

function __Z13luaB_tostringP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2; //@line 397 "lbaselib.c"
      _luaL_checkany($3, 1); //@line 397 "lbaselib.c"
      var $4=$2; //@line 398 "lbaselib.c"
      var $5=_luaL_callmeta($4, 1, ((STRING_TABLE.__str49)|0)); //@line 398 "lbaselib.c"
      var $6=(($5)|0)!=0; //@line 398 "lbaselib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 398 "lbaselib.c"
    case 3: 
      $1=1; //@line 399 "lbaselib.c"
      __label__ = 14; break; //@line 399 "lbaselib.c"
    case 4: 
      var $9=$2; //@line 400 "lbaselib.c"
      var $10=_lua_type($9, 1); //@line 400 "lbaselib.c"
      if ((($10)|0) == 3) {
        __label__ = 5; break;
      }
      else if ((($10)|0) == 4) {
        __label__ = 6; break;
      }
      else if ((($10)|0) == 1) {
        __label__ = 7; break;
      }
      else if ((($10)|0) == 0) {
        __label__ = 11; break;
      }
      else {
      __label__ = 12; break;
      }
      
    case 5: 
      var $12=$2; //@line 402 "lbaselib.c"
      var $13=$2; //@line 402 "lbaselib.c"
      var $14=_lua_tolstring($13, 1, 0); //@line 402 "lbaselib.c"
      _lua_pushstring($12, $14); //@line 402 "lbaselib.c"
      __label__ = 13; break; //@line 403 "lbaselib.c"
    case 6: 
      var $16=$2; //@line 405 "lbaselib.c"
      _lua_pushvalue($16, 1); //@line 405 "lbaselib.c"
      __label__ = 13; break; //@line 406 "lbaselib.c"
    case 7: 
      var $18=$2; //@line 408 "lbaselib.c"
      var $19=$2; //@line 408 "lbaselib.c"
      var $20=_lua_toboolean($19, 1); //@line 408 "lbaselib.c"
      var $21=(($20)|0)!=0; //@line 408 "lbaselib.c"
      if ($21) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 408 "lbaselib.c"
    case 8: 
      var $25 = ((STRING_TABLE.__str50)|0);__label__ = 10; break; //@line 408 "lbaselib.c"
    case 9: 
      var $25 = ((STRING_TABLE.__str51)|0);__label__ = 10; break; //@line 408 "lbaselib.c"
    case 10: 
      var $25; //@line 408 "lbaselib.c"
      _lua_pushstring($18, $25); //@line 408 "lbaselib.c"
      __label__ = 13; break; //@line 409 "lbaselib.c"
    case 11: 
      var $27=$2; //@line 411 "lbaselib.c"
      _lua_pushlstring($27, ((STRING_TABLE.__str52)|0), 3); //@line 411 "lbaselib.c"
      __label__ = 13; break; //@line 412 "lbaselib.c"
    case 12: 
      var $29=$2; //@line 414 "lbaselib.c"
      var $30=$2; //@line 414 "lbaselib.c"
      var $31=$2; //@line 414 "lbaselib.c"
      var $32=_lua_type($31, 1); //@line 414 "lbaselib.c"
      var $33=_lua_typename($30, $32); //@line 414 "lbaselib.c"
      var $34=$2; //@line 414 "lbaselib.c"
      var $35=_lua_topointer($34, 1); //@line 414 "lbaselib.c"
      var $36=_lua_pushfstring($29, ((STRING_TABLE.__str53)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$33,HEAP32[(((tempInt)+(4))>>2)]=$35,tempInt)); //@line 414 "lbaselib.c"
      __label__ = 13; break; //@line 415 "lbaselib.c"
    case 13: 
      $1=1; //@line 417 "lbaselib.c"
      __label__ = 14; break; //@line 417 "lbaselib.c"
    case 14: 
      var $39=$1; //@line 418 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $39; //@line 418 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9luaB_typeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 220 "lbaselib.c"
  _luaL_checkany($2, 1); //@line 220 "lbaselib.c"
  var $3=$1; //@line 221 "lbaselib.c"
  var $4=$1; //@line 221 "lbaselib.c"
  var $5=$1; //@line 221 "lbaselib.c"
  var $6=_lua_type($5, 1); //@line 221 "lbaselib.c"
  var $7=_lua_typename($4, $6); //@line 221 "lbaselib.c"
  _lua_pushstring($3, $7); //@line 221 "lbaselib.c"
  ;
  return 1; //@line 222 "lbaselib.c"
}


function __Z11luaB_unpackP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $e;
      var $n;
      $2=$L;
      var $3=$2; //@line 344 "lbaselib.c"
      _luaL_checktype($3, 1, 5); //@line 344 "lbaselib.c"
      var $4=$2; //@line 345 "lbaselib.c"
      var $5=_luaL_optinteger($4, 2, 1); //@line 345 "lbaselib.c"
      $i=$5; //@line 345 "lbaselib.c"
      var $6=$2; //@line 346 "lbaselib.c"
      var $7=_lua_type($6, 3); //@line 346 "lbaselib.c"
      var $8=(($7)|0) <= 0; //@line 346 "lbaselib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 346 "lbaselib.c"
    case 3: 
      var $10=$2; //@line 346 "lbaselib.c"
      var $11=_lua_objlen($10, 1); //@line 346 "lbaselib.c"
      var $16 = $11;__label__ = 5; break; //@line 346 "lbaselib.c"
    case 4: 
      var $13=$2; //@line 346 "lbaselib.c"
      var $14=_luaL_checkinteger($13, 3); //@line 346 "lbaselib.c"
      var $16 = $14;__label__ = 5; break; //@line 346 "lbaselib.c"
    case 5: 
      var $16; //@line 346 "lbaselib.c"
      $e=$16; //@line 346 "lbaselib.c"
      var $17=$i; //@line 347 "lbaselib.c"
      var $18=$e; //@line 347 "lbaselib.c"
      var $19=(($17)|0) > (($18)|0); //@line 347 "lbaselib.c"
      if ($19) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 347 "lbaselib.c"
    case 6: 
      $1=0; //@line 347 "lbaselib.c"
      __label__ = 14; break; //@line 347 "lbaselib.c"
    case 7: 
      var $22=$e; //@line 348 "lbaselib.c"
      var $23=$i; //@line 348 "lbaselib.c"
      var $24=((($22)-($23))|0); //@line 348 "lbaselib.c"
      var $25=((($24)+(1))|0); //@line 348 "lbaselib.c"
      $n=$25; //@line 348 "lbaselib.c"
      var $26=$n; //@line 349 "lbaselib.c"
      var $27=(($26)|0) <= 0; //@line 349 "lbaselib.c"
      if ($27) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 349 "lbaselib.c"
    case 8: 
      var $29=$2; //@line 349 "lbaselib.c"
      var $30=$n; //@line 349 "lbaselib.c"
      var $31=_lua_checkstack($29, $30); //@line 349 "lbaselib.c"
      var $32=(($31)|0)!=0; //@line 349 "lbaselib.c"
      if ($32) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 349 "lbaselib.c"
    case 9: 
      var $34=$2; //@line 350 "lbaselib.c"
      var $35=_luaL_error($34, ((STRING_TABLE.__str48)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 350 "lbaselib.c"
      $1=$35; //@line 350 "lbaselib.c"
      __label__ = 14; break; //@line 350 "lbaselib.c"
    case 10: 
      var $37=$2; //@line 351 "lbaselib.c"
      var $38=$i; //@line 351 "lbaselib.c"
      _lua_rawgeti($37, 1, $38); //@line 351 "lbaselib.c"
      __label__ = 11; break; //@line 352 "lbaselib.c"
    case 11: 
      var $40=$i; //@line 352 "lbaselib.c"
      var $41=((($40)+(1))|0); //@line 352 "lbaselib.c"
      $i=$41; //@line 352 "lbaselib.c"
      var $42=$e; //@line 352 "lbaselib.c"
      var $43=(($40)|0) < (($42)|0); //@line 352 "lbaselib.c"
      if ($43) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 352 "lbaselib.c"
    case 12: 
      var $45=$2; //@line 353 "lbaselib.c"
      var $46=$i; //@line 353 "lbaselib.c"
      _lua_rawgeti($45, 1, $46); //@line 353 "lbaselib.c"
      __label__ = 11; break; //@line 353 "lbaselib.c"
    case 13: 
      var $48=$n; //@line 354 "lbaselib.c"
      $1=$48; //@line 354 "lbaselib.c"
      __label__ = 14; break; //@line 354 "lbaselib.c"
    case 14: 
      var $50=$1; //@line 355 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $50; //@line 355 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11luaB_unpackP9lua_State["X"]=1;

function __Z11luaB_xpcallP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $status;
  $1=$L;
  var $2=$1; //@line 386 "lbaselib.c"
  _luaL_checkany($2, 2); //@line 386 "lbaselib.c"
  var $3=$1; //@line 387 "lbaselib.c"
  _lua_settop($3, 2); //@line 387 "lbaselib.c"
  var $4=$1; //@line 388 "lbaselib.c"
  _lua_insert($4, 1); //@line 388 "lbaselib.c"
  var $5=$1; //@line 389 "lbaselib.c"
  var $6=_lua_pcall($5, 0, -1, 1); //@line 389 "lbaselib.c"
  $status=$6; //@line 389 "lbaselib.c"
  var $7=$1; //@line 390 "lbaselib.c"
  var $8=$status; //@line 390 "lbaselib.c"
  var $9=(($8)|0)==0; //@line 390 "lbaselib.c"
  var $10=(($9)&1); //@line 390 "lbaselib.c"
  _lua_pushboolean($7, $10); //@line 390 "lbaselib.c"
  var $11=$1; //@line 391 "lbaselib.c"
  _lua_replace($11, 1); //@line 391 "lbaselib.c"
  var $12=$1; //@line 392 "lbaselib.c"
  var $13=_lua_gettop($12); //@line 392 "lbaselib.c"
  ;
  return $13; //@line 392 "lbaselib.c"
}


function __Z13luaB_cocreateP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $NL;
      $1=$L;
      var $2=$1; //@line 577 "lbaselib.c"
      var $3=_lua_newthread($2); //@line 577 "lbaselib.c"
      $NL=$3; //@line 577 "lbaselib.c"
      var $4=$1; //@line 578 "lbaselib.c"
      var $5=_lua_type($4, 1); //@line 578 "lbaselib.c"
      var $6=(($5)|0)==6; //@line 578 "lbaselib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 578 "lbaselib.c"
    case 3: 
      var $8=$1; //@line 578 "lbaselib.c"
      var $9=_lua_iscfunction($8, 1); //@line 578 "lbaselib.c"
      var $10=(($9)|0)!=0; //@line 578 "lbaselib.c"
      if ($10) { __label__ = 4; break; } else { var $16 = 1;__label__ = 5; break; } //@line 578 "lbaselib.c"
    case 4: 
      var $12=$1; //@line 578 "lbaselib.c"
      var $13=_luaL_argerror($12, 1, ((STRING_TABLE.__str47315)|0)); //@line 578 "lbaselib.c"
      var $14=(($13)|0)!=0; //@line 578 "lbaselib.c"
      var $16 = $14;__label__ = 5; break; //@line 578 "lbaselib.c"
    case 5: 
      var $16;
      var $17=$1; //@line 580 "lbaselib.c"
      _lua_pushvalue($17, 1); //@line 580 "lbaselib.c"
      var $18=$1; //@line 581 "lbaselib.c"
      var $19=$NL; //@line 581 "lbaselib.c"
      _lua_xmove($18, $19, 1); //@line 581 "lbaselib.c"
      ;
      return 1; //@line 582 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaB_coresumeP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $co;
      var $r;
      $2=$L;
      var $3=$2; //@line 544 "lbaselib.c"
      var $4=_lua_tothread($3, 1); //@line 544 "lbaselib.c"
      $co=$4; //@line 544 "lbaselib.c"
      var $5=$co; //@line 546 "lbaselib.c"
      var $6=(($5)|0)!=0; //@line 546 "lbaselib.c"
      if ($6) { var $12 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 546 "lbaselib.c"
    case 3: 
      var $8=$2; //@line 546 "lbaselib.c"
      var $9=_luaL_argerror($8, 1, ((STRING_TABLE.__str46314)|0)); //@line 546 "lbaselib.c"
      var $10=(($9)|0)!=0; //@line 546 "lbaselib.c"
      var $12 = $10;__label__ = 4; break; //@line 546 "lbaselib.c"
    case 4: 
      var $12;
      var $13=$2; //@line 547 "lbaselib.c"
      var $14=$co; //@line 547 "lbaselib.c"
      var $15=$2; //@line 547 "lbaselib.c"
      var $16=_lua_gettop($15); //@line 547 "lbaselib.c"
      var $17=((($16)-(1))|0); //@line 547 "lbaselib.c"
      var $18=__Z9auxresumeP9lua_StateS0_i($13, $14, $17); //@line 547 "lbaselib.c"
      $r=$18; //@line 547 "lbaselib.c"
      var $19=$r; //@line 548 "lbaselib.c"
      var $20=(($19)|0) < 0; //@line 548 "lbaselib.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 548 "lbaselib.c"
    case 5: 
      var $22=$2; //@line 549 "lbaselib.c"
      _lua_pushboolean($22, 0); //@line 549 "lbaselib.c"
      var $23=$2; //@line 550 "lbaselib.c"
      _lua_insert($23, -2); //@line 550 "lbaselib.c"
      $1=2; //@line 551 "lbaselib.c"
      __label__ = 7; break; //@line 551 "lbaselib.c"
    case 6: 
      var $25=$2; //@line 554 "lbaselib.c"
      _lua_pushboolean($25, 1); //@line 554 "lbaselib.c"
      var $26=$2; //@line 555 "lbaselib.c"
      var $27=$r; //@line 555 "lbaselib.c"
      var $28=((($27)+(1))|0); //@line 555 "lbaselib.c"
      var $29=(((-$28))|0); //@line 555 "lbaselib.c"
      _lua_insert($26, $29); //@line 555 "lbaselib.c"
      var $30=$r; //@line 556 "lbaselib.c"
      var $31=((($30)+(1))|0); //@line 556 "lbaselib.c"
      $1=$31; //@line 556 "lbaselib.c"
      __label__ = 7; break; //@line 556 "lbaselib.c"
    case 7: 
      var $33=$1; //@line 558 "lbaselib.c"
      ;
      return $33; //@line 558 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14luaB_corunningP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 599 "lbaselib.c"
      var $3=_lua_pushthread($2); //@line 599 "lbaselib.c"
      var $4=(($3)|0)!=0; //@line 599 "lbaselib.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 599 "lbaselib.c"
    case 3: 
      var $6=$1; //@line 600 "lbaselib.c"
      _lua_pushnil($6); //@line 600 "lbaselib.c"
      __label__ = 4; break; //@line 600 "lbaselib.c"
    case 4: 
      ;
      return 1; //@line 601 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13luaB_costatusP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $co;
      $1=$L;
      var $2=$1; //@line 511 "lbaselib.c"
      var $3=_lua_tothread($2, 1); //@line 511 "lbaselib.c"
      $co=$3; //@line 511 "lbaselib.c"
      var $4=$co; //@line 512 "lbaselib.c"
      var $5=(($4)|0)!=0; //@line 512 "lbaselib.c"
      if ($5) { var $11 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 512 "lbaselib.c"
    case 3: 
      var $7=$1; //@line 512 "lbaselib.c"
      var $8=_luaL_argerror($7, 1, ((STRING_TABLE.__str46314)|0)); //@line 512 "lbaselib.c"
      var $9=(($8)|0)!=0; //@line 512 "lbaselib.c"
      var $11 = $9;__label__ = 4; break; //@line 512 "lbaselib.c"
    case 4: 
      var $11;
      var $12=$1; //@line 513 "lbaselib.c"
      var $13=$1; //@line 513 "lbaselib.c"
      var $14=$co; //@line 513 "lbaselib.c"
      var $15=__Z8costatusP9lua_StateS0_($13, $14); //@line 513 "lbaselib.c"
      var $16=((__ZL9statnames+($15<<2))|0); //@line 513 "lbaselib.c"
      var $17=HEAP32[(($16)>>2)]; //@line 513 "lbaselib.c"
      _lua_pushstring($12, $17); //@line 513 "lbaselib.c"
      ;
      return 1; //@line 514 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11luaB_cowrapP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 587 "lbaselib.c"
  var $3=__Z13luaB_cocreateP9lua_State($2); //@line 587 "lbaselib.c"
  var $4=$1; //@line 588 "lbaselib.c"
  _lua_pushcclosure($4, 32, 1); //@line 588 "lbaselib.c"
  ;
  return 1; //@line 589 "lbaselib.c"
}


function __Z10luaB_yieldP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 594 "lbaselib.c"
  var $3=$1; //@line 594 "lbaselib.c"
  var $4=_lua_gettop($3); //@line 594 "lbaselib.c"
  var $5=_lua_yield($2, $4); //@line 594 "lbaselib.c"
  ;
  return $5; //@line 594 "lbaselib.c"
}


function _luaopen_base($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 649 "lbaselib.c"
  __Z9base_openP9lua_State($2); //@line 649 "lbaselib.c"
  var $3=$1; //@line 650 "lbaselib.c"
  _luaL_register($3, ((STRING_TABLE.__str30298)|0), ((__ZL8co_funcs)|0)); //@line 650 "lbaselib.c"
  ;
  return 2; //@line 651 "lbaselib.c"
}


function __Z9base_openP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 628 "lbaselib.c"
  _lua_pushvalue($2, -10002); //@line 628 "lbaselib.c"
  var $3=$1; //@line 629 "lbaselib.c"
  _lua_setfield($3, -10002, ((STRING_TABLE.__str31299)|0)); //@line 629 "lbaselib.c"
  var $4=$1; //@line 631 "lbaselib.c"
  _luaL_register($4, ((STRING_TABLE.__str31299)|0), ((__ZL10base_funcs)|0)); //@line 631 "lbaselib.c"
  var $5=$1; //@line 632 "lbaselib.c"
  _lua_pushlstring($5, ((STRING_TABLE.__str32300)|0), 7); //@line 632 "lbaselib.c"
  var $6=$1; //@line 633 "lbaselib.c"
  _lua_setfield($6, -10002, ((STRING_TABLE.__str33301)|0)); //@line 633 "lbaselib.c"
  var $7=$1; //@line 635 "lbaselib.c"
  __Z7auxopenP9lua_StatePKcPFiS0_ES4_($7, ((STRING_TABLE.__str34302)|0), 34, 36); //@line 635 "lbaselib.c"
  var $8=$1; //@line 636 "lbaselib.c"
  __Z7auxopenP9lua_StatePKcPFiS0_ES4_($8, ((STRING_TABLE.__str35303)|0), 38, 40); //@line 636 "lbaselib.c"
  var $9=$1; //@line 638 "lbaselib.c"
  _lua_createtable($9, 0, 1); //@line 638 "lbaselib.c"
  var $10=$1; //@line 639 "lbaselib.c"
  _lua_pushvalue($10, -1); //@line 639 "lbaselib.c"
  var $11=$1; //@line 640 "lbaselib.c"
  var $12=_lua_setmetatable($11, -2); //@line 640 "lbaselib.c"
  var $13=$1; //@line 641 "lbaselib.c"
  _lua_pushlstring($13, ((STRING_TABLE.__str36304)|0), 2); //@line 641 "lbaselib.c"
  var $14=$1; //@line 642 "lbaselib.c"
  _lua_setfield($14, -2, ((STRING_TABLE.__str37305)|0)); //@line 642 "lbaselib.c"
  var $15=$1; //@line 643 "lbaselib.c"
  _lua_pushcclosure($15, 42, 1); //@line 643 "lbaselib.c"
  var $16=$1; //@line 644 "lbaselib.c"
  _lua_setfield($16, -10002, ((STRING_TABLE.__str38306)|0)); //@line 644 "lbaselib.c"
  ;
  return; //@line 645 "lbaselib.c"
}


function __Z7auxopenP9lua_StatePKcPFiS0_ES4_($L, $name, $f, $u) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$L;
  $2=$name;
  $3=$f;
  $4=$u;
  var $5=$1; //@line 620 "lbaselib.c"
  var $6=$4; //@line 620 "lbaselib.c"
  _lua_pushcclosure($5, $6, 0); //@line 620 "lbaselib.c"
  var $7=$1; //@line 621 "lbaselib.c"
  var $8=$3; //@line 621 "lbaselib.c"
  _lua_pushcclosure($7, $8, 1); //@line 621 "lbaselib.c"
  var $9=$1; //@line 622 "lbaselib.c"
  var $10=$2; //@line 622 "lbaselib.c"
  _lua_setfield($9, -2, $10); //@line 622 "lbaselib.c"
  ;
  return; //@line 623 "lbaselib.c"
}


function __Z11luaB_ipairsP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 258 "lbaselib.c"
  _luaL_checktype($2, 1, 5); //@line 258 "lbaselib.c"
  var $3=$1; //@line 259 "lbaselib.c"
  _lua_pushvalue($3, -10003); //@line 259 "lbaselib.c"
  var $4=$1; //@line 260 "lbaselib.c"
  _lua_pushvalue($4, 1); //@line 260 "lbaselib.c"
  var $5=$1; //@line 261 "lbaselib.c"
  _lua_pushinteger($5, 0); //@line 261 "lbaselib.c"
  ;
  return 3; //@line 262 "lbaselib.c"
}


function __Z9ipairsauxP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $i;
  $1=$L;
  var $2=$1; //@line 248 "lbaselib.c"
  var $3=_luaL_checkinteger($2, 2); //@line 248 "lbaselib.c"
  $i=$3; //@line 248 "lbaselib.c"
  var $4=$1; //@line 249 "lbaselib.c"
  _luaL_checktype($4, 1, 5); //@line 249 "lbaselib.c"
  var $5=$i; //@line 250 "lbaselib.c"
  var $6=((($5)+(1))|0); //@line 250 "lbaselib.c"
  $i=$6; //@line 250 "lbaselib.c"
  var $7=$1; //@line 251 "lbaselib.c"
  var $8=$i; //@line 251 "lbaselib.c"
  _lua_pushinteger($7, $8); //@line 251 "lbaselib.c"
  var $9=$1; //@line 252 "lbaselib.c"
  var $10=$i; //@line 252 "lbaselib.c"
  _lua_rawgeti($9, 1, $10); //@line 252 "lbaselib.c"
  var $11=$1; //@line 253 "lbaselib.c"
  var $12=_lua_type($11, -1); //@line 253 "lbaselib.c"
  var $13=(($12)|0)==0; //@line 253 "lbaselib.c"
  var $14=$13 ? 0 : 2; //@line 253 "lbaselib.c"
  ;
  return $14; //@line 253 "lbaselib.c"
}


function __Z10luaB_pairsP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 239 "lbaselib.c"
  _luaL_checktype($2, 1, 5); //@line 239 "lbaselib.c"
  var $3=$1; //@line 240 "lbaselib.c"
  _lua_pushvalue($3, -10003); //@line 240 "lbaselib.c"
  var $4=$1; //@line 241 "lbaselib.c"
  _lua_pushvalue($4, 1); //@line 241 "lbaselib.c"
  var $5=$1; //@line 242 "lbaselib.c"
  _lua_pushnil($5); //@line 242 "lbaselib.c"
  ;
  return 3; //@line 243 "lbaselib.c"
}


function __Z13luaB_newproxyP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $validproxy;
      $2=$L;
      var $3=$2; //@line 422 "lbaselib.c"
      _lua_settop($3, 1); //@line 422 "lbaselib.c"
      var $4=$2; //@line 423 "lbaselib.c"
      var $5=_lua_newuserdata($4, 0); //@line 423 "lbaselib.c"
      var $6=$2; //@line 424 "lbaselib.c"
      var $7=_lua_toboolean($6, 1); //@line 424 "lbaselib.c"
      var $8=(($7)|0)==0; //@line 424 "lbaselib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 424 "lbaselib.c"
    case 3: 
      $1=1; //@line 425 "lbaselib.c"
      __label__ = 13; break; //@line 425 "lbaselib.c"
    case 4: 
      var $11=$2; //@line 426 "lbaselib.c"
      var $12=_lua_type($11, 1); //@line 426 "lbaselib.c"
      var $13=(($12)|0)==1; //@line 426 "lbaselib.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 426 "lbaselib.c"
    case 5: 
      var $15=$2; //@line 427 "lbaselib.c"
      _lua_createtable($15, 0, 0); //@line 427 "lbaselib.c"
      var $16=$2; //@line 428 "lbaselib.c"
      _lua_pushvalue($16, -1); //@line 428 "lbaselib.c"
      var $17=$2; //@line 429 "lbaselib.c"
      _lua_pushboolean($17, 1); //@line 429 "lbaselib.c"
      var $18=$2; //@line 430 "lbaselib.c"
      _lua_rawset($18, -10003); //@line 430 "lbaselib.c"
      __label__ = 11; break; //@line 431 "lbaselib.c"
    case 6: 
      $validproxy=0; //@line 433 "lbaselib.c"
      var $20=$2; //@line 434 "lbaselib.c"
      var $21=_lua_getmetatable($20, 1); //@line 434 "lbaselib.c"
      var $22=(($21)|0)!=0; //@line 434 "lbaselib.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 434 "lbaselib.c"
    case 7: 
      var $24=$2; //@line 435 "lbaselib.c"
      _lua_rawget($24, -10003); //@line 435 "lbaselib.c"
      var $25=$2; //@line 436 "lbaselib.c"
      var $26=_lua_toboolean($25, -1); //@line 436 "lbaselib.c"
      $validproxy=$26; //@line 436 "lbaselib.c"
      var $27=$2; //@line 437 "lbaselib.c"
      _lua_settop($27, -2); //@line 437 "lbaselib.c"
      __label__ = 8; break; //@line 438 "lbaselib.c"
    case 8: 
      var $29=$validproxy; //@line 439 "lbaselib.c"
      var $30=(($29)|0)!=0; //@line 439 "lbaselib.c"
      if ($30) { var $36 = 1;__label__ = 10; break; } else { __label__ = 9; break; } //@line 439 "lbaselib.c"
    case 9: 
      var $32=$2; //@line 439 "lbaselib.c"
      var $33=_luaL_argerror($32, 1, ((STRING_TABLE.__str39307)|0)); //@line 439 "lbaselib.c"
      var $34=(($33)|0)!=0; //@line 439 "lbaselib.c"
      var $36 = $34;__label__ = 10; break; //@line 439 "lbaselib.c"
    case 10: 
      var $36;
      var $37=$2; //@line 440 "lbaselib.c"
      var $38=_lua_getmetatable($37, 1); //@line 440 "lbaselib.c"
      __label__ = 11; break; //@line 441 "lbaselib.c"
    case 11: 
      __label__ = 12; break; //@line 441 "lbaselib.c"
    case 12: 
      var $41=$2; //@line 442 "lbaselib.c"
      var $42=_lua_setmetatable($41, 2); //@line 442 "lbaselib.c"
      $1=1; //@line 443 "lbaselib.c"
      __label__ = 13; break; //@line 443 "lbaselib.c"
    case 13: 
      var $44=$1; //@line 444 "lbaselib.c"
      ;
      return $44; //@line 444 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13luaB_newproxyP9lua_State["X"]=1;

function __Z12luaB_auxwrapP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $co;
      var $r;
      $1=$L;
      var $2=$1; //@line 562 "lbaselib.c"
      var $3=_lua_tothread($2, -10003); //@line 562 "lbaselib.c"
      $co=$3; //@line 562 "lbaselib.c"
      var $4=$1; //@line 563 "lbaselib.c"
      var $5=$co; //@line 563 "lbaselib.c"
      var $6=$1; //@line 563 "lbaselib.c"
      var $7=_lua_gettop($6); //@line 563 "lbaselib.c"
      var $8=__Z9auxresumeP9lua_StateS0_i($4, $5, $7); //@line 563 "lbaselib.c"
      $r=$8; //@line 563 "lbaselib.c"
      var $9=$r; //@line 564 "lbaselib.c"
      var $10=(($9)|0) < 0; //@line 564 "lbaselib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 564 "lbaselib.c"
    case 3: 
      var $12=$1; //@line 565 "lbaselib.c"
      var $13=_lua_isstring($12, -1); //@line 565 "lbaselib.c"
      var $14=(($13)|0)!=0; //@line 565 "lbaselib.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 565 "lbaselib.c"
    case 4: 
      var $16=$1; //@line 566 "lbaselib.c"
      _luaL_where($16, 1); //@line 566 "lbaselib.c"
      var $17=$1; //@line 567 "lbaselib.c"
      _lua_insert($17, -2); //@line 567 "lbaselib.c"
      var $18=$1; //@line 568 "lbaselib.c"
      _lua_concat($18, 2); //@line 568 "lbaselib.c"
      __label__ = 5; break; //@line 569 "lbaselib.c"
    case 5: 
      var $20=$1; //@line 570 "lbaselib.c"
      var $21=_lua_error($20); //@line 570 "lbaselib.c"
      __label__ = 6; break; //@line 571 "lbaselib.c"
    case 6: 
      var $23=$r; //@line 572 "lbaselib.c"
      ;
      return $23; //@line 572 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9auxresumeP9lua_StateS0_i($L, $co, $narg) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $status;
      var $nres;
      $2=$L;
      $3=$co;
      $4=$narg;
      var $5=$2; //@line 519 "lbaselib.c"
      var $6=$3; //@line 519 "lbaselib.c"
      var $7=__Z8costatusP9lua_StateS0_($5, $6); //@line 519 "lbaselib.c"
      $status=$7; //@line 519 "lbaselib.c"
      var $8=$3; //@line 520 "lbaselib.c"
      var $9=$4; //@line 520 "lbaselib.c"
      var $10=_lua_checkstack($8, $9); //@line 520 "lbaselib.c"
      var $11=(($10)|0)!=0; //@line 520 "lbaselib.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 520 "lbaselib.c"
    case 3: 
      var $13=$2; //@line 521 "lbaselib.c"
      var $14=_luaL_error($13, ((STRING_TABLE.__str40308)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 521 "lbaselib.c"
      __label__ = 4; break; //@line 521 "lbaselib.c"
    case 4: 
      var $16=$status; //@line 522 "lbaselib.c"
      var $17=(($16)|0)!=1; //@line 522 "lbaselib.c"
      if ($17) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 522 "lbaselib.c"
    case 5: 
      var $19=$2; //@line 523 "lbaselib.c"
      var $20=$status; //@line 523 "lbaselib.c"
      var $21=((__ZL9statnames+($20<<2))|0); //@line 523 "lbaselib.c"
      var $22=HEAP32[(($21)>>2)]; //@line 523 "lbaselib.c"
      var $23=_lua_pushfstring($19, ((STRING_TABLE.__str41309)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$22,tempInt)); //@line 523 "lbaselib.c"
      $1=-1; //@line 524 "lbaselib.c"
      __label__ = 12; break; //@line 524 "lbaselib.c"
    case 6: 
      var $25=$2; //@line 526 "lbaselib.c"
      var $26=$3; //@line 526 "lbaselib.c"
      var $27=$4; //@line 526 "lbaselib.c"
      _lua_xmove($25, $26, $27); //@line 526 "lbaselib.c"
      var $28=$2; //@line 527 "lbaselib.c"
      var $29=$3; //@line 527 "lbaselib.c"
      _lua_setlevel($28, $29); //@line 527 "lbaselib.c"
      var $30=$3; //@line 528 "lbaselib.c"
      var $31=$4; //@line 528 "lbaselib.c"
      var $32=_lua_resume($30, $31); //@line 528 "lbaselib.c"
      $status=$32; //@line 528 "lbaselib.c"
      var $33=$status; //@line 529 "lbaselib.c"
      var $34=(($33)|0)==0; //@line 529 "lbaselib.c"
      if ($34) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 529 "lbaselib.c"
    case 7: 
      var $36=$status; //@line 529 "lbaselib.c"
      var $37=(($36)|0)==1; //@line 529 "lbaselib.c"
      if ($37) { __label__ = 8; break; } else { __label__ = 11; break; } //@line 529 "lbaselib.c"
    case 8: 
      var $39=$3; //@line 530 "lbaselib.c"
      var $40=_lua_gettop($39); //@line 530 "lbaselib.c"
      $nres=$40; //@line 530 "lbaselib.c"
      var $41=$2; //@line 531 "lbaselib.c"
      var $42=$nres; //@line 531 "lbaselib.c"
      var $43=((($42)+(1))|0); //@line 531 "lbaselib.c"
      var $44=_lua_checkstack($41, $43); //@line 531 "lbaselib.c"
      var $45=(($44)|0)!=0; //@line 531 "lbaselib.c"
      if ($45) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 531 "lbaselib.c"
    case 9: 
      var $47=$2; //@line 532 "lbaselib.c"
      var $48=_luaL_error($47, ((STRING_TABLE.__str42310)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 532 "lbaselib.c"
      __label__ = 10; break; //@line 532 "lbaselib.c"
    case 10: 
      var $50=$3; //@line 533 "lbaselib.c"
      var $51=$2; //@line 533 "lbaselib.c"
      var $52=$nres; //@line 533 "lbaselib.c"
      _lua_xmove($50, $51, $52); //@line 533 "lbaselib.c"
      var $53=$nres; //@line 534 "lbaselib.c"
      $1=$53; //@line 534 "lbaselib.c"
      __label__ = 12; break; //@line 534 "lbaselib.c"
    case 11: 
      var $55=$3; //@line 537 "lbaselib.c"
      var $56=$2; //@line 537 "lbaselib.c"
      _lua_xmove($55, $56, 1); //@line 537 "lbaselib.c"
      $1=-1; //@line 538 "lbaselib.c"
      __label__ = 12; break; //@line 538 "lbaselib.c"
    case 12: 
      var $58=$1; //@line 540 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $58; //@line 540 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9auxresumeP9lua_StateS0_i["X"]=1;

function __Z8costatusP9lua_StateS0_($L, $co) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; _memset(__stackBase__, 0, 100);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ar=__stackBase__;
      $2=$L;
      $3=$co;
      var $4=$2; //@line 491 "lbaselib.c"
      var $5=$3; //@line 491 "lbaselib.c"
      var $6=(($4)|0)==(($5)|0); //@line 491 "lbaselib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 491 "lbaselib.c"
    case 3: 
      $1=0; //@line 491 "lbaselib.c"
      __label__ = 12; break; //@line 491 "lbaselib.c"
    case 4: 
      var $9=$3; //@line 492 "lbaselib.c"
      var $10=_lua_status($9); //@line 492 "lbaselib.c"
      if ((($10)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($10)|0) == 0) {
        __label__ = 6; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 5: 
      $1=1; //@line 494 "lbaselib.c"
      __label__ = 12; break; //@line 494 "lbaselib.c"
    case 6: 
      var $13=$3; //@line 497 "lbaselib.c"
      var $14=_lua_getstack($13, 0, $ar); //@line 497 "lbaselib.c"
      var $15=(($14)|0) > 0; //@line 497 "lbaselib.c"
      if ($15) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 497 "lbaselib.c"
    case 7: 
      $1=2; //@line 498 "lbaselib.c"
      __label__ = 12; break; //@line 498 "lbaselib.c"
    case 8: 
      var $18=$3; //@line 499 "lbaselib.c"
      var $19=_lua_gettop($18); //@line 499 "lbaselib.c"
      var $20=(($19)|0)==0; //@line 499 "lbaselib.c"
      if ($20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 499 "lbaselib.c"
    case 9: 
      $1=3; //@line 500 "lbaselib.c"
      __label__ = 12; break; //@line 500 "lbaselib.c"
    case 10: 
      $1=1; //@line 502 "lbaselib.c"
      __label__ = 12; break; //@line 502 "lbaselib.c"
    case 11: 
      $1=3; //@line 505 "lbaselib.c"
      __label__ = 12; break; //@line 505 "lbaselib.c"
    case 12: 
      var $25=$1; //@line 507 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $25; //@line 507 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7getfuncP9lua_Statei($L, $opt) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; _memset(__stackBase__, 0, 100);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ar=__stackBase__;
      var $level;
      $1=$L;
      $2=$opt;
      var $3=$1; //@line 118 "lbaselib.c"
      var $4=_lua_type($3, 1); //@line 118 "lbaselib.c"
      var $5=(($4)|0)==6; //@line 118 "lbaselib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 118 "lbaselib.c"
    case 3: 
      var $7=$1; //@line 118 "lbaselib.c"
      _lua_pushvalue($7, 1); //@line 118 "lbaselib.c"
      __label__ = 14; break; //@line 118 "lbaselib.c"
    case 4: 
      var $9=$2; //@line 121 "lbaselib.c"
      var $10=(($9)|0)!=0; //@line 121 "lbaselib.c"
      if ($10) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 121 "lbaselib.c"
    case 5: 
      var $12=$1; //@line 121 "lbaselib.c"
      var $13=_luaL_optinteger($12, 1, 1); //@line 121 "lbaselib.c"
      var $18 = $13;__label__ = 7; break; //@line 121 "lbaselib.c"
    case 6: 
      var $15=$1; //@line 121 "lbaselib.c"
      var $16=_luaL_checkinteger($15, 1); //@line 121 "lbaselib.c"
      var $18 = $16;__label__ = 7; break; //@line 121 "lbaselib.c"
    case 7: 
      var $18; //@line 121 "lbaselib.c"
      $level=$18; //@line 121 "lbaselib.c"
      var $19=$level; //@line 122 "lbaselib.c"
      var $20=(($19)|0) >= 0; //@line 122 "lbaselib.c"
      if ($20) { var $26 = 1;__label__ = 9; break; } else { __label__ = 8; break; } //@line 122 "lbaselib.c"
    case 8: 
      var $22=$1; //@line 122 "lbaselib.c"
      var $23=_luaL_argerror($22, 1, ((STRING_TABLE.__str59)|0)); //@line 122 "lbaselib.c"
      var $24=(($23)|0)!=0; //@line 122 "lbaselib.c"
      var $26 = $24;__label__ = 9; break; //@line 122 "lbaselib.c"
    case 9: 
      var $26;
      var $27=$1; //@line 123 "lbaselib.c"
      var $28=$level; //@line 123 "lbaselib.c"
      var $29=_lua_getstack($27, $28, $ar); //@line 123 "lbaselib.c"
      var $30=(($29)|0)==0; //@line 123 "lbaselib.c"
      if ($30) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 123 "lbaselib.c"
    case 10: 
      var $32=$1; //@line 124 "lbaselib.c"
      var $33=_luaL_argerror($32, 1, ((STRING_TABLE.__str60)|0)); //@line 124 "lbaselib.c"
      __label__ = 11; break; //@line 124 "lbaselib.c"
    case 11: 
      var $35=$1; //@line 125 "lbaselib.c"
      var $36=_lua_getinfo($35, ((STRING_TABLE.__str61)|0), $ar); //@line 125 "lbaselib.c"
      var $37=$1; //@line 126 "lbaselib.c"
      var $38=_lua_type($37, -1); //@line 126 "lbaselib.c"
      var $39=(($38)|0)==0; //@line 126 "lbaselib.c"
      if ($39) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 126 "lbaselib.c"
    case 12: 
      var $41=$1; //@line 127 "lbaselib.c"
      var $42=$level; //@line 127 "lbaselib.c"
      var $43=_luaL_error($41, ((STRING_TABLE.__str62)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$42,tempInt)); //@line 127 "lbaselib.c"
      __label__ = 13; break; //@line 127 "lbaselib.c"
    case 13: 
      __label__ = 14; break; //@line 129 "lbaselib.c"
    case 14: 
      STACKTOP = __stackBase__;
      return; //@line 130 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7getfuncP9lua_Statei["X"]=1;

function __Z8load_auxP9lua_Statei($L, $status) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$status;
      var $4=$3; //@line 267 "lbaselib.c"
      var $5=(($4)|0)==0; //@line 267 "lbaselib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 267 "lbaselib.c"
    case 3: 
      $1=1; //@line 268 "lbaselib.c"
      __label__ = 5; break; //@line 268 "lbaselib.c"
    case 4: 
      var $8=$2; //@line 270 "lbaselib.c"
      _lua_pushnil($8); //@line 270 "lbaselib.c"
      var $9=$2; //@line 271 "lbaselib.c"
      _lua_insert($9, -2); //@line 271 "lbaselib.c"
      $1=2; //@line 272 "lbaselib.c"
      __label__ = 5; break; //@line 272 "lbaselib.c"
    case 5: 
      var $11=$1; //@line 274 "lbaselib.c"
      ;
      return $11; //@line 274 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z14generic_readerP9lua_StatePvPj($L, $ud, $size) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$L;
      $3=$ud;
      $4=$size;
      var $5=$2; //@line 299 "lbaselib.c"
      _luaL_checkstack($5, 2, ((STRING_TABLE.__str68)|0)); //@line 299 "lbaselib.c"
      var $6=$2; //@line 300 "lbaselib.c"
      _lua_pushvalue($6, 1); //@line 300 "lbaselib.c"
      var $7=$2; //@line 301 "lbaselib.c"
      _lua_call($7, 0, 1); //@line 301 "lbaselib.c"
      var $8=$2; //@line 302 "lbaselib.c"
      var $9=_lua_type($8, -1); //@line 302 "lbaselib.c"
      var $10=(($9)|0)==0; //@line 302 "lbaselib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 302 "lbaselib.c"
    case 3: 
      var $12=$4; //@line 303 "lbaselib.c"
      HEAP32[(($12)>>2)]=0; //@line 303 "lbaselib.c"
      $1=0; //@line 304 "lbaselib.c"
      __label__ = 9; break; //@line 304 "lbaselib.c"
    case 4: 
      var $14=$2; //@line 306 "lbaselib.c"
      var $15=_lua_isstring($14, -1); //@line 306 "lbaselib.c"
      var $16=(($15)|0)!=0; //@line 306 "lbaselib.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 306 "lbaselib.c"
    case 5: 
      var $18=$2; //@line 307 "lbaselib.c"
      _lua_replace($18, 3); //@line 307 "lbaselib.c"
      var $19=$2; //@line 308 "lbaselib.c"
      var $20=$4; //@line 308 "lbaselib.c"
      var $21=_lua_tolstring($19, 3, $20); //@line 308 "lbaselib.c"
      $1=$21; //@line 308 "lbaselib.c"
      __label__ = 9; break; //@line 308 "lbaselib.c"
    case 6: 
      var $23=$2; //@line 310 "lbaselib.c"
      var $24=_luaL_error($23, ((STRING_TABLE.__str69)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 310 "lbaselib.c"
      __label__ = 7; break; //@line 310 "lbaselib.c"
    case 7: 
      __label__ = 8; break; //@line 310 "lbaselib.c"
    case 8: 
      $1=0; //@line 311 "lbaselib.c"
      __label__ = 9; break; //@line 311 "lbaselib.c"
    case 9: 
      var $28=$1; //@line 312 "lbaselib.c"
      STACKTOP = __stackBase__;
      return $28; //@line 312 "lbaselib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8db_debugP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 252; _memset(__stackBase__, 0, 252);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $buffer=__stackBase__;
      $1=$L;
      __label__ = 3; break; //@line 303 "ldblib.c"
    case 3: 
      var $3=HEAP32[((_stderr)>>2)]; //@line 305 "ldblib.c"
      var $4=_fputs(((STRING_TABLE.__str50368)|0), $3); //@line 305 "ldblib.c"
      var $5=(($buffer)|0); //@line 306 "ldblib.c"
      var $6=HEAP32[((_stdin)>>2)]; //@line 306 "ldblib.c"
      var $7=_fgets($5, 250, $6); //@line 306 "ldblib.c"
      var $8=(($7)|0)==0; //@line 306 "ldblib.c"
      if ($8) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 306 "ldblib.c"
    case 4: 
      var $10=(($buffer)|0); //@line 307 "ldblib.c"
      var $11=_strcmp($10, ((STRING_TABLE.__str51369)|0)); //@line 307 "ldblib.c"
      var $12=(($11)|0)==0; //@line 307 "ldblib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 307 "ldblib.c"
    case 5: 
      STACKTOP = __stackBase__;
      return 0; //@line 308 "ldblib.c"
    case 6: 
      var $15=$1; //@line 309 "ldblib.c"
      var $16=(($buffer)|0); //@line 309 "ldblib.c"
      var $17=(($buffer)|0); //@line 309 "ldblib.c"
      var $18=_strlen($17); //@line 309 "ldblib.c"
      var $19=_luaL_loadbuffer($15, $16, $18, ((STRING_TABLE.__str52370)|0)); //@line 309 "ldblib.c"
      var $20=(($19)|0)!=0; //@line 309 "ldblib.c"
      if ($20) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 309 "ldblib.c"
    case 7: 
      var $22=$1; //@line 310 "ldblib.c"
      var $23=_lua_pcall($22, 0, 0, 0); //@line 310 "ldblib.c"
      var $24=(($23)|0)!=0; //@line 310 "ldblib.c"
      if ($24) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 310 "ldblib.c"
    case 8: 
      var $26=$1; //@line 311 "ldblib.c"
      var $27=_lua_tolstring($26, -1, 0); //@line 311 "ldblib.c"
      var $28=HEAP32[((_stderr)>>2)]; //@line 311 "ldblib.c"
      var $29=_fputs($27, $28); //@line 311 "ldblib.c"
      var $30=HEAP32[((_stderr)>>2)]; //@line 312 "ldblib.c"
      var $31=_fputs(((STRING_TABLE.__str15333)|0), $30); //@line 312 "ldblib.c"
      __label__ = 9; break; //@line 313 "ldblib.c"
    case 9: 
      var $33=$1; //@line 314 "ldblib.c"
      _lua_settop($33, 0); //@line 314 "ldblib.c"
      __label__ = 3; break; //@line 315 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10db_getfenvP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 48 "ldblib.c"
  _luaL_checkany($2, 1); //@line 48 "ldblib.c"
  var $3=$1; //@line 49 "ldblib.c"
  _lua_getfenv($3, 1); //@line 49 "ldblib.c"
  ;
  return 1; //@line 50 "ldblib.c"
}


function __Z10db_gethookP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; _memset(__stackBase__, 0, 12);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $arg=__stackBase__;
      var $L1;
      var $buff=(__stackBase__)+(4);
      var $mask;
      var $hook;
      $1=$L;
      var $2=$1; //@line 284 "ldblib.c"
      var $3=__Z9getthreadP9lua_StatePi($2, $arg); //@line 284 "ldblib.c"
      $L1=$3; //@line 284 "ldblib.c"
      var $4=$L1; //@line 286 "ldblib.c"
      var $5=_lua_gethookmask($4); //@line 286 "ldblib.c"
      $mask=$5; //@line 286 "ldblib.c"
      var $6=$L1; //@line 287 "ldblib.c"
      var $7=_lua_gethook($6); //@line 287 "ldblib.c"
      $hook=$7; //@line 287 "ldblib.c"
      var $8=$hook; //@line 288 "ldblib.c"
      var $9=(($8)|0)!=0; //@line 288 "ldblib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 288 "ldblib.c"
    case 3: 
      var $11=$hook; //@line 288 "ldblib.c"
      var $12=(($11)|0)!=30; //@line 288 "ldblib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 288 "ldblib.c"
    case 4: 
      var $14=$1; //@line 289 "ldblib.c"
      _lua_pushlstring($14, ((STRING_TABLE.__str49367)|0), 13); //@line 289 "ldblib.c"
      __label__ = 6; break; //@line 289 "ldblib.c"
    case 5: 
      var $16=$1; //@line 291 "ldblib.c"
      __Z12gethooktableP9lua_State($16); //@line 291 "ldblib.c"
      var $17=$1; //@line 292 "ldblib.c"
      var $18=$L1; //@line 292 "ldblib.c"
      var $19=$18; //@line 292 "ldblib.c"
      _lua_pushlightuserdata($17, $19); //@line 292 "ldblib.c"
      var $20=$1; //@line 293 "ldblib.c"
      _lua_rawget($20, -2); //@line 293 "ldblib.c"
      var $21=$1; //@line 294 "ldblib.c"
      _lua_remove($21, -2); //@line 294 "ldblib.c"
      __label__ = 6; break; //@line 295 "ldblib.c"
    case 6: 
      var $23=$1; //@line 296 "ldblib.c"
      var $24=$mask; //@line 296 "ldblib.c"
      var $25=(($buff)|0); //@line 296 "ldblib.c"
      var $26=__Z10unmakemaskiPc($24, $25); //@line 296 "ldblib.c"
      _lua_pushstring($23, $26); //@line 296 "ldblib.c"
      var $27=$1; //@line 297 "ldblib.c"
      var $28=$L1; //@line 297 "ldblib.c"
      var $29=_lua_gethookcount($28); //@line 297 "ldblib.c"
      _lua_pushinteger($27, $29); //@line 297 "ldblib.c"
      STACKTOP = __stackBase__;
      return 3; //@line 298 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10db_getinfoP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 104; _memset(__stackBase__, 0, 104);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ar=__stackBase__;
      var $arg=(__stackBase__)+(100);
      var $L1;
      var $options;
      $2=$L;
      var $3=$2; //@line 102 "ldblib.c"
      var $4=__Z9getthreadP9lua_StatePi($3, $arg); //@line 102 "ldblib.c"
      $L1=$4; //@line 102 "ldblib.c"
      var $5=$2; //@line 103 "ldblib.c"
      var $6=HEAP32[(($arg)>>2)]; //@line 103 "ldblib.c"
      var $7=((($6)+(2))|0); //@line 103 "ldblib.c"
      var $8=_luaL_optlstring($5, $7, ((STRING_TABLE.__str34352)|0), 0); //@line 103 "ldblib.c"
      $options=$8; //@line 103 "ldblib.c"
      var $9=$2; //@line 104 "ldblib.c"
      var $10=HEAP32[(($arg)>>2)]; //@line 104 "ldblib.c"
      var $11=((($10)+(1))|0); //@line 104 "ldblib.c"
      var $12=_lua_isnumber($9, $11); //@line 104 "ldblib.c"
      var $13=(($12)|0)!=0; //@line 104 "ldblib.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 104 "ldblib.c"
    case 3: 
      var $15=$L1; //@line 105 "ldblib.c"
      var $16=$2; //@line 105 "ldblib.c"
      var $17=HEAP32[(($arg)>>2)]; //@line 105 "ldblib.c"
      var $18=((($17)+(1))|0); //@line 105 "ldblib.c"
      var $19=_lua_tointeger($16, $18); //@line 105 "ldblib.c"
      var $20=_lua_getstack($15, $19, $ar); //@line 105 "ldblib.c"
      var $21=(($20)|0)!=0; //@line 105 "ldblib.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 105 "ldblib.c"
    case 4: 
      var $23=$2; //@line 106 "ldblib.c"
      _lua_pushnil($23); //@line 106 "ldblib.c"
      $1=1; //@line 107 "ldblib.c"
      __label__ = 25; break; //@line 107 "ldblib.c"
    case 5: 
      __label__ = 10; break; //@line 109 "ldblib.c"
    case 6: 
      var $26=$2; //@line 110 "ldblib.c"
      var $27=HEAP32[(($arg)>>2)]; //@line 110 "ldblib.c"
      var $28=((($27)+(1))|0); //@line 110 "ldblib.c"
      var $29=_lua_type($26, $28); //@line 110 "ldblib.c"
      var $30=(($29)|0)==6; //@line 110 "ldblib.c"
      if ($30) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 110 "ldblib.c"
    case 7: 
      var $32=$2; //@line 111 "ldblib.c"
      var $33=$options; //@line 111 "ldblib.c"
      var $34=_lua_pushfstring($32, ((STRING_TABLE.__str35353)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$33,tempInt)); //@line 111 "ldblib.c"
      var $35=$2; //@line 112 "ldblib.c"
      var $36=_lua_tolstring($35, -1, 0); //@line 112 "ldblib.c"
      $options=$36; //@line 112 "ldblib.c"
      var $37=$2; //@line 113 "ldblib.c"
      var $38=HEAP32[(($arg)>>2)]; //@line 113 "ldblib.c"
      var $39=((($38)+(1))|0); //@line 113 "ldblib.c"
      _lua_pushvalue($37, $39); //@line 113 "ldblib.c"
      var $40=$2; //@line 114 "ldblib.c"
      var $41=$L1; //@line 114 "ldblib.c"
      _lua_xmove($40, $41, 1); //@line 114 "ldblib.c"
      __label__ = 9; break; //@line 115 "ldblib.c"
    case 8: 
      var $43=$2; //@line 117 "ldblib.c"
      var $44=HEAP32[(($arg)>>2)]; //@line 117 "ldblib.c"
      var $45=((($44)+(1))|0); //@line 117 "ldblib.c"
      var $46=_luaL_argerror($43, $45, ((STRING_TABLE.__str36354)|0)); //@line 117 "ldblib.c"
      $1=$46; //@line 117 "ldblib.c"
      __label__ = 25; break; //@line 117 "ldblib.c"
    case 9: 
      __label__ = 10; break; //@line 117 "ldblib.c"
    case 10: 
      var $49=$L1; //@line 118 "ldblib.c"
      var $50=$options; //@line 118 "ldblib.c"
      var $51=_lua_getinfo($49, $50, $ar); //@line 118 "ldblib.c"
      var $52=(($51)|0)!=0; //@line 118 "ldblib.c"
      if ($52) { __label__ = 12; break; } else { __label__ = 11; break; } //@line 118 "ldblib.c"
    case 11: 
      var $54=$2; //@line 119 "ldblib.c"
      var $55=HEAP32[(($arg)>>2)]; //@line 119 "ldblib.c"
      var $56=((($55)+(2))|0); //@line 119 "ldblib.c"
      var $57=_luaL_argerror($54, $56, ((STRING_TABLE.__str37355)|0)); //@line 119 "ldblib.c"
      $1=$57; //@line 119 "ldblib.c"
      __label__ = 25; break; //@line 119 "ldblib.c"
    case 12: 
      var $59=$2; //@line 120 "ldblib.c"
      _lua_createtable($59, 0, 2); //@line 120 "ldblib.c"
      var $60=$options; //@line 121 "ldblib.c"
      var $61=_strchr($60, 83); //@line 121 "ldblib.c"
      var $62=(($61)|0)!=0; //@line 121 "ldblib.c"
      if ($62) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 121 "ldblib.c"
    case 13: 
      var $64=$2; //@line 122 "ldblib.c"
      var $65=(($ar+16)|0); //@line 122 "ldblib.c"
      var $66=HEAP32[(($65)>>2)]; //@line 122 "ldblib.c"
      __Z8settabssP9lua_StatePKcS2_($64, ((STRING_TABLE.__str38356)|0), $66); //@line 122 "ldblib.c"
      var $67=$2; //@line 123 "ldblib.c"
      var $68=(($ar+36)|0); //@line 123 "ldblib.c"
      var $69=(($68)|0); //@line 123 "ldblib.c"
      __Z8settabssP9lua_StatePKcS2_($67, ((STRING_TABLE.__str39357)|0), $69); //@line 123 "ldblib.c"
      var $70=$2; //@line 124 "ldblib.c"
      var $71=(($ar+28)|0); //@line 124 "ldblib.c"
      var $72=HEAP32[(($71)>>2)]; //@line 124 "ldblib.c"
      __Z8settabsiP9lua_StatePKci($70, ((STRING_TABLE.__str40358)|0), $72); //@line 124 "ldblib.c"
      var $73=$2; //@line 125 "ldblib.c"
      var $74=(($ar+32)|0); //@line 125 "ldblib.c"
      var $75=HEAP32[(($74)>>2)]; //@line 125 "ldblib.c"
      __Z8settabsiP9lua_StatePKci($73, ((STRING_TABLE.__str41359)|0), $75); //@line 125 "ldblib.c"
      var $76=$2; //@line 126 "ldblib.c"
      var $77=(($ar+12)|0); //@line 126 "ldblib.c"
      var $78=HEAP32[(($77)>>2)]; //@line 126 "ldblib.c"
      __Z8settabssP9lua_StatePKcS2_($76, ((STRING_TABLE.__str42360)|0), $78); //@line 126 "ldblib.c"
      __label__ = 14; break; //@line 127 "ldblib.c"
    case 14: 
      var $80=$options; //@line 128 "ldblib.c"
      var $81=_strchr($80, 108); //@line 128 "ldblib.c"
      var $82=(($81)|0)!=0; //@line 128 "ldblib.c"
      if ($82) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 128 "ldblib.c"
    case 15: 
      var $84=$2; //@line 129 "ldblib.c"
      var $85=(($ar+20)|0); //@line 129 "ldblib.c"
      var $86=HEAP32[(($85)>>2)]; //@line 129 "ldblib.c"
      __Z8settabsiP9lua_StatePKci($84, ((STRING_TABLE.__str43361)|0), $86); //@line 129 "ldblib.c"
      __label__ = 16; break; //@line 129 "ldblib.c"
    case 16: 
      var $88=$options; //@line 130 "ldblib.c"
      var $89=_strchr($88, 117); //@line 130 "ldblib.c"
      var $90=(($89)|0)!=0; //@line 130 "ldblib.c"
      if ($90) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 130 "ldblib.c"
    case 17: 
      var $92=$2; //@line 131 "ldblib.c"
      var $93=(($ar+24)|0); //@line 131 "ldblib.c"
      var $94=HEAP32[(($93)>>2)]; //@line 131 "ldblib.c"
      __Z8settabsiP9lua_StatePKci($92, ((STRING_TABLE.__str44362)|0), $94); //@line 131 "ldblib.c"
      __label__ = 18; break; //@line 131 "ldblib.c"
    case 18: 
      var $96=$options; //@line 132 "ldblib.c"
      var $97=_strchr($96, 110); //@line 132 "ldblib.c"
      var $98=(($97)|0)!=0; //@line 132 "ldblib.c"
      if ($98) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 132 "ldblib.c"
    case 19: 
      var $100=$2; //@line 133 "ldblib.c"
      var $101=(($ar+4)|0); //@line 133 "ldblib.c"
      var $102=HEAP32[(($101)>>2)]; //@line 133 "ldblib.c"
      __Z8settabssP9lua_StatePKcS2_($100, ((STRING_TABLE.__str45363)|0), $102); //@line 133 "ldblib.c"
      var $103=$2; //@line 134 "ldblib.c"
      var $104=(($ar+8)|0); //@line 134 "ldblib.c"
      var $105=HEAP32[(($104)>>2)]; //@line 134 "ldblib.c"
      __Z8settabssP9lua_StatePKcS2_($103, ((STRING_TABLE.__str46364)|0), $105); //@line 134 "ldblib.c"
      __label__ = 20; break; //@line 135 "ldblib.c"
    case 20: 
      var $107=$options; //@line 136 "ldblib.c"
      var $108=_strchr($107, 76); //@line 136 "ldblib.c"
      var $109=(($108)|0)!=0; //@line 136 "ldblib.c"
      if ($109) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 136 "ldblib.c"
    case 21: 
      var $111=$2; //@line 137 "ldblib.c"
      var $112=$L1; //@line 137 "ldblib.c"
      __Z16treatstackoptionP9lua_StateS0_PKc($111, $112, ((STRING_TABLE.__str47365)|0)); //@line 137 "ldblib.c"
      __label__ = 22; break; //@line 137 "ldblib.c"
    case 22: 
      var $114=$options; //@line 138 "ldblib.c"
      var $115=_strchr($114, 102); //@line 138 "ldblib.c"
      var $116=(($115)|0)!=0; //@line 138 "ldblib.c"
      if ($116) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 138 "ldblib.c"
    case 23: 
      var $118=$2; //@line 139 "ldblib.c"
      var $119=$L1; //@line 139 "ldblib.c"
      __Z16treatstackoptionP9lua_StateS0_PKc($118, $119, ((STRING_TABLE.__str48366)|0)); //@line 139 "ldblib.c"
      __label__ = 24; break; //@line 139 "ldblib.c"
    case 24: 
      $1=1; //@line 140 "ldblib.c"
      __label__ = 25; break; //@line 140 "ldblib.c"
    case 25: 
      var $122=$1; //@line 141 "ldblib.c"
      STACKTOP = __stackBase__;
      return $122; //@line 141 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10db_getinfoP9lua_State["X"]=1;

function __Z11db_getlocalP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 104; _memset(__stackBase__, 0, 104);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $arg=__stackBase__;
      var $L1;
      var $ar=(__stackBase__)+(4);
      var $name;
      $2=$L;
      var $3=$2; //@line 146 "ldblib.c"
      var $4=__Z9getthreadP9lua_StatePi($3, $arg); //@line 146 "ldblib.c"
      $L1=$4; //@line 146 "ldblib.c"
      var $5=$L1; //@line 149 "ldblib.c"
      var $6=$2; //@line 149 "ldblib.c"
      var $7=HEAP32[(($arg)>>2)]; //@line 149 "ldblib.c"
      var $8=((($7)+(1))|0); //@line 149 "ldblib.c"
      var $9=_luaL_checkinteger($6, $8); //@line 149 "ldblib.c"
      var $10=_lua_getstack($5, $9, $ar); //@line 149 "ldblib.c"
      var $11=(($10)|0)!=0; //@line 149 "ldblib.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 149 "ldblib.c"
    case 3: 
      var $13=$2; //@line 150 "ldblib.c"
      var $14=HEAP32[(($arg)>>2)]; //@line 150 "ldblib.c"
      var $15=((($14)+(1))|0); //@line 150 "ldblib.c"
      var $16=_luaL_argerror($13, $15, ((STRING_TABLE.__str27345)|0)); //@line 150 "ldblib.c"
      $1=$16; //@line 150 "ldblib.c"
      __label__ = 7; break; //@line 150 "ldblib.c"
    case 4: 
      var $18=$L1; //@line 151 "ldblib.c"
      var $19=$2; //@line 151 "ldblib.c"
      var $20=HEAP32[(($arg)>>2)]; //@line 151 "ldblib.c"
      var $21=((($20)+(2))|0); //@line 151 "ldblib.c"
      var $22=_luaL_checkinteger($19, $21); //@line 151 "ldblib.c"
      var $23=_lua_getlocal($18, $ar, $22); //@line 151 "ldblib.c"
      $name=$23; //@line 151 "ldblib.c"
      var $24=$name; //@line 152 "ldblib.c"
      var $25=(($24)|0)!=0; //@line 152 "ldblib.c"
      if ($25) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 152 "ldblib.c"
    case 5: 
      var $27=$L1; //@line 153 "ldblib.c"
      var $28=$2; //@line 153 "ldblib.c"
      _lua_xmove($27, $28, 1); //@line 153 "ldblib.c"
      var $29=$2; //@line 154 "ldblib.c"
      var $30=$name; //@line 154 "ldblib.c"
      _lua_pushstring($29, $30); //@line 154 "ldblib.c"
      var $31=$2; //@line 155 "ldblib.c"
      _lua_pushvalue($31, -2); //@line 155 "ldblib.c"
      $1=2; //@line 156 "ldblib.c"
      __label__ = 7; break; //@line 156 "ldblib.c"
    case 6: 
      var $33=$2; //@line 159 "ldblib.c"
      _lua_pushnil($33); //@line 159 "ldblib.c"
      $1=1; //@line 160 "ldblib.c"
      __label__ = 7; break; //@line 160 "ldblib.c"
    case 7: 
      var $35=$1; //@line 162 "ldblib.c"
      STACKTOP = __stackBase__;
      return $35; //@line 162 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11db_getlocalP9lua_State["X"]=1;

function __Z14db_getregistryP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 23 "ldblib.c"
  _lua_pushvalue($2, -10000); //@line 23 "ldblib.c"
  ;
  return 1; //@line 24 "ldblib.c"
}


function __Z15db_getmetatableP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 29 "ldblib.c"
      _luaL_checkany($2, 1); //@line 29 "ldblib.c"
      var $3=$1; //@line 30 "ldblib.c"
      var $4=_lua_getmetatable($3, 1); //@line 30 "ldblib.c"
      var $5=(($4)|0)!=0; //@line 30 "ldblib.c"
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 30 "ldblib.c"
    case 3: 
      var $7=$1; //@line 31 "ldblib.c"
      _lua_pushnil($7); //@line 31 "ldblib.c"
      __label__ = 4; break; //@line 32 "ldblib.c"
    case 4: 
      ;
      return 1; //@line 33 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13db_getupvalueP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 193 "ldblib.c"
  var $3=__Z10auxupvalueP9lua_Statei($2, 1); //@line 193 "ldblib.c"
  ;
  return $3; //@line 193 "ldblib.c"
}


function __Z10db_setfenvP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 55 "ldblib.c"
      _luaL_checktype($2, 2, 5); //@line 55 "ldblib.c"
      var $3=$1; //@line 56 "ldblib.c"
      _lua_settop($3, 2); //@line 56 "ldblib.c"
      var $4=$1; //@line 57 "ldblib.c"
      var $5=_lua_setfenv($4, 1); //@line 57 "ldblib.c"
      var $6=(($5)|0)==0; //@line 57 "ldblib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 57 "ldblib.c"
    case 3: 
      var $8=$1; //@line 58 "ldblib.c"
      var $9=_luaL_error($8, ((STRING_TABLE.__str33351)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 58 "ldblib.c"
      __label__ = 4; break; //@line 58 "ldblib.c"
    case 4: 
      STACKTOP = __stackBase__;
      return 1; //@line 60 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10db_sethookP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $arg=__stackBase__;
      var $mask;
      var $count;
      var $func;
      var $L1;
      var $smask;
      $1=$L;
      var $2=$1; //@line 261 "ldblib.c"
      var $3=__Z9getthreadP9lua_StatePi($2, $arg); //@line 261 "ldblib.c"
      $L1=$3; //@line 261 "ldblib.c"
      var $4=$1; //@line 262 "ldblib.c"
      var $5=HEAP32[(($arg)>>2)]; //@line 262 "ldblib.c"
      var $6=((($5)+(1))|0); //@line 262 "ldblib.c"
      var $7=_lua_type($4, $6); //@line 262 "ldblib.c"
      var $8=(($7)|0) <= 0; //@line 262 "ldblib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 262 "ldblib.c"
    case 3: 
      var $10=$1; //@line 263 "ldblib.c"
      var $11=HEAP32[(($arg)>>2)]; //@line 263 "ldblib.c"
      var $12=((($11)+(1))|0); //@line 263 "ldblib.c"
      _lua_settop($10, $12); //@line 263 "ldblib.c"
      $func=0; //@line 264 "ldblib.c"
      $mask=0; //@line 264 "ldblib.c"
      $count=0; //@line 264 "ldblib.c"
      __label__ = 5; break; //@line 265 "ldblib.c"
    case 4: 
      var $14=$1; //@line 267 "ldblib.c"
      var $15=HEAP32[(($arg)>>2)]; //@line 267 "ldblib.c"
      var $16=((($15)+(2))|0); //@line 267 "ldblib.c"
      var $17=_luaL_checklstring($14, $16, 0); //@line 267 "ldblib.c"
      $smask=$17; //@line 267 "ldblib.c"
      var $18=$1; //@line 268 "ldblib.c"
      var $19=HEAP32[(($arg)>>2)]; //@line 268 "ldblib.c"
      var $20=((($19)+(1))|0); //@line 268 "ldblib.c"
      _luaL_checktype($18, $20, 6); //@line 268 "ldblib.c"
      var $21=$1; //@line 269 "ldblib.c"
      var $22=HEAP32[(($arg)>>2)]; //@line 269 "ldblib.c"
      var $23=((($22)+(3))|0); //@line 269 "ldblib.c"
      var $24=_luaL_optinteger($21, $23, 0); //@line 269 "ldblib.c"
      $count=$24; //@line 269 "ldblib.c"
      $func=30; //@line 270 "ldblib.c"
      var $25=$smask; //@line 270 "ldblib.c"
      var $26=$count; //@line 270 "ldblib.c"
      var $27=__Z8makemaskPKci($25, $26); //@line 270 "ldblib.c"
      $mask=$27; //@line 270 "ldblib.c"
      __label__ = 5; break; //@line 271 "ldblib.c"
    case 5: 
      var $29=$1; //@line 272 "ldblib.c"
      __Z12gethooktableP9lua_State($29); //@line 272 "ldblib.c"
      var $30=$1; //@line 273 "ldblib.c"
      var $31=$L1; //@line 273 "ldblib.c"
      var $32=$31; //@line 273 "ldblib.c"
      _lua_pushlightuserdata($30, $32); //@line 273 "ldblib.c"
      var $33=$1; //@line 274 "ldblib.c"
      var $34=HEAP32[(($arg)>>2)]; //@line 274 "ldblib.c"
      var $35=((($34)+(1))|0); //@line 274 "ldblib.c"
      _lua_pushvalue($33, $35); //@line 274 "ldblib.c"
      var $36=$1; //@line 275 "ldblib.c"
      _lua_rawset($36, -3); //@line 275 "ldblib.c"
      var $37=$1; //@line 276 "ldblib.c"
      _lua_settop($37, -2); //@line 276 "ldblib.c"
      var $38=$L1; //@line 277 "ldblib.c"
      var $39=$func; //@line 277 "ldblib.c"
      var $40=$mask; //@line 277 "ldblib.c"
      var $41=$count; //@line 277 "ldblib.c"
      var $42=_lua_sethook($38, $39, $40, $41); //@line 277 "ldblib.c"
      STACKTOP = __stackBase__;
      return 0; //@line 278 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10db_sethookP9lua_State["X"]=1;

function __Z11db_setlocalP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 104; _memset(__stackBase__, 0, 104);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $arg=__stackBase__;
      var $L1;
      var $ar=(__stackBase__)+(4);
      $2=$L;
      var $3=$2; //@line 167 "ldblib.c"
      var $4=__Z9getthreadP9lua_StatePi($3, $arg); //@line 167 "ldblib.c"
      $L1=$4; //@line 167 "ldblib.c"
      var $5=$L1; //@line 169 "ldblib.c"
      var $6=$2; //@line 169 "ldblib.c"
      var $7=HEAP32[(($arg)>>2)]; //@line 169 "ldblib.c"
      var $8=((($7)+(1))|0); //@line 169 "ldblib.c"
      var $9=_luaL_checkinteger($6, $8); //@line 169 "ldblib.c"
      var $10=_lua_getstack($5, $9, $ar); //@line 169 "ldblib.c"
      var $11=(($10)|0)!=0; //@line 169 "ldblib.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 169 "ldblib.c"
    case 3: 
      var $13=$2; //@line 170 "ldblib.c"
      var $14=HEAP32[(($arg)>>2)]; //@line 170 "ldblib.c"
      var $15=((($14)+(1))|0); //@line 170 "ldblib.c"
      var $16=_luaL_argerror($13, $15, ((STRING_TABLE.__str27345)|0)); //@line 170 "ldblib.c"
      $1=$16; //@line 170 "ldblib.c"
      __label__ = 5; break; //@line 170 "ldblib.c"
    case 4: 
      var $18=$2; //@line 171 "ldblib.c"
      var $19=HEAP32[(($arg)>>2)]; //@line 171 "ldblib.c"
      var $20=((($19)+(3))|0); //@line 171 "ldblib.c"
      _luaL_checkany($18, $20); //@line 171 "ldblib.c"
      var $21=$2; //@line 172 "ldblib.c"
      var $22=HEAP32[(($arg)>>2)]; //@line 172 "ldblib.c"
      var $23=((($22)+(3))|0); //@line 172 "ldblib.c"
      _lua_settop($21, $23); //@line 172 "ldblib.c"
      var $24=$2; //@line 173 "ldblib.c"
      var $25=$L1; //@line 173 "ldblib.c"
      _lua_xmove($24, $25, 1); //@line 173 "ldblib.c"
      var $26=$2; //@line 174 "ldblib.c"
      var $27=$L1; //@line 174 "ldblib.c"
      var $28=$2; //@line 174 "ldblib.c"
      var $29=HEAP32[(($arg)>>2)]; //@line 174 "ldblib.c"
      var $30=((($29)+(2))|0); //@line 174 "ldblib.c"
      var $31=_luaL_checkinteger($28, $30); //@line 174 "ldblib.c"
      var $32=_lua_setlocal($27, $ar, $31); //@line 174 "ldblib.c"
      _lua_pushstring($26, $32); //@line 174 "ldblib.c"
      $1=1; //@line 175 "ldblib.c"
      __label__ = 5; break; //@line 175 "ldblib.c"
    case 5: 
      var $34=$1; //@line 176 "ldblib.c"
      STACKTOP = __stackBase__;
      return $34; //@line 176 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15db_setmetatableP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $t;
      $1=$L;
      var $2=$1; //@line 38 "ldblib.c"
      var $3=_lua_type($2, 2); //@line 38 "ldblib.c"
      $t=$3; //@line 38 "ldblib.c"
      var $4=$t; //@line 39 "ldblib.c"
      var $5=(($4)|0)==0; //@line 39 "ldblib.c"
      if ($5) { var $14 = 1;__label__ = 5; break; } else { __label__ = 3; break; } //@line 39 "ldblib.c"
    case 3: 
      var $7=$t; //@line 39 "ldblib.c"
      var $8=(($7)|0)==5; //@line 39 "ldblib.c"
      if ($8) { var $14 = 1;__label__ = 5; break; } else { __label__ = 4; break; } //@line 39 "ldblib.c"
    case 4: 
      var $10=$1; //@line 39 "ldblib.c"
      var $11=_luaL_argerror($10, 2, ((STRING_TABLE.__str26344)|0)); //@line 39 "ldblib.c"
      var $12=(($11)|0)!=0; //@line 39 "ldblib.c"
      var $14 = $12;__label__ = 5; break; //@line 39 "ldblib.c"
    case 5: 
      var $14;
      var $15=$1; //@line 41 "ldblib.c"
      _lua_settop($15, 2); //@line 41 "ldblib.c"
      var $16=$1; //@line 42 "ldblib.c"
      var $17=$1; //@line 42 "ldblib.c"
      var $18=_lua_setmetatable($17, 1); //@line 42 "ldblib.c"
      _lua_pushboolean($16, $18); //@line 42 "ldblib.c"
      ;
      return 1; //@line 43 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13db_setupvalueP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 198 "ldblib.c"
  _luaL_checkany($2, 3); //@line 198 "ldblib.c"
  var $3=$1; //@line 199 "ldblib.c"
  var $4=__Z10auxupvalueP9lua_Statei($3, 0); //@line 199 "ldblib.c"
  ;
  return $4; //@line 199 "ldblib.c"
}


function __Z10db_errorfbP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 104; _memset(__stackBase__, 0, 104);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $level;
      var $firstpart;
      var $arg=__stackBase__;
      var $L1;
      var $ar=(__stackBase__)+(4);
      $2=$L;
      $firstpart=1; //@line 324 "ldblib.c"
      var $3=$2; //@line 326 "ldblib.c"
      var $4=__Z9getthreadP9lua_StatePi($3, $arg); //@line 326 "ldblib.c"
      $L1=$4; //@line 326 "ldblib.c"
      var $5=$2; //@line 328 "ldblib.c"
      var $6=HEAP32[(($arg)>>2)]; //@line 328 "ldblib.c"
      var $7=((($6)+(2))|0); //@line 328 "ldblib.c"
      var $8=_lua_isnumber($5, $7); //@line 328 "ldblib.c"
      var $9=(($8)|0)!=0; //@line 328 "ldblib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 328 "ldblib.c"
    case 3: 
      var $11=$2; //@line 329 "ldblib.c"
      var $12=HEAP32[(($arg)>>2)]; //@line 329 "ldblib.c"
      var $13=((($12)+(2))|0); //@line 329 "ldblib.c"
      var $14=_lua_tointeger($11, $13); //@line 329 "ldblib.c"
      $level=$14; //@line 329 "ldblib.c"
      var $15=$2; //@line 330 "ldblib.c"
      _lua_settop($15, -2); //@line 330 "ldblib.c"
      __label__ = 5; break; //@line 331 "ldblib.c"
    case 4: 
      var $17=$2; //@line 333 "ldblib.c"
      var $18=$L1; //@line 333 "ldblib.c"
      var $19=(($17)|0)==(($18)|0); //@line 333 "ldblib.c"
      var $20=$19 ? 1 : 0; //@line 333 "ldblib.c"
      $level=$20; //@line 333 "ldblib.c"
      __label__ = 5; break; //@line 333 "ldblib.c"
    case 5: 
      var $22=$2; //@line 334 "ldblib.c"
      var $23=_lua_gettop($22); //@line 334 "ldblib.c"
      var $24=HEAP32[(($arg)>>2)]; //@line 334 "ldblib.c"
      var $25=(($23)|0)==(($24)|0); //@line 334 "ldblib.c"
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 334 "ldblib.c"
    case 6: 
      var $27=$2; //@line 335 "ldblib.c"
      _lua_pushlstring($27, ((__str14332)|0), 0); //@line 335 "ldblib.c"
      __label__ = 11; break; //@line 335 "ldblib.c"
    case 7: 
      var $29=$2; //@line 336 "ldblib.c"
      var $30=HEAP32[(($arg)>>2)]; //@line 336 "ldblib.c"
      var $31=((($30)+(1))|0); //@line 336 "ldblib.c"
      var $32=_lua_isstring($29, $31); //@line 336 "ldblib.c"
      var $33=(($32)|0)!=0; //@line 336 "ldblib.c"
      if ($33) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 336 "ldblib.c"
    case 8: 
      $1=1; //@line 336 "ldblib.c"
      __label__ = 36; break; //@line 336 "ldblib.c"
    case 9: 
      var $36=$2; //@line 337 "ldblib.c"
      _lua_pushlstring($36, ((STRING_TABLE.__str15333)|0), 1); //@line 337 "ldblib.c"
      __label__ = 10; break; //@line 337 "ldblib.c"
    case 10: 
      __label__ = 11; break; //@line 337 "ldblib.c"
    case 11: 
      var $39=$2; //@line 338 "ldblib.c"
      _lua_pushlstring($39, ((STRING_TABLE.__str16334)|0), 16); //@line 338 "ldblib.c"
      __label__ = 12; break; //@line 339 "ldblib.c"
    case 12: 
      var $41=$L1; //@line 339 "ldblib.c"
      var $42=$level; //@line 339 "ldblib.c"
      var $43=((($42)+(1))|0); //@line 339 "ldblib.c"
      $level=$43; //@line 339 "ldblib.c"
      var $44=_lua_getstack($41, $42, $ar); //@line 339 "ldblib.c"
      var $45=(($44)|0)!=0; //@line 339 "ldblib.c"
      if ($45) { __label__ = 13; break; } else { __label__ = 35; break; } //@line 339 "ldblib.c"
    case 13: 
      var $47=$level; //@line 340 "ldblib.c"
      var $48=(($47)|0) > 12; //@line 340 "ldblib.c"
      if ($48) { __label__ = 14; break; } else { __label__ = 22; break; } //@line 340 "ldblib.c"
    case 14: 
      var $50=$firstpart; //@line 340 "ldblib.c"
      var $51=(($50)|0)!=0; //@line 340 "ldblib.c"
      if ($51) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 340 "ldblib.c"
    case 15: 
      var $53=$L1; //@line 342 "ldblib.c"
      var $54=$level; //@line 342 "ldblib.c"
      var $55=((($54)+(10))|0); //@line 342 "ldblib.c"
      var $56=_lua_getstack($53, $55, $ar); //@line 342 "ldblib.c"
      var $57=(($56)|0)!=0; //@line 342 "ldblib.c"
      if ($57) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 342 "ldblib.c"
    case 16: 
      var $59=$level; //@line 343 "ldblib.c"
      var $60=((($59)-(1))|0); //@line 343 "ldblib.c"
      $level=$60; //@line 343 "ldblib.c"
      __label__ = 21; break; //@line 343 "ldblib.c"
    case 17: 
      var $62=$2; //@line 345 "ldblib.c"
      _lua_pushlstring($62, ((STRING_TABLE.__str17335)|0), 5); //@line 345 "ldblib.c"
      __label__ = 18; break; //@line 346 "ldblib.c"
    case 18: 
      var $64=$L1; //@line 346 "ldblib.c"
      var $65=$level; //@line 346 "ldblib.c"
      var $66=((($65)+(10))|0); //@line 346 "ldblib.c"
      var $67=_lua_getstack($64, $66, $ar); //@line 346 "ldblib.c"
      var $68=(($67)|0)!=0; //@line 346 "ldblib.c"
      if ($68) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 346 "ldblib.c"
    case 19: 
      var $70=$level; //@line 347 "ldblib.c"
      var $71=((($70)+(1))|0); //@line 347 "ldblib.c"
      $level=$71; //@line 347 "ldblib.c"
      __label__ = 18; break; //@line 347 "ldblib.c"
    case 20: 
      __label__ = 21; break; //@line 348 "ldblib.c"
    case 21: 
      $firstpart=0; //@line 349 "ldblib.c"
      __label__ = 12; break; //@line 350 "ldblib.c"
    case 22: 
      var $75=$2; //@line 352 "ldblib.c"
      _lua_pushlstring($75, ((STRING_TABLE.__str18336)|0), 2); //@line 352 "ldblib.c"
      var $76=$L1; //@line 353 "ldblib.c"
      var $77=_lua_getinfo($76, ((STRING_TABLE.__str19337)|0), $ar); //@line 353 "ldblib.c"
      var $78=$2; //@line 354 "ldblib.c"
      var $79=(($ar+36)|0); //@line 354 "ldblib.c"
      var $80=(($79)|0); //@line 354 "ldblib.c"
      var $81=_lua_pushfstring($78, ((STRING_TABLE.__str20338)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$80,tempInt)); //@line 354 "ldblib.c"
      var $82=(($ar+20)|0); //@line 355 "ldblib.c"
      var $83=HEAP32[(($82)>>2)]; //@line 355 "ldblib.c"
      var $84=(($83)|0) > 0; //@line 355 "ldblib.c"
      if ($84) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 355 "ldblib.c"
    case 23: 
      var $86=$2; //@line 356 "ldblib.c"
      var $87=(($ar+20)|0); //@line 356 "ldblib.c"
      var $88=HEAP32[(($87)>>2)]; //@line 356 "ldblib.c"
      var $89=_lua_pushfstring($86, ((STRING_TABLE.__str21339)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$88,tempInt)); //@line 356 "ldblib.c"
      __label__ = 24; break; //@line 356 "ldblib.c"
    case 24: 
      var $91=(($ar+8)|0); //@line 357 "ldblib.c"
      var $92=HEAP32[(($91)>>2)]; //@line 357 "ldblib.c"
      var $93=HEAP8[($92)]; //@line 357 "ldblib.c"
      var $94=(($93 << 24) >> 24); //@line 357 "ldblib.c"
      var $95=(($94)|0)!=0; //@line 357 "ldblib.c"
      if ($95) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 357 "ldblib.c"
    case 25: 
      var $97=$2; //@line 358 "ldblib.c"
      var $98=(($ar+4)|0); //@line 358 "ldblib.c"
      var $99=HEAP32[(($98)>>2)]; //@line 358 "ldblib.c"
      var $100=_lua_pushfstring($97, ((STRING_TABLE.__str22340)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$99,tempInt)); //@line 358 "ldblib.c"
      __label__ = 34; break; //@line 358 "ldblib.c"
    case 26: 
      var $102=(($ar+12)|0); //@line 360 "ldblib.c"
      var $103=HEAP32[(($102)>>2)]; //@line 360 "ldblib.c"
      var $104=HEAP8[($103)]; //@line 360 "ldblib.c"
      var $105=(($104 << 24) >> 24); //@line 360 "ldblib.c"
      var $106=(($105)|0)==109; //@line 360 "ldblib.c"
      if ($106) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 360 "ldblib.c"
    case 27: 
      var $108=$2; //@line 361 "ldblib.c"
      var $109=_lua_pushfstring($108, ((STRING_TABLE.__str23341)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 361 "ldblib.c"
      __label__ = 33; break; //@line 361 "ldblib.c"
    case 28: 
      var $111=(($ar+12)|0); //@line 362 "ldblib.c"
      var $112=HEAP32[(($111)>>2)]; //@line 362 "ldblib.c"
      var $113=HEAP8[($112)]; //@line 362 "ldblib.c"
      var $114=(($113 << 24) >> 24); //@line 362 "ldblib.c"
      var $115=(($114)|0)==67; //@line 362 "ldblib.c"
      if ($115) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 362 "ldblib.c"
    case 29: 
      var $117=(($ar+12)|0); //@line 362 "ldblib.c"
      var $118=HEAP32[(($117)>>2)]; //@line 362 "ldblib.c"
      var $119=HEAP8[($118)]; //@line 362 "ldblib.c"
      var $120=(($119 << 24) >> 24); //@line 362 "ldblib.c"
      var $121=(($120)|0)==116; //@line 362 "ldblib.c"
      if ($121) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 362 "ldblib.c"
    case 30: 
      var $123=$2; //@line 363 "ldblib.c"
      _lua_pushlstring($123, ((STRING_TABLE.__str24342)|0), 2); //@line 363 "ldblib.c"
      __label__ = 32; break; //@line 363 "ldblib.c"
    case 31: 
      var $125=$2; //@line 365 "ldblib.c"
      var $126=(($ar+36)|0); //@line 365 "ldblib.c"
      var $127=(($126)|0); //@line 365 "ldblib.c"
      var $128=(($ar+28)|0); //@line 365 "ldblib.c"
      var $129=HEAP32[(($128)>>2)]; //@line 365 "ldblib.c"
      var $130=_lua_pushfstring($125, ((STRING_TABLE.__str25343)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$127,HEAP32[(((tempInt)+(4))>>2)]=$129,tempInt)); //@line 365 "ldblib.c"
      __label__ = 32; break; //@line 365 "ldblib.c"
    case 32: 
      __label__ = 33; break; //@line 365 "ldblib.c"
    case 33: 
      __label__ = 34; break; //@line 367 "ldblib.c"
    case 34: 
      var $134=$2; //@line 368 "ldblib.c"
      var $135=$2; //@line 368 "ldblib.c"
      var $136=_lua_gettop($135); //@line 368 "ldblib.c"
      var $137=HEAP32[(($arg)>>2)]; //@line 368 "ldblib.c"
      var $138=((($136)-($137))|0); //@line 368 "ldblib.c"
      _lua_concat($134, $138); //@line 368 "ldblib.c"
      __label__ = 12; break; //@line 369 "ldblib.c"
    case 35: 
      var $140=$2; //@line 370 "ldblib.c"
      var $141=$2; //@line 370 "ldblib.c"
      var $142=_lua_gettop($141); //@line 370 "ldblib.c"
      var $143=HEAP32[(($arg)>>2)]; //@line 370 "ldblib.c"
      var $144=((($142)-($143))|0); //@line 370 "ldblib.c"
      _lua_concat($140, $144); //@line 370 "ldblib.c"
      $1=1; //@line 371 "ldblib.c"
      __label__ = 36; break; //@line 371 "ldblib.c"
    case 36: 
      var $146=$1; //@line 372 "ldblib.c"
      STACKTOP = __stackBase__;
      return $146; //@line 372 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10db_errorfbP9lua_State["X"]=1;

function _luaopen_debug($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 395 "ldblib.c"
  _luaL_register($2, ((STRING_TABLE.__str318)|0), ((__ZL5dblib)|0)); //@line 395 "ldblib.c"
  ;
  return 1; //@line 396 "ldblib.c"
}


function __Z9getthreadP9lua_StatePi($L, $arg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$L;
      $3=$arg;
      var $4=$2; //@line 77 "ldblib.c"
      var $5=_lua_type($4, 1); //@line 77 "ldblib.c"
      var $6=(($5)|0)==8; //@line 77 "ldblib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 77 "ldblib.c"
    case 3: 
      var $8=$3; //@line 78 "ldblib.c"
      HEAP32[(($8)>>2)]=1; //@line 78 "ldblib.c"
      var $9=$2; //@line 79 "ldblib.c"
      var $10=_lua_tothread($9, 1); //@line 79 "ldblib.c"
      $1=$10; //@line 79 "ldblib.c"
      __label__ = 5; break; //@line 79 "ldblib.c"
    case 4: 
      var $12=$3; //@line 82 "ldblib.c"
      HEAP32[(($12)>>2)]=0; //@line 82 "ldblib.c"
      var $13=$2; //@line 83 "ldblib.c"
      $1=$13; //@line 83 "ldblib.c"
      __label__ = 5; break; //@line 83 "ldblib.c"
    case 5: 
      var $15=$1; //@line 85 "ldblib.c"
      ;
      return $15; //@line 85 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10auxupvalueP9lua_Statei($L, $get) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $name;
      var $n;
      $2=$L;
      $3=$get;
      var $4=$2; //@line 181 "ldblib.c"
      var $5=_luaL_checkinteger($4, 2); //@line 181 "ldblib.c"
      $n=$5; //@line 181 "ldblib.c"
      var $6=$2; //@line 182 "ldblib.c"
      _luaL_checktype($6, 1, 6); //@line 182 "ldblib.c"
      var $7=$2; //@line 183 "ldblib.c"
      var $8=_lua_iscfunction($7, 1); //@line 183 "ldblib.c"
      var $9=(($8)|0)!=0; //@line 183 "ldblib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 183 "ldblib.c"
    case 3: 
      $1=0; //@line 183 "ldblib.c"
      __label__ = 10; break; //@line 183 "ldblib.c"
    case 4: 
      var $12=$3; //@line 184 "ldblib.c"
      var $13=(($12)|0)!=0; //@line 184 "ldblib.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 184 "ldblib.c"
    case 5: 
      var $15=$2; //@line 184 "ldblib.c"
      var $16=$n; //@line 184 "ldblib.c"
      var $17=_lua_getupvalue($15, 1, $16); //@line 184 "ldblib.c"
      var $23 = $17;__label__ = 7; break; //@line 184 "ldblib.c"
    case 6: 
      var $19=$2; //@line 184 "ldblib.c"
      var $20=$n; //@line 184 "ldblib.c"
      var $21=_lua_setupvalue($19, 1, $20); //@line 184 "ldblib.c"
      var $23 = $21;__label__ = 7; break; //@line 184 "ldblib.c"
    case 7: 
      var $23; //@line 184 "ldblib.c"
      $name=$23; //@line 184 "ldblib.c"
      var $24=$name; //@line 185 "ldblib.c"
      var $25=(($24)|0)==0; //@line 185 "ldblib.c"
      if ($25) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 185 "ldblib.c"
    case 8: 
      $1=0; //@line 185 "ldblib.c"
      __label__ = 10; break; //@line 185 "ldblib.c"
    case 9: 
      var $28=$2; //@line 186 "ldblib.c"
      var $29=$name; //@line 186 "ldblib.c"
      _lua_pushstring($28, $29); //@line 186 "ldblib.c"
      var $30=$2; //@line 187 "ldblib.c"
      var $31=$3; //@line 187 "ldblib.c"
      var $32=((($31)+(1))|0); //@line 187 "ldblib.c"
      var $33=(((-$32))|0); //@line 187 "ldblib.c"
      _lua_insert($30, $33); //@line 187 "ldblib.c"
      var $34=$3; //@line 188 "ldblib.c"
      var $35=((($34)+(1))|0); //@line 188 "ldblib.c"
      $1=$35; //@line 188 "ldblib.c"
      __label__ = 10; break; //@line 188 "ldblib.c"
    case 10: 
      var $37=$1; //@line 189 "ldblib.c"
      ;
      return $37; //@line 189 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10auxupvalueP9lua_Statei["X"]=1;

function __Z5hookfP9lua_StateP9lua_Debug($L, $ar) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$L;
      $2=$ar;
      var $3=$1; //@line 210 "ldblib.c"
      _lua_pushlightuserdata($3, __ZL8KEY_HOOK); //@line 210 "ldblib.c"
      var $4=$1; //@line 211 "ldblib.c"
      _lua_rawget($4, -10000); //@line 211 "ldblib.c"
      var $5=$1; //@line 212 "ldblib.c"
      var $6=$1; //@line 212 "ldblib.c"
      var $7=$6; //@line 212 "ldblib.c"
      _lua_pushlightuserdata($5, $7); //@line 212 "ldblib.c"
      var $8=$1; //@line 213 "ldblib.c"
      _lua_rawget($8, -2); //@line 213 "ldblib.c"
      var $9=$1; //@line 214 "ldblib.c"
      var $10=_lua_type($9, -1); //@line 214 "ldblib.c"
      var $11=(($10)|0)==6; //@line 214 "ldblib.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 214 "ldblib.c"
    case 3: 
      var $13=$1; //@line 215 "ldblib.c"
      var $14=$2; //@line 215 "ldblib.c"
      var $15=(($14)|0); //@line 215 "ldblib.c"
      var $16=HEAP32[(($15)>>2)]; //@line 215 "ldblib.c"
      var $17=((__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames+($16<<2))|0); //@line 215 "ldblib.c"
      var $18=HEAP32[(($17)>>2)]; //@line 215 "ldblib.c"
      _lua_pushstring($13, $18); //@line 215 "ldblib.c"
      var $19=$2; //@line 216 "ldblib.c"
      var $20=(($19+20)|0); //@line 216 "ldblib.c"
      var $21=HEAP32[(($20)>>2)]; //@line 216 "ldblib.c"
      var $22=(($21)|0) >= 0; //@line 216 "ldblib.c"
      if ($22) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 216 "ldblib.c"
    case 4: 
      var $24=$1; //@line 217 "ldblib.c"
      var $25=$2; //@line 217 "ldblib.c"
      var $26=(($25+20)|0); //@line 217 "ldblib.c"
      var $27=HEAP32[(($26)>>2)]; //@line 217 "ldblib.c"
      _lua_pushinteger($24, $27); //@line 217 "ldblib.c"
      __label__ = 6; break; //@line 217 "ldblib.c"
    case 5: 
      var $29=$1; //@line 218 "ldblib.c"
      _lua_pushnil($29); //@line 218 "ldblib.c"
      __label__ = 6; break; //@line 218 "ldblib.c"
    case 6: 
      var $31=$1; //@line 220 "ldblib.c"
      _lua_call($31, 2, 0); //@line 220 "ldblib.c"
      __label__ = 7; break; //@line 221 "ldblib.c"
    case 7: 
      ;
      return; //@line 222 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8makemaskPKci($smask, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $mask;
      $1=$smask;
      $2=$count;
      $mask=0; //@line 226 "ldblib.c"
      var $3=$1; //@line 227 "ldblib.c"
      var $4=_strchr($3, 99); //@line 227 "ldblib.c"
      var $5=(($4)|0)!=0; //@line 227 "ldblib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 227 "ldblib.c"
    case 3: 
      var $7=$mask; //@line 227 "ldblib.c"
      var $8=$7 | 1; //@line 227 "ldblib.c"
      $mask=$8; //@line 227 "ldblib.c"
      __label__ = 4; break; //@line 227 "ldblib.c"
    case 4: 
      var $10=$1; //@line 228 "ldblib.c"
      var $11=_strchr($10, 114); //@line 228 "ldblib.c"
      var $12=(($11)|0)!=0; //@line 228 "ldblib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 228 "ldblib.c"
    case 5: 
      var $14=$mask; //@line 228 "ldblib.c"
      var $15=$14 | 2; //@line 228 "ldblib.c"
      $mask=$15; //@line 228 "ldblib.c"
      __label__ = 6; break; //@line 228 "ldblib.c"
    case 6: 
      var $17=$1; //@line 229 "ldblib.c"
      var $18=_strchr($17, 108); //@line 229 "ldblib.c"
      var $19=(($18)|0)!=0; //@line 229 "ldblib.c"
      if ($19) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 229 "ldblib.c"
    case 7: 
      var $21=$mask; //@line 229 "ldblib.c"
      var $22=$21 | 4; //@line 229 "ldblib.c"
      $mask=$22; //@line 229 "ldblib.c"
      __label__ = 8; break; //@line 229 "ldblib.c"
    case 8: 
      var $24=$2; //@line 230 "ldblib.c"
      var $25=(($24)|0) > 0; //@line 230 "ldblib.c"
      if ($25) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 230 "ldblib.c"
    case 9: 
      var $27=$mask; //@line 230 "ldblib.c"
      var $28=$27 | 8; //@line 230 "ldblib.c"
      $mask=$28; //@line 230 "ldblib.c"
      __label__ = 10; break; //@line 230 "ldblib.c"
    case 10: 
      var $30=$mask; //@line 231 "ldblib.c"
      ;
      return $30; //@line 231 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10unmakemaskiPc($mask, $smask) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$mask;
      $2=$smask;
      $i=0; //@line 236 "ldblib.c"
      var $3=$1; //@line 237 "ldblib.c"
      var $4=$3 & 1; //@line 237 "ldblib.c"
      var $5=(($4)|0)!=0; //@line 237 "ldblib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 237 "ldblib.c"
    case 3: 
      var $7=$i; //@line 237 "ldblib.c"
      var $8=((($7)+(1))|0); //@line 237 "ldblib.c"
      $i=$8; //@line 237 "ldblib.c"
      var $9=$2; //@line 237 "ldblib.c"
      var $10=(($9+$7)|0); //@line 237 "ldblib.c"
      HEAP8[($10)]=99; //@line 237 "ldblib.c"
      __label__ = 4; break; //@line 237 "ldblib.c"
    case 4: 
      var $12=$1; //@line 238 "ldblib.c"
      var $13=$12 & 2; //@line 238 "ldblib.c"
      var $14=(($13)|0)!=0; //@line 238 "ldblib.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 238 "ldblib.c"
    case 5: 
      var $16=$i; //@line 238 "ldblib.c"
      var $17=((($16)+(1))|0); //@line 238 "ldblib.c"
      $i=$17; //@line 238 "ldblib.c"
      var $18=$2; //@line 238 "ldblib.c"
      var $19=(($18+$16)|0); //@line 238 "ldblib.c"
      HEAP8[($19)]=114; //@line 238 "ldblib.c"
      __label__ = 6; break; //@line 238 "ldblib.c"
    case 6: 
      var $21=$1; //@line 239 "ldblib.c"
      var $22=$21 & 4; //@line 239 "ldblib.c"
      var $23=(($22)|0)!=0; //@line 239 "ldblib.c"
      if ($23) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 239 "ldblib.c"
    case 7: 
      var $25=$i; //@line 239 "ldblib.c"
      var $26=((($25)+(1))|0); //@line 239 "ldblib.c"
      $i=$26; //@line 239 "ldblib.c"
      var $27=$2; //@line 239 "ldblib.c"
      var $28=(($27+$25)|0); //@line 239 "ldblib.c"
      HEAP8[($28)]=108; //@line 239 "ldblib.c"
      __label__ = 8; break; //@line 239 "ldblib.c"
    case 8: 
      var $30=$i; //@line 240 "ldblib.c"
      var $31=$2; //@line 240 "ldblib.c"
      var $32=(($31+$30)|0); //@line 240 "ldblib.c"
      HEAP8[($32)]=0; //@line 240 "ldblib.c"
      var $33=$2; //@line 241 "ldblib.c"
      ;
      return $33; //@line 241 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12gethooktableP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 246 "ldblib.c"
      _lua_pushlightuserdata($2, __ZL8KEY_HOOK); //@line 246 "ldblib.c"
      var $3=$1; //@line 247 "ldblib.c"
      _lua_rawget($3, -10000); //@line 247 "ldblib.c"
      var $4=$1; //@line 248 "ldblib.c"
      var $5=_lua_type($4, -1); //@line 248 "ldblib.c"
      var $6=(($5)|0)==5; //@line 248 "ldblib.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 248 "ldblib.c"
    case 3: 
      var $8=$1; //@line 249 "ldblib.c"
      _lua_settop($8, -2); //@line 249 "ldblib.c"
      var $9=$1; //@line 250 "ldblib.c"
      _lua_createtable($9, 0, 1); //@line 250 "ldblib.c"
      var $10=$1; //@line 251 "ldblib.c"
      _lua_pushlightuserdata($10, __ZL8KEY_HOOK); //@line 251 "ldblib.c"
      var $11=$1; //@line 252 "ldblib.c"
      _lua_pushvalue($11, -2); //@line 252 "ldblib.c"
      var $12=$1; //@line 253 "ldblib.c"
      _lua_rawset($12, -10000); //@line 253 "ldblib.c"
      __label__ = 4; break; //@line 254 "ldblib.c"
    case 4: 
      ;
      return; //@line 255 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8settabssP9lua_StatePKcS2_($L, $i, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$i;
  $3=$v;
  var $4=$1; //@line 65 "ldblib.c"
  var $5=$3; //@line 65 "ldblib.c"
  _lua_pushstring($4, $5); //@line 65 "ldblib.c"
  var $6=$1; //@line 66 "ldblib.c"
  var $7=$2; //@line 66 "ldblib.c"
  _lua_setfield($6, -2, $7); //@line 66 "ldblib.c"
  ;
  return; //@line 67 "ldblib.c"
}


function __Z8settabsiP9lua_StatePKci($L, $i, $v) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$i;
  $3=$v;
  var $4=$1; //@line 71 "ldblib.c"
  var $5=$3; //@line 71 "ldblib.c"
  _lua_pushinteger($4, $5); //@line 71 "ldblib.c"
  var $6=$1; //@line 72 "ldblib.c"
  var $7=$2; //@line 72 "ldblib.c"
  _lua_setfield($6, -2, $7); //@line 72 "ldblib.c"
  ;
  return; //@line 73 "ldblib.c"
}


function __Z16treatstackoptionP9lua_StateS0_PKc($L, $L1, $fname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$L1;
      $3=$fname;
      var $4=$1; //@line 89 "ldblib.c"
      var $5=$2; //@line 89 "ldblib.c"
      var $6=(($4)|0)==(($5)|0); //@line 89 "ldblib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 89 "ldblib.c"
    case 3: 
      var $8=$1; //@line 90 "ldblib.c"
      _lua_pushvalue($8, -2); //@line 90 "ldblib.c"
      var $9=$1; //@line 91 "ldblib.c"
      _lua_remove($9, -3); //@line 91 "ldblib.c"
      __label__ = 5; break; //@line 92 "ldblib.c"
    case 4: 
      var $11=$2; //@line 94 "ldblib.c"
      var $12=$1; //@line 94 "ldblib.c"
      _lua_xmove($11, $12, 1); //@line 94 "ldblib.c"
      __label__ = 5; break; //@line 94 "ldblib.c"
    case 5: 
      var $14=$1; //@line 95 "ldblib.c"
      var $15=$3; //@line 95 "ldblib.c"
      _lua_setfield($14, -2, $15); //@line 95 "ldblib.c"
      ;
      return; //@line 96 "ldblib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8io_closeP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 135 "liolib.c"
      var $3=_lua_type($2, 1); //@line 135 "liolib.c"
      var $4=(($3)|0)==-1; //@line 135 "liolib.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 135 "liolib.c"
    case 3: 
      var $6=$1; //@line 136 "liolib.c"
      _lua_rawgeti($6, -10001, 2); //@line 136 "liolib.c"
      __label__ = 4; break; //@line 136 "liolib.c"
    case 4: 
      var $8=$1; //@line 137 "liolib.c"
      var $9=__Z6tofileP9lua_State($8); //@line 137 "liolib.c"
      var $10=$1; //@line 138 "liolib.c"
      var $11=__Z9aux_closeP9lua_State($10); //@line 138 "liolib.c"
      ;
      return $11; //@line 138 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8io_flushP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 471 "liolib.c"
  var $3=$1; //@line 471 "liolib.c"
  var $4=__Z9getiofileP9lua_Statei($3, 2); //@line 471 "liolib.c"
  var $5=_fflush($4); //@line 471 "liolib.c"
  var $6=(($5)|0)==0; //@line 471 "liolib.c"
  var $7=(($6)&1); //@line 471 "liolib.c"
  var $8=__Z10pushresultP9lua_StateiPKc($2, $7, 0); //@line 471 "liolib.c"
  ;
  return $8; //@line 471 "liolib.c"
}


function __Z8io_inputP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 222 "liolib.c"
  var $3=__Z8g_iofileP9lua_StateiPKc($2, 1, ((STRING_TABLE.__str43414)|0)); //@line 222 "liolib.c"
  ;
  return $3; //@line 222 "liolib.c"
}


function __Z8io_linesP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $filename;
      var $pf;
      $2=$L;
      var $3=$2; //@line 249 "liolib.c"
      var $4=_lua_type($3, 1); //@line 249 "liolib.c"
      var $5=(($4)|0) <= 0; //@line 249 "liolib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 249 "liolib.c"
    case 3: 
      var $7=$2; //@line 251 "liolib.c"
      _lua_rawgeti($7, -10001, 1); //@line 251 "liolib.c"
      var $8=$2; //@line 252 "liolib.c"
      var $9=__Z7f_linesP9lua_State($8); //@line 252 "liolib.c"
      $1=$9; //@line 252 "liolib.c"
      __label__ = 7; break; //@line 252 "liolib.c"
    case 4: 
      var $11=$2; //@line 255 "liolib.c"
      var $12=_luaL_checklstring($11, 1, 0); //@line 255 "liolib.c"
      $filename=$12; //@line 255 "liolib.c"
      var $13=$2; //@line 256 "liolib.c"
      var $14=__Z7newfileP9lua_State($13); //@line 256 "liolib.c"
      $pf=$14; //@line 256 "liolib.c"
      var $15=$filename; //@line 257 "liolib.c"
      var $16=_fopen($15, ((STRING_TABLE.__str43414)|0)); //@line 257 "liolib.c"
      var $17=$pf; //@line 257 "liolib.c"
      HEAP32[(($17)>>2)]=$16; //@line 257 "liolib.c"
      var $18=$pf; //@line 258 "liolib.c"
      var $19=HEAP32[(($18)>>2)]; //@line 258 "liolib.c"
      var $20=(($19)|0)==0; //@line 258 "liolib.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 258 "liolib.c"
    case 5: 
      var $22=$2; //@line 259 "liolib.c"
      var $23=$filename; //@line 259 "liolib.c"
      __Z9fileerrorP9lua_StateiPKc($22, 1, $23); //@line 259 "liolib.c"
      __label__ = 6; break; //@line 259 "liolib.c"
    case 6: 
      var $25=$2; //@line 260 "liolib.c"
      var $26=$2; //@line 260 "liolib.c"
      var $27=_lua_gettop($26); //@line 260 "liolib.c"
      __Z9aux_linesP9lua_Stateii($25, $27, 1); //@line 260 "liolib.c"
      $1=1; //@line 261 "liolib.c"
      __label__ = 7; break; //@line 261 "liolib.c"
    case 7: 
      var $29=$1; //@line 263 "liolib.c"
      ;
      return $29; //@line 263 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7io_openP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $filename;
      var $mode;
      var $pf;
      $1=$L;
      var $2=$1; //@line 162 "liolib.c"
      var $3=_luaL_checklstring($2, 1, 0); //@line 162 "liolib.c"
      $filename=$3; //@line 162 "liolib.c"
      var $4=$1; //@line 163 "liolib.c"
      var $5=_luaL_optlstring($4, 2, ((STRING_TABLE.__str43414)|0), 0); //@line 163 "liolib.c"
      $mode=$5; //@line 163 "liolib.c"
      var $6=$1; //@line 164 "liolib.c"
      var $7=__Z7newfileP9lua_State($6); //@line 164 "liolib.c"
      $pf=$7; //@line 164 "liolib.c"
      var $8=$filename; //@line 165 "liolib.c"
      var $9=$mode; //@line 165 "liolib.c"
      var $10=_fopen($8, $9); //@line 165 "liolib.c"
      var $11=$pf; //@line 165 "liolib.c"
      HEAP32[(($11)>>2)]=$10; //@line 165 "liolib.c"
      var $12=$pf; //@line 166 "liolib.c"
      var $13=HEAP32[(($12)>>2)]; //@line 166 "liolib.c"
      var $14=(($13)|0)==0; //@line 166 "liolib.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 166 "liolib.c"
    case 3: 
      var $16=$1; //@line 166 "liolib.c"
      var $17=$filename; //@line 166 "liolib.c"
      var $18=__Z10pushresultP9lua_StateiPKc($16, 0, $17); //@line 166 "liolib.c"
      var $21 = $18;__label__ = 5; break; //@line 166 "liolib.c"
    case 4: 
      var $21 = 1;__label__ = 5; break; //@line 166 "liolib.c"
    case 5: 
      var $21; //@line 166 "liolib.c"
      ;
      return $21; //@line 166 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9io_outputP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 227 "liolib.c"
  var $3=__Z8g_iofileP9lua_StateiPKc($2, 2, ((STRING_TABLE.__str45416)|0)); //@line 227 "liolib.c"
  ;
  return $3; //@line 227 "liolib.c"
}


function __Z8io_popenP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $filename;
      var $mode;
      var $pf;
      $1=$L;
      var $2=$1; //@line 175 "liolib.c"
      var $3=_luaL_checklstring($2, 1, 0); //@line 175 "liolib.c"
      $filename=$3; //@line 175 "liolib.c"
      var $4=$1; //@line 176 "liolib.c"
      var $5=_luaL_optlstring($4, 2, ((STRING_TABLE.__str43414)|0), 0); //@line 176 "liolib.c"
      $mode=$5; //@line 176 "liolib.c"
      var $6=$1; //@line 177 "liolib.c"
      var $7=__Z7newfileP9lua_State($6); //@line 177 "liolib.c"
      $pf=$7; //@line 177 "liolib.c"
      var $8=$1; //@line 178 "liolib.c"
      var $9=_luaL_error($8, ((STRING_TABLE.__str44415)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 178 "liolib.c"
      var $10=$pf; //@line 178 "liolib.c"
      HEAP32[(($10)>>2)]=0; //@line 178 "liolib.c"
      var $11=$pf; //@line 179 "liolib.c"
      var $12=HEAP32[(($11)>>2)]; //@line 179 "liolib.c"
      var $13=(($12)|0)==0; //@line 179 "liolib.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 179 "liolib.c"
    case 3: 
      var $15=$1; //@line 179 "liolib.c"
      var $16=$filename; //@line 179 "liolib.c"
      var $17=__Z10pushresultP9lua_StateiPKc($15, 0, $16); //@line 179 "liolib.c"
      var $20 = $17;__label__ = 5; break; //@line 179 "liolib.c"
    case 4: 
      var $20 = 1;__label__ = 5; break; //@line 179 "liolib.c"
    case 5: 
      var $20; //@line 179 "liolib.c"
      STACKTOP = __stackBase__;
      return $20; //@line 179 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7io_readP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 382 "liolib.c"
  var $3=$1; //@line 382 "liolib.c"
  var $4=__Z9getiofileP9lua_Statei($3, 1); //@line 382 "liolib.c"
  var $5=__Z6g_readP9lua_StateP8_IO_FILEi($2, $4, 1); //@line 382 "liolib.c"
  ;
  return $5; //@line 382 "liolib.c"
}


function __Z10io_tmpfileP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $pf;
      $1=$L;
      var $2=$1; //@line 184 "liolib.c"
      var $3=__Z7newfileP9lua_State($2); //@line 184 "liolib.c"
      $pf=$3; //@line 184 "liolib.c"
      var $4=_tmpfile(); //@line 185 "liolib.c"
      var $5=$pf; //@line 185 "liolib.c"
      HEAP32[(($5)>>2)]=$4; //@line 185 "liolib.c"
      var $6=$pf; //@line 186 "liolib.c"
      var $7=HEAP32[(($6)>>2)]; //@line 186 "liolib.c"
      var $8=(($7)|0)==0; //@line 186 "liolib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 186 "liolib.c"
    case 3: 
      var $10=$1; //@line 186 "liolib.c"
      var $11=__Z10pushresultP9lua_StateiPKc($10, 0, 0); //@line 186 "liolib.c"
      var $14 = $11;__label__ = 5; break; //@line 186 "liolib.c"
    case 4: 
      var $14 = 1;__label__ = 5; break; //@line 186 "liolib.c"
    case 5: 
      var $14; //@line 186 "liolib.c"
      ;
      return $14; //@line 186 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7io_typeP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $ud;
      $1=$L;
      var $2=$1; //@line 59 "liolib.c"
      _luaL_checkany($2, 1); //@line 59 "liolib.c"
      var $3=$1; //@line 60 "liolib.c"
      var $4=_lua_touserdata($3, 1); //@line 60 "liolib.c"
      $ud=$4; //@line 60 "liolib.c"
      var $5=$1; //@line 61 "liolib.c"
      _lua_getfield($5, -10000, ((STRING_TABLE.__str19390)|0)); //@line 61 "liolib.c"
      var $6=$ud; //@line 62 "liolib.c"
      var $7=(($6)|0)==0; //@line 62 "liolib.c"
      if ($7) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 62 "liolib.c"
    case 3: 
      var $9=$1; //@line 62 "liolib.c"
      var $10=_lua_getmetatable($9, 1); //@line 62 "liolib.c"
      var $11=(($10)|0)!=0; //@line 62 "liolib.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 62 "liolib.c"
    case 4: 
      var $13=$1; //@line 62 "liolib.c"
      var $14=_lua_rawequal($13, -2, -1); //@line 62 "liolib.c"
      var $15=(($14)|0)!=0; //@line 62 "liolib.c"
      if ($15) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 62 "liolib.c"
    case 5: 
      var $17=$1; //@line 63 "liolib.c"
      _lua_pushnil($17); //@line 63 "liolib.c"
      __label__ = 10; break; //@line 63 "liolib.c"
    case 6: 
      var $19=$ud; //@line 64 "liolib.c"
      var $20=$19; //@line 64 "liolib.c"
      var $21=HEAP32[(($20)>>2)]; //@line 64 "liolib.c"
      var $22=(($21)|0)==0; //@line 64 "liolib.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 64 "liolib.c"
    case 7: 
      var $24=$1; //@line 65 "liolib.c"
      _lua_pushlstring($24, ((STRING_TABLE.__str41412)|0), 11); //@line 65 "liolib.c"
      __label__ = 9; break; //@line 65 "liolib.c"
    case 8: 
      var $26=$1; //@line 67 "liolib.c"
      _lua_pushlstring($26, ((STRING_TABLE.__str42413)|0), 4); //@line 67 "liolib.c"
      __label__ = 9; break; //@line 67 "liolib.c"
    case 9: 
      __label__ = 10; break; //@line 67 "liolib.c"
    case 10: 
      ;
      return 1; //@line 68 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8io_writeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 433 "liolib.c"
  var $3=$1; //@line 433 "liolib.c"
  var $4=__Z9getiofileP9lua_Statei($3, 2); //@line 433 "liolib.c"
  var $5=__Z7g_writeP9lua_StateP8_IO_FILEi($2, $4, 1); //@line 433 "liolib.c"
  ;
  return $5; //@line 433 "liolib.c"
}


function __Z7f_flushP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 476 "liolib.c"
  var $3=$1; //@line 476 "liolib.c"
  var $4=__Z6tofileP9lua_State($3); //@line 476 "liolib.c"
  var $5=_fflush($4); //@line 476 "liolib.c"
  var $6=(($5)|0)==0; //@line 476 "liolib.c"
  var $7=(($6)&1); //@line 476 "liolib.c"
  var $8=__Z10pushresultP9lua_StateiPKc($2, $7, 0); //@line 476 "liolib.c"
  ;
  return $8; //@line 476 "liolib.c"
}


function __Z7f_linesP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 242 "liolib.c"
  var $3=__Z6tofileP9lua_State($2); //@line 242 "liolib.c"
  var $4=$1; //@line 243 "liolib.c"
  __Z9aux_linesP9lua_Stateii($4, 1, 0); //@line 243 "liolib.c"
  ;
  return 1; //@line 244 "liolib.c"
}


function __Z6f_readP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 387 "liolib.c"
  var $3=$1; //@line 387 "liolib.c"
  var $4=__Z6tofileP9lua_State($3); //@line 387 "liolib.c"
  var $5=__Z6g_readP9lua_StateP8_IO_FILEi($2, $4, 2); //@line 387 "liolib.c"
  ;
  return $5; //@line 387 "liolib.c"
}


function __Z6f_seekP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      var $op;
      var $offset;
      $2=$L;
      var $3=$2; //@line 445 "liolib.c"
      var $4=__Z6tofileP9lua_State($3); //@line 445 "liolib.c"
      $f=$4; //@line 445 "liolib.c"
      var $5=$2; //@line 446 "liolib.c"
      var $6=_luaL_checkoption($5, 2, ((STRING_TABLE.__str33404)|0), ((__ZZ6f_seekP9lua_StateE9modenames)|0)); //@line 446 "liolib.c"
      $op=$6; //@line 446 "liolib.c"
      var $7=$2; //@line 447 "liolib.c"
      var $8=_luaL_optinteger($7, 3, 0); //@line 447 "liolib.c"
      $offset=$8; //@line 447 "liolib.c"
      var $9=$f; //@line 448 "liolib.c"
      var $10=$offset; //@line 448 "liolib.c"
      var $11=$op; //@line 448 "liolib.c"
      var $12=((__ZZ6f_seekP9lua_StateE4mode+($11<<2))|0); //@line 448 "liolib.c"
      var $13=HEAP32[(($12)>>2)]; //@line 448 "liolib.c"
      var $14=_fseek($9, $10, $13); //@line 448 "liolib.c"
      $op=$14; //@line 448 "liolib.c"
      var $15=$op; //@line 449 "liolib.c"
      var $16=(($15)|0)!=0; //@line 449 "liolib.c"
      if ($16) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 449 "liolib.c"
    case 3: 
      var $18=$2; //@line 450 "liolib.c"
      var $19=__Z10pushresultP9lua_StateiPKc($18, 0, 0); //@line 450 "liolib.c"
      $1=$19; //@line 450 "liolib.c"
      __label__ = 5; break; //@line 450 "liolib.c"
    case 4: 
      var $21=$2; //@line 452 "liolib.c"
      var $22=$f; //@line 452 "liolib.c"
      var $23=_ftell($22); //@line 452 "liolib.c"
      _lua_pushinteger($21, $23); //@line 452 "liolib.c"
      $1=1; //@line 453 "liolib.c"
      __label__ = 5; break; //@line 453 "liolib.c"
    case 5: 
      var $25=$1; //@line 455 "liolib.c"
      ;
      return $25; //@line 455 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9f_setvbufP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $f;
  var $op;
  var $sz;
  var $res;
  $1=$L;
  var $2=$1; //@line 461 "liolib.c"
  var $3=__Z6tofileP9lua_State($2); //@line 461 "liolib.c"
  $f=$3; //@line 461 "liolib.c"
  var $4=$1; //@line 462 "liolib.c"
  var $5=_luaL_checkoption($4, 2, 0, ((__ZZ9f_setvbufP9lua_StateE9modenames)|0)); //@line 462 "liolib.c"
  $op=$5; //@line 462 "liolib.c"
  var $6=$1; //@line 463 "liolib.c"
  var $7=_luaL_optinteger($6, 3, 8192); //@line 463 "liolib.c"
  $sz=$7; //@line 463 "liolib.c"
  var $8=$f; //@line 464 "liolib.c"
  var $9=$op; //@line 464 "liolib.c"
  var $10=((__ZZ9f_setvbufP9lua_StateE4mode+($9<<2))|0); //@line 464 "liolib.c"
  var $11=HEAP32[(($10)>>2)]; //@line 464 "liolib.c"
  var $12=$sz; //@line 464 "liolib.c"
  var $13=_setvbuf($8, 0, $11, $12); //@line 464 "liolib.c"
  $res=$13; //@line 464 "liolib.c"
  var $14=$1; //@line 465 "liolib.c"
  var $15=$res; //@line 465 "liolib.c"
  var $16=(($15)|0)==0; //@line 465 "liolib.c"
  var $17=(($16)&1); //@line 465 "liolib.c"
  var $18=__Z10pushresultP9lua_StateiPKc($14, $17, 0); //@line 465 "liolib.c"
  ;
  return $18; //@line 465 "liolib.c"
}


function __Z7f_writeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 438 "liolib.c"
  var $3=$1; //@line 438 "liolib.c"
  var $4=__Z6tofileP9lua_State($3); //@line 438 "liolib.c"
  var $5=__Z7g_writeP9lua_StateP8_IO_FILEi($2, $4, 2); //@line 438 "liolib.c"
  ;
  return $5; //@line 438 "liolib.c"
}


function __Z5io_gcP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $f;
      $1=$L;
      var $2=$1; //@line 143 "liolib.c"
      var $3=_luaL_checkudata($2, 1, ((STRING_TABLE.__str19390)|0)); //@line 143 "liolib.c"
      var $4=$3; //@line 143 "liolib.c"
      var $5=HEAP32[(($4)>>2)]; //@line 143 "liolib.c"
      $f=$5; //@line 143 "liolib.c"
      var $6=$f; //@line 145 "liolib.c"
      var $7=(($6)|0)!=0; //@line 145 "liolib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 145 "liolib.c"
    case 3: 
      var $9=$1; //@line 146 "liolib.c"
      var $10=__Z9aux_closeP9lua_State($9); //@line 146 "liolib.c"
      __label__ = 4; break; //@line 146 "liolib.c"
    case 4: 
      ;
      return 0; //@line 147 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11io_tostringP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $f;
      $1=$L;
      var $2=$1; //@line 152 "liolib.c"
      var $3=_luaL_checkudata($2, 1, ((STRING_TABLE.__str19390)|0)); //@line 152 "liolib.c"
      var $4=$3; //@line 152 "liolib.c"
      var $5=HEAP32[(($4)>>2)]; //@line 152 "liolib.c"
      $f=$5; //@line 152 "liolib.c"
      var $6=$f; //@line 153 "liolib.c"
      var $7=(($6)|0)==0; //@line 153 "liolib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 153 "liolib.c"
    case 3: 
      var $9=$1; //@line 154 "liolib.c"
      _lua_pushlstring($9, ((STRING_TABLE.__str25396)|0), 13); //@line 154 "liolib.c"
      __label__ = 5; break; //@line 154 "liolib.c"
    case 4: 
      var $11=$1; //@line 156 "liolib.c"
      var $12=$f; //@line 156 "liolib.c"
      var $13=_lua_pushfstring($11, ((STRING_TABLE.__str26397)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$12,tempInt)); //@line 156 "liolib.c"
      __label__ = 5; break; //@line 156 "liolib.c"
    case 5: 
      STACKTOP = __stackBase__;
      return 1; //@line 157 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaopen_io($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 538 "liolib.c"
  __Z10createmetaP9lua_State($2); //@line 538 "liolib.c"
  var $3=$1; //@line 540 "liolib.c"
  __Z7newfenvP9lua_StatePFiS0_E($3, 44); //@line 540 "liolib.c"
  var $4=$1; //@line 541 "liolib.c"
  _lua_replace($4, -10001); //@line 541 "liolib.c"
  var $5=$1; //@line 543 "liolib.c"
  _luaL_register($5, ((STRING_TABLE.__str15386)|0), ((__ZL5iolib)|0)); //@line 543 "liolib.c"
  var $6=$1; //@line 545 "liolib.c"
  __Z7newfenvP9lua_StatePFiS0_E($6, 46); //@line 545 "liolib.c"
  var $7=$1; //@line 546 "liolib.c"
  var $8=HEAP32[((_stdin)>>2)]; //@line 546 "liolib.c"
  __Z13createstdfileP9lua_StateP8_IO_FILEiPKc($7, $8, 1, ((STRING_TABLE.__str16387)|0)); //@line 546 "liolib.c"
  var $9=$1; //@line 547 "liolib.c"
  var $10=HEAP32[((_stdout)>>2)]; //@line 547 "liolib.c"
  __Z13createstdfileP9lua_StateP8_IO_FILEiPKc($9, $10, 2, ((STRING_TABLE.__str17388)|0)); //@line 547 "liolib.c"
  var $11=$1; //@line 548 "liolib.c"
  var $12=HEAP32[((_stderr)>>2)]; //@line 548 "liolib.c"
  __Z13createstdfileP9lua_StateP8_IO_FILEiPKc($11, $12, 0, ((STRING_TABLE.__str18389)|0)); //@line 548 "liolib.c"
  var $13=$1; //@line 549 "liolib.c"
  _lua_settop($13, -2); //@line 549 "liolib.c"
  var $14=$1; //@line 550 "liolib.c"
  _lua_getfield($14, -1, ((STRING_TABLE.__str6377)|0)); //@line 550 "liolib.c"
  var $15=$1; //@line 551 "liolib.c"
  __Z7newfenvP9lua_StatePFiS0_E($15, 48); //@line 551 "liolib.c"
  var $16=$1; //@line 552 "liolib.c"
  var $17=_lua_setfenv($16, -2); //@line 552 "liolib.c"
  var $18=$1; //@line 553 "liolib.c"
  _lua_settop($18, -2); //@line 553 "liolib.c"
  ;
  return 1; //@line 554 "liolib.c"
}


function __Z10createmetaP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 511 "liolib.c"
  var $3=_luaL_newmetatable($2, ((STRING_TABLE.__str19390)|0)); //@line 511 "liolib.c"
  var $4=$1; //@line 512 "liolib.c"
  _lua_pushvalue($4, -1); //@line 512 "liolib.c"
  var $5=$1; //@line 513 "liolib.c"
  _lua_setfield($5, -2, ((STRING_TABLE.__str24395)|0)); //@line 513 "liolib.c"
  var $6=$1; //@line 514 "liolib.c"
  _luaL_register($6, 0, ((__ZL4flib)|0)); //@line 514 "liolib.c"
  ;
  return; //@line 515 "liolib.c"
}


function __Z7newfenvP9lua_StatePFiS0_E($L, $cls) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$cls;
  var $3=$1; //@line 531 "liolib.c"
  _lua_createtable($3, 0, 1); //@line 531 "liolib.c"
  var $4=$1; //@line 532 "liolib.c"
  var $5=$2; //@line 532 "liolib.c"
  _lua_pushcclosure($4, $5, 0); //@line 532 "liolib.c"
  var $6=$1; //@line 533 "liolib.c"
  _lua_setfield($6, -2, ((STRING_TABLE.__str23394)|0)); //@line 533 "liolib.c"
  ;
  return; //@line 534 "liolib.c"
}


function __Z9io_fcloseP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $p;
  var $ok;
  $1=$L;
  var $2=$1; //@line 120 "liolib.c"
  var $3=_luaL_checkudata($2, 1, ((STRING_TABLE.__str19390)|0)); //@line 120 "liolib.c"
  var $4=$3; //@line 120 "liolib.c"
  $p=$4; //@line 120 "liolib.c"
  var $5=$p; //@line 121 "liolib.c"
  var $6=HEAP32[(($5)>>2)]; //@line 121 "liolib.c"
  var $7=_fclose($6); //@line 121 "liolib.c"
  var $8=(($7)|0)==0; //@line 121 "liolib.c"
  var $9=(($8)&1); //@line 121 "liolib.c"
  $ok=$9; //@line 121 "liolib.c"
  var $10=$p; //@line 122 "liolib.c"
  HEAP32[(($10)>>2)]=0; //@line 122 "liolib.c"
  var $11=$1; //@line 123 "liolib.c"
  var $12=$ok; //@line 123 "liolib.c"
  var $13=__Z10pushresultP9lua_StateiPKc($11, $12, 0); //@line 123 "liolib.c"
  ;
  return $13; //@line 123 "liolib.c"
}


function __Z10io_nocloseP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 99 "liolib.c"
  _lua_pushnil($2); //@line 99 "liolib.c"
  var $3=$1; //@line 100 "liolib.c"
  _lua_pushlstring($3, ((STRING_TABLE.__str22393)|0), 26); //@line 100 "liolib.c"
  ;
  return 2; //@line 101 "liolib.c"
}


function __Z13createstdfileP9lua_StateP8_IO_FILEiPKc($L, $f, $k, $fname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $1=$L;
      $2=$f;
      $3=$k;
      $4=$fname;
      var $5=$2; //@line 519 "liolib.c"
      var $6=$1; //@line 519 "liolib.c"
      var $7=__Z7newfileP9lua_State($6); //@line 519 "liolib.c"
      HEAP32[(($7)>>2)]=$5; //@line 519 "liolib.c"
      var $8=$3; //@line 520 "liolib.c"
      var $9=(($8)|0) > 0; //@line 520 "liolib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 520 "liolib.c"
    case 3: 
      var $11=$1; //@line 521 "liolib.c"
      _lua_pushvalue($11, -1); //@line 521 "liolib.c"
      var $12=$1; //@line 522 "liolib.c"
      var $13=$3; //@line 522 "liolib.c"
      _lua_rawseti($12, -10001, $13); //@line 522 "liolib.c"
      __label__ = 4; break; //@line 523 "liolib.c"
    case 4: 
      var $15=$1; //@line 524 "liolib.c"
      _lua_pushvalue($15, -2); //@line 524 "liolib.c"
      var $16=$1; //@line 525 "liolib.c"
      var $17=_lua_setfenv($16, -2); //@line 525 "liolib.c"
      var $18=$1; //@line 526 "liolib.c"
      var $19=$4; //@line 526 "liolib.c"
      _lua_setfield($18, -3, $19); //@line 526 "liolib.c"
      ;
      return; //@line 527 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9io_pcloseP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $p;
  var $ok;
  $1=$L;
  var $2=$1; //@line 109 "liolib.c"
  var $3=_luaL_checkudata($2, 1, ((STRING_TABLE.__str19390)|0)); //@line 109 "liolib.c"
  var $4=$3; //@line 109 "liolib.c"
  $p=$4; //@line 109 "liolib.c"
  var $5=$p; //@line 110 "liolib.c"
  $ok=0; //@line 110 "liolib.c"
  var $6=$p; //@line 111 "liolib.c"
  HEAP32[(($6)>>2)]=0; //@line 111 "liolib.c"
  var $7=$1; //@line 112 "liolib.c"
  var $8=$ok; //@line 112 "liolib.c"
  var $9=__Z10pushresultP9lua_StateiPKc($7, $8, 0); //@line 112 "liolib.c"
  ;
  return $9; //@line 112 "liolib.c"
}


function __Z10pushresultP9lua_StateiPKc($L, $i, $filename) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $en;
      $2=$L;
      $3=$i;
      $4=$filename;
      var $5=___errno_location(); //@line 31 "liolib.c"
      var $6=HEAP32[(($5)>>2)]; //@line 31 "liolib.c"
      $en=$6; //@line 31 "liolib.c"
      var $7=$3; //@line 32 "liolib.c"
      var $8=(($7)|0)!=0; //@line 32 "liolib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 32 "liolib.c"
    case 3: 
      var $10=$2; //@line 33 "liolib.c"
      _lua_pushboolean($10, 1); //@line 33 "liolib.c"
      $1=1; //@line 34 "liolib.c"
      __label__ = 8; break; //@line 34 "liolib.c"
    case 4: 
      var $12=$2; //@line 37 "liolib.c"
      _lua_pushnil($12); //@line 37 "liolib.c"
      var $13=$4; //@line 38 "liolib.c"
      var $14=(($13)|0)!=0; //@line 38 "liolib.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 38 "liolib.c"
    case 5: 
      var $16=$2; //@line 39 "liolib.c"
      var $17=$4; //@line 39 "liolib.c"
      var $18=$en; //@line 39 "liolib.c"
      var $19=_strerror($18); //@line 39 "liolib.c"
      var $20=_lua_pushfstring($16, ((STRING_TABLE.__str20391)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$19,tempInt)); //@line 39 "liolib.c"
      __label__ = 7; break; //@line 39 "liolib.c"
    case 6: 
      var $22=$2; //@line 41 "liolib.c"
      var $23=$en; //@line 41 "liolib.c"
      var $24=_strerror($23); //@line 41 "liolib.c"
      var $25=_lua_pushfstring($22, ((STRING_TABLE.__str21392)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$24,tempInt)); //@line 41 "liolib.c"
      __label__ = 7; break; //@line 41 "liolib.c"
    case 7: 
      var $27=$2; //@line 42 "liolib.c"
      var $28=$en; //@line 42 "liolib.c"
      _lua_pushinteger($27, $28); //@line 42 "liolib.c"
      $1=3; //@line 43 "liolib.c"
      __label__ = 8; break; //@line 43 "liolib.c"
    case 8: 
      var $30=$1; //@line 45 "liolib.c"
      STACKTOP = __stackBase__;
      return $30; //@line 45 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7newfileP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $pf;
  $1=$L;
  var $2=$1; //@line 87 "liolib.c"
  var $3=_lua_newuserdata($2, 4); //@line 87 "liolib.c"
  var $4=$3; //@line 87 "liolib.c"
  $pf=$4; //@line 87 "liolib.c"
  var $5=$pf; //@line 88 "liolib.c"
  HEAP32[(($5)>>2)]=0; //@line 88 "liolib.c"
  var $6=$1; //@line 89 "liolib.c"
  _lua_getfield($6, -10000, ((STRING_TABLE.__str19390)|0)); //@line 89 "liolib.c"
  var $7=$1; //@line 90 "liolib.c"
  var $8=_lua_setmetatable($7, -2); //@line 90 "liolib.c"
  var $9=$pf; //@line 91 "liolib.c"
  ;
  return $9; //@line 91 "liolib.c"
}


function __Z9aux_closeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 128 "liolib.c"
  _lua_getfenv($2, 1); //@line 128 "liolib.c"
  var $3=$1; //@line 129 "liolib.c"
  _lua_getfield($3, -1, ((STRING_TABLE.__str23394)|0)); //@line 129 "liolib.c"
  var $4=$1; //@line 130 "liolib.c"
  var $5=_lua_tocfunction($4, -1); //@line 130 "liolib.c"
  var $6=$1; //@line 130 "liolib.c"
  var $7=FUNCTION_TABLE[$5]($6); //@line 130 "liolib.c"
  ;
  return $7; //@line 130 "liolib.c"
}


function __Z7g_writeP9lua_StateP8_IO_FILEi($L, $f, $arg) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $nargs;
      var $status;
      var $l=__stackBase__;
      var $s;
      $1=$L;
      $2=$f;
      $3=$arg;
      var $4=$1; //@line 414 "liolib.c"
      var $5=_lua_gettop($4); //@line 414 "liolib.c"
      var $6=((($5)-(1))|0); //@line 414 "liolib.c"
      $nargs=$6; //@line 414 "liolib.c"
      $status=1; //@line 415 "liolib.c"
      __label__ = 3; break; //@line 416 "liolib.c"
    case 3: 
      var $8=$nargs; //@line 416 "liolib.c"
      var $9=((($8)-(1))|0); //@line 416 "liolib.c"
      $nargs=$9; //@line 416 "liolib.c"
      var $10=(($8)|0)!=0; //@line 416 "liolib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 416 "liolib.c"
    case 4: 
      var $12=$1; //@line 417 "liolib.c"
      var $13=$3; //@line 417 "liolib.c"
      var $14=_lua_type($12, $13); //@line 417 "liolib.c"
      var $15=(($14)|0)==3; //@line 417 "liolib.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 417 "liolib.c"
    case 5: 
      var $17=$status; //@line 419 "liolib.c"
      var $18=(($17)|0)!=0; //@line 419 "liolib.c"
      if ($18) { __label__ = 6; break; } else { var $27 = 0;__label__ = 7; break; } //@line 419 "liolib.c"
    case 6: 
      var $20=$2; //@line 420 "liolib.c"
      var $21=$1; //@line 420 "liolib.c"
      var $22=$3; //@line 420 "liolib.c"
      var $23=_lua_tonumber($21, $22); //@line 420 "liolib.c"
      var $24=_fprintf($20, ((STRING_TABLE.__str28399)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,(tempDoubleF64[0]=$23,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt)); //@line 420 "liolib.c"
      var $25=(($24)|0) > 0; //@line 420 "liolib.c"
      var $27 = $25;__label__ = 7; break; //@line 420 "liolib.c"
    case 7: 
      var $27;
      var $28=(($27)&1); //@line 420 "liolib.c"
      $status=$28; //@line 420 "liolib.c"
      __label__ = 11; break; //@line 421 "liolib.c"
    case 8: 
      var $30=$1; //@line 424 "liolib.c"
      var $31=$3; //@line 424 "liolib.c"
      var $32=_luaL_checklstring($30, $31, $l); //@line 424 "liolib.c"
      $s=$32; //@line 424 "liolib.c"
      var $33=$status; //@line 425 "liolib.c"
      var $34=(($33)|0)!=0; //@line 425 "liolib.c"
      if ($34) { __label__ = 9; break; } else { var $43 = 0;__label__ = 10; break; } //@line 425 "liolib.c"
    case 9: 
      var $36=$s; //@line 425 "liolib.c"
      var $37=HEAP32[(($l)>>2)]; //@line 425 "liolib.c"
      var $38=$2; //@line 425 "liolib.c"
      var $39=_fwrite($36, 1, $37, $38); //@line 425 "liolib.c"
      var $40=HEAP32[(($l)>>2)]; //@line 425 "liolib.c"
      var $41=(($39)|0)==(($40)|0); //@line 425 "liolib.c"
      var $43 = $41;__label__ = 10; break; //@line 425 "liolib.c"
    case 10: 
      var $43;
      var $44=(($43)&1); //@line 425 "liolib.c"
      $status=$44; //@line 425 "liolib.c"
      __label__ = 11; break; //@line 426 "liolib.c"
    case 11: 
      __label__ = 12; break; //@line 427 "liolib.c"
    case 12: 
      var $47=$3; //@line 416 "liolib.c"
      var $48=((($47)+(1))|0); //@line 416 "liolib.c"
      $3=$48; //@line 416 "liolib.c"
      __label__ = 3; break; //@line 416 "liolib.c"
    case 13: 
      var $50=$1; //@line 428 "liolib.c"
      var $51=$status; //@line 428 "liolib.c"
      var $52=__Z10pushresultP9lua_StateiPKc($50, $51, 0); //@line 428 "liolib.c"
      STACKTOP = __stackBase__;
      return $52; //@line 428 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7g_writeP9lua_StateP8_IO_FILEi["X"]=1;

function __Z6tofileP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $f;
      $1=$L;
      var $2=$1; //@line 73 "liolib.c"
      var $3=_luaL_checkudata($2, 1, ((STRING_TABLE.__str19390)|0)); //@line 73 "liolib.c"
      var $4=$3; //@line 73 "liolib.c"
      $f=$4; //@line 73 "liolib.c"
      var $5=$f; //@line 74 "liolib.c"
      var $6=HEAP32[(($5)>>2)]; //@line 74 "liolib.c"
      var $7=(($6)|0)==0; //@line 74 "liolib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 74 "liolib.c"
    case 3: 
      var $9=$1; //@line 75 "liolib.c"
      var $10=_luaL_error($9, ((STRING_TABLE.__str27398)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 75 "liolib.c"
      __label__ = 4; break; //@line 75 "liolib.c"
    case 4: 
      var $12=$f; //@line 76 "liolib.c"
      var $13=HEAP32[(($12)>>2)]; //@line 76 "liolib.c"
      STACKTOP = __stackBase__;
      return $13; //@line 76 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z6g_readP9lua_StateP8_IO_FILEi($L, $f, $first) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $nargs;
      var $success;
      var $n;
      var $l;
      var $p;
      $2=$L;
      $3=$f;
      $4=$first;
      var $5=$2; //@line 335 "liolib.c"
      var $6=_lua_gettop($5); //@line 335 "liolib.c"
      var $7=((($6)-(1))|0); //@line 335 "liolib.c"
      $nargs=$7; //@line 335 "liolib.c"
      var $8=$3; //@line 338 "liolib.c"
      _clearerr($8); //@line 338 "liolib.c"
      var $9=$nargs; //@line 339 "liolib.c"
      var $10=(($9)|0)==0; //@line 339 "liolib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 339 "liolib.c"
    case 3: 
      var $12=$2; //@line 340 "liolib.c"
      var $13=$3; //@line 340 "liolib.c"
      var $14=__Z9read_lineP9lua_StateP8_IO_FILE($12, $13); //@line 340 "liolib.c"
      $success=$14; //@line 340 "liolib.c"
      var $15=$4; //@line 341 "liolib.c"
      var $16=((($15)+(1))|0); //@line 341 "liolib.c"
      $n=$16; //@line 341 "liolib.c"
      __label__ = 25; break; //@line 342 "liolib.c"
    case 4: 
      var $18=$2; //@line 344 "liolib.c"
      var $19=$nargs; //@line 344 "liolib.c"
      var $20=((($19)+(20))|0); //@line 344 "liolib.c"
      _luaL_checkstack($18, $20, ((STRING_TABLE.__str35406)|0)); //@line 344 "liolib.c"
      $success=1; //@line 345 "liolib.c"
      var $21=$4; //@line 346 "liolib.c"
      $n=$21; //@line 346 "liolib.c"
      __label__ = 5; break; //@line 346 "liolib.c"
    case 5: 
      var $23=$nargs; //@line 346 "liolib.c"
      var $24=((($23)-(1))|0); //@line 346 "liolib.c"
      $nargs=$24; //@line 346 "liolib.c"
      var $25=(($23)|0)!=0; //@line 346 "liolib.c"
      if ($25) { __label__ = 6; break; } else { var $30 = 0;__label__ = 7; break; } //@line 346 "liolib.c"
    case 6: 
      var $27=$success; //@line 346 "liolib.c"
      var $28=(($27)|0)!=0; //@line 346 "liolib.c"
      var $30 = $28;__label__ = 7; break; //@line 346 "liolib.c"
    case 7: 
      var $30;
      if ($30) { __label__ = 8; break; } else { __label__ = 24; break; } //@line 346 "liolib.c"
    case 8: 
      var $32=$2; //@line 347 "liolib.c"
      var $33=$n; //@line 347 "liolib.c"
      var $34=_lua_type($32, $33); //@line 347 "liolib.c"
      var $35=(($34)|0)==3; //@line 347 "liolib.c"
      if ($35) { __label__ = 9; break; } else { __label__ = 13; break; } //@line 347 "liolib.c"
    case 9: 
      var $37=$2; //@line 348 "liolib.c"
      var $38=$n; //@line 348 "liolib.c"
      var $39=_lua_tointeger($37, $38); //@line 348 "liolib.c"
      $l=$39; //@line 348 "liolib.c"
      var $40=$l; //@line 349 "liolib.c"
      var $41=(($40)|0)==0; //@line 349 "liolib.c"
      if ($41) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 349 "liolib.c"
    case 10: 
      var $43=$2; //@line 349 "liolib.c"
      var $44=$3; //@line 349 "liolib.c"
      var $45=__Z8test_eofP9lua_StateP8_IO_FILE($43, $44); //@line 349 "liolib.c"
      var $52 = $45;__label__ = 12; break; //@line 349 "liolib.c"
    case 11: 
      var $47=$2; //@line 349 "liolib.c"
      var $48=$3; //@line 349 "liolib.c"
      var $49=$l; //@line 349 "liolib.c"
      var $50=__Z10read_charsP9lua_StateP8_IO_FILEj($47, $48, $49); //@line 349 "liolib.c"
      var $52 = $50;__label__ = 12; break; //@line 349 "liolib.c"
    case 12: 
      var $52; //@line 349 "liolib.c"
      $success=$52; //@line 349 "liolib.c"
      __label__ = 22; break; //@line 350 "liolib.c"
    case 13: 
      var $54=$2; //@line 352 "liolib.c"
      var $55=$n; //@line 352 "liolib.c"
      var $56=_lua_tolstring($54, $55, 0); //@line 352 "liolib.c"
      $p=$56; //@line 352 "liolib.c"
      var $57=$p; //@line 353 "liolib.c"
      var $58=(($57)|0)!=0; //@line 353 "liolib.c"
      if ($58) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 353 "liolib.c"
    case 14: 
      var $60=$p; //@line 353 "liolib.c"
      var $61=(($60)|0); //@line 353 "liolib.c"
      var $62=HEAP8[($61)]; //@line 353 "liolib.c"
      var $63=(($62 << 24) >> 24); //@line 353 "liolib.c"
      var $64=(($63)|0)==42; //@line 353 "liolib.c"
      if ($64) { var $71 = 1;__label__ = 16; break; } else { __label__ = 15; break; } //@line 353 "liolib.c"
    case 15: 
      var $66=$2; //@line 353 "liolib.c"
      var $67=$n; //@line 353 "liolib.c"
      var $68=_luaL_argerror($66, $67, ((STRING_TABLE.__str36407)|0)); //@line 353 "liolib.c"
      var $69=(($68)|0)!=0; //@line 353 "liolib.c"
      var $71 = $69;__label__ = 16; break; //@line 353 "liolib.c"
    case 16: 
      var $71;
      var $72=$p; //@line 354 "liolib.c"
      var $73=(($72+1)|0); //@line 354 "liolib.c"
      var $74=HEAP8[($73)]; //@line 354 "liolib.c"
      var $75=(($74 << 24) >> 24); //@line 354 "liolib.c"
      if ((($75)|0) == 110) {
        __label__ = 17; break;
      }
      else if ((($75)|0) == 108) {
        __label__ = 18; break;
      }
      else if ((($75)|0) == 97) {
        __label__ = 19; break;
      }
      else {
      __label__ = 20; break;
      }
      
    case 17: 
      var $77=$2; //@line 356 "liolib.c"
      var $78=$3; //@line 356 "liolib.c"
      var $79=__Z11read_numberP9lua_StateP8_IO_FILE($77, $78); //@line 356 "liolib.c"
      $success=$79; //@line 356 "liolib.c"
      __label__ = 21; break; //@line 357 "liolib.c"
    case 18: 
      var $81=$2; //@line 359 "liolib.c"
      var $82=$3; //@line 359 "liolib.c"
      var $83=__Z9read_lineP9lua_StateP8_IO_FILE($81, $82); //@line 359 "liolib.c"
      $success=$83; //@line 359 "liolib.c"
      __label__ = 21; break; //@line 360 "liolib.c"
    case 19: 
      var $85=$2; //@line 362 "liolib.c"
      var $86=$3; //@line 362 "liolib.c"
      var $87=__Z10read_charsP9lua_StateP8_IO_FILEj($85, $86, -1); //@line 362 "liolib.c"
      $success=1; //@line 363 "liolib.c"
      __label__ = 21; break; //@line 364 "liolib.c"
    case 20: 
      var $89=$2; //@line 366 "liolib.c"
      var $90=$n; //@line 366 "liolib.c"
      var $91=_luaL_argerror($89, $90, ((STRING_TABLE.__str37408)|0)); //@line 366 "liolib.c"
      $1=$91; //@line 366 "liolib.c"
      __label__ = 30; break; //@line 366 "liolib.c"
    case 21: 
      __label__ = 22; break; //@line 368 "liolib.c"
    case 22: 
      __label__ = 23; break; //@line 369 "liolib.c"
    case 23: 
      var $95=$n; //@line 346 "liolib.c"
      var $96=((($95)+(1))|0); //@line 346 "liolib.c"
      $n=$96; //@line 346 "liolib.c"
      __label__ = 5; break; //@line 346 "liolib.c"
    case 24: 
      __label__ = 25; break; //@line 370 "liolib.c"
    case 25: 
      var $99=$3; //@line 371 "liolib.c"
      var $100=_ferror($99); //@line 371 "liolib.c"
      var $101=(($100)|0)!=0; //@line 371 "liolib.c"
      if ($101) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 371 "liolib.c"
    case 26: 
      var $103=$2; //@line 372 "liolib.c"
      var $104=__Z10pushresultP9lua_StateiPKc($103, 0, 0); //@line 372 "liolib.c"
      $1=$104; //@line 372 "liolib.c"
      __label__ = 30; break; //@line 372 "liolib.c"
    case 27: 
      var $106=$success; //@line 373 "liolib.c"
      var $107=(($106)|0)!=0; //@line 373 "liolib.c"
      if ($107) { __label__ = 29; break; } else { __label__ = 28; break; } //@line 373 "liolib.c"
    case 28: 
      var $109=$2; //@line 374 "liolib.c"
      _lua_settop($109, -2); //@line 374 "liolib.c"
      var $110=$2; //@line 375 "liolib.c"
      _lua_pushnil($110); //@line 375 "liolib.c"
      __label__ = 29; break; //@line 376 "liolib.c"
    case 29: 
      var $112=$n; //@line 377 "liolib.c"
      var $113=$4; //@line 377 "liolib.c"
      var $114=((($112)-($113))|0); //@line 377 "liolib.c"
      $1=$114; //@line 377 "liolib.c"
      __label__ = 30; break; //@line 377 "liolib.c"
    case 30: 
      var $116=$1; //@line 378 "liolib.c"
      ;
      return $116; //@line 378 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z6g_readP9lua_StateP8_IO_FILEi["X"]=1;

function __Z9read_lineP9lua_StateP8_IO_FILE($L, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 8204; _memset(__stackBase__, 0, 8204);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $b=__stackBase__;
      var $l;
      var $p;
      $2=$L;
      $3=$f;
      var $4=$2; //@line 296 "liolib.c"
      _luaL_buffinit($4, $b); //@line 296 "liolib.c"
      __label__ = 3; break; //@line 297 "liolib.c"
    case 3: 
      var $6=_luaL_prepbuffer($b); //@line 299 "liolib.c"
      $p=$6; //@line 299 "liolib.c"
      var $7=$p; //@line 300 "liolib.c"
      var $8=$3; //@line 300 "liolib.c"
      var $9=_fgets($7, 8192, $8); //@line 300 "liolib.c"
      var $10=(($9)|0)==0; //@line 300 "liolib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 300 "liolib.c"
    case 4: 
      _luaL_pushresult($b); //@line 301 "liolib.c"
      var $12=$2; //@line 302 "liolib.c"
      var $13=_lua_objlen($12, -1); //@line 302 "liolib.c"
      var $14=(($13)>>>0) > 0; //@line 302 "liolib.c"
      var $15=(($14)&1); //@line 302 "liolib.c"
      $1=$15; //@line 302 "liolib.c"
      __label__ = 10; break; //@line 302 "liolib.c"
    case 5: 
      var $17=$p; //@line 304 "liolib.c"
      var $18=_strlen($17); //@line 304 "liolib.c"
      $l=$18; //@line 304 "liolib.c"
      var $19=$l; //@line 305 "liolib.c"
      var $20=(($19)|0)==0; //@line 305 "liolib.c"
      if ($20) { __label__ = 7; break; } else { __label__ = 6; break; } //@line 305 "liolib.c"
    case 6: 
      var $22=$l; //@line 305 "liolib.c"
      var $23=((($22)-(1))|0); //@line 305 "liolib.c"
      var $24=$p; //@line 305 "liolib.c"
      var $25=(($24+$23)|0); //@line 305 "liolib.c"
      var $26=HEAP8[($25)]; //@line 305 "liolib.c"
      var $27=(($26 << 24) >> 24); //@line 305 "liolib.c"
      var $28=(($27)|0)!=10; //@line 305 "liolib.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 305 "liolib.c"
    case 7: 
      var $30=$l; //@line 306 "liolib.c"
      var $31=(($b)|0); //@line 306 "liolib.c"
      var $32=HEAP32[(($31)>>2)]; //@line 306 "liolib.c"
      var $33=(($32+$30)|0); //@line 306 "liolib.c"
      HEAP32[(($31)>>2)]=$33; //@line 306 "liolib.c"
      __label__ = 9; break; //@line 306 "liolib.c"
    case 8: 
      var $35=$l; //@line 308 "liolib.c"
      var $36=((($35)-(1))|0); //@line 308 "liolib.c"
      var $37=(($b)|0); //@line 308 "liolib.c"
      var $38=HEAP32[(($37)>>2)]; //@line 308 "liolib.c"
      var $39=(($38+$36)|0); //@line 308 "liolib.c"
      HEAP32[(($37)>>2)]=$39; //@line 308 "liolib.c"
      _luaL_pushresult($b); //@line 309 "liolib.c"
      $1=1; //@line 310 "liolib.c"
      __label__ = 10; break; //@line 310 "liolib.c"
    case 9: 
      __label__ = 3; break; //@line 312 "liolib.c"
    case 10: 
      var $42=$1; //@line 313 "liolib.c"
      STACKTOP = __stackBase__;
      return $42; //@line 313 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9read_lineP9lua_StateP8_IO_FILE["X"]=1;

function __Z8test_eofP9lua_StateP8_IO_FILE($L, $f) {
  ;
  var __label__;

  var $1;
  var $2;
  var $c;
  $1=$L;
  $2=$f;
  var $3=$2; //@line 287 "liolib.c"
  var $4=__IO_getc($3); //@line 287 "liolib.c"
  $c=$4; //@line 287 "liolib.c"
  var $5=$c; //@line 288 "liolib.c"
  var $6=$2; //@line 288 "liolib.c"
  var $7=_ungetc($5, $6); //@line 288 "liolib.c"
  var $8=$1; //@line 289 "liolib.c"
  _lua_pushlstring($8, 0, 0); //@line 289 "liolib.c"
  var $9=$c; //@line 290 "liolib.c"
  var $10=(($9)|0)!=-1; //@line 290 "liolib.c"
  var $11=(($10)&1); //@line 290 "liolib.c"
  ;
  return $11; //@line 290 "liolib.c"
}


function __Z10read_charsP9lua_StateP8_IO_FILEj($L, $f, $n) {
  var __stackBase__  = STACKTOP; STACKTOP += 8204; _memset(__stackBase__, 0, 8204);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $rlen;
      var $nr;
      var $b=__stackBase__;
      var $p;
      $1=$L;
      $2=$f;
      $3=$n;
      var $4=$1; //@line 320 "liolib.c"
      _luaL_buffinit($4, $b); //@line 320 "liolib.c"
      $rlen=8192; //@line 321 "liolib.c"
      __label__ = 3; break; //@line 322 "liolib.c"
    case 3: 
      var $6=_luaL_prepbuffer($b); //@line 323 "liolib.c"
      $p=$6; //@line 323 "liolib.c"
      var $7=$rlen; //@line 324 "liolib.c"
      var $8=$3; //@line 324 "liolib.c"
      var $9=(($7)>>>0) > (($8)>>>0); //@line 324 "liolib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 324 "liolib.c"
    case 4: 
      var $11=$3; //@line 324 "liolib.c"
      $rlen=$11; //@line 324 "liolib.c"
      __label__ = 5; break; //@line 324 "liolib.c"
    case 5: 
      var $13=$p; //@line 325 "liolib.c"
      var $14=$rlen; //@line 325 "liolib.c"
      var $15=$2; //@line 325 "liolib.c"
      var $16=_fread($13, 1, $14, $15); //@line 325 "liolib.c"
      $nr=$16; //@line 325 "liolib.c"
      var $17=$nr; //@line 326 "liolib.c"
      var $18=(($b)|0); //@line 326 "liolib.c"
      var $19=HEAP32[(($18)>>2)]; //@line 326 "liolib.c"
      var $20=(($19+$17)|0); //@line 326 "liolib.c"
      HEAP32[(($18)>>2)]=$20; //@line 326 "liolib.c"
      var $21=$nr; //@line 327 "liolib.c"
      var $22=$3; //@line 327 "liolib.c"
      var $23=((($22)-($21))|0); //@line 327 "liolib.c"
      $3=$23; //@line 327 "liolib.c"
      __label__ = 6; break; //@line 328 "liolib.c"
    case 6: 
      var $25=$3; //@line 328 "liolib.c"
      var $26=(($25)>>>0) > 0; //@line 328 "liolib.c"
      if ($26) { __label__ = 7; break; } else { var $32 = 0;__label__ = 8; break; } //@line 328 "liolib.c"
    case 7: 
      var $28=$nr; //@line 328 "liolib.c"
      var $29=$rlen; //@line 328 "liolib.c"
      var $30=(($28)|0)==(($29)|0); //@line 328 "liolib.c"
      var $32 = $30;__label__ = 8; break; //@line 328 "liolib.c"
    case 8: 
      var $32;
      if ($32) { __label__ = 3; break; } else { __label__ = 9; break; } //@line 328 "liolib.c"
    case 9: 
      _luaL_pushresult($b); //@line 329 "liolib.c"
      var $34=$3; //@line 330 "liolib.c"
      var $35=(($34)|0)==0; //@line 330 "liolib.c"
      if ($35) { var $41 = 1;__label__ = 11; break; } else { __label__ = 10; break; } //@line 330 "liolib.c"
    case 10: 
      var $37=$1; //@line 330 "liolib.c"
      var $38=_lua_objlen($37, -1); //@line 330 "liolib.c"
      var $39=(($38)>>>0) > 0; //@line 330 "liolib.c"
      var $41 = $39;__label__ = 11; break; //@line 330 "liolib.c"
    case 11: 
      var $41;
      var $42=(($41)&1); //@line 330 "liolib.c"
      STACKTOP = __stackBase__;
      return $42; //@line 330 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10read_charsP9lua_StateP8_IO_FILEj["X"]=1;

function __Z11read_numberP9lua_StateP8_IO_FILE($L, $f) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $d=__stackBase__;
      $2=$L;
      $3=$f;
      var $4=$3; //@line 275 "liolib.c"
      var $5=_fscanf($4, ((STRING_TABLE.__str38409)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$d,tempInt)); //@line 275 "liolib.c"
      var $6=(($5)|0)==1; //@line 275 "liolib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 275 "liolib.c"
    case 3: 
      var $8=$2; //@line 276 "liolib.c"
      var $9=(tempDoubleI32[0]=HEAP32[(($d)>>2)],tempDoubleI32[1]=HEAP32[((($d)+(4))>>2)],tempDoubleF64[0]); //@line 276 "liolib.c"
      _lua_pushnumber($8, $9); //@line 276 "liolib.c"
      $1=1; //@line 277 "liolib.c"
      __label__ = 5; break; //@line 277 "liolib.c"
    case 4: 
      var $11=$2; //@line 280 "liolib.c"
      _lua_pushnil($11); //@line 280 "liolib.c"
      $1=0; //@line 281 "liolib.c"
      __label__ = 5; break; //@line 281 "liolib.c"
    case 5: 
      var $13=$1; //@line 283 "liolib.c"
      STACKTOP = __stackBase__;
      return $13; //@line 283 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9aux_linesP9lua_Stateii($L, $idx, $toclose) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$idx;
  $3=$toclose;
  var $4=$1; //@line 235 "liolib.c"
  var $5=$2; //@line 235 "liolib.c"
  _lua_pushvalue($4, $5); //@line 235 "liolib.c"
  var $6=$1; //@line 236 "liolib.c"
  var $7=$3; //@line 236 "liolib.c"
  _lua_pushboolean($6, $7); //@line 236 "liolib.c"
  var $8=$1; //@line 237 "liolib.c"
  _lua_pushcclosure($8, 50, 2); //@line 237 "liolib.c"
  ;
  return; //@line 238 "liolib.c"
}


function __Z11io_readlineP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      var $sucess;
      $2=$L;
      var $3=$2; //@line 392 "liolib.c"
      var $4=_lua_touserdata($3, -10003); //@line 392 "liolib.c"
      var $5=$4; //@line 392 "liolib.c"
      var $6=HEAP32[(($5)>>2)]; //@line 392 "liolib.c"
      $f=$6; //@line 392 "liolib.c"
      var $7=$f; //@line 394 "liolib.c"
      var $8=(($7)|0)==0; //@line 394 "liolib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 394 "liolib.c"
    case 3: 
      var $10=$2; //@line 395 "liolib.c"
      var $11=_luaL_error($10, ((STRING_TABLE.__str39410)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 395 "liolib.c"
      __label__ = 4; break; //@line 395 "liolib.c"
    case 4: 
      var $13=$2; //@line 396 "liolib.c"
      var $14=$f; //@line 396 "liolib.c"
      var $15=__Z9read_lineP9lua_StateP8_IO_FILE($13, $14); //@line 396 "liolib.c"
      $sucess=$15; //@line 396 "liolib.c"
      var $16=$f; //@line 397 "liolib.c"
      var $17=_ferror($16); //@line 397 "liolib.c"
      var $18=(($17)|0)!=0; //@line 397 "liolib.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 397 "liolib.c"
    case 5: 
      var $20=$2; //@line 398 "liolib.c"
      var $21=___errno_location(); //@line 398 "liolib.c"
      var $22=HEAP32[(($21)>>2)]; //@line 398 "liolib.c"
      var $23=_strerror($22); //@line 398 "liolib.c"
      var $24=_luaL_error($20, ((STRING_TABLE.__str21392)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$23,tempInt)); //@line 398 "liolib.c"
      $1=$24; //@line 398 "liolib.c"
      __label__ = 11; break; //@line 398 "liolib.c"
    case 6: 
      var $26=$sucess; //@line 399 "liolib.c"
      var $27=(($26)|0)!=0; //@line 399 "liolib.c"
      if ($27) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 399 "liolib.c"
    case 7: 
      $1=1; //@line 399 "liolib.c"
      __label__ = 11; break; //@line 399 "liolib.c"
    case 8: 
      var $30=$2; //@line 401 "liolib.c"
      var $31=_lua_toboolean($30, -10004); //@line 401 "liolib.c"
      var $32=(($31)|0)!=0; //@line 401 "liolib.c"
      if ($32) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 401 "liolib.c"
    case 9: 
      var $34=$2; //@line 402 "liolib.c"
      _lua_settop($34, 0); //@line 402 "liolib.c"
      var $35=$2; //@line 403 "liolib.c"
      _lua_pushvalue($35, -10003); //@line 403 "liolib.c"
      var $36=$2; //@line 404 "liolib.c"
      var $37=__Z9aux_closeP9lua_State($36); //@line 404 "liolib.c"
      __label__ = 10; break; //@line 405 "liolib.c"
    case 10: 
      $1=0; //@line 406 "liolib.c"
      __label__ = 11; break; //@line 406 "liolib.c"
    case 11: 
      var $40=$1; //@line 408 "liolib.c"
      STACKTOP = __stackBase__;
      return $40; //@line 408 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11io_readlineP9lua_State["X"]=1;

function __Z9getiofileP9lua_Statei($L, $findex) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      $1=$L;
      $2=$findex;
      var $3=$1; //@line 192 "liolib.c"
      var $4=$2; //@line 192 "liolib.c"
      _lua_rawgeti($3, -10001, $4); //@line 192 "liolib.c"
      var $5=$1; //@line 193 "liolib.c"
      var $6=_lua_touserdata($5, -1); //@line 193 "liolib.c"
      var $7=$6; //@line 193 "liolib.c"
      var $8=HEAP32[(($7)>>2)]; //@line 193 "liolib.c"
      $f=$8; //@line 193 "liolib.c"
      var $9=$f; //@line 194 "liolib.c"
      var $10=(($9)|0)==0; //@line 194 "liolib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 194 "liolib.c"
    case 3: 
      var $12=$1; //@line 195 "liolib.c"
      var $13=$2; //@line 195 "liolib.c"
      var $14=((($13)-(1))|0); //@line 195 "liolib.c"
      var $15=((__ZL6fnames+($14<<2))|0); //@line 195 "liolib.c"
      var $16=HEAP32[(($15)>>2)]; //@line 195 "liolib.c"
      var $17=_luaL_error($12, ((STRING_TABLE.__str40411)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$16,tempInt)); //@line 195 "liolib.c"
      __label__ = 4; break; //@line 195 "liolib.c"
    case 4: 
      var $19=$f; //@line 196 "liolib.c"
      STACKTOP = __stackBase__;
      return $19; //@line 196 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8g_iofileP9lua_StateiPKc($L, $f, $mode) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $filename;
      var $pf;
      $1=$L;
      $2=$f;
      $3=$mode;
      var $4=$1; //@line 201 "liolib.c"
      var $5=_lua_type($4, 1); //@line 201 "liolib.c"
      var $6=(($5)|0) <= 0; //@line 201 "liolib.c"
      if ($6) { __label__ = 9; break; } else { __label__ = 3; break; } //@line 201 "liolib.c"
    case 3: 
      var $8=$1; //@line 202 "liolib.c"
      var $9=_lua_tolstring($8, 1, 0); //@line 202 "liolib.c"
      $filename=$9; //@line 202 "liolib.c"
      var $10=$filename; //@line 203 "liolib.c"
      var $11=(($10)|0)!=0; //@line 203 "liolib.c"
      if ($11) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 203 "liolib.c"
    case 4: 
      var $13=$1; //@line 204 "liolib.c"
      var $14=__Z7newfileP9lua_State($13); //@line 204 "liolib.c"
      $pf=$14; //@line 204 "liolib.c"
      var $15=$filename; //@line 205 "liolib.c"
      var $16=$3; //@line 205 "liolib.c"
      var $17=_fopen($15, $16); //@line 205 "liolib.c"
      var $18=$pf; //@line 205 "liolib.c"
      HEAP32[(($18)>>2)]=$17; //@line 205 "liolib.c"
      var $19=$pf; //@line 206 "liolib.c"
      var $20=HEAP32[(($19)>>2)]; //@line 206 "liolib.c"
      var $21=(($20)|0)==0; //@line 206 "liolib.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 206 "liolib.c"
    case 5: 
      var $23=$1; //@line 207 "liolib.c"
      var $24=$filename; //@line 207 "liolib.c"
      __Z9fileerrorP9lua_StateiPKc($23, 1, $24); //@line 207 "liolib.c"
      __label__ = 6; break; //@line 207 "liolib.c"
    case 6: 
      __label__ = 8; break; //@line 208 "liolib.c"
    case 7: 
      var $27=$1; //@line 210 "liolib.c"
      var $28=__Z6tofileP9lua_State($27); //@line 210 "liolib.c"
      var $29=$1; //@line 211 "liolib.c"
      _lua_pushvalue($29, 1); //@line 211 "liolib.c"
      __label__ = 8; break; //@line 212 "liolib.c"
    case 8: 
      var $31=$1; //@line 213 "liolib.c"
      var $32=$2; //@line 213 "liolib.c"
      _lua_rawseti($31, -10001, $32); //@line 213 "liolib.c"
      __label__ = 9; break; //@line 214 "liolib.c"
    case 9: 
      var $34=$1; //@line 216 "liolib.c"
      var $35=$2; //@line 216 "liolib.c"
      _lua_rawgeti($34, -10001, $35); //@line 216 "liolib.c"
      ;
      return 1; //@line 217 "liolib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9fileerrorP9lua_StateiPKc($L, $arg, $filename) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$arg;
  $3=$filename;
  var $4=$1; //@line 49 "liolib.c"
  var $5=$3; //@line 49 "liolib.c"
  var $6=___errno_location(); //@line 49 "liolib.c"
  var $7=HEAP32[(($6)>>2)]; //@line 49 "liolib.c"
  var $8=_strerror($7); //@line 49 "liolib.c"
  var $9=_lua_pushfstring($4, ((STRING_TABLE.__str20391)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$8,tempInt)); //@line 49 "liolib.c"
  var $10=$1; //@line 50 "liolib.c"
  var $11=$2; //@line 50 "liolib.c"
  var $12=$1; //@line 50 "liolib.c"
  var $13=_lua_tolstring($12, -1, 0); //@line 50 "liolib.c"
  var $14=_luaL_argerror($10, $11, $13); //@line 50 "liolib.c"
  STACKTOP = __stackBase__;
  return; //@line 51 "liolib.c"
}


function __Z8math_absP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 27 "lmathlib.c"
  var $3=$1; //@line 27 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 27 "lmathlib.c"
  var $5=_fabs($4); //@line 27 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 27 "lmathlib.c"
  ;
  return 1; //@line 28 "lmathlib.c"
}


function __Z9math_acosP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 67 "lmathlib.c"
  var $3=$1; //@line 67 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 67 "lmathlib.c"
  var $5=_acos($4); //@line 67 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 67 "lmathlib.c"
  ;
  return 1; //@line 68 "lmathlib.c"
}


function __Z9math_asinP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 62 "lmathlib.c"
  var $3=$1; //@line 62 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 62 "lmathlib.c"
  var $5=_asin($4); //@line 62 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 62 "lmathlib.c"
  ;
  return 1; //@line 63 "lmathlib.c"
}


function __Z10math_atan2P9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 77 "lmathlib.c"
  var $3=$1; //@line 77 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 77 "lmathlib.c"
  var $5=$1; //@line 77 "lmathlib.c"
  var $6=_luaL_checknumber($5, 2); //@line 77 "lmathlib.c"
  var $7=_atan2($4, $6); //@line 77 "lmathlib.c"
  _lua_pushnumber($2, $7); //@line 77 "lmathlib.c"
  ;
  return 1; //@line 78 "lmathlib.c"
}


function __Z9math_atanP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 72 "lmathlib.c"
  var $3=$1; //@line 72 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 72 "lmathlib.c"
  var $5=_atan($4); //@line 72 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 72 "lmathlib.c"
  ;
  return 1; //@line 73 "lmathlib.c"
}


function __Z9math_ceilP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 82 "lmathlib.c"
  var $3=$1; //@line 82 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 82 "lmathlib.c"
  var $5=_ceil($4); //@line 82 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 82 "lmathlib.c"
  ;
  return 1; //@line 83 "lmathlib.c"
}


function __Z9math_coshP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 47 "lmathlib.c"
  var $3=$1; //@line 47 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 47 "lmathlib.c"
  var $5=_cosh($4); //@line 47 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 47 "lmathlib.c"
  ;
  return 1; //@line 48 "lmathlib.c"
}


function __Z8math_cosP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 42 "lmathlib.c"
  var $3=$1; //@line 42 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 42 "lmathlib.c"
  var $5=_cos($4); //@line 42 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 42 "lmathlib.c"
  ;
  return 1; //@line 43 "lmathlib.c"
}


function __Z8math_degP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 130 "lmathlib.c"
  var $3=$1; //@line 130 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 130 "lmathlib.c"
  var $5=($4)/(0.017453292519943295); //@line 130 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 130 "lmathlib.c"
  ;
  return 1; //@line 131 "lmathlib.c"
}


function __Z8math_expP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 125 "lmathlib.c"
  var $3=$1; //@line 125 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 125 "lmathlib.c"
  var $5=_exp($4); //@line 125 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 125 "lmathlib.c"
  ;
  return 1; //@line 126 "lmathlib.c"
}


function __Z10math_floorP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 87 "lmathlib.c"
  var $3=$1; //@line 87 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 87 "lmathlib.c"
  var $5=_floor($4); //@line 87 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 87 "lmathlib.c"
  ;
  return 1; //@line 88 "lmathlib.c"
}


function __Z9math_fmodP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 92 "lmathlib.c"
  var $3=$1; //@line 92 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 92 "lmathlib.c"
  var $5=$1; //@line 92 "lmathlib.c"
  var $6=_luaL_checknumber($5, 2); //@line 92 "lmathlib.c"
  var $7=_fmod($4, $6); //@line 92 "lmathlib.c"
  _lua_pushnumber($2, $7); //@line 92 "lmathlib.c"
  ;
  return 1; //@line 93 "lmathlib.c"
}


function __Z10math_frexpP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $e=__stackBase__;
  $1=$L;
  var $2=$1; //@line 141 "lmathlib.c"
  var $3=$1; //@line 141 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 141 "lmathlib.c"
  var $5=_frexp($4, $e); //@line 141 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 141 "lmathlib.c"
  var $6=$1; //@line 142 "lmathlib.c"
  var $7=HEAP32[(($e)>>2)]; //@line 142 "lmathlib.c"
  _lua_pushinteger($6, $7); //@line 142 "lmathlib.c"
  STACKTOP = __stackBase__;
  return 2; //@line 143 "lmathlib.c"
}


function __Z10math_ldexpP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 147 "lmathlib.c"
  var $3=$1; //@line 147 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 147 "lmathlib.c"
  var $5=$1; //@line 147 "lmathlib.c"
  var $6=_luaL_checkinteger($5, 2); //@line 147 "lmathlib.c"
  var $7=_ldexp($4, $6); //@line 147 "lmathlib.c"
  _lua_pushnumber($2, $7); //@line 147 "lmathlib.c"
  ;
  return 1; //@line 148 "lmathlib.c"
}


function __Z10math_log10P9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 120 "lmathlib.c"
  var $3=$1; //@line 120 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 120 "lmathlib.c"
  var $5=_log10($4); //@line 120 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 120 "lmathlib.c"
  ;
  return 1; //@line 121 "lmathlib.c"
}


function __Z8math_logP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 115 "lmathlib.c"
  var $3=$1; //@line 115 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 115 "lmathlib.c"
  var $5=_log($4); //@line 115 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 115 "lmathlib.c"
  ;
  return 1; //@line 116 "lmathlib.c"
}


function __Z8math_maxP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $n;
      var $dmax;
      var $i;
      var $d;
      $1=$L;
      var $2=$1; //@line 168 "lmathlib.c"
      var $3=_lua_gettop($2); //@line 168 "lmathlib.c"
      $n=$3; //@line 168 "lmathlib.c"
      var $4=$1; //@line 169 "lmathlib.c"
      var $5=_luaL_checknumber($4, 1); //@line 169 "lmathlib.c"
      $dmax=$5; //@line 169 "lmathlib.c"
      $i=2; //@line 171 "lmathlib.c"
      __label__ = 3; break; //@line 171 "lmathlib.c"
    case 3: 
      var $7=$i; //@line 171 "lmathlib.c"
      var $8=$n; //@line 171 "lmathlib.c"
      var $9=(($7)|0) <= (($8)|0); //@line 171 "lmathlib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 171 "lmathlib.c"
    case 4: 
      var $11=$1; //@line 172 "lmathlib.c"
      var $12=$i; //@line 172 "lmathlib.c"
      var $13=_luaL_checknumber($11, $12); //@line 172 "lmathlib.c"
      $d=$13; //@line 172 "lmathlib.c"
      var $14=$d; //@line 173 "lmathlib.c"
      var $15=$dmax; //@line 173 "lmathlib.c"
      var $16=$14 > $15; //@line 173 "lmathlib.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 173 "lmathlib.c"
    case 5: 
      var $18=$d; //@line 174 "lmathlib.c"
      $dmax=$18; //@line 174 "lmathlib.c"
      __label__ = 6; break; //@line 174 "lmathlib.c"
    case 6: 
      __label__ = 7; break; //@line 175 "lmathlib.c"
    case 7: 
      var $21=$i; //@line 171 "lmathlib.c"
      var $22=((($21)+(1))|0); //@line 171 "lmathlib.c"
      $i=$22; //@line 171 "lmathlib.c"
      __label__ = 3; break; //@line 171 "lmathlib.c"
    case 8: 
      var $24=$1; //@line 176 "lmathlib.c"
      var $25=$dmax; //@line 176 "lmathlib.c"
      _lua_pushnumber($24, $25); //@line 176 "lmathlib.c"
      ;
      return 1; //@line 177 "lmathlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8math_minP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $n;
      var $dmin;
      var $i;
      var $d;
      $1=$L;
      var $2=$1; //@line 154 "lmathlib.c"
      var $3=_lua_gettop($2); //@line 154 "lmathlib.c"
      $n=$3; //@line 154 "lmathlib.c"
      var $4=$1; //@line 155 "lmathlib.c"
      var $5=_luaL_checknumber($4, 1); //@line 155 "lmathlib.c"
      $dmin=$5; //@line 155 "lmathlib.c"
      $i=2; //@line 157 "lmathlib.c"
      __label__ = 3; break; //@line 157 "lmathlib.c"
    case 3: 
      var $7=$i; //@line 157 "lmathlib.c"
      var $8=$n; //@line 157 "lmathlib.c"
      var $9=(($7)|0) <= (($8)|0); //@line 157 "lmathlib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 157 "lmathlib.c"
    case 4: 
      var $11=$1; //@line 158 "lmathlib.c"
      var $12=$i; //@line 158 "lmathlib.c"
      var $13=_luaL_checknumber($11, $12); //@line 158 "lmathlib.c"
      $d=$13; //@line 158 "lmathlib.c"
      var $14=$d; //@line 159 "lmathlib.c"
      var $15=$dmin; //@line 159 "lmathlib.c"
      var $16=$14 < $15; //@line 159 "lmathlib.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 159 "lmathlib.c"
    case 5: 
      var $18=$d; //@line 160 "lmathlib.c"
      $dmin=$18; //@line 160 "lmathlib.c"
      __label__ = 6; break; //@line 160 "lmathlib.c"
    case 6: 
      __label__ = 7; break; //@line 161 "lmathlib.c"
    case 7: 
      var $21=$i; //@line 157 "lmathlib.c"
      var $22=((($21)+(1))|0); //@line 157 "lmathlib.c"
      $i=$22; //@line 157 "lmathlib.c"
      __label__ = 3; break; //@line 157 "lmathlib.c"
    case 8: 
      var $24=$1; //@line 162 "lmathlib.c"
      var $25=$dmin; //@line 162 "lmathlib.c"
      _lua_pushnumber($24, $25); //@line 162 "lmathlib.c"
      ;
      return 1; //@line 163 "lmathlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9math_modfP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; _memset(__stackBase__, 0, 8);
  var __label__;

  var $1;
  var $ip=__stackBase__;
  var $fp;
  $1=$L;
  var $2=$1; //@line 98 "lmathlib.c"
  var $3=_luaL_checknumber($2, 1); //@line 98 "lmathlib.c"
  var $4=_modf($3, $ip); //@line 98 "lmathlib.c"
  $fp=$4; //@line 98 "lmathlib.c"
  var $5=$1; //@line 99 "lmathlib.c"
  var $6=(tempDoubleI32[0]=HEAP32[(($ip)>>2)],tempDoubleI32[1]=HEAP32[((($ip)+(4))>>2)],tempDoubleF64[0]); //@line 99 "lmathlib.c"
  _lua_pushnumber($5, $6); //@line 99 "lmathlib.c"
  var $7=$1; //@line 100 "lmathlib.c"
  var $8=$fp; //@line 100 "lmathlib.c"
  _lua_pushnumber($7, $8); //@line 100 "lmathlib.c"
  STACKTOP = __stackBase__;
  return 2; //@line 101 "lmathlib.c"
}


function __Z8math_powP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 110 "lmathlib.c"
  var $3=$1; //@line 110 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 110 "lmathlib.c"
  var $5=$1; //@line 110 "lmathlib.c"
  var $6=_luaL_checknumber($5, 2); //@line 110 "lmathlib.c"
  var $7=_llvm_pow_f64($4, $6); //@line 110 "lmathlib.c"
  _lua_pushnumber($2, $7); //@line 110 "lmathlib.c"
  ;
  return 1; //@line 111 "lmathlib.c"
}


function __Z8math_radP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 135 "lmathlib.c"
  var $3=$1; //@line 135 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 135 "lmathlib.c"
  var $5=($4)*(0.017453292519943295); //@line 135 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 135 "lmathlib.c"
  ;
  return 1; //@line 136 "lmathlib.c"
}


function __Z11math_randomP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $r;
      var $u;
      var $l;
      var $u1;
      $2=$L;
      var $3=_rand(); //@line 184 "lmathlib.c"
      var $4=((($3)|0))%(2147483647); //@line 184 "lmathlib.c"
      var $5=(($4)|0); //@line 184 "lmathlib.c"
      var $6=($5)/(2147483647); //@line 184 "lmathlib.c"
      $r=$6; //@line 184 "lmathlib.c"
      var $7=$2; //@line 185 "lmathlib.c"
      var $8=_lua_gettop($7); //@line 185 "lmathlib.c"
      if ((($8)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 2) {
        __label__ = 7; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 3: 
      var $10=$2; //@line 187 "lmathlib.c"
      var $11=$r; //@line 187 "lmathlib.c"
      _lua_pushnumber($10, $11); //@line 187 "lmathlib.c"
      __label__ = 11; break; //@line 188 "lmathlib.c"
    case 4: 
      var $13=$2; //@line 191 "lmathlib.c"
      var $14=_luaL_checkinteger($13, 1); //@line 191 "lmathlib.c"
      $u=$14; //@line 191 "lmathlib.c"
      var $15=$u; //@line 192 "lmathlib.c"
      var $16=1 <= (($15)|0); //@line 192 "lmathlib.c"
      if ($16) { var $22 = 1;__label__ = 6; break; } else { __label__ = 5; break; } //@line 192 "lmathlib.c"
    case 5: 
      var $18=$2; //@line 192 "lmathlib.c"
      var $19=_luaL_argerror($18, 1, ((STRING_TABLE.__str32449)|0)); //@line 192 "lmathlib.c"
      var $20=(($19)|0)!=0; //@line 192 "lmathlib.c"
      var $22 = $20;__label__ = 6; break; //@line 192 "lmathlib.c"
    case 6: 
      var $22;
      var $23=$2; //@line 193 "lmathlib.c"
      var $24=$r; //@line 193 "lmathlib.c"
      var $25=$u; //@line 193 "lmathlib.c"
      var $26=(($25)|0); //@line 193 "lmathlib.c"
      var $27=($24)*($26); //@line 193 "lmathlib.c"
      var $28=_floor($27); //@line 193 "lmathlib.c"
      var $29=($28)+(1); //@line 193 "lmathlib.c"
      _lua_pushnumber($23, $29); //@line 193 "lmathlib.c"
      __label__ = 11; break; //@line 194 "lmathlib.c"
    case 7: 
      var $31=$2; //@line 197 "lmathlib.c"
      var $32=_luaL_checkinteger($31, 1); //@line 197 "lmathlib.c"
      $l=$32; //@line 197 "lmathlib.c"
      var $33=$2; //@line 198 "lmathlib.c"
      var $34=_luaL_checkinteger($33, 2); //@line 198 "lmathlib.c"
      $u1=$34; //@line 198 "lmathlib.c"
      var $35=$l; //@line 199 "lmathlib.c"
      var $36=$u1; //@line 199 "lmathlib.c"
      var $37=(($35)|0) <= (($36)|0); //@line 199 "lmathlib.c"
      if ($37) { var $43 = 1;__label__ = 9; break; } else { __label__ = 8; break; } //@line 199 "lmathlib.c"
    case 8: 
      var $39=$2; //@line 199 "lmathlib.c"
      var $40=_luaL_argerror($39, 2, ((STRING_TABLE.__str32449)|0)); //@line 199 "lmathlib.c"
      var $41=(($40)|0)!=0; //@line 199 "lmathlib.c"
      var $43 = $41;__label__ = 9; break; //@line 199 "lmathlib.c"
    case 9: 
      var $43;
      var $44=$2; //@line 200 "lmathlib.c"
      var $45=$r; //@line 200 "lmathlib.c"
      var $46=$u1; //@line 200 "lmathlib.c"
      var $47=$l; //@line 200 "lmathlib.c"
      var $48=((($46)-($47))|0); //@line 200 "lmathlib.c"
      var $49=((($48)+(1))|0); //@line 200 "lmathlib.c"
      var $50=(($49)|0); //@line 200 "lmathlib.c"
      var $51=($45)*($50); //@line 200 "lmathlib.c"
      var $52=_floor($51); //@line 200 "lmathlib.c"
      var $53=$l; //@line 200 "lmathlib.c"
      var $54=(($53)|0); //@line 200 "lmathlib.c"
      var $55=($52)+($54); //@line 200 "lmathlib.c"
      _lua_pushnumber($44, $55); //@line 200 "lmathlib.c"
      __label__ = 11; break; //@line 201 "lmathlib.c"
    case 10: 
      var $57=$2; //@line 203 "lmathlib.c"
      var $58=_luaL_error($57, ((STRING_TABLE.__str33450)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 203 "lmathlib.c"
      $1=$58; //@line 203 "lmathlib.c"
      __label__ = 12; break; //@line 203 "lmathlib.c"
    case 11: 
      $1=1; //@line 205 "lmathlib.c"
      __label__ = 12; break; //@line 205 "lmathlib.c"
    case 12: 
      var $61=$1; //@line 206 "lmathlib.c"
      STACKTOP = __stackBase__;
      return $61; //@line 206 "lmathlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11math_randomP9lua_State["X"]=1;

function __Z15math_randomseedP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 210 "lmathlib.c"
  var $3=_luaL_checkinteger($2, 1); //@line 210 "lmathlib.c"
  _srand($3); //@line 210 "lmathlib.c"
  ;
  return 0; //@line 211 "lmathlib.c"
}


function __Z9math_sinhP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 37 "lmathlib.c"
  var $3=$1; //@line 37 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 37 "lmathlib.c"
  var $5=_sinh($4); //@line 37 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 37 "lmathlib.c"
  ;
  return 1; //@line 38 "lmathlib.c"
}


function __Z8math_sinP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 32 "lmathlib.c"
  var $3=$1; //@line 32 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 32 "lmathlib.c"
  var $5=_sin($4); //@line 32 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 32 "lmathlib.c"
  ;
  return 1; //@line 33 "lmathlib.c"
}


function __Z9math_sqrtP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 105 "lmathlib.c"
  var $3=$1; //@line 105 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 105 "lmathlib.c"
  var $5=_sqrt($4); //@line 105 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 105 "lmathlib.c"
  ;
  return 1; //@line 106 "lmathlib.c"
}


function __Z9math_tanhP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 57 "lmathlib.c"
  var $3=$1; //@line 57 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 57 "lmathlib.c"
  var $5=_tanh($4); //@line 57 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 57 "lmathlib.c"
  ;
  return 1; //@line 58 "lmathlib.c"
}


function __Z8math_tanP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 52 "lmathlib.c"
  var $3=$1; //@line 52 "lmathlib.c"
  var $4=_luaL_checknumber($3, 1); //@line 52 "lmathlib.c"
  var $5=_tan($4); //@line 52 "lmathlib.c"
  _lua_pushnumber($2, $5); //@line 52 "lmathlib.c"
  ;
  return 1; //@line 53 "lmathlib.c"
}


function _luaopen_math($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 252 "lmathlib.c"
  _luaL_register($2, ((STRING_TABLE.__str28445)|0), ((__ZL7mathlib)|0)); //@line 252 "lmathlib.c"
  var $3=$1; //@line 253 "lmathlib.c"
  _lua_pushnumber($3, 3.141592653589793); //@line 253 "lmathlib.c"
  var $4=$1; //@line 254 "lmathlib.c"
  _lua_setfield($4, -2, ((STRING_TABLE.__str29446)|0)); //@line 254 "lmathlib.c"
  var $5=$1; //@line 255 "lmathlib.c"
  _lua_pushnumber($5, Infinity); //@line 255 "lmathlib.c"
  var $6=$1; //@line 256 "lmathlib.c"
  _lua_setfield($6, -2, ((STRING_TABLE.__str30447)|0)); //@line 256 "lmathlib.c"
  var $7=$1; //@line 258 "lmathlib.c"
  _lua_getfield($7, -1, ((STRING_TABLE.__str11428)|0)); //@line 258 "lmathlib.c"
  var $8=$1; //@line 259 "lmathlib.c"
  _lua_setfield($8, -2, ((STRING_TABLE.__str31448)|0)); //@line 259 "lmathlib.c"
  ;
  return 1; //@line 261 "lmathlib.c"
}


function __Z8os_clockP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 75 "loslib.c"
  var $3=_clock(); //@line 75 "loslib.c"
  var $4=(($3)|0); //@line 75 "loslib.c"
  var $5=($4)/(1000000); //@line 75 "loslib.c"
  _lua_pushnumber($2, $5); //@line 75 "loslib.c"
  ;
  return 1; //@line 76 "loslib.c"
}


function __Z7os_dateP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8412; _memset(__stackBase__, 0, 8412);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $s;
      var $t=__stackBase__;
      var $stm;
      var $cc=(__stackBase__)+(4);
      var $b=(__stackBase__)+(8);
      var $reslen;
      var $buff=(__stackBase__)+(8212);
      $1=$L;
      var $2=$1; //@line 125 "loslib.c"
      var $3=_luaL_optlstring($2, 1, ((STRING_TABLE.__str27479)|0), 0); //@line 125 "loslib.c"
      $s=$3; //@line 125 "loslib.c"
      var $4=$1; //@line 126 "loslib.c"
      var $5=_lua_type($4, 2); //@line 126 "loslib.c"
      var $6=(($5)|0) <= 0; //@line 126 "loslib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 126 "loslib.c"
    case 3: 
      var $8=_time(0); //@line 126 "loslib.c"
      var $14 = $8;__label__ = 5; break; //@line 126 "loslib.c"
    case 4: 
      var $10=$1; //@line 126 "loslib.c"
      var $11=_luaL_checknumber($10, 2); //@line 126 "loslib.c"
      var $12=(($11)&-1); //@line 126 "loslib.c"
      var $14 = $12;__label__ = 5; break; //@line 126 "loslib.c"
    case 5: 
      var $14; //@line 126 "loslib.c"
      HEAP32[(($t)>>2)]=$14; //@line 126 "loslib.c"
      var $15=$s; //@line 128 "loslib.c"
      var $16=HEAP8[($15)]; //@line 128 "loslib.c"
      var $17=(($16 << 24) >> 24); //@line 128 "loslib.c"
      var $18=(($17)|0)==33; //@line 128 "loslib.c"
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 128 "loslib.c"
    case 6: 
      var $20=_gmtime($t); //@line 129 "loslib.c"
      $stm=$20; //@line 129 "loslib.c"
      var $21=$s; //@line 130 "loslib.c"
      var $22=(($21+1)|0); //@line 130 "loslib.c"
      $s=$22; //@line 130 "loslib.c"
      __label__ = 8; break; //@line 131 "loslib.c"
    case 7: 
      var $24=_localtime($t); //@line 133 "loslib.c"
      $stm=$24; //@line 133 "loslib.c"
      __label__ = 8; break; //@line 133 "loslib.c"
    case 8: 
      var $26=$stm; //@line 134 "loslib.c"
      var $27=(($26)|0)==0; //@line 134 "loslib.c"
      if ($27) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 134 "loslib.c"
    case 9: 
      var $29=$1; //@line 135 "loslib.c"
      _lua_pushnil($29); //@line 135 "loslib.c"
      __label__ = 24; break; //@line 135 "loslib.c"
    case 10: 
      var $31=$s; //@line 136 "loslib.c"
      var $32=_strcmp($31, ((STRING_TABLE.__str28480)|0)); //@line 136 "loslib.c"
      var $33=(($32)|0)==0; //@line 136 "loslib.c"
      if ($33) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 136 "loslib.c"
    case 11: 
      var $35=$1; //@line 137 "loslib.c"
      _lua_createtable($35, 0, 9); //@line 137 "loslib.c"
      var $36=$1; //@line 138 "loslib.c"
      var $37=$stm; //@line 138 "loslib.c"
      var $38=(($37)|0); //@line 138 "loslib.c"
      var $39=HEAP32[(($38)>>2)]; //@line 138 "loslib.c"
      __Z8setfieldP9lua_StatePKci($36, ((STRING_TABLE.__str13465)|0), $39); //@line 138 "loslib.c"
      var $40=$1; //@line 139 "loslib.c"
      var $41=$stm; //@line 139 "loslib.c"
      var $42=(($41+4)|0); //@line 139 "loslib.c"
      var $43=HEAP32[(($42)>>2)]; //@line 139 "loslib.c"
      __Z8setfieldP9lua_StatePKci($40, ((STRING_TABLE.__str14466)|0), $43); //@line 139 "loslib.c"
      var $44=$1; //@line 140 "loslib.c"
      var $45=$stm; //@line 140 "loslib.c"
      var $46=(($45+8)|0); //@line 140 "loslib.c"
      var $47=HEAP32[(($46)>>2)]; //@line 140 "loslib.c"
      __Z8setfieldP9lua_StatePKci($44, ((STRING_TABLE.__str15467)|0), $47); //@line 140 "loslib.c"
      var $48=$1; //@line 141 "loslib.c"
      var $49=$stm; //@line 141 "loslib.c"
      var $50=(($49+12)|0); //@line 141 "loslib.c"
      var $51=HEAP32[(($50)>>2)]; //@line 141 "loslib.c"
      __Z8setfieldP9lua_StatePKci($48, ((STRING_TABLE.__str16468)|0), $51); //@line 141 "loslib.c"
      var $52=$1; //@line 142 "loslib.c"
      var $53=$stm; //@line 142 "loslib.c"
      var $54=(($53+16)|0); //@line 142 "loslib.c"
      var $55=HEAP32[(($54)>>2)]; //@line 142 "loslib.c"
      var $56=((($55)+(1))|0); //@line 142 "loslib.c"
      __Z8setfieldP9lua_StatePKci($52, ((STRING_TABLE.__str17469)|0), $56); //@line 142 "loslib.c"
      var $57=$1; //@line 143 "loslib.c"
      var $58=$stm; //@line 143 "loslib.c"
      var $59=(($58+20)|0); //@line 143 "loslib.c"
      var $60=HEAP32[(($59)>>2)]; //@line 143 "loslib.c"
      var $61=((($60)+(1900))|0); //@line 143 "loslib.c"
      __Z8setfieldP9lua_StatePKci($57, ((STRING_TABLE.__str18470)|0), $61); //@line 143 "loslib.c"
      var $62=$1; //@line 144 "loslib.c"
      var $63=$stm; //@line 144 "loslib.c"
      var $64=(($63+24)|0); //@line 144 "loslib.c"
      var $65=HEAP32[(($64)>>2)]; //@line 144 "loslib.c"
      var $66=((($65)+(1))|0); //@line 144 "loslib.c"
      __Z8setfieldP9lua_StatePKci($62, ((STRING_TABLE.__str29481)|0), $66); //@line 144 "loslib.c"
      var $67=$1; //@line 145 "loslib.c"
      var $68=$stm; //@line 145 "loslib.c"
      var $69=(($68+28)|0); //@line 145 "loslib.c"
      var $70=HEAP32[(($69)>>2)]; //@line 145 "loslib.c"
      var $71=((($70)+(1))|0); //@line 145 "loslib.c"
      __Z8setfieldP9lua_StatePKci($67, ((STRING_TABLE.__str30482)|0), $71); //@line 145 "loslib.c"
      var $72=$1; //@line 146 "loslib.c"
      var $73=$stm; //@line 146 "loslib.c"
      var $74=(($73+32)|0); //@line 146 "loslib.c"
      var $75=HEAP32[(($74)>>2)]; //@line 146 "loslib.c"
      __Z12setboolfieldP9lua_StatePKci($72, ((STRING_TABLE.__str19471)|0), $75); //@line 146 "loslib.c"
      __label__ = 23; break; //@line 147 "loslib.c"
    case 12: 
      var $77=(($cc)|0); //@line 151 "loslib.c"
      HEAP8[($77)]=37; //@line 151 "loslib.c"
      var $78=(($cc+2)|0); //@line 151 "loslib.c"
      HEAP8[($78)]=0; //@line 151 "loslib.c"
      var $79=$1; //@line 152 "loslib.c"
      _luaL_buffinit($79, $b); //@line 152 "loslib.c"
      __label__ = 13; break; //@line 153 "loslib.c"
    case 13: 
      var $81=$s; //@line 153 "loslib.c"
      var $82=HEAP8[($81)]; //@line 153 "loslib.c"
      var $83=(($82 << 24) >> 24)!=0; //@line 153 "loslib.c"
      if ($83) { __label__ = 14; break; } else { __label__ = 22; break; } //@line 153 "loslib.c"
    case 14: 
      var $85=$s; //@line 154 "loslib.c"
      var $86=HEAP8[($85)]; //@line 154 "loslib.c"
      var $87=(($86 << 24) >> 24); //@line 154 "loslib.c"
      var $88=(($87)|0)!=37; //@line 154 "loslib.c"
      if ($88) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 154 "loslib.c"
    case 15: 
      var $90=$s; //@line 154 "loslib.c"
      var $91=(($90+1)|0); //@line 154 "loslib.c"
      var $92=HEAP8[($91)]; //@line 154 "loslib.c"
      var $93=(($92 << 24) >> 24); //@line 154 "loslib.c"
      var $94=(($93)|0)==0; //@line 154 "loslib.c"
      if ($94) { __label__ = 16; break; } else { __label__ = 19; break; } //@line 154 "loslib.c"
    case 16: 
      var $96=(($b)|0); //@line 155 "loslib.c"
      var $97=HEAPU32[(($96)>>2)]; //@line 155 "loslib.c"
      var $98=(($b+12)|0); //@line 155 "loslib.c"
      var $99=(($98)|0); //@line 155 "loslib.c"
      var $100=(($99+8192)|0); //@line 155 "loslib.c"
      var $101=(($97)>>>0) < (($100)>>>0); //@line 155 "loslib.c"
      if ($101) { var $106 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 155 "loslib.c"
    case 17: 
      var $103=_luaL_prepbuffer($b); //@line 155 "loslib.c"
      var $104=(($103)|0)!=0; //@line 155 "loslib.c"
      var $106 = $104;__label__ = 18; break; //@line 155 "loslib.c"
    case 18: 
      var $106;
      var $107=$s; //@line 155 "loslib.c"
      var $108=HEAP8[($107)]; //@line 155 "loslib.c"
      var $109=(($b)|0); //@line 155 "loslib.c"
      var $110=HEAP32[(($109)>>2)]; //@line 155 "loslib.c"
      var $111=(($110+1)|0); //@line 155 "loslib.c"
      HEAP32[(($109)>>2)]=$111; //@line 155 "loslib.c"
      HEAP8[($110)]=$108; //@line 155 "loslib.c"
      __label__ = 20; break; //@line 155 "loslib.c"
    case 19: 
      var $113=$s; //@line 159 "loslib.c"
      var $114=(($113+1)|0); //@line 159 "loslib.c"
      $s=$114; //@line 159 "loslib.c"
      var $115=HEAP8[($114)]; //@line 159 "loslib.c"
      var $116=(($cc+1)|0); //@line 159 "loslib.c"
      HEAP8[($116)]=$115; //@line 159 "loslib.c"
      var $117=(($buff)|0); //@line 160 "loslib.c"
      var $118=(($cc)|0); //@line 160 "loslib.c"
      var $119=$stm; //@line 160 "loslib.c"
      var $120=_strftime($117, 200, $118, $119); //@line 160 "loslib.c"
      $reslen=$120; //@line 160 "loslib.c"
      var $121=(($buff)|0); //@line 161 "loslib.c"
      var $122=$reslen; //@line 161 "loslib.c"
      _luaL_addlstring($b, $121, $122); //@line 161 "loslib.c"
      __label__ = 20; break; //@line 162 "loslib.c"
    case 20: 
      __label__ = 21; break; //@line 163 "loslib.c"
    case 21: 
      var $125=$s; //@line 153 "loslib.c"
      var $126=(($125+1)|0); //@line 153 "loslib.c"
      $s=$126; //@line 153 "loslib.c"
      __label__ = 13; break; //@line 153 "loslib.c"
    case 22: 
      _luaL_pushresult($b); //@line 164 "loslib.c"
      __label__ = 23; break; //@line 165 "loslib.c"
    case 23: 
      __label__ = 24; break; //@line 165 "loslib.c"
    case 24: 
      STACKTOP = __stackBase__;
      return 1; //@line 166 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7os_dateP9lua_State["X"]=1;

function __Z11os_difftimeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 196 "loslib.c"
  var $3=$1; //@line 196 "loslib.c"
  var $4=_luaL_checknumber($3, 1); //@line 196 "loslib.c"
  var $5=(($4)&-1); //@line 196 "loslib.c"
  var $6=$1; //@line 197 "loslib.c"
  var $7=_luaL_optnumber($6, 2, 0); //@line 197 "loslib.c"
  var $8=(($7)&-1); //@line 197 "loslib.c"
  var $9=_difftime($5, $8); //@line 197 "loslib.c"
  _lua_pushnumber($2, $9); //@line 197 "loslib.c"
  ;
  return 1; //@line 198 "loslib.c"
}


function __Z10os_executeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 39 "loslib.c"
  var $3=$1; //@line 39 "loslib.c"
  var $4=_luaL_optlstring($3, 1, 0, 0); //@line 39 "loslib.c"
  var $5=_system($4); //@line 39 "loslib.c"
  _lua_pushinteger($2, $5); //@line 39 "loslib.c"
  ;
  return 1; //@line 40 "loslib.c"
}


function __Z9os_getenvP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 69 "loslib.c"
  var $3=$1; //@line 69 "loslib.c"
  var $4=_luaL_checklstring($3, 1, 0); //@line 69 "loslib.c"
  var $5=_getenv($4); //@line 69 "loslib.c"
  _lua_pushstring($2, $5); //@line 69 "loslib.c"
  ;
  return 1; //@line 70 "loslib.c"
}


function __Z9os_removeP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $filename;
  $1=$L;
  var $2=$1; //@line 45 "loslib.c"
  var $3=_luaL_checklstring($2, 1, 0); //@line 45 "loslib.c"
  $filename=$3; //@line 45 "loslib.c"
  var $4=$1; //@line 46 "loslib.c"
  var $5=$filename; //@line 46 "loslib.c"
  var $6=_remove($5); //@line 46 "loslib.c"
  var $7=(($6)|0)==0; //@line 46 "loslib.c"
  var $8=(($7)&1); //@line 46 "loslib.c"
  var $9=$filename; //@line 46 "loslib.c"
  var $10=__Z13os_pushresultP9lua_StateiPKc($4, $8, $9); //@line 46 "loslib.c"
  ;
  return $10; //@line 46 "loslib.c"
}


function __Z9os_renameP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $fromname;
  var $toname;
  $1=$L;
  var $2=$1; //@line 51 "loslib.c"
  var $3=_luaL_checklstring($2, 1, 0); //@line 51 "loslib.c"
  $fromname=$3; //@line 51 "loslib.c"
  var $4=$1; //@line 52 "loslib.c"
  var $5=_luaL_checklstring($4, 2, 0); //@line 52 "loslib.c"
  $toname=$5; //@line 52 "loslib.c"
  var $6=$1; //@line 53 "loslib.c"
  var $7=$fromname; //@line 53 "loslib.c"
  var $8=$toname; //@line 53 "loslib.c"
  var $9=_rename($7, $8); //@line 53 "loslib.c"
  var $10=(($9)|0)==0; //@line 53 "loslib.c"
  var $11=(($10)&1); //@line 53 "loslib.c"
  var $12=$fromname; //@line 53 "loslib.c"
  var $13=__Z13os_pushresultP9lua_StateiPKc($6, $11, $12); //@line 53 "loslib.c"
  ;
  return $13; //@line 53 "loslib.c"
}


function __Z12os_setlocaleP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $l;
  var $op;
  $1=$L;
  var $2=$1; //@line 209 "loslib.c"
  var $3=_luaL_optlstring($2, 1, 0, 0); //@line 209 "loslib.c"
  $l=$3; //@line 209 "loslib.c"
  var $4=$1; //@line 210 "loslib.c"
  var $5=_luaL_checkoption($4, 2, ((STRING_TABLE.__str21473)|0), ((__ZZ12os_setlocaleP9lua_StateE8catnames)|0)); //@line 210 "loslib.c"
  $op=$5; //@line 210 "loslib.c"
  var $6=$1; //@line 211 "loslib.c"
  var $7=$op; //@line 211 "loslib.c"
  var $8=((__ZZ12os_setlocaleP9lua_StateE3cat+($7<<2))|0); //@line 211 "loslib.c"
  var $9=HEAP32[(($8)>>2)]; //@line 211 "loslib.c"
  var $10=$l; //@line 211 "loslib.c"
  var $11=_setlocale($9, $10); //@line 211 "loslib.c"
  _lua_pushstring($6, $11); //@line 211 "loslib.c"
  ;
  return 1; //@line 212 "loslib.c"
}


function __Z7os_timeP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; _memset(__stackBase__, 0, 44);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $t;
      var $ts=__stackBase__;
      $1=$L;
      var $2=$1; //@line 172 "loslib.c"
      var $3=_lua_type($2, 1); //@line 172 "loslib.c"
      var $4=(($3)|0) <= 0; //@line 172 "loslib.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 172 "loslib.c"
    case 3: 
      var $6=_time(0); //@line 173 "loslib.c"
      $t=$6; //@line 173 "loslib.c"
      __label__ = 5; break; //@line 173 "loslib.c"
    case 4: 
      var $8=$1; //@line 176 "loslib.c"
      _luaL_checktype($8, 1, 5); //@line 176 "loslib.c"
      var $9=$1; //@line 177 "loslib.c"
      _lua_settop($9, 1); //@line 177 "loslib.c"
      var $10=$1; //@line 178 "loslib.c"
      var $11=__Z8getfieldP9lua_StatePKci($10, ((STRING_TABLE.__str13465)|0), 0); //@line 178 "loslib.c"
      var $12=(($ts)|0); //@line 178 "loslib.c"
      HEAP32[(($12)>>2)]=$11; //@line 178 "loslib.c"
      var $13=$1; //@line 179 "loslib.c"
      var $14=__Z8getfieldP9lua_StatePKci($13, ((STRING_TABLE.__str14466)|0), 0); //@line 179 "loslib.c"
      var $15=(($ts+4)|0); //@line 179 "loslib.c"
      HEAP32[(($15)>>2)]=$14; //@line 179 "loslib.c"
      var $16=$1; //@line 180 "loslib.c"
      var $17=__Z8getfieldP9lua_StatePKci($16, ((STRING_TABLE.__str15467)|0), 12); //@line 180 "loslib.c"
      var $18=(($ts+8)|0); //@line 180 "loslib.c"
      HEAP32[(($18)>>2)]=$17; //@line 180 "loslib.c"
      var $19=$1; //@line 181 "loslib.c"
      var $20=__Z8getfieldP9lua_StatePKci($19, ((STRING_TABLE.__str16468)|0), -1); //@line 181 "loslib.c"
      var $21=(($ts+12)|0); //@line 181 "loslib.c"
      HEAP32[(($21)>>2)]=$20; //@line 181 "loslib.c"
      var $22=$1; //@line 182 "loslib.c"
      var $23=__Z8getfieldP9lua_StatePKci($22, ((STRING_TABLE.__str17469)|0), -1); //@line 182 "loslib.c"
      var $24=((($23)-(1))|0); //@line 182 "loslib.c"
      var $25=(($ts+16)|0); //@line 182 "loslib.c"
      HEAP32[(($25)>>2)]=$24; //@line 182 "loslib.c"
      var $26=$1; //@line 183 "loslib.c"
      var $27=__Z8getfieldP9lua_StatePKci($26, ((STRING_TABLE.__str18470)|0), -1); //@line 183 "loslib.c"
      var $28=((($27)-(1900))|0); //@line 183 "loslib.c"
      var $29=(($ts+20)|0); //@line 183 "loslib.c"
      HEAP32[(($29)>>2)]=$28; //@line 183 "loslib.c"
      var $30=$1; //@line 184 "loslib.c"
      var $31=__Z12getboolfieldP9lua_StatePKc($30, ((STRING_TABLE.__str19471)|0)); //@line 184 "loslib.c"
      var $32=(($ts+32)|0); //@line 184 "loslib.c"
      HEAP32[(($32)>>2)]=$31; //@line 184 "loslib.c"
      var $33=_mktime($ts); //@line 185 "loslib.c"
      $t=$33; //@line 185 "loslib.c"
      __label__ = 5; break; //@line 186 "loslib.c"
    case 5: 
      var $35=$t; //@line 187 "loslib.c"
      var $36=(($35)|0)==-1; //@line 187 "loslib.c"
      if ($36) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 187 "loslib.c"
    case 6: 
      var $38=$1; //@line 188 "loslib.c"
      _lua_pushnil($38); //@line 188 "loslib.c"
      __label__ = 8; break; //@line 188 "loslib.c"
    case 7: 
      var $40=$1; //@line 190 "loslib.c"
      var $41=$t; //@line 190 "loslib.c"
      var $42=(($41)|0); //@line 190 "loslib.c"
      _lua_pushnumber($40, $42); //@line 190 "loslib.c"
      __label__ = 8; break; //@line 190 "loslib.c"
    case 8: 
      STACKTOP = __stackBase__;
      return 1; //@line 191 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7os_timeP9lua_State["X"]=1;

function __Z10os_tmpnameP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; _memset(__stackBase__, 0, 20);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $buff=__stackBase__;
      var $err;
      $2=$L;
      var $3=(($buff)|0); //@line 60 "loslib.c"
      var $4=_tmpnam($3); //@line 60 "loslib.c"
      var $5=(($4)|0)==0; //@line 60 "loslib.c"
      var $6=(($5)&1); //@line 60 "loslib.c"
      $err=$6; //@line 60 "loslib.c"
      var $7=$err; //@line 61 "loslib.c"
      var $8=(($7)|0)!=0; //@line 61 "loslib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 61 "loslib.c"
    case 3: 
      var $10=$2; //@line 62 "loslib.c"
      var $11=_luaL_error($10, ((STRING_TABLE.__str12464)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 62 "loslib.c"
      $1=$11; //@line 62 "loslib.c"
      __label__ = 5; break; //@line 62 "loslib.c"
    case 4: 
      var $13=$2; //@line 63 "loslib.c"
      var $14=(($buff)|0); //@line 63 "loslib.c"
      _lua_pushstring($13, $14); //@line 63 "loslib.c"
      $1=1; //@line 64 "loslib.c"
      __label__ = 5; break; //@line 64 "loslib.c"
    case 5: 
      var $16=$1; //@line 65 "loslib.c"
      STACKTOP = __stackBase__;
      return $16; //@line 65 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaopen_os($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 240 "loslib.c"
  _luaL_register($2, ((STRING_TABLE.__str11463)|0), ((__ZL6syslib)|0)); //@line 240 "loslib.c"
  ;
  return 1; //@line 241 "loslib.c"
}


function __Z8getfieldP9lua_StatePKci($L, $key, $d) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$key;
      $4=$d;
      var $5=$2; //@line 111 "loslib.c"
      var $6=$3; //@line 111 "loslib.c"
      _lua_getfield($5, -1, $6); //@line 111 "loslib.c"
      var $7=$2; //@line 112 "loslib.c"
      var $8=_lua_isnumber($7, -1); //@line 112 "loslib.c"
      var $9=(($8)|0)!=0; //@line 112 "loslib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 112 "loslib.c"
    case 3: 
      var $11=$2; //@line 113 "loslib.c"
      var $12=_lua_tointeger($11, -1); //@line 113 "loslib.c"
      $res=$12; //@line 113 "loslib.c"
      __label__ = 7; break; //@line 113 "loslib.c"
    case 4: 
      var $14=$4; //@line 115 "loslib.c"
      var $15=(($14)|0) < 0; //@line 115 "loslib.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 115 "loslib.c"
    case 5: 
      var $17=$2; //@line 116 "loslib.c"
      var $18=$3; //@line 116 "loslib.c"
      var $19=_luaL_error($17, ((STRING_TABLE.__str20472)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$18,tempInt)); //@line 116 "loslib.c"
      $1=$19; //@line 116 "loslib.c"
      __label__ = 8; break; //@line 116 "loslib.c"
    case 6: 
      var $21=$4; //@line 117 "loslib.c"
      $res=$21; //@line 117 "loslib.c"
      __label__ = 7; break; //@line 118 "loslib.c"
    case 7: 
      var $23=$2; //@line 119 "loslib.c"
      _lua_settop($23, -2); //@line 119 "loslib.c"
      var $24=$res; //@line 120 "loslib.c"
      $1=$24; //@line 120 "loslib.c"
      __label__ = 8; break; //@line 120 "loslib.c"
    case 8: 
      var $26=$1; //@line 121 "loslib.c"
      STACKTOP = __stackBase__;
      return $26; //@line 121 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12getboolfieldP9lua_StatePKc($L, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $res;
      $1=$L;
      $2=$key;
      var $3=$1; //@line 102 "loslib.c"
      var $4=$2; //@line 102 "loslib.c"
      _lua_getfield($3, -1, $4); //@line 102 "loslib.c"
      var $5=$1; //@line 103 "loslib.c"
      var $6=_lua_type($5, -1); //@line 103 "loslib.c"
      var $7=(($6)|0)==0; //@line 103 "loslib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 103 "loslib.c"
    case 3: 
      var $13 = -1;__label__ = 5; break; //@line 103 "loslib.c"
    case 4: 
      var $10=$1; //@line 103 "loslib.c"
      var $11=_lua_toboolean($10, -1); //@line 103 "loslib.c"
      var $13 = $11;__label__ = 5; break; //@line 103 "loslib.c"
    case 5: 
      var $13; //@line 103 "loslib.c"
      $res=$13; //@line 103 "loslib.c"
      var $14=$1; //@line 104 "loslib.c"
      _lua_settop($14, -2); //@line 104 "loslib.c"
      var $15=$res; //@line 105 "loslib.c"
      ;
      return $15; //@line 105 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z13os_pushresultP9lua_StateiPKc($L, $i, $filename) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $en;
      $2=$L;
      $3=$i;
      $4=$filename;
      var $5=___errno_location(); //@line 24 "loslib.c"
      var $6=HEAP32[(($5)>>2)]; //@line 24 "loslib.c"
      $en=$6; //@line 24 "loslib.c"
      var $7=$3; //@line 25 "loslib.c"
      var $8=(($7)|0)!=0; //@line 25 "loslib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 25 "loslib.c"
    case 3: 
      var $10=$2; //@line 26 "loslib.c"
      _lua_pushboolean($10, 1); //@line 26 "loslib.c"
      $1=1; //@line 27 "loslib.c"
      __label__ = 5; break; //@line 27 "loslib.c"
    case 4: 
      var $12=$2; //@line 30 "loslib.c"
      _lua_pushnil($12); //@line 30 "loslib.c"
      var $13=$2; //@line 31 "loslib.c"
      var $14=$4; //@line 31 "loslib.c"
      var $15=$en; //@line 31 "loslib.c"
      var $16=_strerror($15); //@line 31 "loslib.c"
      var $17=_lua_pushfstring($13, ((STRING_TABLE.__str26478)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$16,tempInt)); //@line 31 "loslib.c"
      var $18=$2; //@line 32 "loslib.c"
      var $19=$en; //@line 32 "loslib.c"
      _lua_pushinteger($18, $19); //@line 32 "loslib.c"
      $1=3; //@line 33 "loslib.c"
      __label__ = 5; break; //@line 33 "loslib.c"
    case 5: 
      var $21=$1; //@line 35 "loslib.c"
      STACKTOP = __stackBase__;
      return $21; //@line 35 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8setfieldP9lua_StatePKci($L, $key, $value) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$key;
  $3=$value;
  var $4=$1; //@line 89 "loslib.c"
  var $5=$3; //@line 89 "loslib.c"
  _lua_pushinteger($4, $5); //@line 89 "loslib.c"
  var $6=$1; //@line 90 "loslib.c"
  var $7=$2; //@line 90 "loslib.c"
  _lua_setfield($6, -2, $7); //@line 90 "loslib.c"
  ;
  return; //@line 91 "loslib.c"
}


function __Z12setboolfieldP9lua_StatePKci($L, $key, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$key;
      $3=$value;
      var $4=$3; //@line 94 "loslib.c"
      var $5=(($4)|0) < 0; //@line 94 "loslib.c"
      if ($5) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 94 "loslib.c"
    case 3: 
      __label__ = 5; break; //@line 95 "loslib.c"
    case 4: 
      var $8=$1; //@line 96 "loslib.c"
      var $9=$3; //@line 96 "loslib.c"
      _lua_pushboolean($8, $9); //@line 96 "loslib.c"
      var $10=$1; //@line 97 "loslib.c"
      var $11=$2; //@line 97 "loslib.c"
      _lua_setfield($10, -2, $11); //@line 97 "loslib.c"
      __label__ = 5; break; //@line 98 "loslib.c"
    case 5: 
      ;
      return; //@line 98 "loslib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7tconcatP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8208; _memset(__stackBase__, 0, 8208);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $b=__stackBase__;
      var $lsep=(__stackBase__)+(8204);
      var $i;
      var $last;
      var $sep;
      $1=$L;
      var $2=$1; //@line 148 "ltablib.c"
      var $3=_luaL_optlstring($2, 2, ((__str10493)|0), $lsep); //@line 148 "ltablib.c"
      $sep=$3; //@line 148 "ltablib.c"
      var $4=$1; //@line 149 "ltablib.c"
      _luaL_checktype($4, 1, 5); //@line 149 "ltablib.c"
      var $5=$1; //@line 150 "ltablib.c"
      var $6=_luaL_optinteger($5, 3, 1); //@line 150 "ltablib.c"
      $i=$6; //@line 150 "ltablib.c"
      var $7=$1; //@line 151 "ltablib.c"
      var $8=_lua_type($7, 4); //@line 151 "ltablib.c"
      var $9=(($8)|0) <= 0; //@line 151 "ltablib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 151 "ltablib.c"
    case 3: 
      var $11=$1; //@line 151 "ltablib.c"
      var $12=_lua_objlen($11, 1); //@line 151 "ltablib.c"
      var $17 = $12;__label__ = 5; break; //@line 151 "ltablib.c"
    case 4: 
      var $14=$1; //@line 151 "ltablib.c"
      var $15=_luaL_checkinteger($14, 4); //@line 151 "ltablib.c"
      var $17 = $15;__label__ = 5; break; //@line 151 "ltablib.c"
    case 5: 
      var $17; //@line 151 "ltablib.c"
      $last=$17; //@line 151 "ltablib.c"
      var $18=$1; //@line 152 "ltablib.c"
      _luaL_buffinit($18, $b); //@line 152 "ltablib.c"
      __label__ = 6; break; //@line 153 "ltablib.c"
    case 6: 
      var $20=$i; //@line 153 "ltablib.c"
      var $21=$last; //@line 153 "ltablib.c"
      var $22=(($20)|0) < (($21)|0); //@line 153 "ltablib.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 153 "ltablib.c"
    case 7: 
      var $24=$1; //@line 154 "ltablib.c"
      var $25=$i; //@line 154 "ltablib.c"
      __Z8addfieldP9lua_StateP11luaL_Bufferi($24, $b, $25); //@line 154 "ltablib.c"
      var $26=$sep; //@line 155 "ltablib.c"
      var $27=HEAP32[(($lsep)>>2)]; //@line 155 "ltablib.c"
      _luaL_addlstring($b, $26, $27); //@line 155 "ltablib.c"
      __label__ = 8; break; //@line 156 "ltablib.c"
    case 8: 
      var $29=$i; //@line 153 "ltablib.c"
      var $30=((($29)+(1))|0); //@line 153 "ltablib.c"
      $i=$30; //@line 153 "ltablib.c"
      __label__ = 6; break; //@line 153 "ltablib.c"
    case 9: 
      var $32=$i; //@line 157 "ltablib.c"
      var $33=$last; //@line 157 "ltablib.c"
      var $34=(($32)|0)==(($33)|0); //@line 157 "ltablib.c"
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 157 "ltablib.c"
    case 10: 
      var $36=$1; //@line 158 "ltablib.c"
      var $37=$i; //@line 158 "ltablib.c"
      __Z8addfieldP9lua_StateP11luaL_Bufferi($36, $b, $37); //@line 158 "ltablib.c"
      __label__ = 11; break; //@line 158 "ltablib.c"
    case 11: 
      _luaL_pushresult($b); //@line 159 "ltablib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 160 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7tconcatP9lua_State["X"]=1;

function __Z7foreachP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $2=$L;
      var $3=$2; //@line 40 "ltablib.c"
      _luaL_checktype($3, 1, 5); //@line 40 "ltablib.c"
      var $4=$2; //@line 41 "ltablib.c"
      _luaL_checktype($4, 2, 6); //@line 41 "ltablib.c"
      var $5=$2; //@line 42 "ltablib.c"
      _lua_pushnil($5); //@line 42 "ltablib.c"
      __label__ = 3; break; //@line 43 "ltablib.c"
    case 3: 
      var $7=$2; //@line 43 "ltablib.c"
      var $8=_lua_next($7, 1); //@line 43 "ltablib.c"
      var $9=(($8)|0)!=0; //@line 43 "ltablib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 43 "ltablib.c"
    case 4: 
      var $11=$2; //@line 44 "ltablib.c"
      _lua_pushvalue($11, 2); //@line 44 "ltablib.c"
      var $12=$2; //@line 45 "ltablib.c"
      _lua_pushvalue($12, -3); //@line 45 "ltablib.c"
      var $13=$2; //@line 46 "ltablib.c"
      _lua_pushvalue($13, -3); //@line 46 "ltablib.c"
      var $14=$2; //@line 47 "ltablib.c"
      _lua_call($14, 2, 1); //@line 47 "ltablib.c"
      var $15=$2; //@line 48 "ltablib.c"
      var $16=_lua_type($15, -1); //@line 48 "ltablib.c"
      var $17=(($16)|0)==0; //@line 48 "ltablib.c"
      if ($17) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 48 "ltablib.c"
    case 5: 
      $1=1; //@line 49 "ltablib.c"
      __label__ = 8; break; //@line 49 "ltablib.c"
    case 6: 
      var $20=$2; //@line 50 "ltablib.c"
      _lua_settop($20, -3); //@line 50 "ltablib.c"
      __label__ = 3; break; //@line 51 "ltablib.c"
    case 7: 
      $1=0; //@line 52 "ltablib.c"
      __label__ = 8; break; //@line 52 "ltablib.c"
    case 8: 
      var $23=$1; //@line 53 "ltablib.c"
      ;
      return $23; //@line 53 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7os_exitP9lua_State($L) {
  ;
  var __label__;

  var $1;
  var $2;
  $2=$L;
  var $3=$2; //@line 217 "loslib.c"
  var $4=_luaL_optinteger($3, 1, 0); //@line 217 "loslib.c"
  _exit($4); //@line 217 "loslib.c"
  throw "Reached an unreachable!" //@line 217 "loslib.c"
  var $6=$1; //@line 218 "loslib.c"
  ;
  return $6; //@line 218 "loslib.c"
}


function __Z8foreachiP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $n;
      $2=$L;
      var $3=$2; //@line 24 "ltablib.c"
      _luaL_checktype($3, 1, 5); //@line 24 "ltablib.c"
      var $4=$2; //@line 24 "ltablib.c"
      var $5=_lua_objlen($4, 1); //@line 24 "ltablib.c"
      $n=$5; //@line 24 "ltablib.c"
      var $6=$2; //@line 25 "ltablib.c"
      _luaL_checktype($6, 2, 6); //@line 25 "ltablib.c"
      $i=1; //@line 26 "ltablib.c"
      __label__ = 3; break; //@line 26 "ltablib.c"
    case 3: 
      var $8=$i; //@line 26 "ltablib.c"
      var $9=$n; //@line 26 "ltablib.c"
      var $10=(($8)|0) <= (($9)|0); //@line 26 "ltablib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 26 "ltablib.c"
    case 4: 
      var $12=$2; //@line 27 "ltablib.c"
      _lua_pushvalue($12, 2); //@line 27 "ltablib.c"
      var $13=$2; //@line 28 "ltablib.c"
      var $14=$i; //@line 28 "ltablib.c"
      _lua_pushinteger($13, $14); //@line 28 "ltablib.c"
      var $15=$2; //@line 29 "ltablib.c"
      var $16=$i; //@line 29 "ltablib.c"
      _lua_rawgeti($15, 1, $16); //@line 29 "ltablib.c"
      var $17=$2; //@line 30 "ltablib.c"
      _lua_call($17, 2, 1); //@line 30 "ltablib.c"
      var $18=$2; //@line 31 "ltablib.c"
      var $19=_lua_type($18, -1); //@line 31 "ltablib.c"
      var $20=(($19)|0)==0; //@line 31 "ltablib.c"
      if ($20) { __label__ = 6; break; } else { __label__ = 5; break; } //@line 31 "ltablib.c"
    case 5: 
      $1=1; //@line 32 "ltablib.c"
      __label__ = 9; break; //@line 32 "ltablib.c"
    case 6: 
      var $23=$2; //@line 33 "ltablib.c"
      _lua_settop($23, -2); //@line 33 "ltablib.c"
      __label__ = 7; break; //@line 34 "ltablib.c"
    case 7: 
      var $25=$i; //@line 26 "ltablib.c"
      var $26=((($25)+(1))|0); //@line 26 "ltablib.c"
      $i=$26; //@line 26 "ltablib.c"
      __label__ = 3; break; //@line 26 "ltablib.c"
    case 8: 
      $1=0; //@line 35 "ltablib.c"
      __label__ = 9; break; //@line 35 "ltablib.c"
    case 9: 
      var $29=$1; //@line 36 "ltablib.c"
      ;
      return $29; //@line 36 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z4getnP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 73 "ltablib.c"
  var $3=$1; //@line 73 "ltablib.c"
  _luaL_checktype($3, 1, 5); //@line 73 "ltablib.c"
  var $4=$1; //@line 73 "ltablib.c"
  var $5=_lua_objlen($4, 1); //@line 73 "ltablib.c"
  _lua_pushinteger($2, $5); //@line 73 "ltablib.c"
  ;
  return 1; //@line 74 "ltablib.c"
}


function __Z4maxnP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $max;
      var $v;
      $1=$L;
      $max=0; //@line 57 "ltablib.c"
      var $2=$1; //@line 58 "ltablib.c"
      _luaL_checktype($2, 1, 5); //@line 58 "ltablib.c"
      var $3=$1; //@line 59 "ltablib.c"
      _lua_pushnil($3); //@line 59 "ltablib.c"
      __label__ = 3; break; //@line 60 "ltablib.c"
    case 3: 
      var $5=$1; //@line 60 "ltablib.c"
      var $6=_lua_next($5, 1); //@line 60 "ltablib.c"
      var $7=(($6)|0)!=0; //@line 60 "ltablib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 9; break; } //@line 60 "ltablib.c"
    case 4: 
      var $9=$1; //@line 61 "ltablib.c"
      _lua_settop($9, -2); //@line 61 "ltablib.c"
      var $10=$1; //@line 62 "ltablib.c"
      var $11=_lua_type($10, -1); //@line 62 "ltablib.c"
      var $12=(($11)|0)==3; //@line 62 "ltablib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 62 "ltablib.c"
    case 5: 
      var $14=$1; //@line 63 "ltablib.c"
      var $15=_lua_tonumber($14, -1); //@line 63 "ltablib.c"
      $v=$15; //@line 63 "ltablib.c"
      var $16=$v; //@line 64 "ltablib.c"
      var $17=$max; //@line 64 "ltablib.c"
      var $18=$16 > $17; //@line 64 "ltablib.c"
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 64 "ltablib.c"
    case 6: 
      var $20=$v; //@line 64 "ltablib.c"
      $max=$20; //@line 64 "ltablib.c"
      __label__ = 7; break; //@line 64 "ltablib.c"
    case 7: 
      __label__ = 8; break; //@line 65 "ltablib.c"
    case 8: 
      __label__ = 3; break; //@line 66 "ltablib.c"
    case 9: 
      var $24=$1; //@line 67 "ltablib.c"
      var $25=$max; //@line 67 "ltablib.c"
      _lua_pushnumber($24, $25); //@line 67 "ltablib.c"
      ;
      return 1; //@line 68 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7tinsertP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      var $pos;
      var $i;
      $2=$L;
      var $3=$2; //@line 91 "ltablib.c"
      _luaL_checktype($3, 1, 5); //@line 91 "ltablib.c"
      var $4=$2; //@line 91 "ltablib.c"
      var $5=_lua_objlen($4, 1); //@line 91 "ltablib.c"
      var $6=((($5)+(1))|0); //@line 91 "ltablib.c"
      $e=$6; //@line 91 "ltablib.c"
      var $7=$2; //@line 93 "ltablib.c"
      var $8=_lua_gettop($7); //@line 93 "ltablib.c"
      if ((($8)|0) == 2) {
        __label__ = 3; break;
      }
      else if ((($8)|0) == 3) {
        __label__ = 4; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 3: 
      var $10=$e; //@line 95 "ltablib.c"
      $pos=$10; //@line 95 "ltablib.c"
      __label__ = 12; break; //@line 96 "ltablib.c"
    case 4: 
      var $12=$2; //@line 100 "ltablib.c"
      var $13=_luaL_checkinteger($12, 2); //@line 100 "ltablib.c"
      $pos=$13; //@line 100 "ltablib.c"
      var $14=$pos; //@line 101 "ltablib.c"
      var $15=$e; //@line 101 "ltablib.c"
      var $16=(($14)|0) > (($15)|0); //@line 101 "ltablib.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 101 "ltablib.c"
    case 5: 
      var $18=$pos; //@line 101 "ltablib.c"
      $e=$18; //@line 101 "ltablib.c"
      __label__ = 6; break; //@line 101 "ltablib.c"
    case 6: 
      var $20=$e; //@line 102 "ltablib.c"
      $i=$20; //@line 102 "ltablib.c"
      __label__ = 7; break; //@line 102 "ltablib.c"
    case 7: 
      var $22=$i; //@line 102 "ltablib.c"
      var $23=$pos; //@line 102 "ltablib.c"
      var $24=(($22)|0) > (($23)|0); //@line 102 "ltablib.c"
      if ($24) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 102 "ltablib.c"
    case 8: 
      var $26=$2; //@line 103 "ltablib.c"
      var $27=$i; //@line 103 "ltablib.c"
      var $28=((($27)-(1))|0); //@line 103 "ltablib.c"
      _lua_rawgeti($26, 1, $28); //@line 103 "ltablib.c"
      var $29=$2; //@line 104 "ltablib.c"
      var $30=$i; //@line 104 "ltablib.c"
      _lua_rawseti($29, 1, $30); //@line 104 "ltablib.c"
      __label__ = 9; break; //@line 105 "ltablib.c"
    case 9: 
      var $32=$i; //@line 102 "ltablib.c"
      var $33=((($32)-(1))|0); //@line 102 "ltablib.c"
      $i=$33; //@line 102 "ltablib.c"
      __label__ = 7; break; //@line 102 "ltablib.c"
    case 10: 
      __label__ = 12; break; //@line 106 "ltablib.c"
    case 11: 
      var $36=$2; //@line 109 "ltablib.c"
      var $37=_luaL_error($36, ((STRING_TABLE.__str13496)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 109 "ltablib.c"
      $1=$37; //@line 109 "ltablib.c"
      __label__ = 13; break; //@line 109 "ltablib.c"
    case 12: 
      var $39=$2; //@line 113 "ltablib.c"
      var $40=$pos; //@line 113 "ltablib.c"
      _lua_rawseti($39, 1, $40); //@line 113 "ltablib.c"
      $1=0; //@line 114 "ltablib.c"
      __label__ = 13; break; //@line 114 "ltablib.c"
    case 13: 
      var $42=$1; //@line 115 "ltablib.c"
      STACKTOP = __stackBase__;
      return $42; //@line 115 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7tinsertP9lua_State["X"]=1;

function __Z7tremoveP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $e;
      var $pos;
      $2=$L;
      var $3=$2; //@line 119 "ltablib.c"
      _luaL_checktype($3, 1, 5); //@line 119 "ltablib.c"
      var $4=$2; //@line 119 "ltablib.c"
      var $5=_lua_objlen($4, 1); //@line 119 "ltablib.c"
      $e=$5; //@line 119 "ltablib.c"
      var $6=$2; //@line 120 "ltablib.c"
      var $7=$e; //@line 120 "ltablib.c"
      var $8=_luaL_optinteger($6, 2, $7); //@line 120 "ltablib.c"
      $pos=$8; //@line 120 "ltablib.c"
      var $9=$pos; //@line 121 "ltablib.c"
      var $10=1 <= (($9)|0); //@line 121 "ltablib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 121 "ltablib.c"
    case 3: 
      var $12=$pos; //@line 121 "ltablib.c"
      var $13=$e; //@line 121 "ltablib.c"
      var $14=(($12)|0) <= (($13)|0); //@line 121 "ltablib.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 121 "ltablib.c"
    case 4: 
      $1=0; //@line 122 "ltablib.c"
      __label__ = 10; break; //@line 122 "ltablib.c"
    case 5: 
      var $17=$2; //@line 124 "ltablib.c"
      var $18=$pos; //@line 124 "ltablib.c"
      _lua_rawgeti($17, 1, $18); //@line 124 "ltablib.c"
      __label__ = 6; break; //@line 125 "ltablib.c"
    case 6: 
      var $20=$pos; //@line 125 "ltablib.c"
      var $21=$e; //@line 125 "ltablib.c"
      var $22=(($20)|0) < (($21)|0); //@line 125 "ltablib.c"
      if ($22) { __label__ = 7; break; } else { __label__ = 9; break; } //@line 125 "ltablib.c"
    case 7: 
      var $24=$2; //@line 126 "ltablib.c"
      var $25=$pos; //@line 126 "ltablib.c"
      var $26=((($25)+(1))|0); //@line 126 "ltablib.c"
      _lua_rawgeti($24, 1, $26); //@line 126 "ltablib.c"
      var $27=$2; //@line 127 "ltablib.c"
      var $28=$pos; //@line 127 "ltablib.c"
      _lua_rawseti($27, 1, $28); //@line 127 "ltablib.c"
      __label__ = 8; break; //@line 128 "ltablib.c"
    case 8: 
      var $30=$pos; //@line 125 "ltablib.c"
      var $31=((($30)+(1))|0); //@line 125 "ltablib.c"
      $pos=$31; //@line 125 "ltablib.c"
      __label__ = 6; break; //@line 125 "ltablib.c"
    case 9: 
      var $33=$2; //@line 129 "ltablib.c"
      _lua_pushnil($33); //@line 129 "ltablib.c"
      var $34=$2; //@line 130 "ltablib.c"
      var $35=$e; //@line 130 "ltablib.c"
      _lua_rawseti($34, 1, $35); //@line 130 "ltablib.c"
      $1=1; //@line 131 "ltablib.c"
      __label__ = 10; break; //@line 131 "ltablib.c"
    case 10: 
      var $37=$1; //@line 132 "ltablib.c"
      ;
      return $37; //@line 132 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7tremoveP9lua_State["X"]=1;

function __Z4setnP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 79 "ltablib.c"
  _luaL_checktype($2, 1, 5); //@line 79 "ltablib.c"
  var $3=$1; //@line 83 "ltablib.c"
  var $4=_luaL_error($3, ((STRING_TABLE.__str12495)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 83 "ltablib.c"
  var $5=$1; //@line 85 "ltablib.c"
  _lua_pushvalue($5, 1); //@line 85 "ltablib.c"
  STACKTOP = __stackBase__;
  return 1; //@line 86 "ltablib.c"
}


function __Z4sortP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $n;
      $1=$L;
      var $2=$1; //@line 257 "ltablib.c"
      _luaL_checktype($2, 1, 5); //@line 257 "ltablib.c"
      var $3=$1; //@line 257 "ltablib.c"
      var $4=_lua_objlen($3, 1); //@line 257 "ltablib.c"
      $n=$4; //@line 257 "ltablib.c"
      var $5=$1; //@line 258 "ltablib.c"
      _luaL_checkstack($5, 40, ((__str10493)|0)); //@line 258 "ltablib.c"
      var $6=$1; //@line 259 "ltablib.c"
      var $7=_lua_type($6, 2); //@line 259 "ltablib.c"
      var $8=(($7)|0) <= 0; //@line 259 "ltablib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 259 "ltablib.c"
    case 3: 
      var $10=$1; //@line 260 "ltablib.c"
      _luaL_checktype($10, 2, 6); //@line 260 "ltablib.c"
      __label__ = 4; break; //@line 260 "ltablib.c"
    case 4: 
      var $12=$1; //@line 261 "ltablib.c"
      _lua_settop($12, 2); //@line 261 "ltablib.c"
      var $13=$1; //@line 262 "ltablib.c"
      var $14=$n; //@line 262 "ltablib.c"
      __Z7auxsortP9lua_Stateii($13, 1, $14); //@line 262 "ltablib.c"
      ;
      return 0; //@line 263 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaopen_table($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 284 "ltablib.c"
  _luaL_register($2, ((STRING_TABLE.__str9492)|0), ((__ZL9tab_funcs)|0)); //@line 284 "ltablib.c"
  ;
  return 1; //@line 285 "ltablib.c"
}


function __Z7auxsortP9lua_Stateii($L, $l, $u) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $j;
      $1=$L;
      $2=$l;
      $3=$u;
      __label__ = 3; break; //@line 194 "ltablib.c"
    case 3: 
      var $5=$2; //@line 194 "ltablib.c"
      var $6=$3; //@line 194 "ltablib.c"
      var $7=(($5)|0) < (($6)|0); //@line 194 "ltablib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 35; break; } //@line 194 "ltablib.c"
    case 4: 
      var $9=$1; //@line 197 "ltablib.c"
      var $10=$2; //@line 197 "ltablib.c"
      _lua_rawgeti($9, 1, $10); //@line 197 "ltablib.c"
      var $11=$1; //@line 198 "ltablib.c"
      var $12=$3; //@line 198 "ltablib.c"
      _lua_rawgeti($11, 1, $12); //@line 198 "ltablib.c"
      var $13=$1; //@line 199 "ltablib.c"
      var $14=__Z9sort_compP9lua_Stateii($13, -1, -2); //@line 199 "ltablib.c"
      var $15=(($14)|0)!=0; //@line 199 "ltablib.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 199 "ltablib.c"
    case 5: 
      var $17=$1; //@line 200 "ltablib.c"
      var $18=$2; //@line 200 "ltablib.c"
      var $19=$3; //@line 200 "ltablib.c"
      __Z4set2P9lua_Stateii($17, $18, $19); //@line 200 "ltablib.c"
      __label__ = 7; break; //@line 200 "ltablib.c"
    case 6: 
      var $21=$1; //@line 202 "ltablib.c"
      _lua_settop($21, -3); //@line 202 "ltablib.c"
      __label__ = 7; break; //@line 202 "ltablib.c"
    case 7: 
      var $23=$3; //@line 203 "ltablib.c"
      var $24=$2; //@line 203 "ltablib.c"
      var $25=((($23)-($24))|0); //@line 203 "ltablib.c"
      var $26=(($25)|0)==1; //@line 203 "ltablib.c"
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 203 "ltablib.c"
    case 8: 
      __label__ = 35; break; //@line 203 "ltablib.c"
    case 9: 
      var $29=$2; //@line 204 "ltablib.c"
      var $30=$3; //@line 204 "ltablib.c"
      var $31=((($29)+($30))|0); //@line 204 "ltablib.c"
      var $32=((((($31)|0))/(2))&-1); //@line 204 "ltablib.c"
      $i=$32; //@line 204 "ltablib.c"
      var $33=$1; //@line 205 "ltablib.c"
      var $34=$i; //@line 205 "ltablib.c"
      _lua_rawgeti($33, 1, $34); //@line 205 "ltablib.c"
      var $35=$1; //@line 206 "ltablib.c"
      var $36=$2; //@line 206 "ltablib.c"
      _lua_rawgeti($35, 1, $36); //@line 206 "ltablib.c"
      var $37=$1; //@line 207 "ltablib.c"
      var $38=__Z9sort_compP9lua_Stateii($37, -2, -1); //@line 207 "ltablib.c"
      var $39=(($38)|0)!=0; //@line 207 "ltablib.c"
      if ($39) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 207 "ltablib.c"
    case 10: 
      var $41=$1; //@line 208 "ltablib.c"
      var $42=$i; //@line 208 "ltablib.c"
      var $43=$2; //@line 208 "ltablib.c"
      __Z4set2P9lua_Stateii($41, $42, $43); //@line 208 "ltablib.c"
      __label__ = 15; break; //@line 208 "ltablib.c"
    case 11: 
      var $45=$1; //@line 210 "ltablib.c"
      _lua_settop($45, -2); //@line 210 "ltablib.c"
      var $46=$1; //@line 211 "ltablib.c"
      var $47=$3; //@line 211 "ltablib.c"
      _lua_rawgeti($46, 1, $47); //@line 211 "ltablib.c"
      var $48=$1; //@line 212 "ltablib.c"
      var $49=__Z9sort_compP9lua_Stateii($48, -1, -2); //@line 212 "ltablib.c"
      var $50=(($49)|0)!=0; //@line 212 "ltablib.c"
      if ($50) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 212 "ltablib.c"
    case 12: 
      var $52=$1; //@line 213 "ltablib.c"
      var $53=$i; //@line 213 "ltablib.c"
      var $54=$3; //@line 213 "ltablib.c"
      __Z4set2P9lua_Stateii($52, $53, $54); //@line 213 "ltablib.c"
      __label__ = 14; break; //@line 213 "ltablib.c"
    case 13: 
      var $56=$1; //@line 215 "ltablib.c"
      _lua_settop($56, -3); //@line 215 "ltablib.c"
      __label__ = 14; break; //@line 215 "ltablib.c"
    case 14: 
      __label__ = 15; break; //@line 216 "ltablib.c"
    case 15: 
      var $59=$3; //@line 217 "ltablib.c"
      var $60=$2; //@line 217 "ltablib.c"
      var $61=((($59)-($60))|0); //@line 217 "ltablib.c"
      var $62=(($61)|0)==2; //@line 217 "ltablib.c"
      if ($62) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 217 "ltablib.c"
    case 16: 
      __label__ = 35; break; //@line 217 "ltablib.c"
    case 17: 
      var $65=$1; //@line 218 "ltablib.c"
      var $66=$i; //@line 218 "ltablib.c"
      _lua_rawgeti($65, 1, $66); //@line 218 "ltablib.c"
      var $67=$1; //@line 219 "ltablib.c"
      _lua_pushvalue($67, -1); //@line 219 "ltablib.c"
      var $68=$1; //@line 220 "ltablib.c"
      var $69=$3; //@line 220 "ltablib.c"
      var $70=((($69)-(1))|0); //@line 220 "ltablib.c"
      _lua_rawgeti($68, 1, $70); //@line 220 "ltablib.c"
      var $71=$1; //@line 221 "ltablib.c"
      var $72=$i; //@line 221 "ltablib.c"
      var $73=$3; //@line 221 "ltablib.c"
      var $74=((($73)-(1))|0); //@line 221 "ltablib.c"
      __Z4set2P9lua_Stateii($71, $72, $74); //@line 221 "ltablib.c"
      var $75=$2; //@line 223 "ltablib.c"
      $i=$75; //@line 223 "ltablib.c"
      var $76=$3; //@line 223 "ltablib.c"
      var $77=((($76)-(1))|0); //@line 223 "ltablib.c"
      $j=$77; //@line 223 "ltablib.c"
      __label__ = 18; break; //@line 224 "ltablib.c"
    case 18: 
      __label__ = 19; break; //@line 226 "ltablib.c"
    case 19: 
      var $80=$1; //@line 226 "ltablib.c"
      var $81=$i; //@line 226 "ltablib.c"
      var $82=((($81)+(1))|0); //@line 226 "ltablib.c"
      $i=$82; //@line 226 "ltablib.c"
      _lua_rawgeti($80, 1, $82); //@line 226 "ltablib.c"
      var $83=$1; //@line 226 "ltablib.c"
      var $84=__Z9sort_compP9lua_Stateii($83, -1, -2); //@line 226 "ltablib.c"
      var $85=(($84)|0)!=0; //@line 226 "ltablib.c"
      if ($85) { __label__ = 20; break; } else { __label__ = 23; break; } //@line 226 "ltablib.c"
    case 20: 
      var $87=$i; //@line 227 "ltablib.c"
      var $88=$3; //@line 227 "ltablib.c"
      var $89=(($87)|0) > (($88)|0); //@line 227 "ltablib.c"
      if ($89) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 227 "ltablib.c"
    case 21: 
      var $91=$1; //@line 227 "ltablib.c"
      var $92=_luaL_error($91, ((STRING_TABLE.__str11494)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 227 "ltablib.c"
      __label__ = 22; break; //@line 227 "ltablib.c"
    case 22: 
      var $94=$1; //@line 228 "ltablib.c"
      _lua_settop($94, -2); //@line 228 "ltablib.c"
      __label__ = 19; break; //@line 229 "ltablib.c"
    case 23: 
      __label__ = 24; break; //@line 231 "ltablib.c"
    case 24: 
      var $97=$1; //@line 231 "ltablib.c"
      var $98=$j; //@line 231 "ltablib.c"
      var $99=((($98)-(1))|0); //@line 231 "ltablib.c"
      $j=$99; //@line 231 "ltablib.c"
      _lua_rawgeti($97, 1, $99); //@line 231 "ltablib.c"
      var $100=$1; //@line 231 "ltablib.c"
      var $101=__Z9sort_compP9lua_Stateii($100, -3, -1); //@line 231 "ltablib.c"
      var $102=(($101)|0)!=0; //@line 231 "ltablib.c"
      if ($102) { __label__ = 25; break; } else { __label__ = 28; break; } //@line 231 "ltablib.c"
    case 25: 
      var $104=$j; //@line 232 "ltablib.c"
      var $105=$2; //@line 232 "ltablib.c"
      var $106=(($104)|0) < (($105)|0); //@line 232 "ltablib.c"
      if ($106) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 232 "ltablib.c"
    case 26: 
      var $108=$1; //@line 232 "ltablib.c"
      var $109=_luaL_error($108, ((STRING_TABLE.__str11494)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 232 "ltablib.c"
      __label__ = 27; break; //@line 232 "ltablib.c"
    case 27: 
      var $111=$1; //@line 233 "ltablib.c"
      _lua_settop($111, -2); //@line 233 "ltablib.c"
      __label__ = 24; break; //@line 234 "ltablib.c"
    case 28: 
      var $113=$j; //@line 235 "ltablib.c"
      var $114=$i; //@line 235 "ltablib.c"
      var $115=(($113)|0) < (($114)|0); //@line 235 "ltablib.c"
      if ($115) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 235 "ltablib.c"
    case 29: 
      var $117=$1; //@line 236 "ltablib.c"
      _lua_settop($117, -4); //@line 236 "ltablib.c"
      __label__ = 31; break; //@line 237 "ltablib.c"
    case 30: 
      var $119=$1; //@line 239 "ltablib.c"
      var $120=$i; //@line 239 "ltablib.c"
      var $121=$j; //@line 239 "ltablib.c"
      __Z4set2P9lua_Stateii($119, $120, $121); //@line 239 "ltablib.c"
      __label__ = 18; break; //@line 240 "ltablib.c"
    case 31: 
      var $123=$1; //@line 241 "ltablib.c"
      var $124=$3; //@line 241 "ltablib.c"
      var $125=((($124)-(1))|0); //@line 241 "ltablib.c"
      _lua_rawgeti($123, 1, $125); //@line 241 "ltablib.c"
      var $126=$1; //@line 242 "ltablib.c"
      var $127=$i; //@line 242 "ltablib.c"
      _lua_rawgeti($126, 1, $127); //@line 242 "ltablib.c"
      var $128=$1; //@line 243 "ltablib.c"
      var $129=$3; //@line 243 "ltablib.c"
      var $130=((($129)-(1))|0); //@line 243 "ltablib.c"
      var $131=$i; //@line 243 "ltablib.c"
      __Z4set2P9lua_Stateii($128, $130, $131); //@line 243 "ltablib.c"
      var $132=$i; //@line 246 "ltablib.c"
      var $133=$2; //@line 246 "ltablib.c"
      var $134=((($132)-($133))|0); //@line 246 "ltablib.c"
      var $135=$3; //@line 246 "ltablib.c"
      var $136=$i; //@line 246 "ltablib.c"
      var $137=((($135)-($136))|0); //@line 246 "ltablib.c"
      var $138=(($134)|0) < (($137)|0); //@line 246 "ltablib.c"
      if ($138) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 246 "ltablib.c"
    case 32: 
      var $140=$2; //@line 247 "ltablib.c"
      $j=$140; //@line 247 "ltablib.c"
      var $141=$i; //@line 247 "ltablib.c"
      var $142=((($141)-(1))|0); //@line 247 "ltablib.c"
      $i=$142; //@line 247 "ltablib.c"
      var $143=$i; //@line 247 "ltablib.c"
      var $144=((($143)+(2))|0); //@line 247 "ltablib.c"
      $2=$144; //@line 247 "ltablib.c"
      __label__ = 34; break; //@line 248 "ltablib.c"
    case 33: 
      var $146=$i; //@line 250 "ltablib.c"
      var $147=((($146)+(1))|0); //@line 250 "ltablib.c"
      $j=$147; //@line 250 "ltablib.c"
      var $148=$3; //@line 250 "ltablib.c"
      $i=$148; //@line 250 "ltablib.c"
      var $149=$j; //@line 250 "ltablib.c"
      var $150=((($149)-(2))|0); //@line 250 "ltablib.c"
      $3=$150; //@line 250 "ltablib.c"
      __label__ = 34; break; //@line 251 "ltablib.c"
    case 34: 
      var $152=$1; //@line 252 "ltablib.c"
      var $153=$j; //@line 252 "ltablib.c"
      var $154=$i; //@line 252 "ltablib.c"
      __Z7auxsortP9lua_Stateii($152, $153, $154); //@line 252 "ltablib.c"
      __label__ = 3; break; //@line 253 "ltablib.c"
    case 35: 
      STACKTOP = __stackBase__;
      return; //@line 254 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7auxsortP9lua_Stateii["X"]=1;

function __Z9sort_compP9lua_Stateii($L, $a, $b) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      $2=$L;
      $3=$a;
      $4=$b;
      var $5=$2; //@line 179 "ltablib.c"
      var $6=_lua_type($5, 2); //@line 179 "ltablib.c"
      var $7=(($6)|0)==0; //@line 179 "ltablib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 179 "ltablib.c"
    case 3: 
      var $9=$2; //@line 181 "ltablib.c"
      _lua_pushvalue($9, 2); //@line 181 "ltablib.c"
      var $10=$2; //@line 182 "ltablib.c"
      var $11=$3; //@line 182 "ltablib.c"
      var $12=((($11)-(1))|0); //@line 182 "ltablib.c"
      _lua_pushvalue($10, $12); //@line 182 "ltablib.c"
      var $13=$2; //@line 183 "ltablib.c"
      var $14=$4; //@line 183 "ltablib.c"
      var $15=((($14)-(2))|0); //@line 183 "ltablib.c"
      _lua_pushvalue($13, $15); //@line 183 "ltablib.c"
      var $16=$2; //@line 184 "ltablib.c"
      _lua_call($16, 2, 1); //@line 184 "ltablib.c"
      var $17=$2; //@line 185 "ltablib.c"
      var $18=_lua_toboolean($17, -1); //@line 185 "ltablib.c"
      $res=$18; //@line 185 "ltablib.c"
      var $19=$2; //@line 186 "ltablib.c"
      _lua_settop($19, -2); //@line 186 "ltablib.c"
      var $20=$res; //@line 187 "ltablib.c"
      $1=$20; //@line 187 "ltablib.c"
      __label__ = 5; break; //@line 187 "ltablib.c"
    case 4: 
      var $22=$2; //@line 190 "ltablib.c"
      var $23=$3; //@line 190 "ltablib.c"
      var $24=$4; //@line 190 "ltablib.c"
      var $25=_lua_lessthan($22, $23, $24); //@line 190 "ltablib.c"
      $1=$25; //@line 190 "ltablib.c"
      __label__ = 5; break; //@line 190 "ltablib.c"
    case 5: 
      var $27=$1; //@line 191 "ltablib.c"
      ;
      return $27; //@line 191 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z4set2P9lua_Stateii($L, $i, $j) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$i;
  $3=$j;
  var $4=$1; //@line 174 "ltablib.c"
  var $5=$2; //@line 174 "ltablib.c"
  _lua_rawseti($4, 1, $5); //@line 174 "ltablib.c"
  var $6=$1; //@line 175 "ltablib.c"
  var $7=$3; //@line 175 "ltablib.c"
  _lua_rawseti($6, 1, $7); //@line 175 "ltablib.c"
  ;
  return; //@line 176 "ltablib.c"
}


function __Z8addfieldP9lua_StateP11luaL_Bufferi($L, $b, $i) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$L;
      $2=$b;
      $3=$i;
      var $4=$1; //@line 136 "ltablib.c"
      var $5=$3; //@line 136 "ltablib.c"
      _lua_rawgeti($4, 1, $5); //@line 136 "ltablib.c"
      var $6=$1; //@line 137 "ltablib.c"
      var $7=_lua_isstring($6, -1); //@line 137 "ltablib.c"
      var $8=(($7)|0)!=0; //@line 137 "ltablib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 137 "ltablib.c"
    case 3: 
      var $10=$1; //@line 138 "ltablib.c"
      var $11=$1; //@line 139 "ltablib.c"
      var $12=$1; //@line 139 "ltablib.c"
      var $13=_lua_type($12, -1); //@line 139 "ltablib.c"
      var $14=_lua_typename($11, $13); //@line 139 "ltablib.c"
      var $15=$3; //@line 139 "ltablib.c"
      var $16=_luaL_error($10, ((STRING_TABLE.__str14497)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$15,tempInt)); //@line 139 "ltablib.c"
      __label__ = 4; break; //@line 139 "ltablib.c"
    case 4: 
      var $18=$2; //@line 140 "ltablib.c"
      _luaL_addvalue($18); //@line 140 "ltablib.c"
      STACKTOP = __stackBase__;
      return; //@line 141 "ltablib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8str_byteP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $l=__stackBase__;
      var $s;
      var $posi;
      var $pose;
      var $n;
      var $i;
      $2=$L;
      var $3=$2; //@line 108 "lstrlib.c"
      var $4=_luaL_checklstring($3, 1, $l); //@line 108 "lstrlib.c"
      $s=$4; //@line 108 "lstrlib.c"
      var $5=$2; //@line 109 "lstrlib.c"
      var $6=_luaL_optinteger($5, 2, 1); //@line 109 "lstrlib.c"
      var $7=HEAP32[(($l)>>2)]; //@line 109 "lstrlib.c"
      var $8=__Z8posrelatij($6, $7); //@line 109 "lstrlib.c"
      $posi=$8; //@line 109 "lstrlib.c"
      var $9=$2; //@line 110 "lstrlib.c"
      var $10=$posi; //@line 110 "lstrlib.c"
      var $11=_luaL_optinteger($9, 3, $10); //@line 110 "lstrlib.c"
      var $12=HEAP32[(($l)>>2)]; //@line 110 "lstrlib.c"
      var $13=__Z8posrelatij($11, $12); //@line 110 "lstrlib.c"
      $pose=$13; //@line 110 "lstrlib.c"
      var $14=$posi; //@line 112 "lstrlib.c"
      var $15=(($14)|0) <= 0; //@line 112 "lstrlib.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 112 "lstrlib.c"
    case 3: 
      $posi=1; //@line 112 "lstrlib.c"
      __label__ = 4; break; //@line 112 "lstrlib.c"
    case 4: 
      var $18=$pose; //@line 113 "lstrlib.c"
      var $19=HEAPU32[(($l)>>2)]; //@line 113 "lstrlib.c"
      var $20=(($18)>>>0) > (($19)>>>0); //@line 113 "lstrlib.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 113 "lstrlib.c"
    case 5: 
      var $22=HEAP32[(($l)>>2)]; //@line 113 "lstrlib.c"
      $pose=$22; //@line 113 "lstrlib.c"
      __label__ = 6; break; //@line 113 "lstrlib.c"
    case 6: 
      var $24=$posi; //@line 114 "lstrlib.c"
      var $25=$pose; //@line 114 "lstrlib.c"
      var $26=(($24)|0) > (($25)|0); //@line 114 "lstrlib.c"
      if ($26) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 114 "lstrlib.c"
    case 7: 
      $1=0; //@line 114 "lstrlib.c"
      __label__ = 15; break; //@line 114 "lstrlib.c"
    case 8: 
      var $29=$pose; //@line 115 "lstrlib.c"
      var $30=$posi; //@line 115 "lstrlib.c"
      var $31=((($29)-($30))|0); //@line 115 "lstrlib.c"
      var $32=((($31)+(1))|0); //@line 115 "lstrlib.c"
      $n=$32; //@line 115 "lstrlib.c"
      var $33=$posi; //@line 116 "lstrlib.c"
      var $34=$n; //@line 116 "lstrlib.c"
      var $35=((($33)+($34))|0); //@line 116 "lstrlib.c"
      var $36=$pose; //@line 116 "lstrlib.c"
      var $37=(($35)|0) <= (($36)|0); //@line 116 "lstrlib.c"
      if ($37) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 116 "lstrlib.c"
    case 9: 
      var $39=$2; //@line 117 "lstrlib.c"
      var $40=_luaL_error($39, ((STRING_TABLE.__str40538)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 117 "lstrlib.c"
      __label__ = 10; break; //@line 117 "lstrlib.c"
    case 10: 
      var $42=$2; //@line 118 "lstrlib.c"
      var $43=$n; //@line 118 "lstrlib.c"
      _luaL_checkstack($42, $43, ((STRING_TABLE.__str40538)|0)); //@line 118 "lstrlib.c"
      $i=0; //@line 119 "lstrlib.c"
      __label__ = 11; break; //@line 119 "lstrlib.c"
    case 11: 
      var $45=$i; //@line 119 "lstrlib.c"
      var $46=$n; //@line 119 "lstrlib.c"
      var $47=(($45)|0) < (($46)|0); //@line 119 "lstrlib.c"
      if ($47) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 119 "lstrlib.c"
    case 12: 
      var $49=$2; //@line 120 "lstrlib.c"
      var $50=$posi; //@line 120 "lstrlib.c"
      var $51=$i; //@line 120 "lstrlib.c"
      var $52=((($50)+($51))|0); //@line 120 "lstrlib.c"
      var $53=((($52)-(1))|0); //@line 120 "lstrlib.c"
      var $54=$s; //@line 120 "lstrlib.c"
      var $55=(($54+$53)|0); //@line 120 "lstrlib.c"
      var $56=HEAPU8[($55)]; //@line 120 "lstrlib.c"
      var $57=(($56)&255); //@line 120 "lstrlib.c"
      _lua_pushinteger($49, $57); //@line 120 "lstrlib.c"
      __label__ = 13; break; //@line 120 "lstrlib.c"
    case 13: 
      var $59=$i; //@line 119 "lstrlib.c"
      var $60=((($59)+(1))|0); //@line 119 "lstrlib.c"
      $i=$60; //@line 119 "lstrlib.c"
      __label__ = 11; break; //@line 119 "lstrlib.c"
    case 14: 
      var $62=$n; //@line 121 "lstrlib.c"
      $1=$62; //@line 121 "lstrlib.c"
      __label__ = 15; break; //@line 121 "lstrlib.c"
    case 15: 
      var $64=$1; //@line 122 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $64; //@line 122 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8str_byteP9lua_State["X"]=1;

function __Z8str_charP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8204; _memset(__stackBase__, 0, 8204);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $n;
      var $i;
      var $b=__stackBase__;
      var $c;
      $1=$L;
      var $2=$1; //@line 126 "lstrlib.c"
      var $3=_lua_gettop($2); //@line 126 "lstrlib.c"
      $n=$3; //@line 126 "lstrlib.c"
      var $4=$1; //@line 129 "lstrlib.c"
      _luaL_buffinit($4, $b); //@line 129 "lstrlib.c"
      $i=1; //@line 130 "lstrlib.c"
      __label__ = 3; break; //@line 130 "lstrlib.c"
    case 3: 
      var $6=$i; //@line 130 "lstrlib.c"
      var $7=$n; //@line 130 "lstrlib.c"
      var $8=(($6)|0) <= (($7)|0); //@line 130 "lstrlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 130 "lstrlib.c"
    case 4: 
      var $10=$1; //@line 131 "lstrlib.c"
      var $11=$i; //@line 131 "lstrlib.c"
      var $12=_luaL_checkinteger($10, $11); //@line 131 "lstrlib.c"
      $c=$12; //@line 131 "lstrlib.c"
      var $13=$c; //@line 132 "lstrlib.c"
      var $14=(($13) & 255); //@line 132 "lstrlib.c"
      var $15=(($14)&255); //@line 132 "lstrlib.c"
      var $16=$c; //@line 132 "lstrlib.c"
      var $17=(($15)|0)==(($16)|0); //@line 132 "lstrlib.c"
      if ($17) { var $24 = 1;__label__ = 6; break; } else { __label__ = 5; break; } //@line 132 "lstrlib.c"
    case 5: 
      var $19=$1; //@line 132 "lstrlib.c"
      var $20=$i; //@line 132 "lstrlib.c"
      var $21=_luaL_argerror($19, $20, ((STRING_TABLE.__str39537)|0)); //@line 132 "lstrlib.c"
      var $22=(($21)|0)!=0; //@line 132 "lstrlib.c"
      var $24 = $22;__label__ = 6; break; //@line 132 "lstrlib.c"
    case 6: 
      var $24;
      var $25=(($b)|0); //@line 133 "lstrlib.c"
      var $26=HEAPU32[(($25)>>2)]; //@line 133 "lstrlib.c"
      var $27=(($b+12)|0); //@line 133 "lstrlib.c"
      var $28=(($27)|0); //@line 133 "lstrlib.c"
      var $29=(($28+8192)|0); //@line 133 "lstrlib.c"
      var $30=(($26)>>>0) < (($29)>>>0); //@line 133 "lstrlib.c"
      if ($30) { var $35 = 1;__label__ = 8; break; } else { __label__ = 7; break; } //@line 133 "lstrlib.c"
    case 7: 
      var $32=_luaL_prepbuffer($b); //@line 133 "lstrlib.c"
      var $33=(($32)|0)!=0; //@line 133 "lstrlib.c"
      var $35 = $33;__label__ = 8; break; //@line 133 "lstrlib.c"
    case 8: 
      var $35;
      var $36=$c; //@line 133 "lstrlib.c"
      var $37=(($36) & 255); //@line 133 "lstrlib.c"
      var $38=(($b)|0); //@line 133 "lstrlib.c"
      var $39=HEAP32[(($38)>>2)]; //@line 133 "lstrlib.c"
      var $40=(($39+1)|0); //@line 133 "lstrlib.c"
      HEAP32[(($38)>>2)]=$40; //@line 133 "lstrlib.c"
      HEAP8[($39)]=$37; //@line 133 "lstrlib.c"
      __label__ = 9; break; //@line 134 "lstrlib.c"
    case 9: 
      var $42=$i; //@line 130 "lstrlib.c"
      var $43=((($42)+(1))|0); //@line 130 "lstrlib.c"
      $i=$43; //@line 130 "lstrlib.c"
      __label__ = 3; break; //@line 130 "lstrlib.c"
    case 10: 
      _luaL_pushresult($b); //@line 135 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 136 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8str_charP9lua_State["X"]=1;

function __Z8str_dumpP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8204; _memset(__stackBase__, 0, 8204);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $b=__stackBase__;
      $1=$L;
      var $2=$1; //@line 149 "lstrlib.c"
      _luaL_checktype($2, 1, 6); //@line 149 "lstrlib.c"
      var $3=$1; //@line 150 "lstrlib.c"
      _lua_settop($3, 1); //@line 150 "lstrlib.c"
      var $4=$1; //@line 151 "lstrlib.c"
      _luaL_buffinit($4, $b); //@line 151 "lstrlib.c"
      var $5=$1; //@line 152 "lstrlib.c"
      var $6=$b; //@line 152 "lstrlib.c"
      var $7=_lua_dump($5, 52, $6); //@line 152 "lstrlib.c"
      var $8=(($7)|0)!=0; //@line 152 "lstrlib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 152 "lstrlib.c"
    case 3: 
      var $10=$1; //@line 153 "lstrlib.c"
      var $11=_luaL_error($10, ((STRING_TABLE.__str38536)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 153 "lstrlib.c"
      __label__ = 4; break; //@line 153 "lstrlib.c"
    case 4: 
      _luaL_pushresult($b); //@line 154 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 155 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8str_findP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 539 "lstrlib.c"
  var $3=__Z12str_find_auxP9lua_Statei($2, 1); //@line 539 "lstrlib.c"
  ;
  return $3; //@line 539 "lstrlib.c"
}


function __Z8posrelatij($pos, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      $1=$pos;
      $2=$len;
      var $3=$1; //@line 38 "lstrlib.c"
      var $4=(($3)|0) < 0; //@line 38 "lstrlib.c"
      if ($4) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 38 "lstrlib.c"
    case 3: 
      var $6=$2; //@line 38 "lstrlib.c"
      var $7=((($6)+(1))|0); //@line 38 "lstrlib.c"
      var $8=$1; //@line 38 "lstrlib.c"
      var $9=((($8)+($7))|0); //@line 38 "lstrlib.c"
      $1=$9; //@line 38 "lstrlib.c"
      __label__ = 4; break; //@line 38 "lstrlib.c"
    case 4: 
      var $11=$1; //@line 39 "lstrlib.c"
      var $12=(($11)|0) >= 0; //@line 39 "lstrlib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 39 "lstrlib.c"
    case 5: 
      var $14=$1; //@line 39 "lstrlib.c"
      var $17 = $14;__label__ = 7; break; //@line 39 "lstrlib.c"
    case 6: 
      var $17 = 0;__label__ = 7; break; //@line 39 "lstrlib.c"
    case 7: 
      var $17; //@line 39 "lstrlib.c"
      ;
      return $17; //@line 39 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10str_formatP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8744; _memset(__stackBase__, 0, 8744);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $top;
      var $arg;
      var $sfl=__stackBase__;
      var $strfrmt;
      var $strfrmt_end;
      var $b=(__stackBase__)+(4);
      var $form=(__stackBase__)+(8208);
      var $buff=(__stackBase__)+(8228);
      var $l=(__stackBase__)+(8740);
      var $s;
      $2=$L;
      var $3=$2; //@line 757 "lstrlib.c"
      var $4=_lua_gettop($3); //@line 757 "lstrlib.c"
      $top=$4; //@line 757 "lstrlib.c"
      $arg=1; //@line 758 "lstrlib.c"
      var $5=$2; //@line 760 "lstrlib.c"
      var $6=$arg; //@line 760 "lstrlib.c"
      var $7=_luaL_checklstring($5, $6, $sfl); //@line 760 "lstrlib.c"
      $strfrmt=$7; //@line 760 "lstrlib.c"
      var $8=$strfrmt; //@line 761 "lstrlib.c"
      var $9=HEAP32[(($sfl)>>2)]; //@line 761 "lstrlib.c"
      var $10=(($8+$9)|0); //@line 761 "lstrlib.c"
      $strfrmt_end=$10; //@line 761 "lstrlib.c"
      var $11=$2; //@line 763 "lstrlib.c"
      _luaL_buffinit($11, $b); //@line 763 "lstrlib.c"
      __label__ = 3; break; //@line 764 "lstrlib.c"
    case 3: 
      var $13=$strfrmt; //@line 764 "lstrlib.c"
      var $14=$strfrmt_end; //@line 764 "lstrlib.c"
      var $15=(($13)>>>0) < (($14)>>>0); //@line 764 "lstrlib.c"
      if ($15) { __label__ = 4; break; } else { __label__ = 28; break; } //@line 764 "lstrlib.c"
    case 4: 
      var $17=$strfrmt; //@line 765 "lstrlib.c"
      var $18=HEAP8[($17)]; //@line 765 "lstrlib.c"
      var $19=(($18 << 24) >> 24); //@line 765 "lstrlib.c"
      var $20=(($19)|0)!=37; //@line 765 "lstrlib.c"
      if ($20) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 765 "lstrlib.c"
    case 5: 
      var $22=(($b)|0); //@line 766 "lstrlib.c"
      var $23=HEAPU32[(($22)>>2)]; //@line 766 "lstrlib.c"
      var $24=(($b+12)|0); //@line 766 "lstrlib.c"
      var $25=(($24)|0); //@line 766 "lstrlib.c"
      var $26=(($25+8192)|0); //@line 766 "lstrlib.c"
      var $27=(($23)>>>0) < (($26)>>>0); //@line 766 "lstrlib.c"
      if ($27) { var $32 = 1;__label__ = 7; break; } else { __label__ = 6; break; } //@line 766 "lstrlib.c"
    case 6: 
      var $29=_luaL_prepbuffer($b); //@line 766 "lstrlib.c"
      var $30=(($29)|0)!=0; //@line 766 "lstrlib.c"
      var $32 = $30;__label__ = 7; break; //@line 766 "lstrlib.c"
    case 7: 
      var $32;
      var $33=$strfrmt; //@line 766 "lstrlib.c"
      var $34=(($33+1)|0); //@line 766 "lstrlib.c"
      $strfrmt=$34; //@line 766 "lstrlib.c"
      var $35=HEAP8[($33)]; //@line 766 "lstrlib.c"
      var $36=(($b)|0); //@line 766 "lstrlib.c"
      var $37=HEAP32[(($36)>>2)]; //@line 766 "lstrlib.c"
      var $38=(($37+1)|0); //@line 766 "lstrlib.c"
      HEAP32[(($36)>>2)]=$38; //@line 766 "lstrlib.c"
      HEAP8[($37)]=$35; //@line 766 "lstrlib.c"
      __label__ = 27; break; //@line 766 "lstrlib.c"
    case 8: 
      var $40=$strfrmt; //@line 767 "lstrlib.c"
      var $41=(($40+1)|0); //@line 767 "lstrlib.c"
      $strfrmt=$41; //@line 767 "lstrlib.c"
      var $42=HEAP8[($41)]; //@line 767 "lstrlib.c"
      var $43=(($42 << 24) >> 24); //@line 767 "lstrlib.c"
      var $44=(($43)|0)==37; //@line 767 "lstrlib.c"
      if ($44) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 767 "lstrlib.c"
    case 9: 
      var $46=(($b)|0); //@line 768 "lstrlib.c"
      var $47=HEAPU32[(($46)>>2)]; //@line 768 "lstrlib.c"
      var $48=(($b+12)|0); //@line 768 "lstrlib.c"
      var $49=(($48)|0); //@line 768 "lstrlib.c"
      var $50=(($49+8192)|0); //@line 768 "lstrlib.c"
      var $51=(($47)>>>0) < (($50)>>>0); //@line 768 "lstrlib.c"
      if ($51) { var $56 = 1;__label__ = 11; break; } else { __label__ = 10; break; } //@line 768 "lstrlib.c"
    case 10: 
      var $53=_luaL_prepbuffer($b); //@line 768 "lstrlib.c"
      var $54=(($53)|0)!=0; //@line 768 "lstrlib.c"
      var $56 = $54;__label__ = 11; break; //@line 768 "lstrlib.c"
    case 11: 
      var $56;
      var $57=$strfrmt; //@line 768 "lstrlib.c"
      var $58=(($57+1)|0); //@line 768 "lstrlib.c"
      $strfrmt=$58; //@line 768 "lstrlib.c"
      var $59=HEAP8[($57)]; //@line 768 "lstrlib.c"
      var $60=(($b)|0); //@line 768 "lstrlib.c"
      var $61=HEAP32[(($60)>>2)]; //@line 768 "lstrlib.c"
      var $62=(($61+1)|0); //@line 768 "lstrlib.c"
      HEAP32[(($60)>>2)]=$62; //@line 768 "lstrlib.c"
      HEAP8[($61)]=$59; //@line 768 "lstrlib.c"
      __label__ = 26; break; //@line 768 "lstrlib.c"
    case 12: 
      var $64=$arg; //@line 772 "lstrlib.c"
      var $65=((($64)+(1))|0); //@line 772 "lstrlib.c"
      $arg=$65; //@line 772 "lstrlib.c"
      var $66=$top; //@line 772 "lstrlib.c"
      var $67=(($65)|0) > (($66)|0); //@line 772 "lstrlib.c"
      if ($67) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 772 "lstrlib.c"
    case 13: 
      var $69=$2; //@line 773 "lstrlib.c"
      var $70=$arg; //@line 773 "lstrlib.c"
      var $71=_luaL_argerror($69, $70, ((STRING_TABLE.__str30528)|0)); //@line 773 "lstrlib.c"
      __label__ = 14; break; //@line 773 "lstrlib.c"
    case 14: 
      var $73=$2; //@line 774 "lstrlib.c"
      var $74=$strfrmt; //@line 774 "lstrlib.c"
      var $75=(($form)|0); //@line 774 "lstrlib.c"
      var $76=__Z10scanformatP9lua_StatePKcPc($73, $74, $75); //@line 774 "lstrlib.c"
      $strfrmt=$76; //@line 774 "lstrlib.c"
      var $77=$strfrmt; //@line 775 "lstrlib.c"
      var $78=(($77+1)|0); //@line 775 "lstrlib.c"
      $strfrmt=$78; //@line 775 "lstrlib.c"
      var $79=HEAP8[($77)]; //@line 775 "lstrlib.c"
      var $80=(($79 << 24) >> 24); //@line 775 "lstrlib.c"
      if ((($80)|0) == 99) {
        __label__ = 15; break;
      }
      else if ((($80)|0) == 100 || (($80)|0) == 105) {
        __label__ = 16; break;
      }
      else if ((($80)|0) == 111 || (($80)|0) == 117 || (($80)|0) == 120 || (($80)|0) == 88) {
        __label__ = 17; break;
      }
      else if ((($80)|0) == 101 || (($80)|0) == 69 || (($80)|0) == 102 || (($80)|0) == 103 || (($80)|0) == 71) {
        __label__ = 18; break;
      }
      else if ((($80)|0) == 113) {
        __label__ = 19; break;
      }
      else if ((($80)|0) == 115) {
        __label__ = 20; break;
      }
      else {
      __label__ = 24; break;
      }
      
    case 15: 
      var $82=(($buff)|0); //@line 777 "lstrlib.c"
      var $83=(($form)|0); //@line 777 "lstrlib.c"
      var $84=$2; //@line 777 "lstrlib.c"
      var $85=$arg; //@line 777 "lstrlib.c"
      var $86=_luaL_checknumber($84, $85); //@line 777 "lstrlib.c"
      var $87=(($86)&-1); //@line 777 "lstrlib.c"
      var $88=_sprintf($82, $83, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$87,tempInt)); //@line 777 "lstrlib.c"
      __label__ = 25; break; //@line 778 "lstrlib.c"
    case 16: 
      var $90=(($form)|0); //@line 781 "lstrlib.c"
      __Z9addintlenPc($90); //@line 781 "lstrlib.c"
      var $91=(($buff)|0); //@line 782 "lstrlib.c"
      var $92=(($form)|0); //@line 782 "lstrlib.c"
      var $93=$2; //@line 782 "lstrlib.c"
      var $94=$arg; //@line 782 "lstrlib.c"
      var $95=_luaL_checknumber($93, $94); //@line 782 "lstrlib.c"
      var $96=(($95)&-1); //@line 782 "lstrlib.c"
      var $97=_sprintf($91, $92, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$96,tempInt)); //@line 782 "lstrlib.c"
      __label__ = 25; break; //@line 783 "lstrlib.c"
    case 17: 
      var $99=(($form)|0); //@line 786 "lstrlib.c"
      __Z9addintlenPc($99); //@line 786 "lstrlib.c"
      var $100=(($buff)|0); //@line 787 "lstrlib.c"
      var $101=(($form)|0); //@line 787 "lstrlib.c"
      var $102=$2; //@line 787 "lstrlib.c"
      var $103=$arg; //@line 787 "lstrlib.c"
      var $104=_luaL_checknumber($102, $103); //@line 787 "lstrlib.c"
      var $105=($104 >= 0 ? Math.floor($104) : Math.ceil($104)); //@line 787 "lstrlib.c"
      var $106=_sprintf($100, $101, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$105,tempInt)); //@line 787 "lstrlib.c"
      __label__ = 25; break; //@line 788 "lstrlib.c"
    case 18: 
      var $108=(($buff)|0); //@line 792 "lstrlib.c"
      var $109=(($form)|0); //@line 792 "lstrlib.c"
      var $110=$2; //@line 792 "lstrlib.c"
      var $111=$arg; //@line 792 "lstrlib.c"
      var $112=_luaL_checknumber($110, $111); //@line 792 "lstrlib.c"
      var $113=_sprintf($108, $109, (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,(tempDoubleF64[0]=$112,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt)); //@line 792 "lstrlib.c"
      __label__ = 25; break; //@line 793 "lstrlib.c"
    case 19: 
      var $115=$2; //@line 796 "lstrlib.c"
      var $116=$arg; //@line 796 "lstrlib.c"
      __Z9addquotedP9lua_StateP11luaL_Bufferi($115, $b, $116); //@line 796 "lstrlib.c"
      __label__ = 3; break; //@line 797 "lstrlib.c"
    case 20: 
      var $118=$2; //@line 801 "lstrlib.c"
      var $119=$arg; //@line 801 "lstrlib.c"
      var $120=_luaL_checklstring($118, $119, $l); //@line 801 "lstrlib.c"
      $s=$120; //@line 801 "lstrlib.c"
      var $121=(($form)|0); //@line 802 "lstrlib.c"
      var $122=_strchr($121, 46); //@line 802 "lstrlib.c"
      var $123=(($122)|0)!=0; //@line 802 "lstrlib.c"
      if ($123) { __label__ = 23; break; } else { __label__ = 21; break; } //@line 802 "lstrlib.c"
    case 21: 
      var $125=HEAPU32[(($l)>>2)]; //@line 802 "lstrlib.c"
      var $126=(($125)>>>0) >= 100; //@line 802 "lstrlib.c"
      if ($126) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 802 "lstrlib.c"
    case 22: 
      var $128=$2; //@line 805 "lstrlib.c"
      var $129=$arg; //@line 805 "lstrlib.c"
      _lua_pushvalue($128, $129); //@line 805 "lstrlib.c"
      _luaL_addvalue($b); //@line 806 "lstrlib.c"
      __label__ = 3; break; //@line 807 "lstrlib.c"
    case 23: 
      var $131=(($buff)|0); //@line 810 "lstrlib.c"
      var $132=(($form)|0); //@line 810 "lstrlib.c"
      var $133=$s; //@line 810 "lstrlib.c"
      var $134=_sprintf($131, $132, (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$133,tempInt)); //@line 810 "lstrlib.c"
      __label__ = 25; break; //@line 811 "lstrlib.c"
    case 24: 
      var $136=$2; //@line 815 "lstrlib.c"
      var $137=$strfrmt; //@line 815 "lstrlib.c"
      var $138=((($137)-(1))|0); //@line 815 "lstrlib.c"
      var $139=HEAP8[($138)]; //@line 815 "lstrlib.c"
      var $140=(($139 << 24) >> 24); //@line 815 "lstrlib.c"
      var $141=_luaL_error($136, ((STRING_TABLE.__str31529)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$140,tempInt)); //@line 815 "lstrlib.c"
      $1=$141; //@line 815 "lstrlib.c"
      __label__ = 29; break; //@line 815 "lstrlib.c"
    case 25: 
      var $143=(($buff)|0); //@line 819 "lstrlib.c"
      var $144=(($buff)|0); //@line 819 "lstrlib.c"
      var $145=_strlen($144); //@line 819 "lstrlib.c"
      _luaL_addlstring($b, $143, $145); //@line 819 "lstrlib.c"
      __label__ = 26; break; //@line 820 "lstrlib.c"
    case 26: 
      __label__ = 27; break; //@line 820 "lstrlib.c"
    case 27: 
      __label__ = 3; break; //@line 821 "lstrlib.c"
    case 28: 
      _luaL_pushresult($b); //@line 822 "lstrlib.c"
      $1=1; //@line 823 "lstrlib.c"
      __label__ = 29; break; //@line 823 "lstrlib.c"
    case 29: 
      var $150=$1; //@line 824 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $150; //@line 824 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10str_formatP9lua_State["X"]=1;

function __Z11gfind_nodefP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 585 "lstrlib.c"
  var $3=_luaL_error($2, ((STRING_TABLE.__str29527)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 585 "lstrlib.c"
  STACKTOP = __stackBase__;
  return $3; //@line 585 "lstrlib.c"
}


function __Z6gmatchP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 575 "lstrlib.c"
  var $3=_luaL_checklstring($2, 1, 0); //@line 575 "lstrlib.c"
  var $4=$1; //@line 576 "lstrlib.c"
  var $5=_luaL_checklstring($4, 2, 0); //@line 576 "lstrlib.c"
  var $6=$1; //@line 577 "lstrlib.c"
  _lua_settop($6, 2); //@line 577 "lstrlib.c"
  var $7=$1; //@line 578 "lstrlib.c"
  _lua_pushinteger($7, 0); //@line 578 "lstrlib.c"
  var $8=$1; //@line 579 "lstrlib.c"
  _lua_pushcclosure($8, 54, 3); //@line 579 "lstrlib.c"
  ;
  return 1; //@line 580 "lstrlib.c"
}


function __Z8str_gsubP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8480; _memset(__stackBase__, 0, 8480);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $srcl=__stackBase__;
      var $src;
      var $p;
      var $tr;
      var $max_s;
      var $anchor;
      var $n;
      var $ms=(__stackBase__)+(4);
      var $b=(__stackBase__)+(276);
      var $e;
      $1=$L;
      var $2=$1; //@line 646 "lstrlib.c"
      var $3=_luaL_checklstring($2, 1, $srcl); //@line 646 "lstrlib.c"
      $src=$3; //@line 646 "lstrlib.c"
      var $4=$1; //@line 647 "lstrlib.c"
      var $5=_luaL_checklstring($4, 2, 0); //@line 647 "lstrlib.c"
      $p=$5; //@line 647 "lstrlib.c"
      var $6=$1; //@line 648 "lstrlib.c"
      var $7=_lua_type($6, 3); //@line 648 "lstrlib.c"
      $tr=$7; //@line 648 "lstrlib.c"
      var $8=$1; //@line 649 "lstrlib.c"
      var $9=HEAP32[(($srcl)>>2)]; //@line 649 "lstrlib.c"
      var $10=((($9)+(1))|0); //@line 649 "lstrlib.c"
      var $11=_luaL_optinteger($8, 4, $10); //@line 649 "lstrlib.c"
      $max_s=$11; //@line 649 "lstrlib.c"
      var $12=$p; //@line 650 "lstrlib.c"
      var $13=HEAP8[($12)]; //@line 650 "lstrlib.c"
      var $14=(($13 << 24) >> 24); //@line 650 "lstrlib.c"
      var $15=(($14)|0)==94; //@line 650 "lstrlib.c"
      if ($15) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 650 "lstrlib.c"
    case 3: 
      var $17=$p; //@line 650 "lstrlib.c"
      var $18=(($17+1)|0); //@line 650 "lstrlib.c"
      $p=$18; //@line 650 "lstrlib.c"
      var $21 = 1;__label__ = 5; break; //@line 650 "lstrlib.c"
    case 4: 
      var $21 = 0;__label__ = 5; break; //@line 650 "lstrlib.c"
    case 5: 
      var $21; //@line 650 "lstrlib.c"
      $anchor=$21; //@line 650 "lstrlib.c"
      $n=0; //@line 651 "lstrlib.c"
      var $22=$tr; //@line 654 "lstrlib.c"
      var $23=(($22)|0)==3; //@line 654 "lstrlib.c"
      if ($23) { var $38 = 1;__label__ = 10; break; } else { __label__ = 6; break; } //@line 654 "lstrlib.c"
    case 6: 
      var $25=$tr; //@line 654 "lstrlib.c"
      var $26=(($25)|0)==4; //@line 654 "lstrlib.c"
      if ($26) { var $38 = 1;__label__ = 10; break; } else { __label__ = 7; break; } //@line 654 "lstrlib.c"
    case 7: 
      var $28=$tr; //@line 654 "lstrlib.c"
      var $29=(($28)|0)==6; //@line 654 "lstrlib.c"
      if ($29) { var $38 = 1;__label__ = 10; break; } else { __label__ = 8; break; } //@line 654 "lstrlib.c"
    case 8: 
      var $31=$tr; //@line 654 "lstrlib.c"
      var $32=(($31)|0)==5; //@line 654 "lstrlib.c"
      if ($32) { var $38 = 1;__label__ = 10; break; } else { __label__ = 9; break; } //@line 654 "lstrlib.c"
    case 9: 
      var $34=$1; //@line 654 "lstrlib.c"
      var $35=_luaL_argerror($34, 3, ((STRING_TABLE.__str27525)|0)); //@line 654 "lstrlib.c"
      var $36=(($35)|0)!=0; //@line 654 "lstrlib.c"
      var $38 = $36;__label__ = 10; break; //@line 654 "lstrlib.c"
    case 10: 
      var $38;
      var $39=$1; //@line 657 "lstrlib.c"
      _luaL_buffinit($39, $b); //@line 657 "lstrlib.c"
      var $40=$1; //@line 658 "lstrlib.c"
      var $41=(($ms+8)|0); //@line 658 "lstrlib.c"
      HEAP32[(($41)>>2)]=$40; //@line 658 "lstrlib.c"
      var $42=$src; //@line 659 "lstrlib.c"
      var $43=(($ms)|0); //@line 659 "lstrlib.c"
      HEAP32[(($43)>>2)]=$42; //@line 659 "lstrlib.c"
      var $44=$src; //@line 660 "lstrlib.c"
      var $45=HEAP32[(($srcl)>>2)]; //@line 660 "lstrlib.c"
      var $46=(($44+$45)|0); //@line 660 "lstrlib.c"
      var $47=(($ms+4)|0); //@line 660 "lstrlib.c"
      HEAP32[(($47)>>2)]=$46; //@line 660 "lstrlib.c"
      __label__ = 11; break; //@line 661 "lstrlib.c"
    case 11: 
      var $49=$n; //@line 661 "lstrlib.c"
      var $50=$max_s; //@line 661 "lstrlib.c"
      var $51=(($49)|0) < (($50)|0); //@line 661 "lstrlib.c"
      if ($51) { __label__ = 12; break; } else { __label__ = 26; break; } //@line 661 "lstrlib.c"
    case 12: 
      var $53=(($ms+12)|0); //@line 663 "lstrlib.c"
      HEAP32[(($53)>>2)]=0; //@line 663 "lstrlib.c"
      var $54=$src; //@line 664 "lstrlib.c"
      var $55=$p; //@line 664 "lstrlib.c"
      var $56=__Z5matchP10MatchStatePKcS2_($ms, $54, $55); //@line 664 "lstrlib.c"
      $e=$56; //@line 664 "lstrlib.c"
      var $57=$e; //@line 665 "lstrlib.c"
      var $58=(($57)|0)!=0; //@line 665 "lstrlib.c"
      if ($58) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 665 "lstrlib.c"
    case 13: 
      var $60=$n; //@line 666 "lstrlib.c"
      var $61=((($60)+(1))|0); //@line 666 "lstrlib.c"
      $n=$61; //@line 666 "lstrlib.c"
      var $62=$src; //@line 667 "lstrlib.c"
      var $63=$e; //@line 667 "lstrlib.c"
      __Z9add_valueP10MatchStateP11luaL_BufferPKcS4_($ms, $b, $62, $63); //@line 667 "lstrlib.c"
      __label__ = 14; break; //@line 668 "lstrlib.c"
    case 14: 
      var $65=$e; //@line 669 "lstrlib.c"
      var $66=(($65)|0)!=0; //@line 669 "lstrlib.c"
      if ($66) { __label__ = 15; break; } else { __label__ = 17; break; } //@line 669 "lstrlib.c"
    case 15: 
      var $68=$e; //@line 669 "lstrlib.c"
      var $69=$src; //@line 669 "lstrlib.c"
      var $70=(($68)>>>0) > (($69)>>>0); //@line 669 "lstrlib.c"
      if ($70) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 669 "lstrlib.c"
    case 16: 
      var $72=$e; //@line 670 "lstrlib.c"
      $src=$72; //@line 670 "lstrlib.c"
      __label__ = 23; break; //@line 670 "lstrlib.c"
    case 17: 
      var $74=$src; //@line 671 "lstrlib.c"
      var $75=(($ms+4)|0); //@line 671 "lstrlib.c"
      var $76=HEAPU32[(($75)>>2)]; //@line 671 "lstrlib.c"
      var $77=(($74)>>>0) < (($76)>>>0); //@line 671 "lstrlib.c"
      if ($77) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 671 "lstrlib.c"
    case 18: 
      var $79=(($b)|0); //@line 672 "lstrlib.c"
      var $80=HEAPU32[(($79)>>2)]; //@line 672 "lstrlib.c"
      var $81=(($b+12)|0); //@line 672 "lstrlib.c"
      var $82=(($81)|0); //@line 672 "lstrlib.c"
      var $83=(($82+8192)|0); //@line 672 "lstrlib.c"
      var $84=(($80)>>>0) < (($83)>>>0); //@line 672 "lstrlib.c"
      if ($84) { var $89 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 672 "lstrlib.c"
    case 19: 
      var $86=_luaL_prepbuffer($b); //@line 672 "lstrlib.c"
      var $87=(($86)|0)!=0; //@line 672 "lstrlib.c"
      var $89 = $87;__label__ = 20; break; //@line 672 "lstrlib.c"
    case 20: 
      var $89;
      var $90=$src; //@line 672 "lstrlib.c"
      var $91=(($90+1)|0); //@line 672 "lstrlib.c"
      $src=$91; //@line 672 "lstrlib.c"
      var $92=HEAP8[($90)]; //@line 672 "lstrlib.c"
      var $93=(($b)|0); //@line 672 "lstrlib.c"
      var $94=HEAP32[(($93)>>2)]; //@line 672 "lstrlib.c"
      var $95=(($94+1)|0); //@line 672 "lstrlib.c"
      HEAP32[(($93)>>2)]=$95; //@line 672 "lstrlib.c"
      HEAP8[($94)]=$92; //@line 672 "lstrlib.c"
      __label__ = 22; break; //@line 672 "lstrlib.c"
    case 21: 
      __label__ = 26; break; //@line 673 "lstrlib.c"
    case 22: 
      __label__ = 23; break; //@line 673 "lstrlib.c"
    case 23: 
      var $99=$anchor; //@line 674 "lstrlib.c"
      var $100=(($99)|0)!=0; //@line 674 "lstrlib.c"
      if ($100) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 674 "lstrlib.c"
    case 24: 
      __label__ = 26; break; //@line 674 "lstrlib.c"
    case 25: 
      __label__ = 11; break; //@line 675 "lstrlib.c"
    case 26: 
      var $104=$src; //@line 676 "lstrlib.c"
      var $105=(($ms+4)|0); //@line 676 "lstrlib.c"
      var $106=HEAP32[(($105)>>2)]; //@line 676 "lstrlib.c"
      var $107=$src; //@line 676 "lstrlib.c"
      var $108=$106; //@line 676 "lstrlib.c"
      var $109=$107; //@line 676 "lstrlib.c"
      var $110=((($108)-($109))|0); //@line 676 "lstrlib.c"
      _luaL_addlstring($b, $104, $110); //@line 676 "lstrlib.c"
      _luaL_pushresult($b); //@line 677 "lstrlib.c"
      var $111=$1; //@line 678 "lstrlib.c"
      var $112=$n; //@line 678 "lstrlib.c"
      _lua_pushinteger($111, $112); //@line 678 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 2; //@line 679 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8str_gsubP9lua_State["X"]=1;

function __Z7str_lenP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;

  var $1;
  var $l=__stackBase__;
  $1=$L;
  var $2=$1; //@line 30 "lstrlib.c"
  var $3=_luaL_checklstring($2, 1, $l); //@line 30 "lstrlib.c"
  var $4=$1; //@line 31 "lstrlib.c"
  var $5=HEAP32[(($l)>>2)]; //@line 31 "lstrlib.c"
  _lua_pushinteger($4, $5); //@line 31 "lstrlib.c"
  STACKTOP = __stackBase__;
  return 1; //@line 32 "lstrlib.c"
}


function __Z9str_lowerP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8208; _memset(__stackBase__, 0, 8208);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      $1=$L;
      var $2=$1; //@line 72 "lstrlib.c"
      var $3=_luaL_checklstring($2, 1, $l); //@line 72 "lstrlib.c"
      $s=$3; //@line 72 "lstrlib.c"
      var $4=$1; //@line 73 "lstrlib.c"
      _luaL_buffinit($4, $b); //@line 73 "lstrlib.c"
      $i=0; //@line 74 "lstrlib.c"
      __label__ = 3; break; //@line 74 "lstrlib.c"
    case 3: 
      var $6=$i; //@line 74 "lstrlib.c"
      var $7=HEAPU32[(($l)>>2)]; //@line 74 "lstrlib.c"
      var $8=(($6)>>>0) < (($7)>>>0); //@line 74 "lstrlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 74 "lstrlib.c"
    case 4: 
      var $10=(($b)|0); //@line 75 "lstrlib.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 75 "lstrlib.c"
      var $12=(($b+12)|0); //@line 75 "lstrlib.c"
      var $13=(($12)|0); //@line 75 "lstrlib.c"
      var $14=(($13+8192)|0); //@line 75 "lstrlib.c"
      var $15=(($11)>>>0) < (($14)>>>0); //@line 75 "lstrlib.c"
      if ($15) { var $20 = 1;__label__ = 6; break; } else { __label__ = 5; break; } //@line 75 "lstrlib.c"
    case 5: 
      var $17=_luaL_prepbuffer($b); //@line 75 "lstrlib.c"
      var $18=(($17)|0)!=0; //@line 75 "lstrlib.c"
      var $20 = $18;__label__ = 6; break; //@line 75 "lstrlib.c"
    case 6: 
      var $20;
      var $21=$i; //@line 75 "lstrlib.c"
      var $22=$s; //@line 75 "lstrlib.c"
      var $23=(($22+$21)|0); //@line 75 "lstrlib.c"
      var $24=HEAPU8[($23)]; //@line 75 "lstrlib.c"
      var $25=(($24)&255); //@line 75 "lstrlib.c"
      var $26=_tolower($25); //@line 75 "lstrlib.c"
      var $27=(($26) & 255); //@line 75 "lstrlib.c"
      var $28=(($b)|0); //@line 75 "lstrlib.c"
      var $29=HEAP32[(($28)>>2)]; //@line 75 "lstrlib.c"
      var $30=(($29+1)|0); //@line 75 "lstrlib.c"
      HEAP32[(($28)>>2)]=$30; //@line 75 "lstrlib.c"
      HEAP8[($29)]=$27; //@line 75 "lstrlib.c"
      __label__ = 7; break; //@line 75 "lstrlib.c"
    case 7: 
      var $32=$i; //@line 74 "lstrlib.c"
      var $33=((($32)+(1))|0); //@line 74 "lstrlib.c"
      $i=$33; //@line 74 "lstrlib.c"
      __label__ = 3; break; //@line 74 "lstrlib.c"
    case 8: 
      _luaL_pushresult($b); //@line 76 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 77 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9str_matchP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 544 "lstrlib.c"
  var $3=__Z12str_find_auxP9lua_Statei($2, 0); //@line 544 "lstrlib.c"
  ;
  return $3; //@line 544 "lstrlib.c"
}


function __Z7str_repP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8208; _memset(__stackBase__, 0, 8208);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $b=(__stackBase__)+(4);
      var $s;
      var $n;
      $1=$L;
      var $2=$1; //@line 96 "lstrlib.c"
      var $3=_luaL_checklstring($2, 1, $l); //@line 96 "lstrlib.c"
      $s=$3; //@line 96 "lstrlib.c"
      var $4=$1; //@line 97 "lstrlib.c"
      var $5=_luaL_checkinteger($4, 2); //@line 97 "lstrlib.c"
      $n=$5; //@line 97 "lstrlib.c"
      var $6=$1; //@line 98 "lstrlib.c"
      _luaL_buffinit($6, $b); //@line 98 "lstrlib.c"
      __label__ = 3; break; //@line 99 "lstrlib.c"
    case 3: 
      var $8=$n; //@line 99 "lstrlib.c"
      var $9=((($8)-(1))|0); //@line 99 "lstrlib.c"
      $n=$9; //@line 99 "lstrlib.c"
      var $10=(($8)|0) > 0; //@line 99 "lstrlib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 99 "lstrlib.c"
    case 4: 
      var $12=$s; //@line 100 "lstrlib.c"
      var $13=HEAP32[(($l)>>2)]; //@line 100 "lstrlib.c"
      _luaL_addlstring($b, $12, $13); //@line 100 "lstrlib.c"
      __label__ = 3; break; //@line 100 "lstrlib.c"
    case 5: 
      _luaL_pushresult($b); //@line 101 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 102 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11str_reverseP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8208; _memset(__stackBase__, 0, 8208);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $b=(__stackBase__)+(4);
      var $s;
      $1=$L;
      var $2=$1; //@line 60 "lstrlib.c"
      var $3=_luaL_checklstring($2, 1, $l); //@line 60 "lstrlib.c"
      $s=$3; //@line 60 "lstrlib.c"
      var $4=$1; //@line 61 "lstrlib.c"
      _luaL_buffinit($4, $b); //@line 61 "lstrlib.c"
      __label__ = 3; break; //@line 62 "lstrlib.c"
    case 3: 
      var $6=HEAP32[(($l)>>2)]; //@line 62 "lstrlib.c"
      var $7=((($6)-(1))|0); //@line 62 "lstrlib.c"
      HEAP32[(($l)>>2)]=$7; //@line 62 "lstrlib.c"
      var $8=(($6)|0)!=0; //@line 62 "lstrlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 7; break; } //@line 62 "lstrlib.c"
    case 4: 
      var $10=(($b)|0); //@line 62 "lstrlib.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 62 "lstrlib.c"
      var $12=(($b+12)|0); //@line 62 "lstrlib.c"
      var $13=(($12)|0); //@line 62 "lstrlib.c"
      var $14=(($13+8192)|0); //@line 62 "lstrlib.c"
      var $15=(($11)>>>0) < (($14)>>>0); //@line 62 "lstrlib.c"
      if ($15) { var $20 = 1;__label__ = 6; break; } else { __label__ = 5; break; } //@line 62 "lstrlib.c"
    case 5: 
      var $17=_luaL_prepbuffer($b); //@line 62 "lstrlib.c"
      var $18=(($17)|0)!=0; //@line 62 "lstrlib.c"
      var $20 = $18;__label__ = 6; break; //@line 62 "lstrlib.c"
    case 6: 
      var $20;
      var $21=HEAP32[(($l)>>2)]; //@line 62 "lstrlib.c"
      var $22=$s; //@line 62 "lstrlib.c"
      var $23=(($22+$21)|0); //@line 62 "lstrlib.c"
      var $24=HEAP8[($23)]; //@line 62 "lstrlib.c"
      var $25=(($b)|0); //@line 62 "lstrlib.c"
      var $26=HEAP32[(($25)>>2)]; //@line 62 "lstrlib.c"
      var $27=(($26+1)|0); //@line 62 "lstrlib.c"
      HEAP32[(($25)>>2)]=$27; //@line 62 "lstrlib.c"
      HEAP8[($26)]=$24; //@line 62 "lstrlib.c"
      __label__ = 3; break; //@line 62 "lstrlib.c"
    case 7: 
      _luaL_pushresult($b); //@line 63 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 64 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7str_subP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $s;
      var $start;
      var $end;
      $1=$L;
      var $2=$1; //@line 45 "lstrlib.c"
      var $3=_luaL_checklstring($2, 1, $l); //@line 45 "lstrlib.c"
      $s=$3; //@line 45 "lstrlib.c"
      var $4=$1; //@line 46 "lstrlib.c"
      var $5=_luaL_checkinteger($4, 2); //@line 46 "lstrlib.c"
      var $6=HEAP32[(($l)>>2)]; //@line 46 "lstrlib.c"
      var $7=__Z8posrelatij($5, $6); //@line 46 "lstrlib.c"
      $start=$7; //@line 46 "lstrlib.c"
      var $8=$1; //@line 47 "lstrlib.c"
      var $9=_luaL_optinteger($8, 3, -1); //@line 47 "lstrlib.c"
      var $10=HEAP32[(($l)>>2)]; //@line 47 "lstrlib.c"
      var $11=__Z8posrelatij($9, $10); //@line 47 "lstrlib.c"
      $end=$11; //@line 47 "lstrlib.c"
      var $12=$start; //@line 48 "lstrlib.c"
      var $13=(($12)|0) < 1; //@line 48 "lstrlib.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 48 "lstrlib.c"
    case 3: 
      $start=1; //@line 48 "lstrlib.c"
      __label__ = 4; break; //@line 48 "lstrlib.c"
    case 4: 
      var $16=$end; //@line 49 "lstrlib.c"
      var $17=HEAP32[(($l)>>2)]; //@line 49 "lstrlib.c"
      var $18=(($16)|0) > (($17)|0); //@line 49 "lstrlib.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 49 "lstrlib.c"
    case 5: 
      var $20=HEAP32[(($l)>>2)]; //@line 49 "lstrlib.c"
      $end=$20; //@line 49 "lstrlib.c"
      __label__ = 6; break; //@line 49 "lstrlib.c"
    case 6: 
      var $22=$start; //@line 50 "lstrlib.c"
      var $23=$end; //@line 50 "lstrlib.c"
      var $24=(($22)|0) <= (($23)|0); //@line 50 "lstrlib.c"
      if ($24) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 50 "lstrlib.c"
    case 7: 
      var $26=$1; //@line 51 "lstrlib.c"
      var $27=$s; //@line 51 "lstrlib.c"
      var $28=$start; //@line 51 "lstrlib.c"
      var $29=(($27+$28)|0); //@line 51 "lstrlib.c"
      var $30=((($29)-(1))|0); //@line 51 "lstrlib.c"
      var $31=$end; //@line 51 "lstrlib.c"
      var $32=$start; //@line 51 "lstrlib.c"
      var $33=((($31)-($32))|0); //@line 51 "lstrlib.c"
      var $34=((($33)+(1))|0); //@line 51 "lstrlib.c"
      _lua_pushlstring($26, $30, $34); //@line 51 "lstrlib.c"
      __label__ = 9; break; //@line 51 "lstrlib.c"
    case 8: 
      var $36=$1; //@line 52 "lstrlib.c"
      _lua_pushlstring($36, ((__str16514)|0), 0); //@line 52 "lstrlib.c"
      __label__ = 9; break; //@line 52 "lstrlib.c"
    case 9: 
      STACKTOP = __stackBase__;
      return 1; //@line 53 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z7str_subP9lua_State["X"]=1;

function __Z9str_upperP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 8208; _memset(__stackBase__, 0, 8208);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $l=__stackBase__;
      var $i;
      var $b=(__stackBase__)+(4);
      var $s;
      $1=$L;
      var $2=$1; //@line 85 "lstrlib.c"
      var $3=_luaL_checklstring($2, 1, $l); //@line 85 "lstrlib.c"
      $s=$3; //@line 85 "lstrlib.c"
      var $4=$1; //@line 86 "lstrlib.c"
      _luaL_buffinit($4, $b); //@line 86 "lstrlib.c"
      $i=0; //@line 87 "lstrlib.c"
      __label__ = 3; break; //@line 87 "lstrlib.c"
    case 3: 
      var $6=$i; //@line 87 "lstrlib.c"
      var $7=HEAPU32[(($l)>>2)]; //@line 87 "lstrlib.c"
      var $8=(($6)>>>0) < (($7)>>>0); //@line 87 "lstrlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 87 "lstrlib.c"
    case 4: 
      var $10=(($b)|0); //@line 88 "lstrlib.c"
      var $11=HEAPU32[(($10)>>2)]; //@line 88 "lstrlib.c"
      var $12=(($b+12)|0); //@line 88 "lstrlib.c"
      var $13=(($12)|0); //@line 88 "lstrlib.c"
      var $14=(($13+8192)|0); //@line 88 "lstrlib.c"
      var $15=(($11)>>>0) < (($14)>>>0); //@line 88 "lstrlib.c"
      if ($15) { var $20 = 1;__label__ = 6; break; } else { __label__ = 5; break; } //@line 88 "lstrlib.c"
    case 5: 
      var $17=_luaL_prepbuffer($b); //@line 88 "lstrlib.c"
      var $18=(($17)|0)!=0; //@line 88 "lstrlib.c"
      var $20 = $18;__label__ = 6; break; //@line 88 "lstrlib.c"
    case 6: 
      var $20;
      var $21=$i; //@line 88 "lstrlib.c"
      var $22=$s; //@line 88 "lstrlib.c"
      var $23=(($22+$21)|0); //@line 88 "lstrlib.c"
      var $24=HEAPU8[($23)]; //@line 88 "lstrlib.c"
      var $25=(($24)&255); //@line 88 "lstrlib.c"
      var $26=_toupper($25); //@line 88 "lstrlib.c"
      var $27=(($26) & 255); //@line 88 "lstrlib.c"
      var $28=(($b)|0); //@line 88 "lstrlib.c"
      var $29=HEAP32[(($28)>>2)]; //@line 88 "lstrlib.c"
      var $30=(($29+1)|0); //@line 88 "lstrlib.c"
      HEAP32[(($28)>>2)]=$30; //@line 88 "lstrlib.c"
      HEAP8[($29)]=$27; //@line 88 "lstrlib.c"
      __label__ = 7; break; //@line 88 "lstrlib.c"
    case 7: 
      var $32=$i; //@line 87 "lstrlib.c"
      var $33=((($32)+(1))|0); //@line 87 "lstrlib.c"
      $i=$33; //@line 87 "lstrlib.c"
      __label__ = 3; break; //@line 87 "lstrlib.c"
    case 8: 
      _luaL_pushresult($b); //@line 89 "lstrlib.c"
      STACKTOP = __stackBase__;
      return 1; //@line 90 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaopen_string($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 863 "lstrlib.c"
  _luaL_register($2, ((STRING_TABLE.__str15513)|0), ((__ZL6strlib)|0)); //@line 863 "lstrlib.c"
  var $3=$1; //@line 865 "lstrlib.c"
  _lua_getfield($3, -1, ((STRING_TABLE.__str6504)|0)); //@line 865 "lstrlib.c"
  var $4=$1; //@line 866 "lstrlib.c"
  _lua_setfield($4, -2, ((STRING_TABLE.__str5503)|0)); //@line 866 "lstrlib.c"
  var $5=$1; //@line 868 "lstrlib.c"
  __Z15createmetatableP9lua_State($5); //@line 868 "lstrlib.c"
  ;
  return 1; //@line 869 "lstrlib.c"
}


function __Z15createmetatableP9lua_State($L) {
  ;
  var __label__;

  var $1;
  $1=$L;
  var $2=$1; //@line 848 "lstrlib.c"
  _lua_createtable($2, 0, 1); //@line 848 "lstrlib.c"
  var $3=$1; //@line 849 "lstrlib.c"
  _lua_pushlstring($3, ((__str16514)|0), 0); //@line 849 "lstrlib.c"
  var $4=$1; //@line 850 "lstrlib.c"
  _lua_pushvalue($4, -2); //@line 850 "lstrlib.c"
  var $5=$1; //@line 851 "lstrlib.c"
  var $6=_lua_setmetatable($5, -2); //@line 851 "lstrlib.c"
  var $7=$1; //@line 852 "lstrlib.c"
  _lua_settop($7, -2); //@line 852 "lstrlib.c"
  var $8=$1; //@line 853 "lstrlib.c"
  _lua_pushvalue($8, -2); //@line 853 "lstrlib.c"
  var $9=$1; //@line 854 "lstrlib.c"
  _lua_setfield($9, -2, ((STRING_TABLE.__str17515)|0)); //@line 854 "lstrlib.c"
  var $10=$1; //@line 855 "lstrlib.c"
  _lua_settop($10, -2); //@line 855 "lstrlib.c"
  ;
  return; //@line 856 "lstrlib.c"
}


function __Z12str_find_auxP9lua_Statei($L, $find) {
  var __stackBase__  = STACKTOP; STACKTOP += 280; _memset(__stackBase__, 0, 280);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l1=__stackBase__;
      var $l2=(__stackBase__)+(4);
      var $s;
      var $p;
      var $init;
      var $s2;
      var $ms=(__stackBase__)+(8);
      var $anchor;
      var $s1;
      var $res;
      $2=$L;
      $3=$find;
      var $4=$2; //@line 497 "lstrlib.c"
      var $5=_luaL_checklstring($4, 1, $l1); //@line 497 "lstrlib.c"
      $s=$5; //@line 497 "lstrlib.c"
      var $6=$2; //@line 498 "lstrlib.c"
      var $7=_luaL_checklstring($6, 2, $l2); //@line 498 "lstrlib.c"
      $p=$7; //@line 498 "lstrlib.c"
      var $8=$2; //@line 499 "lstrlib.c"
      var $9=_luaL_optinteger($8, 3, 1); //@line 499 "lstrlib.c"
      var $10=HEAP32[(($l1)>>2)]; //@line 499 "lstrlib.c"
      var $11=__Z8posrelatij($9, $10); //@line 499 "lstrlib.c"
      var $12=((($11)-(1))|0); //@line 499 "lstrlib.c"
      $init=$12; //@line 499 "lstrlib.c"
      var $13=$init; //@line 500 "lstrlib.c"
      var $14=(($13)|0) < 0; //@line 500 "lstrlib.c"
      if ($14) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 500 "lstrlib.c"
    case 3: 
      $init=0; //@line 500 "lstrlib.c"
      __label__ = 7; break; //@line 500 "lstrlib.c"
    case 4: 
      var $17=$init; //@line 501 "lstrlib.c"
      var $18=HEAPU32[(($l1)>>2)]; //@line 501 "lstrlib.c"
      var $19=(($17)>>>0) > (($18)>>>0); //@line 501 "lstrlib.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 501 "lstrlib.c"
    case 5: 
      var $21=HEAP32[(($l1)>>2)]; //@line 501 "lstrlib.c"
      $init=$21; //@line 501 "lstrlib.c"
      __label__ = 6; break; //@line 501 "lstrlib.c"
    case 6: 
      __label__ = 7; break; //@line 501 "lstrlib.c"
    case 7: 
      var $24=$3; //@line 502 "lstrlib.c"
      var $25=(($24)|0)!=0; //@line 502 "lstrlib.c"
      if ($25) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 502 "lstrlib.c"
    case 8: 
      var $27=$2; //@line 502 "lstrlib.c"
      var $28=_lua_toboolean($27, 4); //@line 502 "lstrlib.c"
      var $29=(($28)|0)!=0; //@line 502 "lstrlib.c"
      if ($29) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 502 "lstrlib.c"
    case 9: 
      var $31=$p; //@line 503 "lstrlib.c"
      var $32=_strpbrk($31, ((STRING_TABLE.__str18516)|0)); //@line 503 "lstrlib.c"
      var $33=(($32)|0)==0; //@line 503 "lstrlib.c"
      if ($33) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 503 "lstrlib.c"
    case 10: 
      var $35=$s; //@line 505 "lstrlib.c"
      var $36=$init; //@line 505 "lstrlib.c"
      var $37=(($35+$36)|0); //@line 505 "lstrlib.c"
      var $38=HEAP32[(($l1)>>2)]; //@line 505 "lstrlib.c"
      var $39=$init; //@line 505 "lstrlib.c"
      var $40=((($38)-($39))|0); //@line 505 "lstrlib.c"
      var $41=$p; //@line 505 "lstrlib.c"
      var $42=HEAP32[(($l2)>>2)]; //@line 505 "lstrlib.c"
      var $43=__Z8lmemfindPKcjS0_j($37, $40, $41, $42); //@line 505 "lstrlib.c"
      $s2=$43; //@line 505 "lstrlib.c"
      var $44=$s2; //@line 506 "lstrlib.c"
      var $45=(($44)|0)!=0; //@line 506 "lstrlib.c"
      if ($45) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 506 "lstrlib.c"
    case 11: 
      var $47=$2; //@line 507 "lstrlib.c"
      var $48=$s2; //@line 507 "lstrlib.c"
      var $49=$s; //@line 507 "lstrlib.c"
      var $50=$48; //@line 507 "lstrlib.c"
      var $51=$49; //@line 507 "lstrlib.c"
      var $52=((($50)-($51))|0); //@line 507 "lstrlib.c"
      var $53=((($52)+(1))|0); //@line 507 "lstrlib.c"
      _lua_pushinteger($47, $53); //@line 507 "lstrlib.c"
      var $54=$2; //@line 508 "lstrlib.c"
      var $55=$s2; //@line 508 "lstrlib.c"
      var $56=$s; //@line 508 "lstrlib.c"
      var $57=$55; //@line 508 "lstrlib.c"
      var $58=$56; //@line 508 "lstrlib.c"
      var $59=((($57)-($58))|0); //@line 508 "lstrlib.c"
      var $60=HEAP32[(($l2)>>2)]; //@line 508 "lstrlib.c"
      var $61=((($59)+($60))|0); //@line 508 "lstrlib.c"
      _lua_pushinteger($54, $61); //@line 508 "lstrlib.c"
      $1=2; //@line 509 "lstrlib.c"
      __label__ = 27; break; //@line 509 "lstrlib.c"
    case 12: 
      __label__ = 26; break; //@line 511 "lstrlib.c"
    case 13: 
      var $64=$p; //@line 514 "lstrlib.c"
      var $65=HEAP8[($64)]; //@line 514 "lstrlib.c"
      var $66=(($65 << 24) >> 24); //@line 514 "lstrlib.c"
      var $67=(($66)|0)==94; //@line 514 "lstrlib.c"
      if ($67) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 514 "lstrlib.c"
    case 14: 
      var $69=$p; //@line 514 "lstrlib.c"
      var $70=(($69+1)|0); //@line 514 "lstrlib.c"
      $p=$70; //@line 514 "lstrlib.c"
      var $73 = 1;__label__ = 16; break; //@line 514 "lstrlib.c"
    case 15: 
      var $73 = 0;__label__ = 16; break; //@line 514 "lstrlib.c"
    case 16: 
      var $73; //@line 514 "lstrlib.c"
      $anchor=$73; //@line 514 "lstrlib.c"
      var $74=$s; //@line 515 "lstrlib.c"
      var $75=$init; //@line 515 "lstrlib.c"
      var $76=(($74+$75)|0); //@line 515 "lstrlib.c"
      $s1=$76; //@line 515 "lstrlib.c"
      var $77=$2; //@line 516 "lstrlib.c"
      var $78=(($ms+8)|0); //@line 516 "lstrlib.c"
      HEAP32[(($78)>>2)]=$77; //@line 516 "lstrlib.c"
      var $79=$s; //@line 517 "lstrlib.c"
      var $80=(($ms)|0); //@line 517 "lstrlib.c"
      HEAP32[(($80)>>2)]=$79; //@line 517 "lstrlib.c"
      var $81=$s; //@line 518 "lstrlib.c"
      var $82=HEAP32[(($l1)>>2)]; //@line 518 "lstrlib.c"
      var $83=(($81+$82)|0); //@line 518 "lstrlib.c"
      var $84=(($ms+4)|0); //@line 518 "lstrlib.c"
      HEAP32[(($84)>>2)]=$83; //@line 518 "lstrlib.c"
      __label__ = 17; break; //@line 519 "lstrlib.c"
    case 17: 
      var $86=(($ms+12)|0); //@line 521 "lstrlib.c"
      HEAP32[(($86)>>2)]=0; //@line 521 "lstrlib.c"
      var $87=$s1; //@line 522 "lstrlib.c"
      var $88=$p; //@line 522 "lstrlib.c"
      var $89=__Z5matchP10MatchStatePKcS2_($ms, $87, $88); //@line 522 "lstrlib.c"
      $res=$89; //@line 522 "lstrlib.c"
      var $90=(($89)|0)!=0; //@line 522 "lstrlib.c"
      if ($90) { __label__ = 18; break; } else { __label__ = 21; break; } //@line 522 "lstrlib.c"
    case 18: 
      var $92=$3; //@line 523 "lstrlib.c"
      var $93=(($92)|0)!=0; //@line 523 "lstrlib.c"
      if ($93) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 523 "lstrlib.c"
    case 19: 
      var $95=$2; //@line 524 "lstrlib.c"
      var $96=$s1; //@line 524 "lstrlib.c"
      var $97=$s; //@line 524 "lstrlib.c"
      var $98=$96; //@line 524 "lstrlib.c"
      var $99=$97; //@line 524 "lstrlib.c"
      var $100=((($98)-($99))|0); //@line 524 "lstrlib.c"
      var $101=((($100)+(1))|0); //@line 524 "lstrlib.c"
      _lua_pushinteger($95, $101); //@line 524 "lstrlib.c"
      var $102=$2; //@line 525 "lstrlib.c"
      var $103=$res; //@line 525 "lstrlib.c"
      var $104=$s; //@line 525 "lstrlib.c"
      var $105=$103; //@line 525 "lstrlib.c"
      var $106=$104; //@line 525 "lstrlib.c"
      var $107=((($105)-($106))|0); //@line 525 "lstrlib.c"
      _lua_pushinteger($102, $107); //@line 525 "lstrlib.c"
      var $108=__Z13push_capturesP10MatchStatePKcS2_($ms, 0, 0); //@line 526 "lstrlib.c"
      var $109=((($108)+(2))|0); //@line 526 "lstrlib.c"
      $1=$109; //@line 526 "lstrlib.c"
      __label__ = 27; break; //@line 526 "lstrlib.c"
    case 20: 
      var $111=$s1; //@line 529 "lstrlib.c"
      var $112=$res; //@line 529 "lstrlib.c"
      var $113=__Z13push_capturesP10MatchStatePKcS2_($ms, $111, $112); //@line 529 "lstrlib.c"
      $1=$113; //@line 529 "lstrlib.c"
      __label__ = 27; break; //@line 529 "lstrlib.c"
    case 21: 
      __label__ = 22; break; //@line 531 "lstrlib.c"
    case 22: 
      var $116=$s1; //@line 531 "lstrlib.c"
      var $117=(($116+1)|0); //@line 531 "lstrlib.c"
      $s1=$117; //@line 531 "lstrlib.c"
      var $118=(($ms+4)|0); //@line 531 "lstrlib.c"
      var $119=HEAPU32[(($118)>>2)]; //@line 531 "lstrlib.c"
      var $120=(($116)>>>0) < (($119)>>>0); //@line 531 "lstrlib.c"
      if ($120) { __label__ = 23; break; } else { var $126 = 0;__label__ = 24; break; } //@line 531 "lstrlib.c"
    case 23: 
      var $122=$anchor; //@line 531 "lstrlib.c"
      var $123=(($122)|0)!=0; //@line 531 "lstrlib.c"
      var $124=$123 ^ 1; //@line 531 "lstrlib.c"
      var $126 = $124;__label__ = 24; break; //@line 531 "lstrlib.c"
    case 24: 
      var $126;
      if ($126) { __label__ = 17; break; } else { __label__ = 25; break; } //@line 531 "lstrlib.c"
    case 25: 
      __label__ = 26; break; //@line 532 "lstrlib.c"
    case 26: 
      var $129=$2; //@line 533 "lstrlib.c"
      _lua_pushnil($129); //@line 533 "lstrlib.c"
      $1=1; //@line 534 "lstrlib.c"
      __label__ = 27; break; //@line 534 "lstrlib.c"
    case 27: 
      var $131=$1; //@line 535 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $131; //@line 535 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12str_find_auxP9lua_Statei["X"]=1;

function __Z8lmemfindPKcjS0_j($s1, $l1, $s2, $l2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $init;
      $2=$s1;
      $3=$l1;
      $4=$s2;
      $5=$l2;
      var $6=$5; //@line 446 "lstrlib.c"
      var $7=(($6)|0)==0; //@line 446 "lstrlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 446 "lstrlib.c"
    case 3: 
      var $9=$2; //@line 446 "lstrlib.c"
      $1=$9; //@line 446 "lstrlib.c"
      __label__ = 15; break; //@line 446 "lstrlib.c"
    case 4: 
      var $11=$5; //@line 447 "lstrlib.c"
      var $12=$3; //@line 447 "lstrlib.c"
      var $13=(($11)>>>0) > (($12)>>>0); //@line 447 "lstrlib.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 447 "lstrlib.c"
    case 5: 
      $1=0; //@line 447 "lstrlib.c"
      __label__ = 15; break; //@line 447 "lstrlib.c"
    case 6: 
      var $16=$5; //@line 450 "lstrlib.c"
      var $17=((($16)-(1))|0); //@line 450 "lstrlib.c"
      $5=$17; //@line 450 "lstrlib.c"
      var $18=$3; //@line 451 "lstrlib.c"
      var $19=$5; //@line 451 "lstrlib.c"
      var $20=((($18)-($19))|0); //@line 451 "lstrlib.c"
      $3=$20; //@line 451 "lstrlib.c"
      __label__ = 7; break; //@line 452 "lstrlib.c"
    case 7: 
      var $22=$3; //@line 452 "lstrlib.c"
      var $23=(($22)>>>0) > 0; //@line 452 "lstrlib.c"
      if ($23) { __label__ = 8; break; } else { var $33 = 0;__label__ = 9; break; } //@line 452 "lstrlib.c"
    case 8: 
      var $25=$2; //@line 452 "lstrlib.c"
      var $26=$4; //@line 452 "lstrlib.c"
      var $27=HEAP8[($26)]; //@line 452 "lstrlib.c"
      var $28=(($27 << 24) >> 24); //@line 452 "lstrlib.c"
      var $29=$3; //@line 452 "lstrlib.c"
      var $30=_memchr($25, $28, $29); //@line 452 "lstrlib.c"
      $init=$30; //@line 452 "lstrlib.c"
      var $31=(($30)|0)!=0; //@line 452 "lstrlib.c"
      var $33 = $31;__label__ = 9; break; //@line 452 "lstrlib.c"
    case 9: 
      var $33;
      if ($33) { __label__ = 10; break; } else { __label__ = 14; break; } //@line 452 "lstrlib.c"
    case 10: 
      var $35=$init; //@line 453 "lstrlib.c"
      var $36=(($35+1)|0); //@line 453 "lstrlib.c"
      $init=$36; //@line 453 "lstrlib.c"
      var $37=$init; //@line 454 "lstrlib.c"
      var $38=$4; //@line 454 "lstrlib.c"
      var $39=(($38+1)|0); //@line 454 "lstrlib.c"
      var $40=$5; //@line 454 "lstrlib.c"
      var $41=_memcmp($37, $39, $40); //@line 454 "lstrlib.c"
      var $42=(($41)|0)==0; //@line 454 "lstrlib.c"
      if ($42) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 454 "lstrlib.c"
    case 11: 
      var $44=$init; //@line 455 "lstrlib.c"
      var $45=((($44)-(1))|0); //@line 455 "lstrlib.c"
      $1=$45; //@line 455 "lstrlib.c"
      __label__ = 15; break; //@line 455 "lstrlib.c"
    case 12: 
      var $47=$init; //@line 457 "lstrlib.c"
      var $48=$2; //@line 457 "lstrlib.c"
      var $49=$47; //@line 457 "lstrlib.c"
      var $50=$48; //@line 457 "lstrlib.c"
      var $51=((($49)-($50))|0); //@line 457 "lstrlib.c"
      var $52=$3; //@line 457 "lstrlib.c"
      var $53=((($52)-($51))|0); //@line 457 "lstrlib.c"
      $3=$53; //@line 457 "lstrlib.c"
      var $54=$init; //@line 458 "lstrlib.c"
      $2=$54; //@line 458 "lstrlib.c"
      __label__ = 13; break; //@line 459 "lstrlib.c"
    case 13: 
      __label__ = 7; break; //@line 460 "lstrlib.c"
    case 14: 
      $1=0; //@line 461 "lstrlib.c"
      __label__ = 15; break; //@line 461 "lstrlib.c"
    case 15: 
      var $58=$1; //@line 463 "lstrlib.c"
      ;
      return $58; //@line 463 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8lmemfindPKcjS0_j["X"]=1;

function __Z5matchP10MatchStatePKcS2_($ms, $s, $p) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ep;
      var $previous;
      var $ep1;
      var $m;
      var $res;
      $2=$ms;
      $3=$s;
      $4=$p;
      __label__ = 3; break;
    case 3: 
      var $6=$4; //@line 367 "lstrlib.c"
      var $7=HEAP8[($6)]; //@line 367 "lstrlib.c"
      var $8=(($7 << 24) >> 24); //@line 367 "lstrlib.c"
      if ((($8)|0) == 40) {
        __label__ = 4; break;
      }
      else if ((($8)|0) == 41) {
        __label__ = 7; break;
      }
      else if ((($8)|0) == 37) {
        __label__ = 8; break;
      }
      else if ((($8)|0) == 0) {
        __label__ = 26; break;
      }
      else if ((($8)|0) == 36) {
        __label__ = 27; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 4: 
      var $10=$4; //@line 369 "lstrlib.c"
      var $11=(($10+1)|0); //@line 369 "lstrlib.c"
      var $12=HEAP8[($11)]; //@line 369 "lstrlib.c"
      var $13=(($12 << 24) >> 24); //@line 369 "lstrlib.c"
      var $14=(($13)|0)==41; //@line 369 "lstrlib.c"
      if ($14) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 369 "lstrlib.c"
    case 5: 
      var $16=$2; //@line 370 "lstrlib.c"
      var $17=$3; //@line 370 "lstrlib.c"
      var $18=$4; //@line 370 "lstrlib.c"
      var $19=(($18+2)|0); //@line 370 "lstrlib.c"
      var $20=__Z13start_captureP10MatchStatePKcS2_i($16, $17, $19, -2); //@line 370 "lstrlib.c"
      $1=$20; //@line 370 "lstrlib.c"
      __label__ = 50; break; //@line 370 "lstrlib.c"
    case 6: 
      var $22=$2; //@line 372 "lstrlib.c"
      var $23=$3; //@line 372 "lstrlib.c"
      var $24=$4; //@line 372 "lstrlib.c"
      var $25=(($24+1)|0); //@line 372 "lstrlib.c"
      var $26=__Z13start_captureP10MatchStatePKcS2_i($22, $23, $25, -1); //@line 372 "lstrlib.c"
      $1=$26; //@line 372 "lstrlib.c"
      __label__ = 50; break; //@line 372 "lstrlib.c"
    case 7: 
      var $28=$2; //@line 375 "lstrlib.c"
      var $29=$3; //@line 375 "lstrlib.c"
      var $30=$4; //@line 375 "lstrlib.c"
      var $31=(($30+1)|0); //@line 375 "lstrlib.c"
      var $32=__Z11end_captureP10MatchStatePKcS2_($28, $29, $31); //@line 375 "lstrlib.c"
      $1=$32; //@line 375 "lstrlib.c"
      __label__ = 50; break; //@line 375 "lstrlib.c"
    case 8: 
      var $34=$4; //@line 378 "lstrlib.c"
      var $35=(($34+1)|0); //@line 378 "lstrlib.c"
      var $36=HEAP8[($35)]; //@line 378 "lstrlib.c"
      var $37=(($36 << 24) >> 24); //@line 378 "lstrlib.c"
      if ((($37)|0) == 98) {
        __label__ = 9; break;
      }
      else if ((($37)|0) == 102) {
        __label__ = 12; break;
      }
      else {
      __label__ = 21; break;
      }
      
    case 9: 
      var $39=$2; //@line 380 "lstrlib.c"
      var $40=$3; //@line 380 "lstrlib.c"
      var $41=$4; //@line 380 "lstrlib.c"
      var $42=(($41+2)|0); //@line 380 "lstrlib.c"
      var $43=__Z12matchbalanceP10MatchStatePKcS2_($39, $40, $42); //@line 380 "lstrlib.c"
      $3=$43; //@line 380 "lstrlib.c"
      var $44=$3; //@line 381 "lstrlib.c"
      var $45=(($44)|0)==0; //@line 381 "lstrlib.c"
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 381 "lstrlib.c"
    case 10: 
      $1=0; //@line 381 "lstrlib.c"
      __label__ = 50; break; //@line 381 "lstrlib.c"
    case 11: 
      var $48=$4; //@line 382 "lstrlib.c"
      var $49=(($48+4)|0); //@line 382 "lstrlib.c"
      $4=$49; //@line 382 "lstrlib.c"
      __label__ = 3; break; //@line 382 "lstrlib.c"
    case 12: 
      var $51=$4; //@line 386 "lstrlib.c"
      var $52=(($51+2)|0); //@line 386 "lstrlib.c"
      $4=$52; //@line 386 "lstrlib.c"
      var $53=$4; //@line 387 "lstrlib.c"
      var $54=HEAP8[($53)]; //@line 387 "lstrlib.c"
      var $55=(($54 << 24) >> 24); //@line 387 "lstrlib.c"
      var $56=(($55)|0)!=91; //@line 387 "lstrlib.c"
      if ($56) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 387 "lstrlib.c"
    case 13: 
      var $58=$2; //@line 388 "lstrlib.c"
      var $59=(($58+8)|0); //@line 388 "lstrlib.c"
      var $60=HEAP32[(($59)>>2)]; //@line 388 "lstrlib.c"
      var $61=_luaL_error($60, ((STRING_TABLE.__str22520)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 388 "lstrlib.c"
      __label__ = 14; break; //@line 388 "lstrlib.c"
    case 14: 
      var $63=$2; //@line 390 "lstrlib.c"
      var $64=$4; //@line 390 "lstrlib.c"
      var $65=__Z8classendP10MatchStatePKc($63, $64); //@line 390 "lstrlib.c"
      $ep=$65; //@line 390 "lstrlib.c"
      var $66=$3; //@line 391 "lstrlib.c"
      var $67=$2; //@line 391 "lstrlib.c"
      var $68=(($67)|0); //@line 391 "lstrlib.c"
      var $69=HEAP32[(($68)>>2)]; //@line 391 "lstrlib.c"
      var $70=(($66)|0)==(($69)|0); //@line 391 "lstrlib.c"
      if ($70) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 391 "lstrlib.c"
    case 15: 
      var $77 = 0;__label__ = 17; break; //@line 391 "lstrlib.c"
    case 16: 
      var $73=$3; //@line 391 "lstrlib.c"
      var $74=((($73)-(1))|0); //@line 391 "lstrlib.c"
      var $75=HEAP8[($74)]; //@line 391 "lstrlib.c"
      var $77 = $75;__label__ = 17; break; //@line 391 "lstrlib.c"
    case 17: 
      var $77; //@line 391 "lstrlib.c"
      $previous=$77; //@line 391 "lstrlib.c"
      var $78=$previous; //@line 392 "lstrlib.c"
      var $79=(($78)&255); //@line 392 "lstrlib.c"
      var $80=$4; //@line 392 "lstrlib.c"
      var $81=$ep; //@line 392 "lstrlib.c"
      var $82=((($81)-(1))|0); //@line 392 "lstrlib.c"
      var $83=__Z17matchbracketclassiPKcS0_($79, $80, $82); //@line 392 "lstrlib.c"
      var $84=(($83)|0)!=0; //@line 392 "lstrlib.c"
      if ($84) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 392 "lstrlib.c"
    case 18: 
      var $86=$3; //@line 393 "lstrlib.c"
      var $87=HEAPU8[($86)]; //@line 393 "lstrlib.c"
      var $88=(($87)&255); //@line 393 "lstrlib.c"
      var $89=$4; //@line 393 "lstrlib.c"
      var $90=$ep; //@line 393 "lstrlib.c"
      var $91=((($90)-(1))|0); //@line 393 "lstrlib.c"
      var $92=__Z17matchbracketclassiPKcS0_($88, $89, $91); //@line 393 "lstrlib.c"
      var $93=(($92)|0)!=0; //@line 393 "lstrlib.c"
      if ($93) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 393 "lstrlib.c"
    case 19: 
      $1=0; //@line 393 "lstrlib.c"
      __label__ = 50; break; //@line 393 "lstrlib.c"
    case 20: 
      var $96=$ep; //@line 394 "lstrlib.c"
      $4=$96; //@line 394 "lstrlib.c"
      __label__ = 3; break; //@line 394 "lstrlib.c"
    case 21: 
      var $98=$4; //@line 397 "lstrlib.c"
      var $99=(($98+1)|0); //@line 397 "lstrlib.c"
      var $100=HEAPU8[($99)]; //@line 397 "lstrlib.c"
      var $101=(($100)&255); //@line 397 "lstrlib.c"
      var $102=_isdigit($101); //@line 397 "lstrlib.c"
      var $103=(($102)|0)!=0; //@line 397 "lstrlib.c"
      if ($103) { __label__ = 22; break; } else { __label__ = 25; break; } //@line 397 "lstrlib.c"
    case 22: 
      var $105=$2; //@line 398 "lstrlib.c"
      var $106=$3; //@line 398 "lstrlib.c"
      var $107=$4; //@line 398 "lstrlib.c"
      var $108=(($107+1)|0); //@line 398 "lstrlib.c"
      var $109=HEAPU8[($108)]; //@line 398 "lstrlib.c"
      var $110=(($109)&255); //@line 398 "lstrlib.c"
      var $111=__Z13match_captureP10MatchStatePKci($105, $106, $110); //@line 398 "lstrlib.c"
      $3=$111; //@line 398 "lstrlib.c"
      var $112=$3; //@line 399 "lstrlib.c"
      var $113=(($112)|0)==0; //@line 399 "lstrlib.c"
      if ($113) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 399 "lstrlib.c"
    case 23: 
      $1=0; //@line 399 "lstrlib.c"
      __label__ = 50; break; //@line 399 "lstrlib.c"
    case 24: 
      var $116=$4; //@line 400 "lstrlib.c"
      var $117=(($116+2)|0); //@line 400 "lstrlib.c"
      $4=$117; //@line 400 "lstrlib.c"
      __label__ = 3; break; //@line 400 "lstrlib.c"
    case 25: 
      __label__ = 34; break; //@line 402 "lstrlib.c"
    case 26: 
      var $120=$3; //@line 407 "lstrlib.c"
      $1=$120; //@line 407 "lstrlib.c"
      __label__ = 50; break; //@line 407 "lstrlib.c"
    case 27: 
      var $122=$4; //@line 410 "lstrlib.c"
      var $123=(($122+1)|0); //@line 410 "lstrlib.c"
      var $124=HEAP8[($123)]; //@line 410 "lstrlib.c"
      var $125=(($124 << 24) >> 24); //@line 410 "lstrlib.c"
      var $126=(($125)|0)==0; //@line 410 "lstrlib.c"
      if ($126) { __label__ = 28; break; } else { __label__ = 32; break; } //@line 410 "lstrlib.c"
    case 28: 
      var $128=$3; //@line 411 "lstrlib.c"
      var $129=$2; //@line 411 "lstrlib.c"
      var $130=(($129+4)|0); //@line 411 "lstrlib.c"
      var $131=HEAP32[(($130)>>2)]; //@line 411 "lstrlib.c"
      var $132=(($128)|0)==(($131)|0); //@line 411 "lstrlib.c"
      if ($132) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 411 "lstrlib.c"
    case 29: 
      var $134=$3; //@line 411 "lstrlib.c"
      var $137 = $134;__label__ = 31; break; //@line 411 "lstrlib.c"
    case 30: 
      var $137 = 0;__label__ = 31; break; //@line 411 "lstrlib.c"
    case 31: 
      var $137; //@line 411 "lstrlib.c"
      $1=$137; //@line 411 "lstrlib.c"
      __label__ = 50; break; //@line 411 "lstrlib.c"
    case 32: 
      __label__ = 34; break; //@line 412 "lstrlib.c"
    case 33: 
      __label__ = 34; break; //@line 413 "lstrlib.c"
    case 34: 
      var $141=$2; //@line 415 "lstrlib.c"
      var $142=$4; //@line 415 "lstrlib.c"
      var $143=__Z8classendP10MatchStatePKc($141, $142); //@line 415 "lstrlib.c"
      $ep1=$143; //@line 415 "lstrlib.c"
      var $144=$3; //@line 416 "lstrlib.c"
      var $145=$2; //@line 416 "lstrlib.c"
      var $146=(($145+4)|0); //@line 416 "lstrlib.c"
      var $147=HEAPU32[(($146)>>2)]; //@line 416 "lstrlib.c"
      var $148=(($144)>>>0) < (($147)>>>0); //@line 416 "lstrlib.c"
      if ($148) { __label__ = 35; break; } else { var $158 = 0;__label__ = 36; break; } //@line 416 "lstrlib.c"
    case 35: 
      var $150=$3; //@line 416 "lstrlib.c"
      var $151=HEAPU8[($150)]; //@line 416 "lstrlib.c"
      var $152=(($151)&255); //@line 416 "lstrlib.c"
      var $153=$4; //@line 416 "lstrlib.c"
      var $154=$ep1; //@line 416 "lstrlib.c"
      var $155=__Z11singlematchiPKcS0_($152, $153, $154); //@line 416 "lstrlib.c"
      var $156=(($155)|0)!=0; //@line 416 "lstrlib.c"
      var $158 = $156;__label__ = 36; break; //@line 416 "lstrlib.c"
    case 36: 
      var $158;
      var $159=(($158)&1); //@line 416 "lstrlib.c"
      $m=$159; //@line 416 "lstrlib.c"
      var $160=$ep1; //@line 417 "lstrlib.c"
      var $161=HEAP8[($160)]; //@line 417 "lstrlib.c"
      var $162=(($161 << 24) >> 24); //@line 417 "lstrlib.c"
      if ((($162)|0) == 63) {
        __label__ = 37; break;
      }
      else if ((($162)|0) == 42) {
        __label__ = 41; break;
      }
      else if ((($162)|0) == 43) {
        __label__ = 42; break;
      }
      else if ((($162)|0) == 45) {
        __label__ = 46; break;
      }
      else {
      __label__ = 47; break;
      }
      
    case 37: 
      var $164=$m; //@line 420 "lstrlib.c"
      var $165=(($164)|0)!=0; //@line 420 "lstrlib.c"
      if ($165) { __label__ = 38; break; } else { __label__ = 40; break; } //@line 420 "lstrlib.c"
    case 38: 
      var $167=$2; //@line 420 "lstrlib.c"
      var $168=$3; //@line 420 "lstrlib.c"
      var $169=(($168+1)|0); //@line 420 "lstrlib.c"
      var $170=$ep1; //@line 420 "lstrlib.c"
      var $171=(($170+1)|0); //@line 420 "lstrlib.c"
      var $172=__Z5matchP10MatchStatePKcS2_($167, $169, $171); //@line 420 "lstrlib.c"
      $res=$172; //@line 420 "lstrlib.c"
      var $173=(($172)|0)!=0; //@line 420 "lstrlib.c"
      if ($173) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 420 "lstrlib.c"
    case 39: 
      var $175=$res; //@line 421 "lstrlib.c"
      $1=$175; //@line 421 "lstrlib.c"
      __label__ = 50; break; //@line 421 "lstrlib.c"
    case 40: 
      var $177=$ep1; //@line 422 "lstrlib.c"
      var $178=(($177+1)|0); //@line 422 "lstrlib.c"
      $4=$178; //@line 422 "lstrlib.c"
      __label__ = 3; break; //@line 422 "lstrlib.c"
    case 41: 
      var $180=$2; //@line 425 "lstrlib.c"
      var $181=$3; //@line 425 "lstrlib.c"
      var $182=$4; //@line 425 "lstrlib.c"
      var $183=$ep1; //@line 425 "lstrlib.c"
      var $184=__Z10max_expandP10MatchStatePKcS2_S2_($180, $181, $182, $183); //@line 425 "lstrlib.c"
      $1=$184; //@line 425 "lstrlib.c"
      __label__ = 50; break; //@line 425 "lstrlib.c"
    case 42: 
      var $186=$m; //@line 428 "lstrlib.c"
      var $187=(($186)|0)!=0; //@line 428 "lstrlib.c"
      if ($187) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 428 "lstrlib.c"
    case 43: 
      var $189=$2; //@line 428 "lstrlib.c"
      var $190=$3; //@line 428 "lstrlib.c"
      var $191=(($190+1)|0); //@line 428 "lstrlib.c"
      var $192=$4; //@line 428 "lstrlib.c"
      var $193=$ep1; //@line 428 "lstrlib.c"
      var $194=__Z10max_expandP10MatchStatePKcS2_S2_($189, $191, $192, $193); //@line 428 "lstrlib.c"
      var $197 = $194;__label__ = 45; break; //@line 428 "lstrlib.c"
    case 44: 
      var $197 = 0;__label__ = 45; break; //@line 428 "lstrlib.c"
    case 45: 
      var $197; //@line 428 "lstrlib.c"
      $1=$197; //@line 428 "lstrlib.c"
      __label__ = 50; break; //@line 428 "lstrlib.c"
    case 46: 
      var $199=$2; //@line 431 "lstrlib.c"
      var $200=$3; //@line 431 "lstrlib.c"
      var $201=$4; //@line 431 "lstrlib.c"
      var $202=$ep1; //@line 431 "lstrlib.c"
      var $203=__Z10min_expandP10MatchStatePKcS2_S2_($199, $200, $201, $202); //@line 431 "lstrlib.c"
      $1=$203; //@line 431 "lstrlib.c"
      __label__ = 50; break; //@line 431 "lstrlib.c"
    case 47: 
      var $205=$m; //@line 434 "lstrlib.c"
      var $206=(($205)|0)!=0; //@line 434 "lstrlib.c"
      if ($206) { __label__ = 49; break; } else { __label__ = 48; break; } //@line 434 "lstrlib.c"
    case 48: 
      $1=0; //@line 434 "lstrlib.c"
      __label__ = 50; break; //@line 434 "lstrlib.c"
    case 49: 
      var $209=$3; //@line 435 "lstrlib.c"
      var $210=(($209+1)|0); //@line 435 "lstrlib.c"
      $3=$210; //@line 435 "lstrlib.c"
      var $211=$ep1; //@line 435 "lstrlib.c"
      $4=$211; //@line 435 "lstrlib.c"
      __label__ = 3; break; //@line 435 "lstrlib.c"
    case 50: 
      var $213=$1; //@line 440 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $213; //@line 440 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z5matchP10MatchStatePKcS2_["X"]=1;

function __Z13push_capturesP10MatchStatePKcS2_($ms, $s, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $nlevels;
      $1=$ms;
      $2=$s;
      $3=$e;
      var $4=$1; //@line 487 "lstrlib.c"
      var $5=(($4+12)|0); //@line 487 "lstrlib.c"
      var $6=HEAP32[(($5)>>2)]; //@line 487 "lstrlib.c"
      var $7=(($6)|0)==0; //@line 487 "lstrlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 487 "lstrlib.c"
    case 3: 
      var $9=$2; //@line 487 "lstrlib.c"
      var $10=(($9)|0)!=0; //@line 487 "lstrlib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 487 "lstrlib.c"
    case 4: 
      var $17 = 1;__label__ = 6; break; //@line 487 "lstrlib.c"
    case 5: 
      var $13=$1; //@line 487 "lstrlib.c"
      var $14=(($13+12)|0); //@line 487 "lstrlib.c"
      var $15=HEAP32[(($14)>>2)]; //@line 487 "lstrlib.c"
      var $17 = $15;__label__ = 6; break; //@line 487 "lstrlib.c"
    case 6: 
      var $17; //@line 487 "lstrlib.c"
      $nlevels=$17; //@line 487 "lstrlib.c"
      var $18=$1; //@line 488 "lstrlib.c"
      var $19=(($18+8)|0); //@line 488 "lstrlib.c"
      var $20=HEAP32[(($19)>>2)]; //@line 488 "lstrlib.c"
      var $21=$nlevels; //@line 488 "lstrlib.c"
      _luaL_checkstack($20, $21, ((STRING_TABLE.__str19517)|0)); //@line 488 "lstrlib.c"
      $i=0; //@line 489 "lstrlib.c"
      __label__ = 7; break; //@line 489 "lstrlib.c"
    case 7: 
      var $23=$i; //@line 489 "lstrlib.c"
      var $24=$nlevels; //@line 489 "lstrlib.c"
      var $25=(($23)|0) < (($24)|0); //@line 489 "lstrlib.c"
      if ($25) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 489 "lstrlib.c"
    case 8: 
      var $27=$1; //@line 490 "lstrlib.c"
      var $28=$i; //@line 490 "lstrlib.c"
      var $29=$2; //@line 490 "lstrlib.c"
      var $30=$3; //@line 490 "lstrlib.c"
      __Z15push_onecaptureP10MatchStateiPKcS2_($27, $28, $29, $30); //@line 490 "lstrlib.c"
      __label__ = 9; break; //@line 490 "lstrlib.c"
    case 9: 
      var $32=$i; //@line 489 "lstrlib.c"
      var $33=((($32)+(1))|0); //@line 489 "lstrlib.c"
      $i=$33; //@line 489 "lstrlib.c"
      __label__ = 7; break; //@line 489 "lstrlib.c"
    case 10: 
      var $35=$nlevels; //@line 491 "lstrlib.c"
      ;
      return $35; //@line 491 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z15push_onecaptureP10MatchStateiPKcS2_($ms, $i, $s, $e) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l;
      $1=$ms;
      $2=$i;
      $3=$s;
      $4=$e;
      var $5=$2; //@line 468 "lstrlib.c"
      var $6=$1; //@line 468 "lstrlib.c"
      var $7=(($6+12)|0); //@line 468 "lstrlib.c"
      var $8=HEAP32[(($7)>>2)]; //@line 468 "lstrlib.c"
      var $9=(($5)|0) >= (($8)|0); //@line 468 "lstrlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 468 "lstrlib.c"
    case 3: 
      var $11=$2; //@line 469 "lstrlib.c"
      var $12=(($11)|0)==0; //@line 469 "lstrlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 469 "lstrlib.c"
    case 4: 
      var $14=$1; //@line 470 "lstrlib.c"
      var $15=(($14+8)|0); //@line 470 "lstrlib.c"
      var $16=HEAP32[(($15)>>2)]; //@line 470 "lstrlib.c"
      var $17=$3; //@line 470 "lstrlib.c"
      var $18=$4; //@line 470 "lstrlib.c"
      var $19=$3; //@line 470 "lstrlib.c"
      var $20=$18; //@line 470 "lstrlib.c"
      var $21=$19; //@line 470 "lstrlib.c"
      var $22=((($20)-($21))|0); //@line 470 "lstrlib.c"
      _lua_pushlstring($16, $17, $22); //@line 470 "lstrlib.c"
      __label__ = 6; break; //@line 470 "lstrlib.c"
    case 5: 
      var $24=$1; //@line 472 "lstrlib.c"
      var $25=(($24+8)|0); //@line 472 "lstrlib.c"
      var $26=HEAP32[(($25)>>2)]; //@line 472 "lstrlib.c"
      var $27=_luaL_error($26, ((STRING_TABLE.__str20518)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 472 "lstrlib.c"
      __label__ = 6; break; //@line 472 "lstrlib.c"
    case 6: 
      __label__ = 13; break; //@line 473 "lstrlib.c"
    case 7: 
      var $30=$2; //@line 475 "lstrlib.c"
      var $31=$1; //@line 475 "lstrlib.c"
      var $32=(($31+16)|0); //@line 475 "lstrlib.c"
      var $33=(($32+($30<<3))|0); //@line 475 "lstrlib.c"
      var $34=(($33+4)|0); //@line 475 "lstrlib.c"
      var $35=HEAP32[(($34)>>2)]; //@line 475 "lstrlib.c"
      $l=$35; //@line 475 "lstrlib.c"
      var $36=$l; //@line 476 "lstrlib.c"
      var $37=(($36)|0)==-1; //@line 476 "lstrlib.c"
      if ($37) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 476 "lstrlib.c"
    case 8: 
      var $39=$1; //@line 476 "lstrlib.c"
      var $40=(($39+8)|0); //@line 476 "lstrlib.c"
      var $41=HEAP32[(($40)>>2)]; //@line 476 "lstrlib.c"
      var $42=_luaL_error($41, ((STRING_TABLE.__str21519)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 476 "lstrlib.c"
      __label__ = 9; break; //@line 476 "lstrlib.c"
    case 9: 
      var $44=$l; //@line 477 "lstrlib.c"
      var $45=(($44)|0)==-2; //@line 477 "lstrlib.c"
      if ($45) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 477 "lstrlib.c"
    case 10: 
      var $47=$1; //@line 478 "lstrlib.c"
      var $48=(($47+8)|0); //@line 478 "lstrlib.c"
      var $49=HEAP32[(($48)>>2)]; //@line 478 "lstrlib.c"
      var $50=$2; //@line 478 "lstrlib.c"
      var $51=$1; //@line 478 "lstrlib.c"
      var $52=(($51+16)|0); //@line 478 "lstrlib.c"
      var $53=(($52+($50<<3))|0); //@line 478 "lstrlib.c"
      var $54=(($53)|0); //@line 478 "lstrlib.c"
      var $55=HEAP32[(($54)>>2)]; //@line 478 "lstrlib.c"
      var $56=$1; //@line 478 "lstrlib.c"
      var $57=(($56)|0); //@line 478 "lstrlib.c"
      var $58=HEAP32[(($57)>>2)]; //@line 478 "lstrlib.c"
      var $59=$55; //@line 478 "lstrlib.c"
      var $60=$58; //@line 478 "lstrlib.c"
      var $61=((($59)-($60))|0); //@line 478 "lstrlib.c"
      var $62=((($61)+(1))|0); //@line 478 "lstrlib.c"
      _lua_pushinteger($49, $62); //@line 478 "lstrlib.c"
      __label__ = 12; break; //@line 478 "lstrlib.c"
    case 11: 
      var $64=$1; //@line 480 "lstrlib.c"
      var $65=(($64+8)|0); //@line 480 "lstrlib.c"
      var $66=HEAP32[(($65)>>2)]; //@line 480 "lstrlib.c"
      var $67=$2; //@line 480 "lstrlib.c"
      var $68=$1; //@line 480 "lstrlib.c"
      var $69=(($68+16)|0); //@line 480 "lstrlib.c"
      var $70=(($69+($67<<3))|0); //@line 480 "lstrlib.c"
      var $71=(($70)|0); //@line 480 "lstrlib.c"
      var $72=HEAP32[(($71)>>2)]; //@line 480 "lstrlib.c"
      var $73=$l; //@line 480 "lstrlib.c"
      _lua_pushlstring($66, $72, $73); //@line 480 "lstrlib.c"
      __label__ = 12; break; //@line 480 "lstrlib.c"
    case 12: 
      __label__ = 13; break; //@line 481 "lstrlib.c"
    case 13: 
      STACKTOP = __stackBase__;
      return; //@line 482 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z15push_onecaptureP10MatchStateiPKcS2_["X"]=1;

function __Z13start_captureP10MatchStatePKcS2_i($ms, $s, $p, $what) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      var $level;
      $1=$ms;
      $2=$s;
      $3=$p;
      $4=$what;
      var $5=$1; //@line 332 "lstrlib.c"
      var $6=(($5+12)|0); //@line 332 "lstrlib.c"
      var $7=HEAP32[(($6)>>2)]; //@line 332 "lstrlib.c"
      $level=$7; //@line 332 "lstrlib.c"
      var $8=$level; //@line 333 "lstrlib.c"
      var $9=(($8)|0) >= 32; //@line 333 "lstrlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 333 "lstrlib.c"
    case 3: 
      var $11=$1; //@line 333 "lstrlib.c"
      var $12=(($11+8)|0); //@line 333 "lstrlib.c"
      var $13=HEAP32[(($12)>>2)]; //@line 333 "lstrlib.c"
      var $14=_luaL_error($13, ((STRING_TABLE.__str19517)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 333 "lstrlib.c"
      __label__ = 4; break; //@line 333 "lstrlib.c"
    case 4: 
      var $16=$2; //@line 334 "lstrlib.c"
      var $17=$level; //@line 334 "lstrlib.c"
      var $18=$1; //@line 334 "lstrlib.c"
      var $19=(($18+16)|0); //@line 334 "lstrlib.c"
      var $20=(($19+($17<<3))|0); //@line 334 "lstrlib.c"
      var $21=(($20)|0); //@line 334 "lstrlib.c"
      HEAP32[(($21)>>2)]=$16; //@line 334 "lstrlib.c"
      var $22=$4; //@line 335 "lstrlib.c"
      var $23=$level; //@line 335 "lstrlib.c"
      var $24=$1; //@line 335 "lstrlib.c"
      var $25=(($24+16)|0); //@line 335 "lstrlib.c"
      var $26=(($25+($23<<3))|0); //@line 335 "lstrlib.c"
      var $27=(($26+4)|0); //@line 335 "lstrlib.c"
      HEAP32[(($27)>>2)]=$22; //@line 335 "lstrlib.c"
      var $28=$level; //@line 336 "lstrlib.c"
      var $29=((($28)+(1))|0); //@line 336 "lstrlib.c"
      var $30=$1; //@line 336 "lstrlib.c"
      var $31=(($30+12)|0); //@line 336 "lstrlib.c"
      HEAP32[(($31)>>2)]=$29; //@line 336 "lstrlib.c"
      var $32=$1; //@line 337 "lstrlib.c"
      var $33=$2; //@line 337 "lstrlib.c"
      var $34=$3; //@line 337 "lstrlib.c"
      var $35=__Z5matchP10MatchStatePKcS2_($32, $33, $34); //@line 337 "lstrlib.c"
      $res=$35; //@line 337 "lstrlib.c"
      var $36=(($35)|0)==0; //@line 337 "lstrlib.c"
      if ($36) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 337 "lstrlib.c"
    case 5: 
      var $38=$1; //@line 338 "lstrlib.c"
      var $39=(($38+12)|0); //@line 338 "lstrlib.c"
      var $40=HEAP32[(($39)>>2)]; //@line 338 "lstrlib.c"
      var $41=((($40)-(1))|0); //@line 338 "lstrlib.c"
      HEAP32[(($39)>>2)]=$41; //@line 338 "lstrlib.c"
      __label__ = 6; break; //@line 338 "lstrlib.c"
    case 6: 
      var $43=$res; //@line 339 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $43; //@line 339 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z13start_captureP10MatchStatePKcS2_i["X"]=1;

function __Z11end_captureP10MatchStatePKcS2_($ms, $s, $p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      var $res;
      $1=$ms;
      $2=$s;
      $3=$p;
      var $4=$1; //@line 345 "lstrlib.c"
      var $5=__Z16capture_to_closeP10MatchState($4); //@line 345 "lstrlib.c"
      $l=$5; //@line 345 "lstrlib.c"
      var $6=$2; //@line 347 "lstrlib.c"
      var $7=$l; //@line 347 "lstrlib.c"
      var $8=$1; //@line 347 "lstrlib.c"
      var $9=(($8+16)|0); //@line 347 "lstrlib.c"
      var $10=(($9+($7<<3))|0); //@line 347 "lstrlib.c"
      var $11=(($10)|0); //@line 347 "lstrlib.c"
      var $12=HEAP32[(($11)>>2)]; //@line 347 "lstrlib.c"
      var $13=$6; //@line 347 "lstrlib.c"
      var $14=$12; //@line 347 "lstrlib.c"
      var $15=((($13)-($14))|0); //@line 347 "lstrlib.c"
      var $16=$l; //@line 347 "lstrlib.c"
      var $17=$1; //@line 347 "lstrlib.c"
      var $18=(($17+16)|0); //@line 347 "lstrlib.c"
      var $19=(($18+($16<<3))|0); //@line 347 "lstrlib.c"
      var $20=(($19+4)|0); //@line 347 "lstrlib.c"
      HEAP32[(($20)>>2)]=$15; //@line 347 "lstrlib.c"
      var $21=$1; //@line 348 "lstrlib.c"
      var $22=$2; //@line 348 "lstrlib.c"
      var $23=$3; //@line 348 "lstrlib.c"
      var $24=__Z5matchP10MatchStatePKcS2_($21, $22, $23); //@line 348 "lstrlib.c"
      $res=$24; //@line 348 "lstrlib.c"
      var $25=(($24)|0)==0; //@line 348 "lstrlib.c"
      if ($25) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 348 "lstrlib.c"
    case 3: 
      var $27=$l; //@line 349 "lstrlib.c"
      var $28=$1; //@line 349 "lstrlib.c"
      var $29=(($28+16)|0); //@line 349 "lstrlib.c"
      var $30=(($29+($27<<3))|0); //@line 349 "lstrlib.c"
      var $31=(($30+4)|0); //@line 349 "lstrlib.c"
      HEAP32[(($31)>>2)]=-1; //@line 349 "lstrlib.c"
      __label__ = 4; break; //@line 349 "lstrlib.c"
    case 4: 
      var $33=$res; //@line 350 "lstrlib.c"
      ;
      return $33; //@line 350 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12matchbalanceP10MatchStatePKcS2_($ms, $s, $p) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $b;
      var $e;
      var $cont;
      $2=$ms;
      $3=$s;
      $4=$p;
      var $5=$4; //@line 283 "lstrlib.c"
      var $6=HEAP8[($5)]; //@line 283 "lstrlib.c"
      var $7=(($6 << 24) >> 24); //@line 283 "lstrlib.c"
      var $8=(($7)|0)==0; //@line 283 "lstrlib.c"
      if ($8) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 283 "lstrlib.c"
    case 3: 
      var $10=$4; //@line 283 "lstrlib.c"
      var $11=(($10+1)|0); //@line 283 "lstrlib.c"
      var $12=HEAP8[($11)]; //@line 283 "lstrlib.c"
      var $13=(($12 << 24) >> 24); //@line 283 "lstrlib.c"
      var $14=(($13)|0)==0; //@line 283 "lstrlib.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 283 "lstrlib.c"
    case 4: 
      var $16=$2; //@line 284 "lstrlib.c"
      var $17=(($16+8)|0); //@line 284 "lstrlib.c"
      var $18=HEAP32[(($17)>>2)]; //@line 284 "lstrlib.c"
      var $19=_luaL_error($18, ((STRING_TABLE.__str25523)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 284 "lstrlib.c"
      __label__ = 5; break; //@line 284 "lstrlib.c"
    case 5: 
      var $21=$3; //@line 285 "lstrlib.c"
      var $22=HEAP8[($21)]; //@line 285 "lstrlib.c"
      var $23=(($22 << 24) >> 24); //@line 285 "lstrlib.c"
      var $24=$4; //@line 285 "lstrlib.c"
      var $25=HEAP8[($24)]; //@line 285 "lstrlib.c"
      var $26=(($25 << 24) >> 24); //@line 285 "lstrlib.c"
      var $27=(($23)|0)!=(($26)|0); //@line 285 "lstrlib.c"
      if ($27) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 285 "lstrlib.c"
    case 6: 
      $1=0; //@line 285 "lstrlib.c"
      __label__ = 19; break; //@line 285 "lstrlib.c"
    case 7: 
      var $30=$4; //@line 287 "lstrlib.c"
      var $31=HEAP8[($30)]; //@line 287 "lstrlib.c"
      var $32=(($31 << 24) >> 24); //@line 287 "lstrlib.c"
      $b=$32; //@line 287 "lstrlib.c"
      var $33=$4; //@line 288 "lstrlib.c"
      var $34=(($33+1)|0); //@line 288 "lstrlib.c"
      var $35=HEAP8[($34)]; //@line 288 "lstrlib.c"
      var $36=(($35 << 24) >> 24); //@line 288 "lstrlib.c"
      $e=$36; //@line 288 "lstrlib.c"
      $cont=1; //@line 289 "lstrlib.c"
      __label__ = 8; break; //@line 290 "lstrlib.c"
    case 8: 
      var $38=$3; //@line 290 "lstrlib.c"
      var $39=(($38+1)|0); //@line 290 "lstrlib.c"
      $3=$39; //@line 290 "lstrlib.c"
      var $40=$2; //@line 290 "lstrlib.c"
      var $41=(($40+4)|0); //@line 290 "lstrlib.c"
      var $42=HEAPU32[(($41)>>2)]; //@line 290 "lstrlib.c"
      var $43=(($39)>>>0) < (($42)>>>0); //@line 290 "lstrlib.c"
      if ($43) { __label__ = 9; break; } else { __label__ = 17; break; } //@line 290 "lstrlib.c"
    case 9: 
      var $45=$3; //@line 291 "lstrlib.c"
      var $46=HEAP8[($45)]; //@line 291 "lstrlib.c"
      var $47=(($46 << 24) >> 24); //@line 291 "lstrlib.c"
      var $48=$e; //@line 291 "lstrlib.c"
      var $49=(($47)|0)==(($48)|0); //@line 291 "lstrlib.c"
      if ($49) { __label__ = 10; break; } else { __label__ = 13; break; } //@line 291 "lstrlib.c"
    case 10: 
      var $51=$cont; //@line 292 "lstrlib.c"
      var $52=((($51)-(1))|0); //@line 292 "lstrlib.c"
      $cont=$52; //@line 292 "lstrlib.c"
      var $53=(($52)|0)==0; //@line 292 "lstrlib.c"
      if ($53) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 292 "lstrlib.c"
    case 11: 
      var $55=$3; //@line 292 "lstrlib.c"
      var $56=(($55+1)|0); //@line 292 "lstrlib.c"
      $1=$56; //@line 292 "lstrlib.c"
      __label__ = 19; break; //@line 292 "lstrlib.c"
    case 12: 
      __label__ = 16; break; //@line 293 "lstrlib.c"
    case 13: 
      var $59=$3; //@line 294 "lstrlib.c"
      var $60=HEAP8[($59)]; //@line 294 "lstrlib.c"
      var $61=(($60 << 24) >> 24); //@line 294 "lstrlib.c"
      var $62=$b; //@line 294 "lstrlib.c"
      var $63=(($61)|0)==(($62)|0); //@line 294 "lstrlib.c"
      if ($63) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 294 "lstrlib.c"
    case 14: 
      var $65=$cont; //@line 294 "lstrlib.c"
      var $66=((($65)+(1))|0); //@line 294 "lstrlib.c"
      $cont=$66; //@line 294 "lstrlib.c"
      __label__ = 15; break; //@line 294 "lstrlib.c"
    case 15: 
      __label__ = 16; break; //@line 294 "lstrlib.c"
    case 16: 
      __label__ = 8; break; //@line 295 "lstrlib.c"
    case 17: 
      __label__ = 18; break; //@line 296 "lstrlib.c"
    case 18: 
      $1=0; //@line 297 "lstrlib.c"
      __label__ = 19; break; //@line 297 "lstrlib.c"
    case 19: 
      var $72=$1; //@line 298 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $72; //@line 298 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12matchbalanceP10MatchStatePKcS2_["X"]=1;

function __Z8classendP10MatchStatePKc($ms, $p) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$p;
      var $4=$3; //@line 203 "lstrlib.c"
      var $5=(($4+1)|0); //@line 203 "lstrlib.c"
      $3=$5; //@line 203 "lstrlib.c"
      var $6=HEAP8[($4)]; //@line 203 "lstrlib.c"
      var $7=(($6 << 24) >> 24); //@line 203 "lstrlib.c"
      if ((($7)|0) == 37) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 91) {
        __label__ = 6; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 3: 
      var $9=$3; //@line 205 "lstrlib.c"
      var $10=HEAP8[($9)]; //@line 205 "lstrlib.c"
      var $11=(($10 << 24) >> 24); //@line 205 "lstrlib.c"
      var $12=(($11)|0)==0; //@line 205 "lstrlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 205 "lstrlib.c"
    case 4: 
      var $14=$2; //@line 206 "lstrlib.c"
      var $15=(($14+8)|0); //@line 206 "lstrlib.c"
      var $16=HEAP32[(($15)>>2)]; //@line 206 "lstrlib.c"
      var $17=_luaL_error($16, ((STRING_TABLE.__str23521)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 206 "lstrlib.c"
      __label__ = 5; break; //@line 206 "lstrlib.c"
    case 5: 
      var $19=$3; //@line 207 "lstrlib.c"
      var $20=(($19+1)|0); //@line 207 "lstrlib.c"
      $1=$20; //@line 207 "lstrlib.c"
      __label__ = 18; break; //@line 207 "lstrlib.c"
    case 6: 
      var $22=$3; //@line 210 "lstrlib.c"
      var $23=HEAP8[($22)]; //@line 210 "lstrlib.c"
      var $24=(($23 << 24) >> 24); //@line 210 "lstrlib.c"
      var $25=(($24)|0)==94; //@line 210 "lstrlib.c"
      if ($25) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 210 "lstrlib.c"
    case 7: 
      var $27=$3; //@line 210 "lstrlib.c"
      var $28=(($27+1)|0); //@line 210 "lstrlib.c"
      $3=$28; //@line 210 "lstrlib.c"
      __label__ = 8; break; //@line 210 "lstrlib.c"
    case 8: 
      __label__ = 9; break; //@line 211 "lstrlib.c"
    case 9: 
      var $31=$3; //@line 212 "lstrlib.c"
      var $32=HEAP8[($31)]; //@line 212 "lstrlib.c"
      var $33=(($32 << 24) >> 24); //@line 212 "lstrlib.c"
      var $34=(($33)|0)==0; //@line 212 "lstrlib.c"
      if ($34) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 212 "lstrlib.c"
    case 10: 
      var $36=$2; //@line 213 "lstrlib.c"
      var $37=(($36+8)|0); //@line 213 "lstrlib.c"
      var $38=HEAP32[(($37)>>2)]; //@line 213 "lstrlib.c"
      var $39=_luaL_error($38, ((STRING_TABLE.__str24522)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 213 "lstrlib.c"
      __label__ = 11; break; //@line 213 "lstrlib.c"
    case 11: 
      var $41=$3; //@line 214 "lstrlib.c"
      var $42=(($41+1)|0); //@line 214 "lstrlib.c"
      $3=$42; //@line 214 "lstrlib.c"
      var $43=HEAP8[($41)]; //@line 214 "lstrlib.c"
      var $44=(($43 << 24) >> 24); //@line 214 "lstrlib.c"
      var $45=(($44)|0)==37; //@line 214 "lstrlib.c"
      if ($45) { __label__ = 12; break; } else { __label__ = 14; break; } //@line 214 "lstrlib.c"
    case 12: 
      var $47=$3; //@line 214 "lstrlib.c"
      var $48=HEAP8[($47)]; //@line 214 "lstrlib.c"
      var $49=(($48 << 24) >> 24); //@line 214 "lstrlib.c"
      var $50=(($49)|0)!=0; //@line 214 "lstrlib.c"
      if ($50) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 214 "lstrlib.c"
    case 13: 
      var $52=$3; //@line 215 "lstrlib.c"
      var $53=(($52+1)|0); //@line 215 "lstrlib.c"
      $3=$53; //@line 215 "lstrlib.c"
      __label__ = 14; break; //@line 215 "lstrlib.c"
    case 14: 
      __label__ = 15; break; //@line 216 "lstrlib.c"
    case 15: 
      var $56=$3; //@line 216 "lstrlib.c"
      var $57=HEAP8[($56)]; //@line 216 "lstrlib.c"
      var $58=(($57 << 24) >> 24); //@line 216 "lstrlib.c"
      var $59=(($58)|0)!=93; //@line 216 "lstrlib.c"
      if ($59) { __label__ = 9; break; } else { __label__ = 16; break; } //@line 216 "lstrlib.c"
    case 16: 
      var $61=$3; //@line 217 "lstrlib.c"
      var $62=(($61+1)|0); //@line 217 "lstrlib.c"
      $1=$62; //@line 217 "lstrlib.c"
      __label__ = 18; break; //@line 217 "lstrlib.c"
    case 17: 
      var $64=$3; //@line 220 "lstrlib.c"
      $1=$64; //@line 220 "lstrlib.c"
      __label__ = 18; break; //@line 220 "lstrlib.c"
    case 18: 
      var $66=$1; //@line 223 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $66; //@line 223 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8classendP10MatchStatePKc["X"]=1;

function __Z17matchbracketclassiPKcS0_($c, $p, $ec) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sig;
      $2=$c;
      $3=$p;
      $4=$ec;
      $sig=1; //@line 246 "lstrlib.c"
      var $5=$3; //@line 247 "lstrlib.c"
      var $6=(($5+1)|0); //@line 247 "lstrlib.c"
      var $7=HEAP8[($6)]; //@line 247 "lstrlib.c"
      var $8=(($7 << 24) >> 24); //@line 247 "lstrlib.c"
      var $9=(($8)|0)==94; //@line 247 "lstrlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 247 "lstrlib.c"
    case 3: 
      $sig=0; //@line 248 "lstrlib.c"
      var $11=$3; //@line 249 "lstrlib.c"
      var $12=(($11+1)|0); //@line 249 "lstrlib.c"
      $3=$12; //@line 249 "lstrlib.c"
      __label__ = 4; break; //@line 250 "lstrlib.c"
    case 4: 
      __label__ = 5; break; //@line 251 "lstrlib.c"
    case 5: 
      var $15=$3; //@line 251 "lstrlib.c"
      var $16=(($15+1)|0); //@line 251 "lstrlib.c"
      $3=$16; //@line 251 "lstrlib.c"
      var $17=$4; //@line 251 "lstrlib.c"
      var $18=(($16)>>>0) < (($17)>>>0); //@line 251 "lstrlib.c"
      if ($18) { __label__ = 6; break; } else { __label__ = 21; break; } //@line 251 "lstrlib.c"
    case 6: 
      var $20=$3; //@line 252 "lstrlib.c"
      var $21=HEAP8[($20)]; //@line 252 "lstrlib.c"
      var $22=(($21 << 24) >> 24); //@line 252 "lstrlib.c"
      var $23=(($22)|0)==37; //@line 252 "lstrlib.c"
      if ($23) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 252 "lstrlib.c"
    case 7: 
      var $25=$3; //@line 253 "lstrlib.c"
      var $26=(($25+1)|0); //@line 253 "lstrlib.c"
      $3=$26; //@line 253 "lstrlib.c"
      var $27=$2; //@line 254 "lstrlib.c"
      var $28=$3; //@line 254 "lstrlib.c"
      var $29=HEAPU8[($28)]; //@line 254 "lstrlib.c"
      var $30=(($29)&255); //@line 254 "lstrlib.c"
      var $31=__Z11match_classii($27, $30); //@line 254 "lstrlib.c"
      var $32=(($31)|0)!=0; //@line 254 "lstrlib.c"
      if ($32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 254 "lstrlib.c"
    case 8: 
      var $34=$sig; //@line 255 "lstrlib.c"
      $1=$34; //@line 255 "lstrlib.c"
      __label__ = 22; break; //@line 255 "lstrlib.c"
    case 9: 
      __label__ = 20; break; //@line 256 "lstrlib.c"
    case 10: 
      var $37=$3; //@line 257 "lstrlib.c"
      var $38=(($37+1)|0); //@line 257 "lstrlib.c"
      var $39=HEAP8[($38)]; //@line 257 "lstrlib.c"
      var $40=(($39 << 24) >> 24); //@line 257 "lstrlib.c"
      var $41=(($40)|0)==45; //@line 257 "lstrlib.c"
      if ($41) { __label__ = 11; break; } else { __label__ = 16; break; } //@line 257 "lstrlib.c"
    case 11: 
      var $43=$3; //@line 257 "lstrlib.c"
      var $44=(($43+2)|0); //@line 257 "lstrlib.c"
      var $45=$4; //@line 257 "lstrlib.c"
      var $46=(($44)>>>0) < (($45)>>>0); //@line 257 "lstrlib.c"
      if ($46) { __label__ = 12; break; } else { __label__ = 16; break; } //@line 257 "lstrlib.c"
    case 12: 
      var $48=$3; //@line 258 "lstrlib.c"
      var $49=(($48+2)|0); //@line 258 "lstrlib.c"
      $3=$49; //@line 258 "lstrlib.c"
      var $50=$3; //@line 259 "lstrlib.c"
      var $51=((($50)-(2))|0); //@line 259 "lstrlib.c"
      var $52=HEAPU8[($51)]; //@line 259 "lstrlib.c"
      var $53=(($52)&255); //@line 259 "lstrlib.c"
      var $54=$2; //@line 259 "lstrlib.c"
      var $55=(($53)|0) <= (($54)|0); //@line 259 "lstrlib.c"
      if ($55) { __label__ = 13; break; } else { __label__ = 15; break; } //@line 259 "lstrlib.c"
    case 13: 
      var $57=$2; //@line 259 "lstrlib.c"
      var $58=$3; //@line 259 "lstrlib.c"
      var $59=HEAPU8[($58)]; //@line 259 "lstrlib.c"
      var $60=(($59)&255); //@line 259 "lstrlib.c"
      var $61=(($57)|0) <= (($60)|0); //@line 259 "lstrlib.c"
      if ($61) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 259 "lstrlib.c"
    case 14: 
      var $63=$sig; //@line 260 "lstrlib.c"
      $1=$63; //@line 260 "lstrlib.c"
      __label__ = 22; break; //@line 260 "lstrlib.c"
    case 15: 
      __label__ = 19; break; //@line 261 "lstrlib.c"
    case 16: 
      var $66=$3; //@line 262 "lstrlib.c"
      var $67=HEAPU8[($66)]; //@line 262 "lstrlib.c"
      var $68=(($67)&255); //@line 262 "lstrlib.c"
      var $69=$2; //@line 262 "lstrlib.c"
      var $70=(($68)|0)==(($69)|0); //@line 262 "lstrlib.c"
      if ($70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 262 "lstrlib.c"
    case 17: 
      var $72=$sig; //@line 262 "lstrlib.c"
      $1=$72; //@line 262 "lstrlib.c"
      __label__ = 22; break; //@line 262 "lstrlib.c"
    case 18: 
      __label__ = 19; break; //@line 262 "lstrlib.c"
    case 19: 
      __label__ = 20; break; //@line 262 "lstrlib.c"
    case 20: 
      __label__ = 5; break; //@line 263 "lstrlib.c"
    case 21: 
      var $77=$sig; //@line 264 "lstrlib.c"
      var $78=(($77)|0)!=0; //@line 264 "lstrlib.c"
      var $79=$78 ^ 1; //@line 264 "lstrlib.c"
      var $80=(($79)&1); //@line 264 "lstrlib.c"
      $1=$80; //@line 264 "lstrlib.c"
      __label__ = 22; break; //@line 264 "lstrlib.c"
    case 22: 
      var $82=$1; //@line 265 "lstrlib.c"
      ;
      return $82; //@line 265 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z17matchbracketclassiPKcS0_["X"]=1;

function __Z13match_captureP10MatchStatePKci($ms, $s, $l) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $len;
      $2=$ms;
      $3=$s;
      $4=$l;
      var $5=$2; //@line 356 "lstrlib.c"
      var $6=$4; //@line 356 "lstrlib.c"
      var $7=__Z13check_captureP10MatchStatei($5, $6); //@line 356 "lstrlib.c"
      $4=$7; //@line 356 "lstrlib.c"
      var $8=$4; //@line 357 "lstrlib.c"
      var $9=$2; //@line 357 "lstrlib.c"
      var $10=(($9+16)|0); //@line 357 "lstrlib.c"
      var $11=(($10+($8<<3))|0); //@line 357 "lstrlib.c"
      var $12=(($11+4)|0); //@line 357 "lstrlib.c"
      var $13=HEAP32[(($12)>>2)]; //@line 357 "lstrlib.c"
      $len=$13; //@line 357 "lstrlib.c"
      var $14=$2; //@line 358 "lstrlib.c"
      var $15=(($14+4)|0); //@line 358 "lstrlib.c"
      var $16=HEAP32[(($15)>>2)]; //@line 358 "lstrlib.c"
      var $17=$3; //@line 358 "lstrlib.c"
      var $18=$16; //@line 358 "lstrlib.c"
      var $19=$17; //@line 358 "lstrlib.c"
      var $20=((($18)-($19))|0); //@line 358 "lstrlib.c"
      var $21=$len; //@line 358 "lstrlib.c"
      var $22=(($20)>>>0) >= (($21)>>>0); //@line 358 "lstrlib.c"
      if ($22) { __label__ = 3; break; } else { __label__ = 5; break; } //@line 358 "lstrlib.c"
    case 3: 
      var $24=$4; //@line 359 "lstrlib.c"
      var $25=$2; //@line 359 "lstrlib.c"
      var $26=(($25+16)|0); //@line 359 "lstrlib.c"
      var $27=(($26+($24<<3))|0); //@line 359 "lstrlib.c"
      var $28=(($27)|0); //@line 359 "lstrlib.c"
      var $29=HEAP32[(($28)>>2)]; //@line 359 "lstrlib.c"
      var $30=$3; //@line 359 "lstrlib.c"
      var $31=$len; //@line 359 "lstrlib.c"
      var $32=_memcmp($29, $30, $31); //@line 359 "lstrlib.c"
      var $33=(($32)|0)==0; //@line 359 "lstrlib.c"
      if ($33) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 359 "lstrlib.c"
    case 4: 
      var $35=$3; //@line 360 "lstrlib.c"
      var $36=$len; //@line 360 "lstrlib.c"
      var $37=(($35+$36)|0); //@line 360 "lstrlib.c"
      $1=$37; //@line 360 "lstrlib.c"
      __label__ = 6; break; //@line 360 "lstrlib.c"
    case 5: 
      $1=0; //@line 361 "lstrlib.c"
      __label__ = 6; break; //@line 361 "lstrlib.c"
    case 6: 
      var $40=$1; //@line 362 "lstrlib.c"
      ;
      return $40; //@line 362 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11singlematchiPKcS0_($c, $p, $ep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      $2=$c;
      $3=$p;
      $4=$ep;
      var $5=$3; //@line 269 "lstrlib.c"
      var $6=HEAP8[($5)]; //@line 269 "lstrlib.c"
      var $7=(($6 << 24) >> 24); //@line 269 "lstrlib.c"
      if ((($7)|0) == 46) {
        __label__ = 3; break;
      }
      else if ((($7)|0) == 37) {
        __label__ = 4; break;
      }
      else if ((($7)|0) == 91) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      $1=1; //@line 270 "lstrlib.c"
      __label__ = 7; break; //@line 270 "lstrlib.c"
    case 4: 
      var $10=$2; //@line 271 "lstrlib.c"
      var $11=$3; //@line 271 "lstrlib.c"
      var $12=(($11+1)|0); //@line 271 "lstrlib.c"
      var $13=HEAPU8[($12)]; //@line 271 "lstrlib.c"
      var $14=(($13)&255); //@line 271 "lstrlib.c"
      var $15=__Z11match_classii($10, $14); //@line 271 "lstrlib.c"
      $1=$15; //@line 271 "lstrlib.c"
      __label__ = 7; break; //@line 271 "lstrlib.c"
    case 5: 
      var $17=$2; //@line 272 "lstrlib.c"
      var $18=$3; //@line 272 "lstrlib.c"
      var $19=$4; //@line 272 "lstrlib.c"
      var $20=((($19)-(1))|0); //@line 272 "lstrlib.c"
      var $21=__Z17matchbracketclassiPKcS0_($17, $18, $20); //@line 272 "lstrlib.c"
      $1=$21; //@line 272 "lstrlib.c"
      __label__ = 7; break; //@line 272 "lstrlib.c"
    case 6: 
      var $23=$3; //@line 273 "lstrlib.c"
      var $24=HEAPU8[($23)]; //@line 273 "lstrlib.c"
      var $25=(($24)&255); //@line 273 "lstrlib.c"
      var $26=$2; //@line 273 "lstrlib.c"
      var $27=(($25)|0)==(($26)|0); //@line 273 "lstrlib.c"
      var $28=(($27)&1); //@line 273 "lstrlib.c"
      $1=$28; //@line 273 "lstrlib.c"
      __label__ = 7; break; //@line 273 "lstrlib.c"
    case 7: 
      var $30=$1; //@line 275 "lstrlib.c"
      ;
      return $30; //@line 275 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10max_expandP10MatchStatePKcS2_S2_($ms, $s, $p, $ep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $i;
      var $res;
      $2=$ms;
      $3=$s;
      $4=$p;
      $5=$ep;
      $i=0; //@line 303 "lstrlib.c"
      __label__ = 3; break; //@line 304 "lstrlib.c"
    case 3: 
      var $7=$3; //@line 304 "lstrlib.c"
      var $8=$i; //@line 304 "lstrlib.c"
      var $9=(($7+$8)|0); //@line 304 "lstrlib.c"
      var $10=$2; //@line 304 "lstrlib.c"
      var $11=(($10+4)|0); //@line 304 "lstrlib.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 304 "lstrlib.c"
      var $13=(($9)>>>0) < (($12)>>>0); //@line 304 "lstrlib.c"
      if ($13) { __label__ = 4; break; } else { var $25 = 0;__label__ = 5; break; } //@line 304 "lstrlib.c"
    case 4: 
      var $15=$3; //@line 304 "lstrlib.c"
      var $16=$i; //@line 304 "lstrlib.c"
      var $17=(($15+$16)|0); //@line 304 "lstrlib.c"
      var $18=HEAPU8[($17)]; //@line 304 "lstrlib.c"
      var $19=(($18)&255); //@line 304 "lstrlib.c"
      var $20=$4; //@line 304 "lstrlib.c"
      var $21=$5; //@line 304 "lstrlib.c"
      var $22=__Z11singlematchiPKcS0_($19, $20, $21); //@line 304 "lstrlib.c"
      var $23=(($22)|0)!=0; //@line 304 "lstrlib.c"
      var $25 = $23;__label__ = 5; break; //@line 304 "lstrlib.c"
    case 5: 
      var $25;
      if ($25) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 304 "lstrlib.c"
    case 6: 
      var $27=$i; //@line 305 "lstrlib.c"
      var $28=((($27)+(1))|0); //@line 305 "lstrlib.c"
      $i=$28; //@line 305 "lstrlib.c"
      __label__ = 3; break; //@line 305 "lstrlib.c"
    case 7: 
      __label__ = 8; break; //@line 307 "lstrlib.c"
    case 8: 
      var $31=$i; //@line 307 "lstrlib.c"
      var $32=(($31)|0) >= 0; //@line 307 "lstrlib.c"
      if ($32) { __label__ = 9; break; } else { __label__ = 12; break; } //@line 307 "lstrlib.c"
    case 9: 
      var $34=$2; //@line 308 "lstrlib.c"
      var $35=$3; //@line 308 "lstrlib.c"
      var $36=$i; //@line 308 "lstrlib.c"
      var $37=(($35+$36)|0); //@line 308 "lstrlib.c"
      var $38=$5; //@line 308 "lstrlib.c"
      var $39=(($38+1)|0); //@line 308 "lstrlib.c"
      var $40=__Z5matchP10MatchStatePKcS2_($34, $37, $39); //@line 308 "lstrlib.c"
      $res=$40; //@line 308 "lstrlib.c"
      var $41=$res; //@line 309 "lstrlib.c"
      var $42=(($41)|0)!=0; //@line 309 "lstrlib.c"
      if ($42) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 309 "lstrlib.c"
    case 10: 
      var $44=$res; //@line 309 "lstrlib.c"
      $1=$44; //@line 309 "lstrlib.c"
      __label__ = 13; break; //@line 309 "lstrlib.c"
    case 11: 
      var $46=$i; //@line 310 "lstrlib.c"
      var $47=((($46)-(1))|0); //@line 310 "lstrlib.c"
      $i=$47; //@line 310 "lstrlib.c"
      __label__ = 8; break; //@line 311 "lstrlib.c"
    case 12: 
      $1=0; //@line 312 "lstrlib.c"
      __label__ = 13; break; //@line 312 "lstrlib.c"
    case 13: 
      var $50=$1; //@line 313 "lstrlib.c"
      ;
      return $50; //@line 313 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10max_expandP10MatchStatePKcS2_S2_["X"]=1;

function __Z10min_expandP10MatchStatePKcS2_S2_($ms, $s, $p, $ep) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $res;
      $2=$ms;
      $3=$s;
      $4=$p;
      $5=$ep;
      __label__ = 3; break; //@line 318 "lstrlib.c"
    case 3: 
      var $7=$2; //@line 319 "lstrlib.c"
      var $8=$3; //@line 319 "lstrlib.c"
      var $9=$5; //@line 319 "lstrlib.c"
      var $10=(($9+1)|0); //@line 319 "lstrlib.c"
      var $11=__Z5matchP10MatchStatePKcS2_($7, $8, $10); //@line 319 "lstrlib.c"
      $res=$11; //@line 319 "lstrlib.c"
      var $12=$res; //@line 320 "lstrlib.c"
      var $13=(($12)|0)!=0; //@line 320 "lstrlib.c"
      if ($13) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 320 "lstrlib.c"
    case 4: 
      var $15=$res; //@line 321 "lstrlib.c"
      $1=$15; //@line 321 "lstrlib.c"
      __label__ = 11; break; //@line 321 "lstrlib.c"
    case 5: 
      var $17=$3; //@line 322 "lstrlib.c"
      var $18=$2; //@line 322 "lstrlib.c"
      var $19=(($18+4)|0); //@line 322 "lstrlib.c"
      var $20=HEAPU32[(($19)>>2)]; //@line 322 "lstrlib.c"
      var $21=(($17)>>>0) < (($20)>>>0); //@line 322 "lstrlib.c"
      if ($21) { __label__ = 6; break; } else { __label__ = 8; break; } //@line 322 "lstrlib.c"
    case 6: 
      var $23=$3; //@line 322 "lstrlib.c"
      var $24=HEAPU8[($23)]; //@line 322 "lstrlib.c"
      var $25=(($24)&255); //@line 322 "lstrlib.c"
      var $26=$4; //@line 322 "lstrlib.c"
      var $27=$5; //@line 322 "lstrlib.c"
      var $28=__Z11singlematchiPKcS0_($25, $26, $27); //@line 322 "lstrlib.c"
      var $29=(($28)|0)!=0; //@line 322 "lstrlib.c"
      if ($29) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 322 "lstrlib.c"
    case 7: 
      var $31=$3; //@line 323 "lstrlib.c"
      var $32=(($31+1)|0); //@line 323 "lstrlib.c"
      $3=$32; //@line 323 "lstrlib.c"
      __label__ = 9; break; //@line 323 "lstrlib.c"
    case 8: 
      $1=0; //@line 324 "lstrlib.c"
      __label__ = 11; break; //@line 324 "lstrlib.c"
    case 9: 
      __label__ = 10; break; //@line 324 "lstrlib.c"
    case 10: 
      __label__ = 3; break; //@line 325 "lstrlib.c"
    case 11: 
      var $37=$1; //@line 326 "lstrlib.c"
      ;
      return $37; //@line 326 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11match_classii($c, $cl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $res;
      $2=$c;
      $3=$cl;
      var $4=$3; //@line 228 "lstrlib.c"
      var $5=_tolower($4); //@line 228 "lstrlib.c"
      if ((($5)|0) == 97) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 99) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 100) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 108) {
        __label__ = 6; break;
      }
      else if ((($5)|0) == 112) {
        __label__ = 7; break;
      }
      else if ((($5)|0) == 115) {
        __label__ = 8; break;
      }
      else if ((($5)|0) == 117) {
        __label__ = 9; break;
      }
      else if ((($5)|0) == 119) {
        __label__ = 10; break;
      }
      else if ((($5)|0) == 120) {
        __label__ = 11; break;
      }
      else if ((($5)|0) == 122) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 3: 
      var $7=$2; //@line 229 "lstrlib.c"
      var $8=_isalpha($7); //@line 229 "lstrlib.c"
      $res=$8; //@line 229 "lstrlib.c"
      __label__ = 14; break; //@line 229 "lstrlib.c"
    case 4: 
      var $10=$2; //@line 230 "lstrlib.c"
      var $11=_iscntrl($10); //@line 230 "lstrlib.c"
      $res=$11; //@line 230 "lstrlib.c"
      __label__ = 14; break; //@line 230 "lstrlib.c"
    case 5: 
      var $13=$2; //@line 231 "lstrlib.c"
      var $14=_isdigit($13); //@line 231 "lstrlib.c"
      $res=$14; //@line 231 "lstrlib.c"
      __label__ = 14; break; //@line 231 "lstrlib.c"
    case 6: 
      var $16=$2; //@line 232 "lstrlib.c"
      var $17=_islower($16); //@line 232 "lstrlib.c"
      $res=$17; //@line 232 "lstrlib.c"
      __label__ = 14; break; //@line 232 "lstrlib.c"
    case 7: 
      var $19=$2; //@line 233 "lstrlib.c"
      var $20=_ispunct($19); //@line 233 "lstrlib.c"
      $res=$20; //@line 233 "lstrlib.c"
      __label__ = 14; break; //@line 233 "lstrlib.c"
    case 8: 
      var $22=$2; //@line 234 "lstrlib.c"
      var $23=_isspace($22); //@line 234 "lstrlib.c"
      $res=$23; //@line 234 "lstrlib.c"
      __label__ = 14; break; //@line 234 "lstrlib.c"
    case 9: 
      var $25=$2; //@line 235 "lstrlib.c"
      var $26=_isupper($25); //@line 235 "lstrlib.c"
      $res=$26; //@line 235 "lstrlib.c"
      __label__ = 14; break; //@line 235 "lstrlib.c"
    case 10: 
      var $28=$2; //@line 236 "lstrlib.c"
      var $29=_isalnum($28); //@line 236 "lstrlib.c"
      $res=$29; //@line 236 "lstrlib.c"
      __label__ = 14; break; //@line 236 "lstrlib.c"
    case 11: 
      var $31=$2; //@line 237 "lstrlib.c"
      var $32=_isxdigit($31); //@line 237 "lstrlib.c"
      $res=$32; //@line 237 "lstrlib.c"
      __label__ = 14; break; //@line 237 "lstrlib.c"
    case 12: 
      var $34=$2; //@line 238 "lstrlib.c"
      var $35=(($34)|0)==0; //@line 238 "lstrlib.c"
      var $36=(($35)&1); //@line 238 "lstrlib.c"
      $res=$36; //@line 238 "lstrlib.c"
      __label__ = 14; break; //@line 238 "lstrlib.c"
    case 13: 
      var $38=$3; //@line 239 "lstrlib.c"
      var $39=$2; //@line 239 "lstrlib.c"
      var $40=(($38)|0)==(($39)|0); //@line 239 "lstrlib.c"
      var $41=(($40)&1); //@line 239 "lstrlib.c"
      $1=$41; //@line 239 "lstrlib.c"
      __label__ = 18; break; //@line 239 "lstrlib.c"
    case 14: 
      var $43=$3; //@line 241 "lstrlib.c"
      var $44=_islower($43); //@line 241 "lstrlib.c"
      var $45=(($44)|0)!=0; //@line 241 "lstrlib.c"
      if ($45) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 241 "lstrlib.c"
    case 15: 
      var $47=$res; //@line 241 "lstrlib.c"
      var $54 = $47;__label__ = 17; break; //@line 241 "lstrlib.c"
    case 16: 
      var $49=$res; //@line 241 "lstrlib.c"
      var $50=(($49)|0)!=0; //@line 241 "lstrlib.c"
      var $51=$50 ^ 1; //@line 241 "lstrlib.c"
      var $52=(($51)&1); //@line 241 "lstrlib.c"
      var $54 = $52;__label__ = 17; break; //@line 241 "lstrlib.c"
    case 17: 
      var $54; //@line 241 "lstrlib.c"
      $1=$54; //@line 241 "lstrlib.c"
      __label__ = 18; break; //@line 241 "lstrlib.c"
    case 18: 
      var $56=$1; //@line 242 "lstrlib.c"
      ;
      return $56; //@line 242 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z11match_classii["X"]=1;

function __Z13check_captureP10MatchStatei($ms, $l) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ms;
      $3=$l;
      var $4=$3; //@line 187 "lstrlib.c"
      var $5=((($4)-(49))|0); //@line 187 "lstrlib.c"
      $3=$5; //@line 187 "lstrlib.c"
      var $6=$3; //@line 188 "lstrlib.c"
      var $7=(($6)|0) < 0; //@line 188 "lstrlib.c"
      if ($7) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 188 "lstrlib.c"
    case 3: 
      var $9=$3; //@line 188 "lstrlib.c"
      var $10=$2; //@line 188 "lstrlib.c"
      var $11=(($10+12)|0); //@line 188 "lstrlib.c"
      var $12=HEAP32[(($11)>>2)]; //@line 188 "lstrlib.c"
      var $13=(($9)|0) >= (($12)|0); //@line 188 "lstrlib.c"
      if ($13) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 188 "lstrlib.c"
    case 4: 
      var $15=$3; //@line 188 "lstrlib.c"
      var $16=$2; //@line 188 "lstrlib.c"
      var $17=(($16+16)|0); //@line 188 "lstrlib.c"
      var $18=(($17+($15<<3))|0); //@line 188 "lstrlib.c"
      var $19=(($18+4)|0); //@line 188 "lstrlib.c"
      var $20=HEAP32[(($19)>>2)]; //@line 188 "lstrlib.c"
      var $21=(($20)|0)==-1; //@line 188 "lstrlib.c"
      if ($21) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 188 "lstrlib.c"
    case 5: 
      var $23=$2; //@line 189 "lstrlib.c"
      var $24=(($23+8)|0); //@line 189 "lstrlib.c"
      var $25=HEAP32[(($24)>>2)]; //@line 189 "lstrlib.c"
      var $26=_luaL_error($25, ((STRING_TABLE.__str20518)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 189 "lstrlib.c"
      $1=$26; //@line 189 "lstrlib.c"
      __label__ = 7; break; //@line 189 "lstrlib.c"
    case 6: 
      var $28=$3; //@line 190 "lstrlib.c"
      $1=$28; //@line 190 "lstrlib.c"
      __label__ = 7; break; //@line 190 "lstrlib.c"
    case 7: 
      var $30=$1; //@line 191 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $30; //@line 191 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z16capture_to_closeP10MatchState($ms) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $level;
      $2=$ms;
      var $3=$2; //@line 195 "lstrlib.c"
      var $4=(($3+12)|0); //@line 195 "lstrlib.c"
      var $5=HEAP32[(($4)>>2)]; //@line 195 "lstrlib.c"
      $level=$5; //@line 195 "lstrlib.c"
      var $6=$level; //@line 196 "lstrlib.c"
      var $7=((($6)-(1))|0); //@line 196 "lstrlib.c"
      $level=$7; //@line 196 "lstrlib.c"
      __label__ = 3; break; //@line 196 "lstrlib.c"
    case 3: 
      var $9=$level; //@line 196 "lstrlib.c"
      var $10=(($9)|0) >= 0; //@line 196 "lstrlib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 8; break; } //@line 196 "lstrlib.c"
    case 4: 
      var $12=$level; //@line 197 "lstrlib.c"
      var $13=$2; //@line 197 "lstrlib.c"
      var $14=(($13+16)|0); //@line 197 "lstrlib.c"
      var $15=(($14+($12<<3))|0); //@line 197 "lstrlib.c"
      var $16=(($15+4)|0); //@line 197 "lstrlib.c"
      var $17=HEAP32[(($16)>>2)]; //@line 197 "lstrlib.c"
      var $18=(($17)|0)==-1; //@line 197 "lstrlib.c"
      if ($18) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 197 "lstrlib.c"
    case 5: 
      var $20=$level; //@line 197 "lstrlib.c"
      $1=$20; //@line 197 "lstrlib.c"
      __label__ = 9; break; //@line 197 "lstrlib.c"
    case 6: 
      __label__ = 7; break; //@line 197 "lstrlib.c"
    case 7: 
      var $23=$level; //@line 196 "lstrlib.c"
      var $24=((($23)-(1))|0); //@line 196 "lstrlib.c"
      $level=$24; //@line 196 "lstrlib.c"
      __label__ = 3; break; //@line 196 "lstrlib.c"
    case 8: 
      var $26=$2; //@line 198 "lstrlib.c"
      var $27=(($26+8)|0); //@line 198 "lstrlib.c"
      var $28=HEAP32[(($27)>>2)]; //@line 198 "lstrlib.c"
      var $29=_luaL_error($28, ((STRING_TABLE.__str26524)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 198 "lstrlib.c"
      $1=$29; //@line 198 "lstrlib.c"
      __label__ = 9; break; //@line 198 "lstrlib.c"
    case 9: 
      var $31=$1; //@line 199 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $31; //@line 199 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9add_valueP10MatchStateP11luaL_BufferPKcS4_($ms, $b, $s, $e) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $L;
      var $n;
      $1=$ms;
      $2=$b;
      $3=$s;
      $4=$e;
      var $5=$1; //@line 614 "lstrlib.c"
      var $6=(($5+8)|0); //@line 614 "lstrlib.c"
      var $7=HEAP32[(($6)>>2)]; //@line 614 "lstrlib.c"
      $L=$7; //@line 614 "lstrlib.c"
      var $8=$L; //@line 615 "lstrlib.c"
      var $9=_lua_type($8, 3); //@line 615 "lstrlib.c"
      if ((($9)|0) == 3 || (($9)|0) == 4) {
        __label__ = 3; break;
      }
      else if ((($9)|0) == 6) {
        __label__ = 4; break;
      }
      else if ((($9)|0) == 5) {
        __label__ = 5; break;
      }
      else {
      __label__ = 6; break;
      }
      
    case 3: 
      var $11=$1; //@line 618 "lstrlib.c"
      var $12=$2; //@line 618 "lstrlib.c"
      var $13=$3; //@line 618 "lstrlib.c"
      var $14=$4; //@line 618 "lstrlib.c"
      __Z5add_sP10MatchStateP11luaL_BufferPKcS4_($11, $12, $13, $14); //@line 618 "lstrlib.c"
      __label__ = 12; break; //@line 619 "lstrlib.c"
    case 4: 
      var $16=$L; //@line 623 "lstrlib.c"
      _lua_pushvalue($16, 3); //@line 623 "lstrlib.c"
      var $17=$1; //@line 624 "lstrlib.c"
      var $18=$3; //@line 624 "lstrlib.c"
      var $19=$4; //@line 624 "lstrlib.c"
      var $20=__Z13push_capturesP10MatchStatePKcS2_($17, $18, $19); //@line 624 "lstrlib.c"
      $n=$20; //@line 624 "lstrlib.c"
      var $21=$L; //@line 625 "lstrlib.c"
      var $22=$n; //@line 625 "lstrlib.c"
      _lua_call($21, $22, 1); //@line 625 "lstrlib.c"
      __label__ = 6; break; //@line 626 "lstrlib.c"
    case 5: 
      var $24=$1; //@line 629 "lstrlib.c"
      var $25=$3; //@line 629 "lstrlib.c"
      var $26=$4; //@line 629 "lstrlib.c"
      __Z15push_onecaptureP10MatchStateiPKcS2_($24, 0, $25, $26); //@line 629 "lstrlib.c"
      var $27=$L; //@line 630 "lstrlib.c"
      _lua_gettable($27, 3); //@line 630 "lstrlib.c"
      __label__ = 6; break; //@line 631 "lstrlib.c"
    case 6: 
      var $29=$L; //@line 634 "lstrlib.c"
      var $30=_lua_toboolean($29, -1); //@line 634 "lstrlib.c"
      var $31=(($30)|0)!=0; //@line 634 "lstrlib.c"
      if ($31) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 634 "lstrlib.c"
    case 7: 
      var $33=$L; //@line 635 "lstrlib.c"
      _lua_settop($33, -2); //@line 635 "lstrlib.c"
      var $34=$L; //@line 636 "lstrlib.c"
      var $35=$3; //@line 636 "lstrlib.c"
      var $36=$4; //@line 636 "lstrlib.c"
      var $37=$3; //@line 636 "lstrlib.c"
      var $38=$36; //@line 636 "lstrlib.c"
      var $39=$37; //@line 636 "lstrlib.c"
      var $40=((($38)-($39))|0); //@line 636 "lstrlib.c"
      _lua_pushlstring($34, $35, $40); //@line 636 "lstrlib.c"
      __label__ = 11; break; //@line 637 "lstrlib.c"
    case 8: 
      var $42=$L; //@line 638 "lstrlib.c"
      var $43=_lua_isstring($42, -1); //@line 638 "lstrlib.c"
      var $44=(($43)|0)!=0; //@line 638 "lstrlib.c"
      if ($44) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 638 "lstrlib.c"
    case 9: 
      var $46=$L; //@line 639 "lstrlib.c"
      var $47=$L; //@line 639 "lstrlib.c"
      var $48=$L; //@line 639 "lstrlib.c"
      var $49=_lua_type($48, -1); //@line 639 "lstrlib.c"
      var $50=_lua_typename($47, $49); //@line 639 "lstrlib.c"
      var $51=_luaL_error($46, ((STRING_TABLE.__str28526)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$50,tempInt)); //@line 639 "lstrlib.c"
      __label__ = 10; break; //@line 639 "lstrlib.c"
    case 10: 
      __label__ = 11; break; //@line 639 "lstrlib.c"
    case 11: 
      var $54=$2; //@line 640 "lstrlib.c"
      _luaL_addvalue($54); //@line 640 "lstrlib.c"
      __label__ = 12; break; //@line 641 "lstrlib.c"
    case 12: 
      STACKTOP = __stackBase__;
      return; //@line 641 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9add_valueP10MatchStateP11luaL_BufferPKcS4_["X"]=1;

function __Z5add_sP10MatchStateP11luaL_BufferPKcS4_($ms, $b, $s, $e) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l=__stackBase__;
      var $i;
      var $news;
      $1=$ms;
      $2=$b;
      $3=$s;
      $4=$e;
      var $5=$1; //@line 593 "lstrlib.c"
      var $6=(($5+8)|0); //@line 593 "lstrlib.c"
      var $7=HEAP32[(($6)>>2)]; //@line 593 "lstrlib.c"
      var $8=_lua_tolstring($7, 3, $l); //@line 593 "lstrlib.c"
      $news=$8; //@line 593 "lstrlib.c"
      $i=0; //@line 594 "lstrlib.c"
      __label__ = 3; break; //@line 594 "lstrlib.c"
    case 3: 
      var $10=$i; //@line 594 "lstrlib.c"
      var $11=HEAPU32[(($l)>>2)]; //@line 594 "lstrlib.c"
      var $12=(($10)>>>0) < (($11)>>>0); //@line 594 "lstrlib.c"
      if ($12) { __label__ = 4; break; } else { __label__ = 19; break; } //@line 594 "lstrlib.c"
    case 4: 
      var $14=$i; //@line 595 "lstrlib.c"
      var $15=$news; //@line 595 "lstrlib.c"
      var $16=(($15+$14)|0); //@line 595 "lstrlib.c"
      var $17=HEAP8[($16)]; //@line 595 "lstrlib.c"
      var $18=(($17 << 24) >> 24); //@line 595 "lstrlib.c"
      var $19=(($18)|0)!=37; //@line 595 "lstrlib.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 595 "lstrlib.c"
    case 5: 
      var $21=$2; //@line 596 "lstrlib.c"
      var $22=(($21)|0); //@line 596 "lstrlib.c"
      var $23=HEAPU32[(($22)>>2)]; //@line 596 "lstrlib.c"
      var $24=$2; //@line 596 "lstrlib.c"
      var $25=(($24+12)|0); //@line 596 "lstrlib.c"
      var $26=(($25)|0); //@line 596 "lstrlib.c"
      var $27=(($26+8192)|0); //@line 596 "lstrlib.c"
      var $28=(($23)>>>0) < (($27)>>>0); //@line 596 "lstrlib.c"
      if ($28) { var $34 = 1;__label__ = 7; break; } else { __label__ = 6; break; } //@line 596 "lstrlib.c"
    case 6: 
      var $30=$2; //@line 596 "lstrlib.c"
      var $31=_luaL_prepbuffer($30); //@line 596 "lstrlib.c"
      var $32=(($31)|0)!=0; //@line 596 "lstrlib.c"
      var $34 = $32;__label__ = 7; break; //@line 596 "lstrlib.c"
    case 7: 
      var $34;
      var $35=$i; //@line 596 "lstrlib.c"
      var $36=$news; //@line 596 "lstrlib.c"
      var $37=(($36+$35)|0); //@line 596 "lstrlib.c"
      var $38=HEAP8[($37)]; //@line 596 "lstrlib.c"
      var $39=$2; //@line 596 "lstrlib.c"
      var $40=(($39)|0); //@line 596 "lstrlib.c"
      var $41=HEAP32[(($40)>>2)]; //@line 596 "lstrlib.c"
      var $42=(($41+1)|0); //@line 596 "lstrlib.c"
      HEAP32[(($40)>>2)]=$42; //@line 596 "lstrlib.c"
      HEAP8[($41)]=$38; //@line 596 "lstrlib.c"
      __label__ = 17; break; //@line 596 "lstrlib.c"
    case 8: 
      var $44=$i; //@line 598 "lstrlib.c"
      var $45=((($44)+(1))|0); //@line 598 "lstrlib.c"
      $i=$45; //@line 598 "lstrlib.c"
      var $46=$i; //@line 599 "lstrlib.c"
      var $47=$news; //@line 599 "lstrlib.c"
      var $48=(($47+$46)|0); //@line 599 "lstrlib.c"
      var $49=HEAPU8[($48)]; //@line 599 "lstrlib.c"
      var $50=(($49)&255); //@line 599 "lstrlib.c"
      var $51=_isdigit($50); //@line 599 "lstrlib.c"
      var $52=(($51)|0)!=0; //@line 599 "lstrlib.c"
      if ($52) { __label__ = 12; break; } else { __label__ = 9; break; } //@line 599 "lstrlib.c"
    case 9: 
      var $54=$2; //@line 600 "lstrlib.c"
      var $55=(($54)|0); //@line 600 "lstrlib.c"
      var $56=HEAPU32[(($55)>>2)]; //@line 600 "lstrlib.c"
      var $57=$2; //@line 600 "lstrlib.c"
      var $58=(($57+12)|0); //@line 600 "lstrlib.c"
      var $59=(($58)|0); //@line 600 "lstrlib.c"
      var $60=(($59+8192)|0); //@line 600 "lstrlib.c"
      var $61=(($56)>>>0) < (($60)>>>0); //@line 600 "lstrlib.c"
      if ($61) { var $67 = 1;__label__ = 11; break; } else { __label__ = 10; break; } //@line 600 "lstrlib.c"
    case 10: 
      var $63=$2; //@line 600 "lstrlib.c"
      var $64=_luaL_prepbuffer($63); //@line 600 "lstrlib.c"
      var $65=(($64)|0)!=0; //@line 600 "lstrlib.c"
      var $67 = $65;__label__ = 11; break; //@line 600 "lstrlib.c"
    case 11: 
      var $67;
      var $68=$i; //@line 600 "lstrlib.c"
      var $69=$news; //@line 600 "lstrlib.c"
      var $70=(($69+$68)|0); //@line 600 "lstrlib.c"
      var $71=HEAP8[($70)]; //@line 600 "lstrlib.c"
      var $72=$2; //@line 600 "lstrlib.c"
      var $73=(($72)|0); //@line 600 "lstrlib.c"
      var $74=HEAP32[(($73)>>2)]; //@line 600 "lstrlib.c"
      var $75=(($74+1)|0); //@line 600 "lstrlib.c"
      HEAP32[(($73)>>2)]=$75; //@line 600 "lstrlib.c"
      HEAP8[($74)]=$71; //@line 600 "lstrlib.c"
      __label__ = 16; break; //@line 600 "lstrlib.c"
    case 12: 
      var $77=$i; //@line 601 "lstrlib.c"
      var $78=$news; //@line 601 "lstrlib.c"
      var $79=(($78+$77)|0); //@line 601 "lstrlib.c"
      var $80=HEAP8[($79)]; //@line 601 "lstrlib.c"
      var $81=(($80 << 24) >> 24); //@line 601 "lstrlib.c"
      var $82=(($81)|0)==48; //@line 601 "lstrlib.c"
      if ($82) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 601 "lstrlib.c"
    case 13: 
      var $84=$2; //@line 602 "lstrlib.c"
      var $85=$3; //@line 602 "lstrlib.c"
      var $86=$4; //@line 602 "lstrlib.c"
      var $87=$3; //@line 602 "lstrlib.c"
      var $88=$86; //@line 602 "lstrlib.c"
      var $89=$87; //@line 602 "lstrlib.c"
      var $90=((($88)-($89))|0); //@line 602 "lstrlib.c"
      _luaL_addlstring($84, $85, $90); //@line 602 "lstrlib.c"
      __label__ = 15; break; //@line 602 "lstrlib.c"
    case 14: 
      var $92=$1; //@line 604 "lstrlib.c"
      var $93=$i; //@line 604 "lstrlib.c"
      var $94=$news; //@line 604 "lstrlib.c"
      var $95=(($94+$93)|0); //@line 604 "lstrlib.c"
      var $96=HEAP8[($95)]; //@line 604 "lstrlib.c"
      var $97=(($96 << 24) >> 24); //@line 604 "lstrlib.c"
      var $98=((($97)-(49))|0); //@line 604 "lstrlib.c"
      var $99=$3; //@line 604 "lstrlib.c"
      var $100=$4; //@line 604 "lstrlib.c"
      __Z15push_onecaptureP10MatchStateiPKcS2_($92, $98, $99, $100); //@line 604 "lstrlib.c"
      var $101=$2; //@line 605 "lstrlib.c"
      _luaL_addvalue($101); //@line 605 "lstrlib.c"
      __label__ = 15; break; //@line 606 "lstrlib.c"
    case 15: 
      __label__ = 16; break; //@line 606 "lstrlib.c"
    case 16: 
      __label__ = 17; break; //@line 607 "lstrlib.c"
    case 17: 
      __label__ = 18; break; //@line 608 "lstrlib.c"
    case 18: 
      var $106=$i; //@line 594 "lstrlib.c"
      var $107=((($106)+(1))|0); //@line 594 "lstrlib.c"
      $i=$107; //@line 594 "lstrlib.c"
      __label__ = 3; break; //@line 594 "lstrlib.c"
    case 19: 
      STACKTOP = __stackBase__;
      return; //@line 609 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z5add_sP10MatchStateP11luaL_BufferPKcS4_["X"]=1;

function __Z10gmatch_auxP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 276; _memset(__stackBase__, 0, 276);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $ms=__stackBase__;
      var $ls=(__stackBase__)+(272);
      var $s;
      var $p;
      var $src;
      var $e;
      var $newstart;
      $2=$L;
      var $3=$2; //@line 551 "lstrlib.c"
      var $4=_lua_tolstring($3, -10003, $ls); //@line 551 "lstrlib.c"
      $s=$4; //@line 551 "lstrlib.c"
      var $5=$2; //@line 552 "lstrlib.c"
      var $6=_lua_tolstring($5, -10004, 0); //@line 552 "lstrlib.c"
      $p=$6; //@line 552 "lstrlib.c"
      var $7=$2; //@line 554 "lstrlib.c"
      var $8=(($ms+8)|0); //@line 554 "lstrlib.c"
      HEAP32[(($8)>>2)]=$7; //@line 554 "lstrlib.c"
      var $9=$s; //@line 555 "lstrlib.c"
      var $10=(($ms)|0); //@line 555 "lstrlib.c"
      HEAP32[(($10)>>2)]=$9; //@line 555 "lstrlib.c"
      var $11=$s; //@line 556 "lstrlib.c"
      var $12=HEAP32[(($ls)>>2)]; //@line 556 "lstrlib.c"
      var $13=(($11+$12)|0); //@line 556 "lstrlib.c"
      var $14=(($ms+4)|0); //@line 556 "lstrlib.c"
      HEAP32[(($14)>>2)]=$13; //@line 556 "lstrlib.c"
      var $15=$s; //@line 557 "lstrlib.c"
      var $16=$2; //@line 557 "lstrlib.c"
      var $17=_lua_tointeger($16, -10005); //@line 557 "lstrlib.c"
      var $18=(($15+$17)|0); //@line 557 "lstrlib.c"
      $src=$18; //@line 557 "lstrlib.c"
      __label__ = 3; break; //@line 557 "lstrlib.c"
    case 3: 
      var $20=$src; //@line 557 "lstrlib.c"
      var $21=(($ms+4)|0); //@line 557 "lstrlib.c"
      var $22=HEAPU32[(($21)>>2)]; //@line 557 "lstrlib.c"
      var $23=(($20)>>>0) <= (($22)>>>0); //@line 557 "lstrlib.c"
      if ($23) { __label__ = 4; break; } else { __label__ = 10; break; } //@line 557 "lstrlib.c"
    case 4: 
      var $25=(($ms+12)|0); //@line 561 "lstrlib.c"
      HEAP32[(($25)>>2)]=0; //@line 561 "lstrlib.c"
      var $26=$src; //@line 562 "lstrlib.c"
      var $27=$p; //@line 562 "lstrlib.c"
      var $28=__Z5matchP10MatchStatePKcS2_($ms, $26, $27); //@line 562 "lstrlib.c"
      $e=$28; //@line 562 "lstrlib.c"
      var $29=(($28)|0)!=0; //@line 562 "lstrlib.c"
      if ($29) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 562 "lstrlib.c"
    case 5: 
      var $31=$e; //@line 563 "lstrlib.c"
      var $32=$s; //@line 563 "lstrlib.c"
      var $33=$31; //@line 563 "lstrlib.c"
      var $34=$32; //@line 563 "lstrlib.c"
      var $35=((($33)-($34))|0); //@line 563 "lstrlib.c"
      $newstart=$35; //@line 563 "lstrlib.c"
      var $36=$e; //@line 564 "lstrlib.c"
      var $37=$src; //@line 564 "lstrlib.c"
      var $38=(($36)|0)==(($37)|0); //@line 564 "lstrlib.c"
      if ($38) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 564 "lstrlib.c"
    case 6: 
      var $40=$newstart; //@line 564 "lstrlib.c"
      var $41=((($40)+(1))|0); //@line 564 "lstrlib.c"
      $newstart=$41; //@line 564 "lstrlib.c"
      __label__ = 7; break; //@line 564 "lstrlib.c"
    case 7: 
      var $43=$2; //@line 565 "lstrlib.c"
      var $44=$newstart; //@line 565 "lstrlib.c"
      _lua_pushinteger($43, $44); //@line 565 "lstrlib.c"
      var $45=$2; //@line 566 "lstrlib.c"
      _lua_replace($45, -10005); //@line 566 "lstrlib.c"
      var $46=$src; //@line 567 "lstrlib.c"
      var $47=$e; //@line 567 "lstrlib.c"
      var $48=__Z13push_capturesP10MatchStatePKcS2_($ms, $46, $47); //@line 567 "lstrlib.c"
      $1=$48; //@line 567 "lstrlib.c"
      __label__ = 11; break; //@line 567 "lstrlib.c"
    case 8: 
      __label__ = 9; break; //@line 569 "lstrlib.c"
    case 9: 
      var $51=$src; //@line 559 "lstrlib.c"
      var $52=(($51+1)|0); //@line 559 "lstrlib.c"
      $src=$52; //@line 559 "lstrlib.c"
      __label__ = 3; break; //@line 559 "lstrlib.c"
    case 10: 
      $1=0; //@line 570 "lstrlib.c"
      __label__ = 11; break; //@line 570 "lstrlib.c"
    case 11: 
      var $55=$1; //@line 571 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $55; //@line 571 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10gmatch_auxP9lua_State["X"]=1;

function __Z10scanformatP9lua_StatePKcPc($L, $strfrmt, $form) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $p;
      $1=$L;
      $2=$strfrmt;
      $3=$form;
      var $4=$2; //@line 726 "lstrlib.c"
      $p=$4; //@line 726 "lstrlib.c"
      __label__ = 3; break; //@line 727 "lstrlib.c"
    case 3: 
      var $6=$p; //@line 727 "lstrlib.c"
      var $7=HEAP8[($6)]; //@line 727 "lstrlib.c"
      var $8=(($7 << 24) >> 24); //@line 727 "lstrlib.c"
      var $9=(($8)|0)!=0; //@line 727 "lstrlib.c"
      if ($9) { __label__ = 4; break; } else { var $17 = 0;__label__ = 5; break; } //@line 727 "lstrlib.c"
    case 4: 
      var $11=$p; //@line 727 "lstrlib.c"
      var $12=HEAP8[($11)]; //@line 727 "lstrlib.c"
      var $13=(($12 << 24) >> 24); //@line 727 "lstrlib.c"
      var $14=_strchr(((STRING_TABLE.__str35533)|0), $13); //@line 727 "lstrlib.c"
      var $15=(($14)|0)!=0; //@line 727 "lstrlib.c"
      var $17 = $15;__label__ = 5; break; //@line 727 "lstrlib.c"
    case 5: 
      var $17;
      if ($17) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 727 "lstrlib.c"
    case 6: 
      var $19=$p; //@line 727 "lstrlib.c"
      var $20=(($19+1)|0); //@line 727 "lstrlib.c"
      $p=$20; //@line 727 "lstrlib.c"
      __label__ = 3; break; //@line 727 "lstrlib.c"
    case 7: 
      var $22=$p; //@line 728 "lstrlib.c"
      var $23=$2; //@line 728 "lstrlib.c"
      var $24=$22; //@line 728 "lstrlib.c"
      var $25=$23; //@line 728 "lstrlib.c"
      var $26=((($24)-($25))|0); //@line 728 "lstrlib.c"
      var $27=(($26)>>>0) >= 6; //@line 728 "lstrlib.c"
      if ($27) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 728 "lstrlib.c"
    case 8: 
      var $29=$1; //@line 729 "lstrlib.c"
      var $30=_luaL_error($29, ((STRING_TABLE.__str36534)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 729 "lstrlib.c"
      __label__ = 9; break; //@line 729 "lstrlib.c"
    case 9: 
      var $32=$p; //@line 730 "lstrlib.c"
      var $33=HEAPU8[($32)]; //@line 730 "lstrlib.c"
      var $34=(($33)&255); //@line 730 "lstrlib.c"
      var $35=_isdigit($34); //@line 730 "lstrlib.c"
      var $36=(($35)|0)!=0; //@line 730 "lstrlib.c"
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 730 "lstrlib.c"
    case 10: 
      var $38=$p; //@line 730 "lstrlib.c"
      var $39=(($38+1)|0); //@line 730 "lstrlib.c"
      $p=$39; //@line 730 "lstrlib.c"
      __label__ = 11; break; //@line 730 "lstrlib.c"
    case 11: 
      var $41=$p; //@line 731 "lstrlib.c"
      var $42=HEAPU8[($41)]; //@line 731 "lstrlib.c"
      var $43=(($42)&255); //@line 731 "lstrlib.c"
      var $44=_isdigit($43); //@line 731 "lstrlib.c"
      var $45=(($44)|0)!=0; //@line 731 "lstrlib.c"
      if ($45) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 731 "lstrlib.c"
    case 12: 
      var $47=$p; //@line 731 "lstrlib.c"
      var $48=(($47+1)|0); //@line 731 "lstrlib.c"
      $p=$48; //@line 731 "lstrlib.c"
      __label__ = 13; break; //@line 731 "lstrlib.c"
    case 13: 
      var $50=$p; //@line 732 "lstrlib.c"
      var $51=HEAP8[($50)]; //@line 732 "lstrlib.c"
      var $52=(($51 << 24) >> 24); //@line 732 "lstrlib.c"
      var $53=(($52)|0)==46; //@line 732 "lstrlib.c"
      if ($53) { __label__ = 14; break; } else { __label__ = 19; break; } //@line 732 "lstrlib.c"
    case 14: 
      var $55=$p; //@line 733 "lstrlib.c"
      var $56=(($55+1)|0); //@line 733 "lstrlib.c"
      $p=$56; //@line 733 "lstrlib.c"
      var $57=$p; //@line 734 "lstrlib.c"
      var $58=HEAPU8[($57)]; //@line 734 "lstrlib.c"
      var $59=(($58)&255); //@line 734 "lstrlib.c"
      var $60=_isdigit($59); //@line 734 "lstrlib.c"
      var $61=(($60)|0)!=0; //@line 734 "lstrlib.c"
      if ($61) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 734 "lstrlib.c"
    case 15: 
      var $63=$p; //@line 734 "lstrlib.c"
      var $64=(($63+1)|0); //@line 734 "lstrlib.c"
      $p=$64; //@line 734 "lstrlib.c"
      __label__ = 16; break; //@line 734 "lstrlib.c"
    case 16: 
      var $66=$p; //@line 735 "lstrlib.c"
      var $67=HEAPU8[($66)]; //@line 735 "lstrlib.c"
      var $68=(($67)&255); //@line 735 "lstrlib.c"
      var $69=_isdigit($68); //@line 735 "lstrlib.c"
      var $70=(($69)|0)!=0; //@line 735 "lstrlib.c"
      if ($70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 735 "lstrlib.c"
    case 17: 
      var $72=$p; //@line 735 "lstrlib.c"
      var $73=(($72+1)|0); //@line 735 "lstrlib.c"
      $p=$73; //@line 735 "lstrlib.c"
      __label__ = 18; break; //@line 735 "lstrlib.c"
    case 18: 
      __label__ = 19; break; //@line 736 "lstrlib.c"
    case 19: 
      var $76=$p; //@line 737 "lstrlib.c"
      var $77=HEAPU8[($76)]; //@line 737 "lstrlib.c"
      var $78=(($77)&255); //@line 737 "lstrlib.c"
      var $79=_isdigit($78); //@line 737 "lstrlib.c"
      var $80=(($79)|0)!=0; //@line 737 "lstrlib.c"
      if ($80) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 737 "lstrlib.c"
    case 20: 
      var $82=$1; //@line 738 "lstrlib.c"
      var $83=_luaL_error($82, ((STRING_TABLE.__str37535)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 738 "lstrlib.c"
      __label__ = 21; break; //@line 738 "lstrlib.c"
    case 21: 
      var $85=$3; //@line 739 "lstrlib.c"
      var $86=(($85+1)|0); //@line 739 "lstrlib.c"
      $3=$86; //@line 739 "lstrlib.c"
      HEAP8[($85)]=37; //@line 739 "lstrlib.c"
      var $87=$3; //@line 740 "lstrlib.c"
      var $88=$2; //@line 740 "lstrlib.c"
      var $89=$p; //@line 740 "lstrlib.c"
      var $90=$2; //@line 740 "lstrlib.c"
      var $91=$89; //@line 740 "lstrlib.c"
      var $92=$90; //@line 740 "lstrlib.c"
      var $93=((($91)-($92))|0); //@line 740 "lstrlib.c"
      var $94=((($93)+(1))|0); //@line 740 "lstrlib.c"
      var $95=_strncpy($87, $88, $94); //@line 740 "lstrlib.c"
      var $96=$p; //@line 741 "lstrlib.c"
      var $97=$2; //@line 741 "lstrlib.c"
      var $98=$96; //@line 741 "lstrlib.c"
      var $99=$97; //@line 741 "lstrlib.c"
      var $100=((($98)-($99))|0); //@line 741 "lstrlib.c"
      var $101=((($100)+(1))|0); //@line 741 "lstrlib.c"
      var $102=$3; //@line 741 "lstrlib.c"
      var $103=(($102+$101)|0); //@line 741 "lstrlib.c"
      $3=$103; //@line 741 "lstrlib.c"
      var $104=$3; //@line 742 "lstrlib.c"
      HEAP8[($104)]=0; //@line 742 "lstrlib.c"
      var $105=$p; //@line 743 "lstrlib.c"
      STACKTOP = __stackBase__;
      return $105; //@line 743 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10scanformatP9lua_StatePKcPc["X"]=1;

function __Z9addintlenPc($form) {
  ;
  var __label__;

  var $1;
  var $l;
  var $spec;
  $1=$form;
  var $2=$1; //@line 748 "lstrlib.c"
  var $3=_strlen($2); //@line 748 "lstrlib.c"
  $l=$3; //@line 748 "lstrlib.c"
  var $4=$l; //@line 749 "lstrlib.c"
  var $5=((($4)-(1))|0); //@line 749 "lstrlib.c"
  var $6=$1; //@line 749 "lstrlib.c"
  var $7=(($6+$5)|0); //@line 749 "lstrlib.c"
  var $8=HEAP8[($7)]; //@line 749 "lstrlib.c"
  $spec=$8; //@line 749 "lstrlib.c"
  var $9=$1; //@line 750 "lstrlib.c"
  var $10=$l; //@line 750 "lstrlib.c"
  var $11=(($9+$10)|0); //@line 750 "lstrlib.c"
  var $12=((($11)-(1))|0); //@line 750 "lstrlib.c"
  var $13=_strcpy($12, ((STRING_TABLE.__str34532)|0)); //@line 750 "lstrlib.c"
  var $14=$spec; //@line 751 "lstrlib.c"
  var $15=$l; //@line 751 "lstrlib.c"
  var $16=((($15)+(2))|0); //@line 751 "lstrlib.c"
  var $17=((($16)-(2))|0); //@line 751 "lstrlib.c"
  var $18=$1; //@line 751 "lstrlib.c"
  var $19=(($18+$17)|0); //@line 751 "lstrlib.c"
  HEAP8[($19)]=$14; //@line 751 "lstrlib.c"
  var $20=$l; //@line 752 "lstrlib.c"
  var $21=((($20)+(2))|0); //@line 752 "lstrlib.c"
  var $22=((($21)-(1))|0); //@line 752 "lstrlib.c"
  var $23=$1; //@line 752 "lstrlib.c"
  var $24=(($23+$22)|0); //@line 752 "lstrlib.c"
  HEAP8[($24)]=0; //@line 752 "lstrlib.c"
  ;
  return; //@line 753 "lstrlib.c"
}


function __Z9addquotedP9lua_StateP11luaL_Bufferi($L, $b, $arg) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; _memset(__stackBase__, 0, 4);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l=__stackBase__;
      var $s;
      $1=$L;
      $2=$b;
      $3=$arg;
      var $4=$1; //@line 698 "lstrlib.c"
      var $5=$3; //@line 698 "lstrlib.c"
      var $6=_luaL_checklstring($4, $5, $l); //@line 698 "lstrlib.c"
      $s=$6; //@line 698 "lstrlib.c"
      var $7=$2; //@line 699 "lstrlib.c"
      var $8=(($7)|0); //@line 699 "lstrlib.c"
      var $9=HEAPU32[(($8)>>2)]; //@line 699 "lstrlib.c"
      var $10=$2; //@line 699 "lstrlib.c"
      var $11=(($10+12)|0); //@line 699 "lstrlib.c"
      var $12=(($11)|0); //@line 699 "lstrlib.c"
      var $13=(($12+8192)|0); //@line 699 "lstrlib.c"
      var $14=(($9)>>>0) < (($13)>>>0); //@line 699 "lstrlib.c"
      if ($14) { var $20 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 699 "lstrlib.c"
    case 3: 
      var $16=$2; //@line 699 "lstrlib.c"
      var $17=_luaL_prepbuffer($16); //@line 699 "lstrlib.c"
      var $18=(($17)|0)!=0; //@line 699 "lstrlib.c"
      var $20 = $18;__label__ = 4; break; //@line 699 "lstrlib.c"
    case 4: 
      var $20;
      var $21=$2; //@line 699 "lstrlib.c"
      var $22=(($21)|0); //@line 699 "lstrlib.c"
      var $23=HEAP32[(($22)>>2)]; //@line 699 "lstrlib.c"
      var $24=(($23+1)|0); //@line 699 "lstrlib.c"
      HEAP32[(($22)>>2)]=$24; //@line 699 "lstrlib.c"
      HEAP8[($23)]=34; //@line 699 "lstrlib.c"
      __label__ = 5; break; //@line 700 "lstrlib.c"
    case 5: 
      var $26=HEAP32[(($l)>>2)]; //@line 700 "lstrlib.c"
      var $27=((($26)-(1))|0); //@line 700 "lstrlib.c"
      HEAP32[(($l)>>2)]=$27; //@line 700 "lstrlib.c"
      var $28=(($26)|0)!=0; //@line 700 "lstrlib.c"
      if ($28) { __label__ = 6; break; } else { __label__ = 18; break; } //@line 700 "lstrlib.c"
    case 6: 
      var $30=$s; //@line 701 "lstrlib.c"
      var $31=HEAP8[($30)]; //@line 701 "lstrlib.c"
      var $32=(($31 << 24) >> 24); //@line 701 "lstrlib.c"
      if ((($32)|0) == 34 || (($32)|0) == 92 || (($32)|0) == 10) {
        __label__ = 7; break;
      }
      else if ((($32)|0) == 13) {
        __label__ = 12; break;
      }
      else if ((($32)|0) == 0) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 7: 
      var $34=$2; //@line 703 "lstrlib.c"
      var $35=(($34)|0); //@line 703 "lstrlib.c"
      var $36=HEAPU32[(($35)>>2)]; //@line 703 "lstrlib.c"
      var $37=$2; //@line 703 "lstrlib.c"
      var $38=(($37+12)|0); //@line 703 "lstrlib.c"
      var $39=(($38)|0); //@line 703 "lstrlib.c"
      var $40=(($39+8192)|0); //@line 703 "lstrlib.c"
      var $41=(($36)>>>0) < (($40)>>>0); //@line 703 "lstrlib.c"
      if ($41) { var $47 = 1;__label__ = 9; break; } else { __label__ = 8; break; } //@line 703 "lstrlib.c"
    case 8: 
      var $43=$2; //@line 703 "lstrlib.c"
      var $44=_luaL_prepbuffer($43); //@line 703 "lstrlib.c"
      var $45=(($44)|0)!=0; //@line 703 "lstrlib.c"
      var $47 = $45;__label__ = 9; break; //@line 703 "lstrlib.c"
    case 9: 
      var $47;
      var $48=$2; //@line 703 "lstrlib.c"
      var $49=(($48)|0); //@line 703 "lstrlib.c"
      var $50=HEAP32[(($49)>>2)]; //@line 703 "lstrlib.c"
      var $51=(($50+1)|0); //@line 703 "lstrlib.c"
      HEAP32[(($49)>>2)]=$51; //@line 703 "lstrlib.c"
      HEAP8[($50)]=92; //@line 703 "lstrlib.c"
      var $52=$2; //@line 704 "lstrlib.c"
      var $53=(($52)|0); //@line 704 "lstrlib.c"
      var $54=HEAPU32[(($53)>>2)]; //@line 704 "lstrlib.c"
      var $55=$2; //@line 704 "lstrlib.c"
      var $56=(($55+12)|0); //@line 704 "lstrlib.c"
      var $57=(($56)|0); //@line 704 "lstrlib.c"
      var $58=(($57+8192)|0); //@line 704 "lstrlib.c"
      var $59=(($54)>>>0) < (($58)>>>0); //@line 704 "lstrlib.c"
      if ($59) { var $65 = 1;__label__ = 11; break; } else { __label__ = 10; break; } //@line 704 "lstrlib.c"
    case 10: 
      var $61=$2; //@line 704 "lstrlib.c"
      var $62=_luaL_prepbuffer($61); //@line 704 "lstrlib.c"
      var $63=(($62)|0)!=0; //@line 704 "lstrlib.c"
      var $65 = $63;__label__ = 11; break; //@line 704 "lstrlib.c"
    case 11: 
      var $65;
      var $66=$s; //@line 704 "lstrlib.c"
      var $67=HEAP8[($66)]; //@line 704 "lstrlib.c"
      var $68=$2; //@line 704 "lstrlib.c"
      var $69=(($68)|0); //@line 704 "lstrlib.c"
      var $70=HEAP32[(($69)>>2)]; //@line 704 "lstrlib.c"
      var $71=(($70+1)|0); //@line 704 "lstrlib.c"
      HEAP32[(($69)>>2)]=$71; //@line 704 "lstrlib.c"
      HEAP8[($70)]=$67; //@line 704 "lstrlib.c"
      __label__ = 17; break; //@line 705 "lstrlib.c"
    case 12: 
      var $73=$2; //@line 708 "lstrlib.c"
      _luaL_addlstring($73, ((STRING_TABLE.__str32530)|0), 2); //@line 708 "lstrlib.c"
      __label__ = 17; break; //@line 709 "lstrlib.c"
    case 13: 
      var $75=$2; //@line 712 "lstrlib.c"
      _luaL_addlstring($75, ((STRING_TABLE.__str33531)|0), 4); //@line 712 "lstrlib.c"
      __label__ = 17; break; //@line 713 "lstrlib.c"
    case 14: 
      var $77=$2; //@line 716 "lstrlib.c"
      var $78=(($77)|0); //@line 716 "lstrlib.c"
      var $79=HEAPU32[(($78)>>2)]; //@line 716 "lstrlib.c"
      var $80=$2; //@line 716 "lstrlib.c"
      var $81=(($80+12)|0); //@line 716 "lstrlib.c"
      var $82=(($81)|0); //@line 716 "lstrlib.c"
      var $83=(($82+8192)|0); //@line 716 "lstrlib.c"
      var $84=(($79)>>>0) < (($83)>>>0); //@line 716 "lstrlib.c"
      if ($84) { var $90 = 1;__label__ = 16; break; } else { __label__ = 15; break; } //@line 716 "lstrlib.c"
    case 15: 
      var $86=$2; //@line 716 "lstrlib.c"
      var $87=_luaL_prepbuffer($86); //@line 716 "lstrlib.c"
      var $88=(($87)|0)!=0; //@line 716 "lstrlib.c"
      var $90 = $88;__label__ = 16; break; //@line 716 "lstrlib.c"
    case 16: 
      var $90;
      var $91=$s; //@line 716 "lstrlib.c"
      var $92=HEAP8[($91)]; //@line 716 "lstrlib.c"
      var $93=$2; //@line 716 "lstrlib.c"
      var $94=(($93)|0); //@line 716 "lstrlib.c"
      var $95=HEAP32[(($94)>>2)]; //@line 716 "lstrlib.c"
      var $96=(($95+1)|0); //@line 716 "lstrlib.c"
      HEAP32[(($94)>>2)]=$96; //@line 716 "lstrlib.c"
      HEAP8[($95)]=$92; //@line 716 "lstrlib.c"
      __label__ = 17; break; //@line 717 "lstrlib.c"
    case 17: 
      var $98=$s; //@line 720 "lstrlib.c"
      var $99=(($98+1)|0); //@line 720 "lstrlib.c"
      $s=$99; //@line 720 "lstrlib.c"
      __label__ = 5; break; //@line 721 "lstrlib.c"
    case 18: 
      var $101=$2; //@line 722 "lstrlib.c"
      var $102=(($101)|0); //@line 722 "lstrlib.c"
      var $103=HEAPU32[(($102)>>2)]; //@line 722 "lstrlib.c"
      var $104=$2; //@line 722 "lstrlib.c"
      var $105=(($104+12)|0); //@line 722 "lstrlib.c"
      var $106=(($105)|0); //@line 722 "lstrlib.c"
      var $107=(($106+8192)|0); //@line 722 "lstrlib.c"
      var $108=(($103)>>>0) < (($107)>>>0); //@line 722 "lstrlib.c"
      if ($108) { var $114 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 722 "lstrlib.c"
    case 19: 
      var $110=$2; //@line 722 "lstrlib.c"
      var $111=_luaL_prepbuffer($110); //@line 722 "lstrlib.c"
      var $112=(($111)|0)!=0; //@line 722 "lstrlib.c"
      var $114 = $112;__label__ = 20; break; //@line 722 "lstrlib.c"
    case 20: 
      var $114;
      var $115=$2; //@line 722 "lstrlib.c"
      var $116=(($115)|0); //@line 722 "lstrlib.c"
      var $117=HEAP32[(($116)>>2)]; //@line 722 "lstrlib.c"
      var $118=(($117+1)|0); //@line 722 "lstrlib.c"
      HEAP32[(($116)>>2)]=$118; //@line 722 "lstrlib.c"
      HEAP8[($117)]=34; //@line 722 "lstrlib.c"
      STACKTOP = __stackBase__;
      return; //@line 723 "lstrlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9addquotedP9lua_StateP11luaL_Bufferi["X"]=1;

function __Z6writerP9lua_StatePKvjPv($L, $b, $size, $B) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  var $4;
  $1=$L;
  $2=$b;
  $3=$size;
  $4=$B;
  var $5=$4; //@line 142 "lstrlib.c"
  var $6=$5; //@line 142 "lstrlib.c"
  var $7=$2; //@line 142 "lstrlib.c"
  var $8=$3; //@line 142 "lstrlib.c"
  _luaL_addlstring($6, $7, $8); //@line 142 "lstrlib.c"
  ;
  return 0; //@line 143 "lstrlib.c"
}


function __Z10ll_loadlibP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $path;
      var $init;
      var $stat;
      $2=$L;
      var $3=$2; //@line 310 "loadlib.c"
      var $4=_luaL_checklstring($3, 1, 0); //@line 310 "loadlib.c"
      $path=$4; //@line 310 "loadlib.c"
      var $5=$2; //@line 311 "loadlib.c"
      var $6=_luaL_checklstring($5, 2, 0); //@line 311 "loadlib.c"
      $init=$6; //@line 311 "loadlib.c"
      var $7=$2; //@line 312 "loadlib.c"
      var $8=$path; //@line 312 "loadlib.c"
      var $9=$init; //@line 312 "loadlib.c"
      var $10=__Z11ll_loadfuncP9lua_StatePKcS2_($7, $8, $9); //@line 312 "loadlib.c"
      $stat=$10; //@line 312 "loadlib.c"
      var $11=$stat; //@line 313 "loadlib.c"
      var $12=(($11)|0)==0; //@line 313 "loadlib.c"
      if ($12) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 313 "loadlib.c"
    case 3: 
      $1=1; //@line 314 "loadlib.c"
      __label__ = 8; break; //@line 314 "loadlib.c"
    case 4: 
      var $15=$2; //@line 316 "loadlib.c"
      _lua_pushnil($15); //@line 316 "loadlib.c"
      var $16=$2; //@line 317 "loadlib.c"
      _lua_insert($16, -2); //@line 317 "loadlib.c"
      var $17=$2; //@line 318 "loadlib.c"
      var $18=$stat; //@line 318 "loadlib.c"
      var $19=(($18)|0)==1; //@line 318 "loadlib.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 318 "loadlib.c"
    case 5: 
      var $23 = ((STRING_TABLE.__str50589)|0);__label__ = 7; break; //@line 318 "loadlib.c"
    case 6: 
      var $23 = ((STRING_TABLE.__str51590)|0);__label__ = 7; break; //@line 318 "loadlib.c"
    case 7: 
      var $23; //@line 318 "loadlib.c"
      _lua_pushstring($17, $23); //@line 318 "loadlib.c"
      $1=3; //@line 319 "loadlib.c"
      __label__ = 8; break; //@line 319 "loadlib.c"
    case 8: 
      var $25=$1; //@line 321 "loadlib.c"
      ;
      return $25; //@line 321 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9ll_seeallP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      $1=$L;
      var $2=$1; //@line 573 "loadlib.c"
      _luaL_checktype($2, 1, 5); //@line 573 "loadlib.c"
      var $3=$1; //@line 574 "loadlib.c"
      var $4=_lua_getmetatable($3, 1); //@line 574 "loadlib.c"
      var $5=(($4)|0)!=0; //@line 574 "loadlib.c"
      if ($5) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 574 "loadlib.c"
    case 3: 
      var $7=$1; //@line 575 "loadlib.c"
      _lua_createtable($7, 0, 1); //@line 575 "loadlib.c"
      var $8=$1; //@line 576 "loadlib.c"
      _lua_pushvalue($8, -1); //@line 576 "loadlib.c"
      var $9=$1; //@line 577 "loadlib.c"
      var $10=_lua_setmetatable($9, 1); //@line 577 "loadlib.c"
      __label__ = 4; break; //@line 578 "loadlib.c"
    case 4: 
      var $12=$1; //@line 579 "loadlib.c"
      _lua_pushvalue($12, -10002); //@line 579 "loadlib.c"
      var $13=$1; //@line 580 "loadlib.c"
      _lua_setfield($13, -2, ((STRING_TABLE.__str49588)|0)); //@line 580 "loadlib.c"
      ;
      return 0; //@line 581 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9ll_moduleP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $modname;
      var $loaded;
      $2=$L;
      var $3=$2; //@line 545 "loadlib.c"
      var $4=_luaL_checklstring($3, 1, 0); //@line 545 "loadlib.c"
      $modname=$4; //@line 545 "loadlib.c"
      var $5=$2; //@line 546 "loadlib.c"
      var $6=_lua_gettop($5); //@line 546 "loadlib.c"
      var $7=((($6)+(1))|0); //@line 546 "loadlib.c"
      $loaded=$7; //@line 546 "loadlib.c"
      var $8=$2; //@line 547 "loadlib.c"
      _lua_getfield($8, -10000, ((STRING_TABLE.__str16555)|0)); //@line 547 "loadlib.c"
      var $9=$2; //@line 548 "loadlib.c"
      var $10=$loaded; //@line 548 "loadlib.c"
      var $11=$modname; //@line 548 "loadlib.c"
      _lua_getfield($9, $10, $11); //@line 548 "loadlib.c"
      var $12=$2; //@line 549 "loadlib.c"
      var $13=_lua_type($12, -1); //@line 549 "loadlib.c"
      var $14=(($13)|0)==5; //@line 549 "loadlib.c"
      if ($14) { __label__ = 6; break; } else { __label__ = 3; break; } //@line 549 "loadlib.c"
    case 3: 
      var $16=$2; //@line 550 "loadlib.c"
      _lua_settop($16, -2); //@line 550 "loadlib.c"
      var $17=$2; //@line 552 "loadlib.c"
      var $18=$modname; //@line 552 "loadlib.c"
      var $19=_luaL_findtable($17, -10002, $18, 1); //@line 552 "loadlib.c"
      var $20=(($19)|0)!=0; //@line 552 "loadlib.c"
      if ($20) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 552 "loadlib.c"
    case 4: 
      var $22=$2; //@line 553 "loadlib.c"
      var $23=$modname; //@line 553 "loadlib.c"
      var $24=_luaL_error($22, ((STRING_TABLE.__str43582)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$23,tempInt)); //@line 553 "loadlib.c"
      $1=$24; //@line 553 "loadlib.c"
      __label__ = 10; break; //@line 553 "loadlib.c"
    case 5: 
      var $26=$2; //@line 554 "loadlib.c"
      _lua_pushvalue($26, -1); //@line 554 "loadlib.c"
      var $27=$2; //@line 555 "loadlib.c"
      var $28=$loaded; //@line 555 "loadlib.c"
      var $29=$modname; //@line 555 "loadlib.c"
      _lua_setfield($27, $28, $29); //@line 555 "loadlib.c"
      __label__ = 6; break; //@line 556 "loadlib.c"
    case 6: 
      var $31=$2; //@line 558 "loadlib.c"
      _lua_getfield($31, -1, ((STRING_TABLE.__str44583)|0)); //@line 558 "loadlib.c"
      var $32=$2; //@line 559 "loadlib.c"
      var $33=_lua_type($32, -1); //@line 559 "loadlib.c"
      var $34=(($33)|0)==0; //@line 559 "loadlib.c"
      if ($34) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 559 "loadlib.c"
    case 7: 
      var $36=$2; //@line 560 "loadlib.c"
      _lua_settop($36, -2); //@line 560 "loadlib.c"
      __label__ = 9; break; //@line 560 "loadlib.c"
    case 8: 
      var $38=$2; //@line 562 "loadlib.c"
      _lua_settop($38, -2); //@line 562 "loadlib.c"
      var $39=$2; //@line 563 "loadlib.c"
      var $40=$modname; //@line 563 "loadlib.c"
      __Z7modinitP9lua_StatePKc($39, $40); //@line 563 "loadlib.c"
      __label__ = 9; break; //@line 564 "loadlib.c"
    case 9: 
      var $42=$2; //@line 565 "loadlib.c"
      _lua_pushvalue($42, -1); //@line 565 "loadlib.c"
      var $43=$2; //@line 566 "loadlib.c"
      __Z7setfenvP9lua_State($43); //@line 566 "loadlib.c"
      var $44=$2; //@line 567 "loadlib.c"
      var $45=$loaded; //@line 567 "loadlib.c"
      var $46=((($45)-(1))|0); //@line 567 "loadlib.c"
      __Z9dooptionsP9lua_Statei($44, $46); //@line 567 "loadlib.c"
      $1=0; //@line 568 "loadlib.c"
      __label__ = 10; break; //@line 568 "loadlib.c"
    case 10: 
      var $48=$1; //@line 569 "loadlib.c"
      STACKTOP = __stackBase__;
      return $48; //@line 569 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z9ll_moduleP9lua_State["X"]=1;

function __Z12ll_unloadlibPv($lib) {
  ;
  var __label__;

  var $1;
  $1=$lib;
  ;
  return; //@line 241 "loadlib.c"
}


function __Z10ll_requireP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $name;
      var $i;
      $2=$L;
      var $3=$2; //@line 452 "loadlib.c"
      var $4=_luaL_checklstring($3, 1, 0); //@line 452 "loadlib.c"
      $name=$4; //@line 452 "loadlib.c"
      var $5=$2; //@line 454 "loadlib.c"
      _lua_settop($5, 1); //@line 454 "loadlib.c"
      var $6=$2; //@line 455 "loadlib.c"
      _lua_getfield($6, -10000, ((STRING_TABLE.__str16555)|0)); //@line 455 "loadlib.c"
      var $7=$2; //@line 456 "loadlib.c"
      var $8=$name; //@line 456 "loadlib.c"
      _lua_getfield($7, 2, $8); //@line 456 "loadlib.c"
      var $9=$2; //@line 457 "loadlib.c"
      var $10=_lua_toboolean($9, -1); //@line 457 "loadlib.c"
      var $11=(($10)|0)!=0; //@line 457 "loadlib.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 457 "loadlib.c"
    case 3: 
      var $13=$2; //@line 458 "loadlib.c"
      var $14=_lua_touserdata($13, -1); //@line 458 "loadlib.c"
      var $15=(($14)|0)==((__ZL9sentinel_)|0); //@line 458 "loadlib.c"
      if ($15) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 458 "loadlib.c"
    case 4: 
      var $17=$2; //@line 459 "loadlib.c"
      var $18=$name; //@line 459 "loadlib.c"
      var $19=_luaL_error($17, ((STRING_TABLE.__str40579)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$18,tempInt)); //@line 459 "loadlib.c"
      __label__ = 5; break; //@line 459 "loadlib.c"
    case 5: 
      $1=1; //@line 460 "loadlib.c"
      __label__ = 24; break; //@line 460 "loadlib.c"
    case 6: 
      var $22=$2; //@line 463 "loadlib.c"
      _lua_getfield($22, -10001, ((STRING_TABLE.__str7546)|0)); //@line 463 "loadlib.c"
      var $23=$2; //@line 464 "loadlib.c"
      var $24=_lua_type($23, -1); //@line 464 "loadlib.c"
      var $25=(($24)|0)==5; //@line 464 "loadlib.c"
      if ($25) { __label__ = 8; break; } else { __label__ = 7; break; } //@line 464 "loadlib.c"
    case 7: 
      var $27=$2; //@line 465 "loadlib.c"
      var $28=_luaL_error($27, ((STRING_TABLE.__str41580)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 465 "loadlib.c"
      __label__ = 8; break; //@line 465 "loadlib.c"
    case 8: 
      var $30=$2; //@line 466 "loadlib.c"
      _lua_pushlstring($30, ((__str33572)|0), 0); //@line 466 "loadlib.c"
      $i=1; //@line 467 "loadlib.c"
      __label__ = 9; break; //@line 467 "loadlib.c"
    case 9: 
      var $32=$2; //@line 468 "loadlib.c"
      var $33=$i; //@line 468 "loadlib.c"
      _lua_rawgeti($32, -2, $33); //@line 468 "loadlib.c"
      var $34=$2; //@line 469 "loadlib.c"
      var $35=_lua_type($34, -1); //@line 469 "loadlib.c"
      var $36=(($35)|0)==0; //@line 469 "loadlib.c"
      if ($36) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 469 "loadlib.c"
    case 10: 
      var $38=$2; //@line 470 "loadlib.c"
      var $39=$name; //@line 470 "loadlib.c"
      var $40=$2; //@line 471 "loadlib.c"
      var $41=_lua_tolstring($40, -2, 0); //@line 471 "loadlib.c"
      var $42=_luaL_error($38, ((STRING_TABLE.__str42581)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$39,HEAP32[(((tempInt)+(4))>>2)]=$41,tempInt)); //@line 471 "loadlib.c"
      __label__ = 11; break; //@line 471 "loadlib.c"
    case 11: 
      var $44=$2; //@line 472 "loadlib.c"
      var $45=$name; //@line 472 "loadlib.c"
      _lua_pushstring($44, $45); //@line 472 "loadlib.c"
      var $46=$2; //@line 473 "loadlib.c"
      _lua_call($46, 1, 1); //@line 473 "loadlib.c"
      var $47=$2; //@line 474 "loadlib.c"
      var $48=_lua_type($47, -1); //@line 474 "loadlib.c"
      var $49=(($48)|0)==6; //@line 474 "loadlib.c"
      if ($49) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 474 "loadlib.c"
    case 12: 
      __label__ = 19; break; //@line 475 "loadlib.c"
    case 13: 
      var $52=$2; //@line 476 "loadlib.c"
      var $53=_lua_isstring($52, -1); //@line 476 "loadlib.c"
      var $54=(($53)|0)!=0; //@line 476 "loadlib.c"
      if ($54) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 476 "loadlib.c"
    case 14: 
      var $56=$2; //@line 477 "loadlib.c"
      _lua_concat($56, 2); //@line 477 "loadlib.c"
      __label__ = 16; break; //@line 477 "loadlib.c"
    case 15: 
      var $58=$2; //@line 479 "loadlib.c"
      _lua_settop($58, -2); //@line 479 "loadlib.c"
      __label__ = 16; break; //@line 479 "loadlib.c"
    case 16: 
      __label__ = 17; break; //@line 479 "loadlib.c"
    case 17: 
      __label__ = 18; break; //@line 480 "loadlib.c"
    case 18: 
      var $62=$i; //@line 467 "loadlib.c"
      var $63=((($62)+(1))|0); //@line 467 "loadlib.c"
      $i=$63; //@line 467 "loadlib.c"
      __label__ = 9; break; //@line 467 "loadlib.c"
    case 19: 
      var $65=$2; //@line 481 "loadlib.c"
      _lua_pushlightuserdata($65, __ZL9sentinel_); //@line 481 "loadlib.c"
      var $66=$2; //@line 482 "loadlib.c"
      var $67=$name; //@line 482 "loadlib.c"
      _lua_setfield($66, 2, $67); //@line 482 "loadlib.c"
      var $68=$2; //@line 483 "loadlib.c"
      var $69=$name; //@line 483 "loadlib.c"
      _lua_pushstring($68, $69); //@line 483 "loadlib.c"
      var $70=$2; //@line 484 "loadlib.c"
      _lua_call($70, 1, 1); //@line 484 "loadlib.c"
      var $71=$2; //@line 485 "loadlib.c"
      var $72=_lua_type($71, -1); //@line 485 "loadlib.c"
      var $73=(($72)|0)==0; //@line 485 "loadlib.c"
      if ($73) { __label__ = 21; break; } else { __label__ = 20; break; } //@line 485 "loadlib.c"
    case 20: 
      var $75=$2; //@line 486 "loadlib.c"
      var $76=$name; //@line 486 "loadlib.c"
      _lua_setfield($75, 2, $76); //@line 486 "loadlib.c"
      __label__ = 21; break; //@line 486 "loadlib.c"
    case 21: 
      var $78=$2; //@line 487 "loadlib.c"
      var $79=$name; //@line 487 "loadlib.c"
      _lua_getfield($78, 2, $79); //@line 487 "loadlib.c"
      var $80=$2; //@line 488 "loadlib.c"
      var $81=_lua_touserdata($80, -1); //@line 488 "loadlib.c"
      var $82=(($81)|0)==((__ZL9sentinel_)|0); //@line 488 "loadlib.c"
      if ($82) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 488 "loadlib.c"
    case 22: 
      var $84=$2; //@line 489 "loadlib.c"
      _lua_pushboolean($84, 1); //@line 489 "loadlib.c"
      var $85=$2; //@line 490 "loadlib.c"
      _lua_pushvalue($85, -1); //@line 490 "loadlib.c"
      var $86=$2; //@line 491 "loadlib.c"
      var $87=$name; //@line 491 "loadlib.c"
      _lua_setfield($86, 2, $87); //@line 491 "loadlib.c"
      __label__ = 23; break; //@line 492 "loadlib.c"
    case 23: 
      $1=1; //@line 493 "loadlib.c"
      __label__ = 24; break; //@line 493 "loadlib.c"
    case 24: 
      var $90=$1; //@line 494 "loadlib.c"
      STACKTOP = __stackBase__;
      return $90; //@line 494 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z10ll_requireP9lua_State["X"]=1;

function __Z14loader_preloadP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $name;
      $1=$L;
      var $2=$1; //@line 436 "loadlib.c"
      var $3=_luaL_checklstring($2, 1, 0); //@line 436 "loadlib.c"
      $name=$3; //@line 436 "loadlib.c"
      var $4=$1; //@line 437 "loadlib.c"
      _lua_getfield($4, -10001, ((STRING_TABLE.__str18557)|0)); //@line 437 "loadlib.c"
      var $5=$1; //@line 438 "loadlib.c"
      var $6=_lua_type($5, -1); //@line 438 "loadlib.c"
      var $7=(($6)|0)==5; //@line 438 "loadlib.c"
      if ($7) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 438 "loadlib.c"
    case 3: 
      var $9=$1; //@line 439 "loadlib.c"
      var $10=_luaL_error($9, ((STRING_TABLE.__str38577)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 439 "loadlib.c"
      __label__ = 4; break; //@line 439 "loadlib.c"
    case 4: 
      var $12=$1; //@line 440 "loadlib.c"
      var $13=$name; //@line 440 "loadlib.c"
      _lua_getfield($12, -1, $13); //@line 440 "loadlib.c"
      var $14=$1; //@line 441 "loadlib.c"
      var $15=_lua_type($14, -1); //@line 441 "loadlib.c"
      var $16=(($15)|0)==0; //@line 441 "loadlib.c"
      if ($16) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 441 "loadlib.c"
    case 5: 
      var $18=$1; //@line 442 "loadlib.c"
      var $19=$name; //@line 442 "loadlib.c"
      var $20=_lua_pushfstring($18, ((STRING_TABLE.__str39578)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$19,tempInt)); //@line 442 "loadlib.c"
      __label__ = 6; break; //@line 442 "loadlib.c"
    case 6: 
      STACKTOP = __stackBase__;
      return 1; //@line 443 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z10loader_LuaP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $filename;
      var $name;
      $2=$L;
      var $3=$2; //@line 382 "loadlib.c"
      var $4=_luaL_checklstring($3, 1, 0); //@line 382 "loadlib.c"
      $name=$4; //@line 382 "loadlib.c"
      var $5=$2; //@line 383 "loadlib.c"
      var $6=$name; //@line 383 "loadlib.c"
      var $7=__Z8findfileP9lua_StatePKcS2_($5, $6, ((STRING_TABLE.__str8547)|0)); //@line 383 "loadlib.c"
      $filename=$7; //@line 383 "loadlib.c"
      var $8=$filename; //@line 384 "loadlib.c"
      var $9=(($8)|0)==0; //@line 384 "loadlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 384 "loadlib.c"
    case 3: 
      $1=1; //@line 384 "loadlib.c"
      __label__ = 7; break; //@line 384 "loadlib.c"
    case 4: 
      var $12=$2; //@line 385 "loadlib.c"
      var $13=$filename; //@line 385 "loadlib.c"
      var $14=_luaL_loadfile($12, $13); //@line 385 "loadlib.c"
      var $15=(($14)|0)!=0; //@line 385 "loadlib.c"
      if ($15) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 385 "loadlib.c"
    case 5: 
      var $17=$2; //@line 386 "loadlib.c"
      var $18=$filename; //@line 386 "loadlib.c"
      __Z9loaderrorP9lua_StatePKc($17, $18); //@line 386 "loadlib.c"
      __label__ = 6; break; //@line 386 "loadlib.c"
    case 6: 
      $1=1; //@line 387 "loadlib.c"
      __label__ = 7; break; //@line 387 "loadlib.c"
    case 7: 
      var $21=$1; //@line 388 "loadlib.c"
      ;
      return $21; //@line 388 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8loader_CP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $funcname;
      var $name;
      var $filename;
      $2=$L;
      var $3=$2; //@line 404 "loadlib.c"
      var $4=_luaL_checklstring($3, 1, 0); //@line 404 "loadlib.c"
      $name=$4; //@line 404 "loadlib.c"
      var $5=$2; //@line 405 "loadlib.c"
      var $6=$name; //@line 405 "loadlib.c"
      var $7=__Z8findfileP9lua_StatePKcS2_($5, $6, ((STRING_TABLE.__str11550)|0)); //@line 405 "loadlib.c"
      $filename=$7; //@line 405 "loadlib.c"
      var $8=$filename; //@line 406 "loadlib.c"
      var $9=(($8)|0)==0; //@line 406 "loadlib.c"
      if ($9) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 406 "loadlib.c"
    case 3: 
      $1=1; //@line 406 "loadlib.c"
      __label__ = 7; break; //@line 406 "loadlib.c"
    case 4: 
      var $12=$2; //@line 407 "loadlib.c"
      var $13=$name; //@line 407 "loadlib.c"
      var $14=__Z10mkfuncnameP9lua_StatePKc($12, $13); //@line 407 "loadlib.c"
      $funcname=$14; //@line 407 "loadlib.c"
      var $15=$2; //@line 408 "loadlib.c"
      var $16=$filename; //@line 408 "loadlib.c"
      var $17=$funcname; //@line 408 "loadlib.c"
      var $18=__Z11ll_loadfuncP9lua_StatePKcS2_($15, $16, $17); //@line 408 "loadlib.c"
      var $19=(($18)|0)!=0; //@line 408 "loadlib.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 408 "loadlib.c"
    case 5: 
      var $21=$2; //@line 409 "loadlib.c"
      var $22=$filename; //@line 409 "loadlib.c"
      __Z9loaderrorP9lua_StatePKc($21, $22); //@line 409 "loadlib.c"
      __label__ = 6; break; //@line 409 "loadlib.c"
    case 6: 
      $1=1; //@line 410 "loadlib.c"
      __label__ = 7; break; //@line 410 "loadlib.c"
    case 7: 
      var $25=$1; //@line 411 "loadlib.c"
      ;
      return $25; //@line 411 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z12loader_CrootP9lua_State($L) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $funcname;
      var $filename;
      var $name;
      var $p;
      var $stat;
      $2=$L;
      var $3=$2; //@line 417 "loadlib.c"
      var $4=_luaL_checklstring($3, 1, 0); //@line 417 "loadlib.c"
      $name=$4; //@line 417 "loadlib.c"
      var $5=$name; //@line 418 "loadlib.c"
      var $6=_strchr($5, 46); //@line 418 "loadlib.c"
      $p=$6; //@line 418 "loadlib.c"
      var $7=$p; //@line 420 "loadlib.c"
      var $8=(($7)|0)==0; //@line 420 "loadlib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 420 "loadlib.c"
    case 3: 
      $1=0; //@line 420 "loadlib.c"
      __label__ = 11; break; //@line 420 "loadlib.c"
    case 4: 
      var $11=$2; //@line 421 "loadlib.c"
      var $12=$name; //@line 421 "loadlib.c"
      var $13=$p; //@line 421 "loadlib.c"
      var $14=$name; //@line 421 "loadlib.c"
      var $15=$13; //@line 421 "loadlib.c"
      var $16=$14; //@line 421 "loadlib.c"
      var $17=((($15)-($16))|0); //@line 421 "loadlib.c"
      _lua_pushlstring($11, $12, $17); //@line 421 "loadlib.c"
      var $18=$2; //@line 422 "loadlib.c"
      var $19=$2; //@line 422 "loadlib.c"
      var $20=_lua_tolstring($19, -1, 0); //@line 422 "loadlib.c"
      var $21=__Z8findfileP9lua_StatePKcS2_($18, $20, ((STRING_TABLE.__str11550)|0)); //@line 422 "loadlib.c"
      $filename=$21; //@line 422 "loadlib.c"
      var $22=$filename; //@line 423 "loadlib.c"
      var $23=(($22)|0)==0; //@line 423 "loadlib.c"
      if ($23) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 423 "loadlib.c"
    case 5: 
      $1=1; //@line 423 "loadlib.c"
      __label__ = 11; break; //@line 423 "loadlib.c"
    case 6: 
      var $26=$2; //@line 424 "loadlib.c"
      var $27=$name; //@line 424 "loadlib.c"
      var $28=__Z10mkfuncnameP9lua_StatePKc($26, $27); //@line 424 "loadlib.c"
      $funcname=$28; //@line 424 "loadlib.c"
      var $29=$2; //@line 425 "loadlib.c"
      var $30=$filename; //@line 425 "loadlib.c"
      var $31=$funcname; //@line 425 "loadlib.c"
      var $32=__Z11ll_loadfuncP9lua_StatePKcS2_($29, $30, $31); //@line 425 "loadlib.c"
      $stat=$32; //@line 425 "loadlib.c"
      var $33=(($32)|0)!=0; //@line 425 "loadlib.c"
      if ($33) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 425 "loadlib.c"
    case 7: 
      var $35=$stat; //@line 426 "loadlib.c"
      var $36=(($35)|0)!=2; //@line 426 "loadlib.c"
      if ($36) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 426 "loadlib.c"
    case 8: 
      var $38=$2; //@line 426 "loadlib.c"
      var $39=$filename; //@line 426 "loadlib.c"
      __Z9loaderrorP9lua_StatePKc($38, $39); //@line 426 "loadlib.c"
      __label__ = 9; break; //@line 426 "loadlib.c"
    case 9: 
      var $41=$2; //@line 427 "loadlib.c"
      var $42=$name; //@line 427 "loadlib.c"
      var $43=$filename; //@line 427 "loadlib.c"
      var $44=_lua_pushfstring($41, ((STRING_TABLE.__str22561)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=$42,HEAP32[(((tempInt)+(4))>>2)]=$43,tempInt)); //@line 427 "loadlib.c"
      $1=1; //@line 429 "loadlib.c"
      __label__ = 11; break; //@line 429 "loadlib.c"
    case 10: 
      $1=1; //@line 431 "loadlib.c"
      __label__ = 11; break; //@line 431 "loadlib.c"
    case 11: 
      var $47=$1; //@line 432 "loadlib.c"
      STACKTOP = __stackBase__;
      return $47; //@line 432 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z12loader_CrootP9lua_State["X"]=1;

function _luaopen_package($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $i;
      $1=$L;
      var $2=$1; //@line 630 "loadlib.c"
      var $3=_luaL_newmetatable($2, ((STRING_TABLE.__str4543)|0)); //@line 630 "loadlib.c"
      var $4=$1; //@line 631 "loadlib.c"
      _lua_pushcclosure($4, 56, 0); //@line 631 "loadlib.c"
      var $5=$1; //@line 632 "loadlib.c"
      _lua_setfield($5, -2, ((STRING_TABLE.__str5544)|0)); //@line 632 "loadlib.c"
      var $6=$1; //@line 634 "loadlib.c"
      _luaL_register($6, ((STRING_TABLE.__str6545)|0), ((__ZL8pk_funcs)|0)); //@line 634 "loadlib.c"
      var $7=$1; //@line 639 "loadlib.c"
      _lua_pushvalue($7, -1); //@line 639 "loadlib.c"
      var $8=$1; //@line 640 "loadlib.c"
      _lua_replace($8, -10001); //@line 640 "loadlib.c"
      var $9=$1; //@line 642 "loadlib.c"
      _lua_createtable($9, 4, 0); //@line 642 "loadlib.c"
      $i=0; //@line 644 "loadlib.c"
      __label__ = 3; break; //@line 644 "loadlib.c"
    case 3: 
      var $11=$i; //@line 644 "loadlib.c"
      var $12=((__ZL7loaders+($11<<2))|0); //@line 644 "loadlib.c"
      var $13=HEAP32[(($12)>>2)]; //@line 644 "loadlib.c"
      var $14=(($13)|0)!=0; //@line 644 "loadlib.c"
      if ($14) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 644 "loadlib.c"
    case 4: 
      var $16=$1; //@line 645 "loadlib.c"
      var $17=$i; //@line 645 "loadlib.c"
      var $18=((__ZL7loaders+($17<<2))|0); //@line 645 "loadlib.c"
      var $19=HEAP32[(($18)>>2)]; //@line 645 "loadlib.c"
      _lua_pushcclosure($16, $19, 0); //@line 645 "loadlib.c"
      var $20=$1; //@line 646 "loadlib.c"
      var $21=$i; //@line 646 "loadlib.c"
      var $22=((($21)+(1))|0); //@line 646 "loadlib.c"
      _lua_rawseti($20, -2, $22); //@line 646 "loadlib.c"
      __label__ = 5; break; //@line 647 "loadlib.c"
    case 5: 
      var $24=$i; //@line 644 "loadlib.c"
      var $25=((($24)+(1))|0); //@line 644 "loadlib.c"
      $i=$25; //@line 644 "loadlib.c"
      __label__ = 3; break; //@line 644 "loadlib.c"
    case 6: 
      var $27=$1; //@line 648 "loadlib.c"
      _lua_setfield($27, -2, ((STRING_TABLE.__str7546)|0)); //@line 648 "loadlib.c"
      var $28=$1; //@line 649 "loadlib.c"
      __Z7setpathP9lua_StatePKcS2_S2_($28, ((STRING_TABLE.__str8547)|0), ((STRING_TABLE.__str9548)|0), ((STRING_TABLE.__str10549)|0)); //@line 649 "loadlib.c"
      var $29=$1; //@line 650 "loadlib.c"
      __Z7setpathP9lua_StatePKcS2_S2_($29, ((STRING_TABLE.__str11550)|0), ((STRING_TABLE.__str12551)|0), ((STRING_TABLE.__str13552)|0)); //@line 650 "loadlib.c"
      var $30=$1; //@line 652 "loadlib.c"
      _lua_pushlstring($30, ((STRING_TABLE.__str14553)|0), 9); //@line 652 "loadlib.c"
      var $31=$1; //@line 654 "loadlib.c"
      _lua_setfield($31, -2, ((STRING_TABLE.__str15554)|0)); //@line 654 "loadlib.c"
      var $32=$1; //@line 656 "loadlib.c"
      var $33=_luaL_findtable($32, -10000, ((STRING_TABLE.__str16555)|0), 2); //@line 656 "loadlib.c"
      var $34=$1; //@line 657 "loadlib.c"
      _lua_setfield($34, -2, ((STRING_TABLE.__str17556)|0)); //@line 657 "loadlib.c"
      var $35=$1; //@line 659 "loadlib.c"
      _lua_createtable($35, 0, 0); //@line 659 "loadlib.c"
      var $36=$1; //@line 660 "loadlib.c"
      _lua_setfield($36, -2, ((STRING_TABLE.__str18557)|0)); //@line 660 "loadlib.c"
      var $37=$1; //@line 661 "loadlib.c"
      _lua_pushvalue($37, -10002); //@line 661 "loadlib.c"
      var $38=$1; //@line 662 "loadlib.c"
      _luaL_register($38, 0, ((__ZL8ll_funcs)|0)); //@line 662 "loadlib.c"
      var $39=$1; //@line 663 "loadlib.c"
      _lua_settop($39, -2); //@line 663 "loadlib.c"
      ;
      return 1; //@line 664 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_luaopen_package["X"]=1;

function __Z4gctmP9lua_State($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $lib;
      $1=$L;
      var $2=$1; //@line 287 "loadlib.c"
      var $3=_luaL_checkudata($2, 1, ((STRING_TABLE.__str4543)|0)); //@line 287 "loadlib.c"
      var $4=$3; //@line 287 "loadlib.c"
      $lib=$4; //@line 287 "loadlib.c"
      var $5=$lib; //@line 288 "loadlib.c"
      var $6=HEAP32[(($5)>>2)]; //@line 288 "loadlib.c"
      var $7=(($6)|0)!=0; //@line 288 "loadlib.c"
      if ($7) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 288 "loadlib.c"
    case 3: 
      var $9=$lib; //@line 288 "loadlib.c"
      var $10=HEAP32[(($9)>>2)]; //@line 288 "loadlib.c"
      __Z12ll_unloadlibPv($10); //@line 288 "loadlib.c"
      __label__ = 4; break; //@line 288 "loadlib.c"
    case 4: 
      var $12=$lib; //@line 289 "loadlib.c"
      HEAP32[(($12)>>2)]=0; //@line 289 "loadlib.c"
      ;
      return 0; //@line 290 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7setpathP9lua_StatePKcS2_S2_($L, $fieldname, $envname, $def) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $path;
      $1=$L;
      $2=$fieldname;
      $3=$envname;
      $4=$def;
      var $5=$3; //@line 594 "loadlib.c"
      var $6=_getenv($5); //@line 594 "loadlib.c"
      $path=$6; //@line 594 "loadlib.c"
      var $7=$path; //@line 595 "loadlib.c"
      var $8=(($7)|0)==0; //@line 595 "loadlib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 595 "loadlib.c"
    case 3: 
      var $10=$1; //@line 596 "loadlib.c"
      var $11=$4; //@line 596 "loadlib.c"
      _lua_pushstring($10, $11); //@line 596 "loadlib.c"
      __label__ = 5; break; //@line 596 "loadlib.c"
    case 4: 
      var $13=$1; //@line 599 "loadlib.c"
      var $14=$path; //@line 599 "loadlib.c"
      var $15=_luaL_gsub($13, $14, ((STRING_TABLE.__str19558)|0), ((STRING_TABLE.__str20559)|0)); //@line 599 "loadlib.c"
      $path=$15; //@line 599 "loadlib.c"
      var $16=$1; //@line 601 "loadlib.c"
      var $17=$path; //@line 601 "loadlib.c"
      var $18=$4; //@line 601 "loadlib.c"
      var $19=_luaL_gsub($16, $17, ((STRING_TABLE.__str21560)|0), $18); //@line 601 "loadlib.c"
      var $20=$1; //@line 602 "loadlib.c"
      _lua_remove($20, -2); //@line 602 "loadlib.c"
      __label__ = 5; break; //@line 603 "loadlib.c"
    case 5: 
      var $22=$1; //@line 605 "loadlib.c"
      var $23=$2; //@line 605 "loadlib.c"
      _lua_setfield($22, -2, $23); //@line 605 "loadlib.c"
      ;
      return; //@line 606 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z8findfileP9lua_StatePKcS2_($L, $name, $pname) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $path;
      var $filename;
      $2=$L;
      $3=$name;
      $4=$pname;
      var $5=$2; //@line 354 "loadlib.c"
      var $6=$3; //@line 354 "loadlib.c"
      var $7=_luaL_gsub($5, $6, ((STRING_TABLE.__str28567)|0), ((STRING_TABLE.__str31570)|0)); //@line 354 "loadlib.c"
      $3=$7; //@line 354 "loadlib.c"
      var $8=$2; //@line 355 "loadlib.c"
      var $9=$4; //@line 355 "loadlib.c"
      _lua_getfield($8, -10001, $9); //@line 355 "loadlib.c"
      var $10=$2; //@line 356 "loadlib.c"
      var $11=_lua_tolstring($10, -1, 0); //@line 356 "loadlib.c"
      $path=$11; //@line 356 "loadlib.c"
      var $12=$path; //@line 357 "loadlib.c"
      var $13=(($12)|0)==0; //@line 357 "loadlib.c"
      if ($13) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 357 "loadlib.c"
    case 3: 
      var $15=$2; //@line 358 "loadlib.c"
      var $16=$4; //@line 358 "loadlib.c"
      var $17=_luaL_error($15, ((STRING_TABLE.__str32571)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$16,tempInt)); //@line 358 "loadlib.c"
      __label__ = 4; break; //@line 358 "loadlib.c"
    case 4: 
      var $19=$2; //@line 359 "loadlib.c"
      _lua_pushlstring($19, ((__str33572)|0), 0); //@line 359 "loadlib.c"
      __label__ = 5; break; //@line 360 "loadlib.c"
    case 5: 
      var $21=$2; //@line 360 "loadlib.c"
      var $22=$path; //@line 360 "loadlib.c"
      var $23=__Z16pushnexttemplateP9lua_StatePKc($21, $22); //@line 360 "loadlib.c"
      $path=$23; //@line 360 "loadlib.c"
      var $24=(($23)|0)!=0; //@line 360 "loadlib.c"
      if ($24) { __label__ = 6; break; } else { __label__ = 9; break; } //@line 360 "loadlib.c"
    case 6: 
      var $26=$2; //@line 362 "loadlib.c"
      var $27=$2; //@line 362 "loadlib.c"
      var $28=_lua_tolstring($27, -1, 0); //@line 362 "loadlib.c"
      var $29=$3; //@line 362 "loadlib.c"
      var $30=_luaL_gsub($26, $28, ((STRING_TABLE.__str34573)|0), $29); //@line 362 "loadlib.c"
      $filename=$30; //@line 362 "loadlib.c"
      var $31=$2; //@line 363 "loadlib.c"
      _lua_remove($31, -2); //@line 363 "loadlib.c"
      var $32=$filename; //@line 364 "loadlib.c"
      var $33=__Z8readablePKc($32); //@line 364 "loadlib.c"
      var $34=(($33)|0)!=0; //@line 364 "loadlib.c"
      if ($34) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 364 "loadlib.c"
    case 7: 
      var $36=$filename; //@line 365 "loadlib.c"
      $1=$36; //@line 365 "loadlib.c"
      __label__ = 10; break; //@line 365 "loadlib.c"
    case 8: 
      var $38=$2; //@line 366 "loadlib.c"
      var $39=$filename; //@line 366 "loadlib.c"
      var $40=_lua_pushfstring($38, ((STRING_TABLE.__str35574)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$39,tempInt)); //@line 366 "loadlib.c"
      var $41=$2; //@line 367 "loadlib.c"
      _lua_remove($41, -2); //@line 367 "loadlib.c"
      var $42=$2; //@line 368 "loadlib.c"
      _lua_concat($42, 2); //@line 368 "loadlib.c"
      __label__ = 5; break; //@line 369 "loadlib.c"
    case 9: 
      $1=0; //@line 370 "loadlib.c"
      __label__ = 10; break; //@line 370 "loadlib.c"
    case 10: 
      var $45=$1; //@line 371 "loadlib.c"
      STACKTOP = __stackBase__;
      return $45; //@line 371 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z8findfileP9lua_StatePKcS2_["X"]=1;

function __Z10mkfuncnameP9lua_StatePKc($L, $modname) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $funcname;
      var $mark;
      $1=$L;
      $2=$modname;
      var $3=$2; //@line 393 "loadlib.c"
      var $4=HEAP8[(((STRING_TABLE.__str27566)|0))]; //@line 393 "loadlib.c"
      var $5=(($4 << 24) >> 24); //@line 393 "loadlib.c"
      var $6=_strchr($3, $5); //@line 393 "loadlib.c"
      $mark=$6; //@line 393 "loadlib.c"
      var $7=$mark; //@line 394 "loadlib.c"
      var $8=(($7)|0)!=0; //@line 394 "loadlib.c"
      if ($8) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 394 "loadlib.c"
    case 3: 
      var $10=$mark; //@line 394 "loadlib.c"
      var $11=(($10+1)|0); //@line 394 "loadlib.c"
      $2=$11; //@line 394 "loadlib.c"
      __label__ = 4; break; //@line 394 "loadlib.c"
    case 4: 
      var $13=$1; //@line 395 "loadlib.c"
      var $14=$2; //@line 395 "loadlib.c"
      var $15=_luaL_gsub($13, $14, ((STRING_TABLE.__str28567)|0), ((STRING_TABLE.__str29568)|0)); //@line 395 "loadlib.c"
      $funcname=$15; //@line 395 "loadlib.c"
      var $16=$1; //@line 396 "loadlib.c"
      var $17=$funcname; //@line 396 "loadlib.c"
      var $18=_lua_pushfstring($16, ((STRING_TABLE.__str30569)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 4),STACKTOP += 4,HEAP32[((tempInt)>>2)]=$17,tempInt)); //@line 396 "loadlib.c"
      $funcname=$18; //@line 396 "loadlib.c"
      var $19=$1; //@line 397 "loadlib.c"
      _lua_remove($19, -2); //@line 397 "loadlib.c"
      var $20=$funcname; //@line 398 "loadlib.c"
      STACKTOP = __stackBase__;
      return $20; //@line 398 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z11ll_loadfuncP9lua_StatePKcS2_($L, $path, $sym) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $reg;
      var $f;
      $2=$L;
      $3=$path;
      $4=$sym;
      var $5=$2; //@line 295 "loadlib.c"
      var $6=$3; //@line 295 "loadlib.c"
      var $7=__Z11ll_registerP9lua_StatePKc($5, $6); //@line 295 "loadlib.c"
      $reg=$7; //@line 295 "loadlib.c"
      var $8=$reg; //@line 296 "loadlib.c"
      var $9=HEAP32[(($8)>>2)]; //@line 296 "loadlib.c"
      var $10=(($9)|0)==0; //@line 296 "loadlib.c"
      if ($10) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 296 "loadlib.c"
    case 3: 
      var $12=$2; //@line 296 "loadlib.c"
      var $13=$3; //@line 296 "loadlib.c"
      var $14=__Z7ll_loadP9lua_StatePKc($12, $13); //@line 296 "loadlib.c"
      var $15=$reg; //@line 296 "loadlib.c"
      HEAP32[(($15)>>2)]=$14; //@line 296 "loadlib.c"
      __label__ = 4; break; //@line 296 "loadlib.c"
    case 4: 
      var $17=$reg; //@line 297 "loadlib.c"
      var $18=HEAP32[(($17)>>2)]; //@line 297 "loadlib.c"
      var $19=(($18)|0)==0; //@line 297 "loadlib.c"
      if ($19) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 297 "loadlib.c"
    case 5: 
      $1=1; //@line 298 "loadlib.c"
      __label__ = 9; break; //@line 298 "loadlib.c"
    case 6: 
      var $22=$2; //@line 300 "loadlib.c"
      var $23=$reg; //@line 300 "loadlib.c"
      var $24=HEAP32[(($23)>>2)]; //@line 300 "loadlib.c"
      var $25=$4; //@line 300 "loadlib.c"
      var $26=__Z6ll_symP9lua_StatePvPKc($22, $24, $25); //@line 300 "loadlib.c"
      $f=$26; //@line 300 "loadlib.c"
      var $27=$f; //@line 301 "loadlib.c"
      var $28=(($27)|0)==0; //@line 301 "loadlib.c"
      if ($28) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 301 "loadlib.c"
    case 7: 
      $1=2; //@line 302 "loadlib.c"
      __label__ = 9; break; //@line 302 "loadlib.c"
    case 8: 
      var $31=$2; //@line 303 "loadlib.c"
      var $32=$f; //@line 303 "loadlib.c"
      _lua_pushcclosure($31, $32, 0); //@line 303 "loadlib.c"
      $1=0; //@line 304 "loadlib.c"
      __label__ = 9; break; //@line 304 "loadlib.c"
    case 9: 
      var $34=$1; //@line 306 "loadlib.c"
      ;
      return $34; //@line 306 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9loaderrorP9lua_StatePKc($L, $filename) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$filename;
  var $3=$1; //@line 375 "loadlib.c"
  var $4=$1; //@line 376 "loadlib.c"
  var $5=_lua_tolstring($4, 1, 0); //@line 376 "loadlib.c"
  var $6=$2; //@line 376 "loadlib.c"
  var $7=$1; //@line 376 "loadlib.c"
  var $8=_lua_tolstring($7, -1, 0); //@line 376 "loadlib.c"
  var $9=_luaL_error($3, ((STRING_TABLE.__str23562)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 12),STACKTOP += 12,HEAP32[((tempInt)>>2)]=$5,HEAP32[(((tempInt)+(4))>>2)]=$6,HEAP32[(((tempInt)+(8))>>2)]=$8,tempInt)); //@line 376 "loadlib.c"
  STACKTOP = __stackBase__;
  return; //@line 377 "loadlib.c"
}


function __Z11ll_registerP9lua_StatePKc($L, $path) {
  var __stackBase__  = STACKTOP; _memset(__stackBase__, 0, 0);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $plib;
      $1=$L;
      $2=$path;
      var $3=$1; //@line 264 "loadlib.c"
      var $4=$2; //@line 264 "loadlib.c"
      var $5=_lua_pushfstring($3, ((STRING_TABLE.__str25564)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str26565)|0),HEAP32[(((tempInt)+(4))>>2)]=$4,tempInt)); //@line 264 "loadlib.c"
      var $6=$1; //@line 265 "loadlib.c"
      _lua_gettable($6, -10000); //@line 265 "loadlib.c"
      var $7=$1; //@line 266 "loadlib.c"
      var $8=_lua_type($7, -1); //@line 266 "loadlib.c"
      var $9=(($8)|0)==0; //@line 266 "loadlib.c"
      if ($9) { __label__ = 4; break; } else { __label__ = 3; break; } //@line 266 "loadlib.c"
    case 3: 
      var $11=$1; //@line 267 "loadlib.c"
      var $12=_lua_touserdata($11, -1); //@line 267 "loadlib.c"
      var $13=$12; //@line 267 "loadlib.c"
      $plib=$13; //@line 267 "loadlib.c"
      __label__ = 5; break; //@line 267 "loadlib.c"
    case 4: 
      var $15=$1; //@line 269 "loadlib.c"
      _lua_settop($15, -2); //@line 269 "loadlib.c"
      var $16=$1; //@line 270 "loadlib.c"
      var $17=_lua_newuserdata($16, 4); //@line 270 "loadlib.c"
      var $18=$17; //@line 270 "loadlib.c"
      $plib=$18; //@line 270 "loadlib.c"
      var $19=$plib; //@line 271 "loadlib.c"
      HEAP32[(($19)>>2)]=0; //@line 271 "loadlib.c"
      var $20=$1; //@line 272 "loadlib.c"
      _lua_getfield($20, -10000, ((STRING_TABLE.__str4543)|0)); //@line 272 "loadlib.c"
      var $21=$1; //@line 273 "loadlib.c"
      var $22=_lua_setmetatable($21, -2); //@line 273 "loadlib.c"
      var $23=$1; //@line 274 "loadlib.c"
      var $24=$2; //@line 274 "loadlib.c"
      var $25=_lua_pushfstring($23, ((STRING_TABLE.__str25564)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 8),STACKTOP += 8,HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str26565)|0),HEAP32[(((tempInt)+(4))>>2)]=$24,tempInt)); //@line 274 "loadlib.c"
      var $26=$1; //@line 275 "loadlib.c"
      _lua_pushvalue($26, -2); //@line 275 "loadlib.c"
      var $27=$1; //@line 276 "loadlib.c"
      _lua_settable($27, -10000); //@line 276 "loadlib.c"
      __label__ = 5; break; //@line 277 "loadlib.c"
    case 5: 
      var $29=$plib; //@line 278 "loadlib.c"
      STACKTOP = __stackBase__;
      return $29; //@line 278 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7ll_loadP9lua_StatePKc($L, $path) {
  ;
  var __label__;

  var $1;
  var $2;
  $1=$L;
  $2=$path;
  var $3=$1; //@line 246 "loadlib.c"
  _lua_pushlstring($3, ((STRING_TABLE.__str24563)|0), 58); //@line 246 "loadlib.c"
  ;
  return 0; //@line 247 "loadlib.c"
}


function __Z6ll_symP9lua_StatePvPKc($L, $lib, $sym) {
  ;
  var __label__;

  var $1;
  var $2;
  var $3;
  $1=$L;
  $2=$lib;
  $3=$sym;
  var $4=$1; //@line 253 "loadlib.c"
  _lua_pushlstring($4, ((STRING_TABLE.__str24563)|0), 58); //@line 253 "loadlib.c"
  ;
  return 0; //@line 254 "loadlib.c"
}


function __Z16pushnexttemplateP9lua_StatePKc($L, $path) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $l;
      $2=$L;
      $3=$path;
      __label__ = 3; break; //@line 342 "loadlib.c"
    case 3: 
      var $5=$3; //@line 342 "loadlib.c"
      var $6=HEAP8[($5)]; //@line 342 "loadlib.c"
      var $7=(($6 << 24) >> 24); //@line 342 "loadlib.c"
      var $8=HEAP8[(((STRING_TABLE.__str37576)|0))]; //@line 342 "loadlib.c"
      var $9=(($8 << 24) >> 24); //@line 342 "loadlib.c"
      var $10=(($7)|0)==(($9)|0); //@line 342 "loadlib.c"
      if ($10) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 342 "loadlib.c"
    case 4: 
      var $12=$3; //@line 342 "loadlib.c"
      var $13=(($12+1)|0); //@line 342 "loadlib.c"
      $3=$13; //@line 342 "loadlib.c"
      __label__ = 3; break; //@line 342 "loadlib.c"
    case 5: 
      var $15=$3; //@line 343 "loadlib.c"
      var $16=HEAP8[($15)]; //@line 343 "loadlib.c"
      var $17=(($16 << 24) >> 24); //@line 343 "loadlib.c"
      var $18=(($17)|0)==0; //@line 343 "loadlib.c"
      if ($18) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 343 "loadlib.c"
    case 6: 
      $1=0; //@line 343 "loadlib.c"
      __label__ = 10; break; //@line 343 "loadlib.c"
    case 7: 
      var $21=$3; //@line 344 "loadlib.c"
      var $22=HEAP8[(((STRING_TABLE.__str37576)|0))]; //@line 344 "loadlib.c"
      var $23=(($22 << 24) >> 24); //@line 344 "loadlib.c"
      var $24=_strchr($21, $23); //@line 344 "loadlib.c"
      $l=$24; //@line 344 "loadlib.c"
      var $25=$l; //@line 345 "loadlib.c"
      var $26=(($25)|0)==0; //@line 345 "loadlib.c"
      if ($26) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 345 "loadlib.c"
    case 8: 
      var $28=$3; //@line 345 "loadlib.c"
      var $29=$3; //@line 345 "loadlib.c"
      var $30=_strlen($29); //@line 345 "loadlib.c"
      var $31=(($28+$30)|0); //@line 345 "loadlib.c"
      $l=$31; //@line 345 "loadlib.c"
      __label__ = 9; break; //@line 345 "loadlib.c"
    case 9: 
      var $33=$2; //@line 346 "loadlib.c"
      var $34=$3; //@line 346 "loadlib.c"
      var $35=$l; //@line 346 "loadlib.c"
      var $36=$3; //@line 346 "loadlib.c"
      var $37=$35; //@line 346 "loadlib.c"
      var $38=$36; //@line 346 "loadlib.c"
      var $39=((($37)-($38))|0); //@line 346 "loadlib.c"
      _lua_pushlstring($33, $34, $39); //@line 346 "loadlib.c"
      var $40=$l; //@line 347 "loadlib.c"
      $1=$40; //@line 347 "loadlib.c"
      __label__ = 10; break; //@line 347 "loadlib.c"
    case 10: 
      var $42=$1; //@line 348 "loadlib.c"
      ;
      return $42; //@line 348 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}
__Z16pushnexttemplateP9lua_StatePKc["X"]=1;

function __Z8readablePKc($filename) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $f;
      $2=$filename;
      var $3=$2; //@line 333 "loadlib.c"
      var $4=_fopen($3, ((STRING_TABLE.__str36575)|0)); //@line 333 "loadlib.c"
      $f=$4; //@line 333 "loadlib.c"
      var $5=$f; //@line 334 "loadlib.c"
      var $6=(($5)|0)==0; //@line 334 "loadlib.c"
      if ($6) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 334 "loadlib.c"
    case 3: 
      $1=0; //@line 334 "loadlib.c"
      __label__ = 5; break; //@line 334 "loadlib.c"
    case 4: 
      var $9=$f; //@line 335 "loadlib.c"
      var $10=_fclose($9); //@line 335 "loadlib.c"
      $1=1; //@line 336 "loadlib.c"
      __label__ = 5; break; //@line 336 "loadlib.c"
    case 5: 
      var $12=$1; //@line 337 "loadlib.c"
      ;
      return $12; //@line 337 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7modinitP9lua_StatePKc($L, $modname) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $dot;
      $1=$L;
      $2=$modname;
      var $3=$1; //@line 531 "loadlib.c"
      _lua_pushvalue($3, -1); //@line 531 "loadlib.c"
      var $4=$1; //@line 532 "loadlib.c"
      _lua_setfield($4, -2, ((STRING_TABLE.__str47586)|0)); //@line 532 "loadlib.c"
      var $5=$1; //@line 533 "loadlib.c"
      var $6=$2; //@line 533 "loadlib.c"
      _lua_pushstring($5, $6); //@line 533 "loadlib.c"
      var $7=$1; //@line 534 "loadlib.c"
      _lua_setfield($7, -2, ((STRING_TABLE.__str44583)|0)); //@line 534 "loadlib.c"
      var $8=$2; //@line 535 "loadlib.c"
      var $9=_strrchr($8, 46); //@line 535 "loadlib.c"
      $dot=$9; //@line 535 "loadlib.c"
      var $10=$dot; //@line 536 "loadlib.c"
      var $11=(($10)|0)==0; //@line 536 "loadlib.c"
      if ($11) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 536 "loadlib.c"
    case 3: 
      var $13=$2; //@line 536 "loadlib.c"
      $dot=$13; //@line 536 "loadlib.c"
      __label__ = 5; break; //@line 536 "loadlib.c"
    case 4: 
      var $15=$dot; //@line 537 "loadlib.c"
      var $16=(($15+1)|0); //@line 537 "loadlib.c"
      $dot=$16; //@line 537 "loadlib.c"
      __label__ = 5; break; //@line 537 "loadlib.c"
    case 5: 
      var $18=$1; //@line 539 "loadlib.c"
      var $19=$2; //@line 539 "loadlib.c"
      var $20=$dot; //@line 539 "loadlib.c"
      var $21=$2; //@line 539 "loadlib.c"
      var $22=$20; //@line 539 "loadlib.c"
      var $23=$21; //@line 539 "loadlib.c"
      var $24=((($22)-($23))|0); //@line 539 "loadlib.c"
      _lua_pushlstring($18, $19, $24); //@line 539 "loadlib.c"
      var $25=$1; //@line 540 "loadlib.c"
      _lua_setfield($25, -2, ((STRING_TABLE.__str48587)|0)); //@line 540 "loadlib.c"
      ;
      return; //@line 541 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z7setfenvP9lua_State($L) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; _memset(__stackBase__, 0, 100);
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $ar=__stackBase__;
      $1=$L;
      var $2=$1; //@line 509 "loadlib.c"
      var $3=_lua_getstack($2, 1, $ar); //@line 509 "loadlib.c"
      var $4=(($3)|0)==0; //@line 509 "loadlib.c"
      if ($4) { __label__ = 5; break; } else { __label__ = 3; break; } //@line 509 "loadlib.c"
    case 3: 
      var $6=$1; //@line 510 "loadlib.c"
      var $7=_lua_getinfo($6, ((STRING_TABLE.__str45584)|0), $ar); //@line 510 "loadlib.c"
      var $8=(($7)|0)==0; //@line 510 "loadlib.c"
      if ($8) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 510 "loadlib.c"
    case 4: 
      var $10=$1; //@line 511 "loadlib.c"
      var $11=_lua_iscfunction($10, -1); //@line 511 "loadlib.c"
      var $12=(($11)|0)!=0; //@line 511 "loadlib.c"
      if ($12) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 511 "loadlib.c"
    case 5: 
      var $14=$1; //@line 512 "loadlib.c"
      var $15=_luaL_error($14, ((STRING_TABLE.__str46585)|0), (tempInt=STACKTOP,_memset(STACKTOP, 0, 1),STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),HEAP32[((tempInt)>>2)]=0,tempInt)); //@line 512 "loadlib.c"
      __label__ = 6; break; //@line 512 "loadlib.c"
    case 6: 
      var $17=$1; //@line 513 "loadlib.c"
      _lua_pushvalue($17, -2); //@line 513 "loadlib.c"
      var $18=$1; //@line 514 "loadlib.c"
      var $19=_lua_setfenv($18, -2); //@line 514 "loadlib.c"
      var $20=$1; //@line 515 "loadlib.c"
      _lua_settop($20, -2); //@line 515 "loadlib.c"
      STACKTOP = __stackBase__;
      return; //@line 516 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Z9dooptionsP9lua_Statei($L, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $2;
      var $i;
      $1=$L;
      $2=$n;
      $i=2; //@line 521 "loadlib.c"
      __label__ = 3; break; //@line 521 "loadlib.c"
    case 3: 
      var $4=$i; //@line 521 "loadlib.c"
      var $5=$2; //@line 521 "loadlib.c"
      var $6=(($4)|0) <= (($5)|0); //@line 521 "loadlib.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 521 "loadlib.c"
    case 4: 
      var $8=$1; //@line 522 "loadlib.c"
      var $9=$i; //@line 522 "loadlib.c"
      _lua_pushvalue($8, $9); //@line 522 "loadlib.c"
      var $10=$1; //@line 523 "loadlib.c"
      _lua_pushvalue($10, -2); //@line 523 "loadlib.c"
      var $11=$1; //@line 524 "loadlib.c"
      _lua_call($11, 1, 0); //@line 524 "loadlib.c"
      __label__ = 5; break; //@line 525 "loadlib.c"
    case 5: 
      var $13=$i; //@line 521 "loadlib.c"
      var $14=((($13)+(1))|0); //@line 521 "loadlib.c"
      $i=$14; //@line 521 "loadlib.c"
      __label__ = 3; break; //@line 521 "loadlib.c"
    case 6: 
      ;
      return; //@line 526 "loadlib.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _luaL_openlibs($L) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $1;
      var $lib;
      $1=$L;
      $lib=((__ZL7lualibs)|0); //@line 31 "linit.c"
      __label__ = 3; break; //@line 32 "linit.c"
    case 3: 
      var $3=$lib; //@line 32 "linit.c"
      var $4=(($3+4)|0); //@line 32 "linit.c"
      var $5=HEAP32[(($4)>>2)]; //@line 32 "linit.c"
      var $6=(($5)|0)!=0; //@line 32 "linit.c"
      if ($6) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 32 "linit.c"
    case 4: 
      var $8=$1; //@line 33 "linit.c"
      var $9=$lib; //@line 33 "linit.c"
      var $10=(($9+4)|0); //@line 33 "linit.c"
      var $11=HEAP32[(($10)>>2)]; //@line 33 "linit.c"
      _lua_pushcclosure($8, $11, 0); //@line 33 "linit.c"
      var $12=$1; //@line 34 "linit.c"
      var $13=$lib; //@line 34 "linit.c"
      var $14=(($13)|0); //@line 34 "linit.c"
      var $15=HEAP32[(($14)>>2)]; //@line 34 "linit.c"
      _lua_pushstring($12, $15); //@line 34 "linit.c"
      var $16=$1; //@line 35 "linit.c"
      _lua_call($16, 1, 0); //@line 35 "linit.c"
      __label__ = 5; break; //@line 36 "linit.c"
    case 5: 
      var $18=$lib; //@line 32 "linit.c"
      var $19=(($18+8)|0); //@line 32 "linit.c"
      $lib=$19; //@line 32 "linit.c"
      __label__ = 3; break; //@line 32 "linit.c"
    case 6: 
      ;
      return; //@line 37 "linit.c"
    default: assert(0, "bad label: " + __label__);
  }
}

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;
var _llvm_dbg_declare; // stub for _llvm_dbg_declare

  
  function _memcpy(dest, src, num, align) {
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _strlen(ptr) {
      return String_len(ptr);
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}

  var _floor=Math.floor;

  var _llvm_pow_f64=Math.pow;

  var _abs=Math.abs;

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return { f0:thrown, f1:typeArray[i] };
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return { f0:thrown, f1 :throwntype };
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      Module.printErr('Compiled code throwing an exception, ' + [ptr,type,destructor] + ', at ' + new Error().stack);
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
  
      exitRuntime();
      ABORT = true;
  
      throw 'exit(' + status + ') called, at ' + new Error().stack;
    }function _exit(status) {
      __exit(status);
    }


  function ___gxx_personality_v0() {
    }

  function _llvm_eh_selector(unused_exception_value, personality/*, varargs*/) {
      var type = HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]
      for (var i = 2; i < arguments.length; i++) {
        if (arguments[i] ==  type) return type;
      }
      return 0;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = false;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        FUNCTION_TABLE[destructor](ptr);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }

  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }

  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }

  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }

  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8*', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }

  function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        ret = [ret>>>0,Math.min(Math.floor((ret)/4294967296), 4294967295)];
      }
  
      return ret;
    }function _strtoul(str, endptr, base) {
      return __parseInt(str, endptr, base, 0, 4294967295, 32, true);  // ULONG_MAX.
    }

  
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[(((varargs)+(argIndex))>>2)],tempDoubleI32[1]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = String_len(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      HEAP8[((s)+(i))]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _strcat(pdest, psrc) {
      var len = _strlen(pdest);
      var i = 0;
      do {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _strncat(pdest, psrc, num) {
      var len = _strlen(pdest);
      var i = 0;
      while(1) {
        HEAP8[(pdest+len+i)]=HEAP8[(psrc+i)];
        if (HEAP8[((pdest)+(len+i))] == 0) break;
        i ++;
        if (i == num) {
          HEAP8[((pdest)+(len+i))]=0
          break;
        }
      }
      return pdest;
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }var _strcoll=_strcmp;


  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          assert('Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc');
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // Allocate these on the stack (and never free, we are called from ATINIT or earlier), to keep their locations low
        _stdin = allocate([1], 'void*', ALLOC_STACK);
        _stdout = allocate([2], 'void*', ALLOC_STACK);
        _stderr = allocate([3], 'void*', ALLOC_STACK);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        var path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP8[((buf)+(i))]=contents[offset + i]
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      if (!FS.streams[stream]) return -1;
      var streamObj = FS.streams[stream];
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _read(stream, _fgetc.ret, 1);
      if (ret == 0) {
        streamObj.eof = true;
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[(_fgetc.ret)];
      }
    }var _getc=_fgetc;var __IO_getc=_getc;

  
  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        if (!FS.streams[stream]) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(FS.streams[stream].path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      if (FS.streams[stream]) {
        c = unSign(c & 0xFF);
        FS.streams[stream].ungotten.push(c);
        return c;
      } else {
        return -1;
      }
    }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(FS.streams[stream] && FS.streams[stream].error);
    }


  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _free(){}
  Module["_free"] = _free;

  function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    }

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      return Number(FS.streams[stream] && FS.streams[stream].eof);
    }

  function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function ___errno_location() {
      return ___setErrNo.ret;
    }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      if (!FS.streams[stream]) return 0;
      var streamObj = FS.streams[stream];
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[((s)+(i))]=byte_
      }
      HEAP8[((s)+(i))]=0
      return s;
    }


  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].object.isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (FS.streams[stream]) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      if (FS.streams[stream]) FS.streams[stream].error = false;
    }

  
  
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      // remove initial whitespace
      while (1) {
        next = get();
        if (next == 0) return 0;
        if (!(next in __scanString.whiteSpace)) break;
      } 
      unget(next);
      next = 1;
      for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
        if (next <= 0) return fields;
        var next = get();
        if (next <= 0) return fields;  // End of input.
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f') {
            var last = -1;
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            unget(next);
            while (buffer.length > last) {
              unget(buffer.pop().charCodeAt(0));
            }
            next = get();
          } else {
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                      (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
              } else {
                break;
              }
              first = false;
            }
          }
          if (buffer.length === 0) return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
              if (long_) {
                (tempDoubleF64[0]=parseFloat(text),HEAP32[((argPtr)>>2)]=tempDoubleI32[0],HEAP32[(((argPtr)+(4))>>2)]=tempDoubleI32[1])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[((argPtr)+(j))]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          while (next in __scanString.whiteSpace) {
            next = get();
            if (next <= 0) return fields;  // End of input.
          }
          unget(next);
        } else {
          // Not a specifier.
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            return fields;
          }
        }
      }
      return fields;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      if (FS.streams[stream]) {
        var get = function() { return _fgetc(stream); };
        var unget = function(c) { return _ungetc(c, stream); };
        return __scanString(format, get, unget, varargs);
      } else {
        return -1;
      }
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + Math.floor(Math.random() * 25));
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      for (var i = 0; i < result.length; i++) {
        HEAP8[((s)+(i))]=result.charCodeAt(i);
      }
      HEAP8[((s)+(i))]=0;
      return s;
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }

  var _tan=Math.tan;

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  var _sqrt=Math.sqrt;

  var _sin=Math.sin;


  function _srand(seed) {}

  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }

  function _modf(x, intpart) {
      (tempDoubleF64[0]=Math.floor(x),HEAP32[((intpart)>>2)]=tempDoubleI32[0],HEAP32[(((intpart)+(4))>>2)]=tempDoubleI32[1])
      return x - (tempDoubleI32[0]=HEAP32[((intpart)>>2)],tempDoubleI32[1]=HEAP32[(((intpart)+(4))>>2)],tempDoubleF64[0]);
    }

  var _log=Math.log;

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  function _ldexp(x, exp_) {
      return x * Math.pow(2, exp_);
    }

  function _frexp(x, exp_addr) {
      var sig = 0, exp_ = 0;
      if (x !== 0) {
        var raw_exp = Math.log(x)/Math.log(2);
        exp_ = Math.ceil(raw_exp);
        if (exp_ === raw_exp) exp_ += 1;
        sig = x/Math.pow(2, exp_);
      }
      HEAP32[((exp_addr)>>2)]=exp_
      return sig;
    }

  function _fmod(x, y) {
      return x % y;
    }

  var _exp=Math.exp;

  var _cos=Math.cos;


  var _ceil=Math.ceil;

  var _atan=Math.atan;

  var _atan2=Math.atan2;

  var _asin=Math.asin;

  var _acos=Math.acos;

  var _fabs=Math.abs;


  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  
  var __tzname=null;
  
  var __daylight=null;
  
  var __timezone=null;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (__tzname) return; // glibc does not need the double __
  
      __timezone = _malloc(4);
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      __daylight = _malloc(4);
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      __tzname = _malloc(2 * 4); // glibc does not need the double __
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }

  function _setlocale(category, locale) {
      if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
      return _setlocale.ret;
    }

  function _rename(old, new_) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      var oldObj = FS.analyzePath(Pointer_stringify(old));
      var newObj = FS.analyzePath(Pointer_stringify(new_));
      if (newObj.path == oldObj.path) {
        return 0;
      } else if (!oldObj.exists) {
        ___setErrNo(oldObj.error);
        return -1;
      } else if (oldObj.isRoot || oldObj.path == FS.currentPath) {
        ___setErrNo(ERRNO_CODES.EBUSY);
        return -1;
      } else if (newObj.path && newObj.path.indexOf(oldObj.path) == 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else if (newObj.exists && newObj.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else {
        delete oldObj.parentObject.contents[oldObj.name];
        newObj.parentObject.contents[newObj.name] = oldObj.object;
        return 0;
      }
    }

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (!path.object.write) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else {
        delete path.parentObject.contents[path.name];
        return 0;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists || !path.exists) {
        ___setErrNo(path.error);
        return -1;
      } else if (!path.object.write || path.isRoot) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (!path.object.isFolder) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return -1;
      } else {
        for (var i in path.object.contents) {
          ___setErrNo(ERRNO_CODES.ENOTEMPTY);
          return -1;
        }
        if (path.path == FS.currentPath) {
          ___setErrNo(ERRNO_CODES.EBUSY);
          return -1;
        } else {
          delete path.parentObject.contents[path.name];
          return 0;
        }
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  
  
  
  var _environ=null;
  
  var ___environ=null;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (_environ === null) {
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        _environ = allocate([envPtr], 'i8**', ALLOC_STATIC);
        // Set up global variable alias.
        ___environ = _environ;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      ptr = Runtime.staticAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  var ___tm_current=0;
  
  
  var ___tm_timezones={};function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      var offsets = ___tm_struct_layout;
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getUTCSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getUTCMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getUTCHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getUTCDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getUTCMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getUTCFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getUTCDay()
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=0
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=0
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.round((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
  
      var timezone = "GMT";
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _gmtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _gmtime_r(time, ___tm_current);
    }

  
  function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _localtime_r(time, ___tm_current);
    }

  function _strftime(s, maxsize, format, timeptr) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      // TODO: Implement.
      return 0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return Math.floor((Date.now() - _clock.start) * (1000/1000));
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[(ptr2++)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }

  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _ispunct(chr) {
      return (chr >= '!'.charCodeAt(0) && chr <= '/'.charCodeAt(0)) ||
             (chr >= ':'.charCodeAt(0) && chr <= '@'.charCodeAt(0)) ||
             (chr >= '['.charCodeAt(0) && chr <= '`'.charCodeAt(0)) ||
             (chr >= '{'.charCodeAt(0) && chr <= '~'.charCodeAt(0));
    }

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }


  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }



  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        addRunDependency('al ' + url);
      }};
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
___setErrNo(0);
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}





var __str3;

















var __str13;









var __ZTVN10__cxxabiv119__pointer_type_infoE;

var __ZTVN10__cxxabiv117__class_type_infoE;

var __ZTI11lua_longjmp;
var __ZTIP11lua_longjmp;






































var _luaX_tokens;

















var _luaO_nilobject_;

var __str77;













































var _luaP_opnames;



var __ZL8priority;














var __str16145;












var __ZL10dummynode_;














var _luaT_typenames;
var __ZZ9luaT_initP9lua_StateE14luaT_eventname;













































var __str9251;






var _stdin;







var _stderr;



























var __ZL10base_funcs;






var __ZL8co_funcs;












var __ZL9statnames;
























var _stdout;




var __ZZ19luaB_collectgarbageP9lua_StateE4opts;







var __ZZ19luaB_collectgarbageP9lua_StateE7optsnum;
















var __ZL5dblib;
var __str14332;













var __ZL8KEY_HOOK;
var __ZZ5hookfP9lua_StateP9lua_DebugE9hooknames;




































var __ZL5iolib;




var __ZL4flib;














var __ZZ9f_setvbufP9lua_StateE4mode;
var __ZZ9f_setvbufP9lua_StateE9modenames;



var __ZZ6f_seekP9lua_StateE4mode;
var __ZZ6f_seekP9lua_StateE9modenames;









var __ZL6fnames;

































var __ZL7mathlib;

















var __ZL6syslib;










var __ZZ12os_setlocaleP9lua_StateE3cat;
var __ZZ12os_setlocaleP9lua_StateE8catnames;



















var __ZL9tab_funcs;

var __str10493;



















var __ZL6strlib;

var __str16514;


























var __ZL8pk_funcs;


var __ZL8ll_funcs;
var __ZL7loaders;





























var __str33572;






var __ZL9sentinel_;












var __str591;







var __ZL7lualibs;
STRING_TABLE.__str=allocate([110,111,32,99,97,108,108,105,110,103,32,101,110,118,105,114,111,110,109,101,110,116,0] /* no calling environme */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
__str3=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0] /* function or expressi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([99,111,100,101,32,115,105,122,101,32,111,118,101,114,102,108,111,119,0] /* code size overflow\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* constant table overf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37=allocate([99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0] /* control structure to */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0] /* attempt to %s %s '%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19=allocate([97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0] /* attempt to %s a %s v */, "i8", ALLOC_STATIC);
STRING_TABLE.__str210=allocate([99,111,110,99,97,116,101,110,97,116,101,0] /* concatenate\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str311=allocate([112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0] /* perform arithmetic o */, "i8", ALLOC_STATIC);
STRING_TABLE.__str412=allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0] /* attempt to compare t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0] /* attempt to compare % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str813=allocate([103,108,111,98,97,108,0] /* global\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([102,105,101,108,100,0] /* field\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([117,112,118,97,108,117,101,0] /* upvalue\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12=allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_STATIC);
__str13=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([61,91,67,93,0] /* =[C]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1514=allocate([67,0] /* C\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([109,97,105,110,0] /* main\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([76,117,97,0] /* Lua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([116,97,105,108,0] /* tail\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1915=allocate([61,40,116,97,105,108,32,99,97,108,108,41,0] /* =(tail call)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([40,42,116,101,109,112,111,114,97,114,121,41,0] /* (_temporary)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str122=allocate([101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0] /* error in error handl */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTSP11lua_longjmp=allocate([80,49,49,108,117,97,95,108,111,110,103,106,109,112,0] /* P11lua_longjmp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTS11lua_longjmp=allocate([49,49,108,117,97,95,108,111,110,103,106,109,112,0] /* 11lua_longjmp\00 */, "i8", ALLOC_STATIC);
__ZTI11lua_longjmp=allocate(8, "i8", ALLOC_STATIC);
__ZTIP11lua_longjmp=allocate(16, "i8", ALLOC_STATIC);
STRING_TABLE.__str223=allocate([67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* C stack overflow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str324=allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume non-su */, "i8", ALLOC_STATIC);
STRING_TABLE.__str425=allocate([97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,109,101,116,97,109,101,116,104,111,100,47,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0] /* attempt to yield acr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str526=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str627=allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,0] /* stack overflow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str728=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str829=allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47=allocate([97,110,100,0] /* and\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str148=allocate([98,114,101,97,107,0] /* break\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str249=allocate([100,111,0] /* do\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str350=allocate([101,108,115,101,0] /* else\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str451=allocate([101,108,115,101,105,102,0] /* elseif\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str552=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str653=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str754=allocate([102,111,114,0] /* for\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str855=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str956=allocate([105,102,0] /* if\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1057=allocate([105,110,0] /* in\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1158=allocate([108,111,99,97,108,0] /* local\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1259=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1360=allocate([110,111,116,0] /* not\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1461=allocate([111,114,0] /* or\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1562=allocate([114,101,112,101,97,116,0] /* repeat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1663=allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1764=allocate([116,104,101,110,0] /* then\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1865=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1966=allocate([117,110,116,105,108,0] /* until\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2067=allocate([119,104,105,108,101,0] /* while\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2168=allocate([46,46,0] /* ..\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([61,61,0] /* ==\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24=allocate([62,61,0] /* _=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([60,61,0] /* _=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2669=allocate([126,61,0] /* ~=\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([60,110,117,109,98,101,114,62,0] /* _number_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([60,110,97,109,101,62,0] /* _name_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([60,115,116,114,105,110,103,62,0] /* _string_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([60,101,111,102,62,0] /* _eof_\00 */, "i8", ALLOC_STATIC);
_luaX_tokens=allocate(128, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([99,104,97,114,40,37,100,41,0] /* char(%d)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([37,115,58,37,100,58,32,37,115,0] /* %s:%d: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([37,115,32,110,101,97,114,32,39,37,115,39,0] /* %s near '%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0] /* invalid long string  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36=allocate([46,0] /* .\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3770=allocate([69,101,0] /* Ee\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([43,45,0] /* +-\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0] /* malformed number\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0] /* lexical element too  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41=allocate([117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0] /* unfinished string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,116,111,111,32,108,97,114,103,101,0] /* escape sequence too  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0] /* unfinished long stri */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0] /* unfinished long comm */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45=allocate([110,101,115,116,105,110,103,32,111,102,32,91,91,46,46,46,93,93,32,105,115,32,100,101,112,114,101,99,97,116,101,100,0] /* nesting of [[...]] i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46=allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0] /* chunk has too many l */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0] /* memory allocation er */, "i8", ALLOC_STATIC);
_luaO_nilobject_=allocate([0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__ZZ9luaO_log2jE5log_2=allocate([0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \00\01\02\02\03\03\0 */, "i8", ALLOC_STATIC);
__str77=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str178=allocate([40,110,117,108,108,41,0] /* (null)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str279=allocate([37,112,0] /* %p\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str380=allocate([37,0] /* %\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str481=allocate([46,46,46,0] /* ...\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str582=allocate([10,13,0] /* \0A\0D\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str683=allocate([91,115,116,114,105,110,103,32,34,0] /* [string \22\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str784=allocate([34,93,0] /* \22]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str90=allocate([77,79,86,69,0] /* MOVE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str191=allocate([76,79,65,68,75,0] /* LOADK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str292=allocate([76,79,65,68,66,79,79,76,0] /* LOADBOOL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str393=allocate([76,79,65,68,78,73,76,0] /* LOADNIL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str494=allocate([71,69,84,85,80,86,65,76,0] /* GETUPVAL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str595=allocate([71,69,84,71,76,79,66,65,76,0] /* GETGLOBAL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str696=allocate([71,69,84,84,65,66,76,69,0] /* GETTABLE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str797=allocate([83,69,84,71,76,79,66,65,76,0] /* SETGLOBAL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str898=allocate([83,69,84,85,80,86,65,76,0] /* SETUPVAL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str999=allocate([83,69,84,84,65,66,76,69,0] /* SETTABLE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10100=allocate([78,69,87,84,65,66,76,69,0] /* NEWTABLE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11101=allocate([83,69,76,70,0] /* SELF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12102=allocate([65,68,68,0] /* ADD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13103=allocate([83,85,66,0] /* SUB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14104=allocate([77,85,76,0] /* MUL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15105=allocate([68,73,86,0] /* DIV\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16106=allocate([77,79,68,0] /* MOD\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17107=allocate([80,79,87,0] /* POW\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18108=allocate([85,78,77,0] /* UNM\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19109=allocate([78,79,84,0] /* NOT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20110=allocate([76,69,78,0] /* LEN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21111=allocate([67,79,78,67,65,84,0] /* CONCAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22112=allocate([74,77,80,0] /* JMP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23113=allocate([69,81,0] /* EQ\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24114=allocate([76,84,0] /* LT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25115=allocate([76,69,0] /* LE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26116=allocate([84,69,83,84,0] /* TEST\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27117=allocate([84,69,83,84,83,69,84,0] /* TESTSET\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28118=allocate([67,65,76,76,0] /* CALL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29119=allocate([84,65,73,76,67,65,76,76,0] /* TAILCALL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30120=allocate([82,69,84,85,82,78,0] /* RETURN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31121=allocate([70,79,82,76,79,79,80,0] /* FORLOOP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32122=allocate([70,79,82,80,82,69,80,0] /* FORPREP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33123=allocate([84,70,79,82,76,79,79,80,0] /* TFORLOOP\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34124=allocate([83,69,84,76,73,83,84,0] /* SETLIST\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35125=allocate([67,76,79,83,69,0] /* CLOSE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36126=allocate([67,76,79,83,85,82,69,0] /* CLOSURE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37127=allocate([86,65,82,65,82,71,0] /* VARARG\00 */, "i8", ALLOC_STATIC);
_luaP_opnames=allocate(156, "i8", ALLOC_STATIC);
STRING_TABLE._luaP_opmodes=allocate([96,113,84,96,80,113,108,49,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,228,228,84,84,16,98,98,132,20,0,81,80] /* `qT`Pql1\10_Tl|||||| */, "i8", ALLOC_STATIC);
STRING_TABLE.__str129=allocate([115,121,110,116,97,120,32,101,114,114,111,114,0] /* syntax error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1130=allocate([118,97,114,105,97,98,108,101,115,32,105,110,32,97,115,115,105,103,110,109,101,110,116,0] /* variables in assignm */, "i8", ALLOC_STATIC);
__ZL8priority=allocate([6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 10, 9, 5, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1], "i8", ALLOC_STATIC);
STRING_TABLE.__str2131=allocate([99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0] /* cannot use '...' out */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3132=allocate([115,101,108,102,0] /* self\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4133=allocate([99,111,110,115,116,97,110,116,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* constant table overf */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5134=allocate([97,114,103,0] /* arg\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6135=allocate([60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0] /* _name_ or '...' expe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7136=allocate([108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* local variables\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8137=allocate([116,111,111,32,109,97,110,121,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0] /* too many local varia */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9138=allocate([105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0] /* items in a construct */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10139=allocate([109,97,105,110,32,102,117,110,99,116,105,111,110,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0] /* main function has mo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11140=allocate([102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,32,104,97,115,32,109,111,114,101,32,116,104,97,110,32,37,100,32,37,115,0] /* function at line %d  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12141=allocate([97,109,98,105,103,117,111,117,115,32,115,121,110,116,97,120,32,40,102,117,110,99,116,105,111,110,32,99,97,108,108,32,120,32,110,101,119,32,115,116,97,116,101,109,101,110,116,41,0] /* ambiguous syntax (fu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13142=allocate([102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0] /* function arguments e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14143=allocate([117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0] /* unexpected symbol\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15144=allocate([117,112,118,97,108,117,101,115,0] /* upvalues\00 */, "i8", ALLOC_STATIC);
__str16145=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str17146=allocate([110,111,32,108,111,111,112,32,116,111,32,98,114,101,97,107,0] /* no loop to break\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18147=allocate([39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0] /* '=' or 'in' expected */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19148=allocate([40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0] /* (for generator)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20149=allocate([40,102,111,114,32,115,116,97,116,101,41,0] /* (for state)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21150=allocate([40,102,111,114,32,99,111,110,116,114,111,108,41,0] /* (for control)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22151=allocate([40,102,111,114,32,105,110,100,101,120,41,0] /* (for index)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23152=allocate([40,102,111,114,32,108,105,109,105,116,41,0] /* (for limit)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24153=allocate([40,102,111,114,32,115,116,101,112,41,0] /* (for step)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25154=allocate([39,37,115,39,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,39,37,115,39,32,97,116,32,108,105,110,101,32,37,100,41,0] /* '%s' expected (to cl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26155=allocate([39,37,115,39,32,101,120,112,101,99,116,101,100,0] /* '%s' expected\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27156=allocate([99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,115,121,110,116,97,120,32,108,101,118,101,108,115,0] /* chunk has too many s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str158=allocate([110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0] /* not enough memory\00 */, "i8", ALLOC_STATIC);
__ZL10dummynode_=allocate([0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str164=allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0] /* table index is nil\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1165=allocate([116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0] /* table index is NaN\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2166=allocate([116,97,98,108,101,32,111,118,101,114,102,108,111,119,0] /* table overflow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3167=allocate([105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0] /* invalid key to 'next */, "i8", ALLOC_STATIC);
STRING_TABLE.__str177=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1178=allocate([98,111,111,108,101,97,110,0] /* boolean\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2179=allocate([117,115,101,114,100,97,116,97,0] /* userdata\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3180=allocate([110,117,109,98,101,114,0] /* number\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4181=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5182=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6183=allocate([102,117,110,99,116,105,111,110,0] /* function\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7184=allocate([116,104,114,101,97,100,0] /* thread\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8185=allocate([112,114,111,116,111,0] /* proto\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9186=allocate([117,112,118,97,108,0] /* upval\00 */, "i8", ALLOC_STATIC);
_luaT_typenames=allocate(44, "i8", ALLOC_STATIC);
__ZZ9luaT_initP9lua_StateE14luaT_eventname=allocate(68, "i8", ALLOC_STATIC);
STRING_TABLE.__str10188=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11189=allocate([95,95,110,101,119,105,110,100,101,120,0] /* __newindex\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12190=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13191=allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14192=allocate([95,95,101,113,0] /* __eq\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15193=allocate([95,95,97,100,100,0] /* __add\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16194=allocate([95,95,115,117,98,0] /* __sub\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17195=allocate([95,95,109,117,108,0] /* __mul\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18196=allocate([95,95,100,105,118,0] /* __div\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19197=allocate([95,95,109,111,100,0] /* __mod\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20198=allocate([95,95,112,111,119,0] /* __pow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21199=allocate([95,95,117,110,109,0] /* __unm\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22200=allocate([95,95,108,101,110,0] /* __len\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23201=allocate([95,95,108,116,0] /* __lt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24202=allocate([95,95,108,101,0] /* __le\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25203=allocate([95,95,99,111,110,99,97,116,0] /* __concat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26204=allocate([95,95,99,97,108,108,0] /* __call\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str208=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1209=allocate([98,105,110,97,114,121,32,115,116,114,105,110,103,0] /* binary string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2210=allocate([61,63,0] /* =?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3211=allocate([99,111,100,101,32,116,111,111,32,100,101,101,112,0] /* code too deep\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4212=allocate([98,97,100,32,99,111,100,101,0] /* bad code\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5213=allocate([117,110,101,120,112,101,99,116,101,100,32,101,110,100,0] /* unexpected end\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6214=allocate([98,97,100,32,99,111,110,115,116,97,110,116,0] /* bad constant\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7215=allocate([98,97,100,32,105,110,116,101,103,101,114,0] /* bad integer\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8216=allocate([37,115,58,32,37,115,32,105,110,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0] /* %s: %s in precompile */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9217=allocate([98,97,100,32,104,101,97,100,101,114,0] /* bad header\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str220=allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1221=allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2222=allocate([108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0] /* loop in gettable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3223=allocate([108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0] /* loop in settable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4224=allocate([115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0] /* string length overfl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5225=allocate([103,101,116,32,108,101,110,103,116,104,32,111,102,0] /* get length of\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6226=allocate([39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' initial value  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7227=allocate([39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' limit must be  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8228=allocate([39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0] /* 'for' step must be a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str242=allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0] /* bad argument #%d (%s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1243=allocate([110,0] /* n\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2244=allocate([109,101,116,104,111,100,0] /* method\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3245=allocate([99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0] /* calling '%s' on bad  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4246=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5247=allocate([98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0] /* bad argument #%d to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6248=allocate([37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0] /* %s expected, got %s\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7249=allocate([83,108,0] /* Sl\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8250=allocate([37,115,58,37,100,58,32,0] /* %s:%d: \00 */, "i8", ALLOC_STATIC);
__str9251=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str10252=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0] /* invalid option '%s'\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11253=allocate([115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0] /* stack overflow (%s)\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12254=allocate([118,97,108,117,101,32,101,120,112,101,99,116,101,100,0] /* value expected\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13255=allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14256=allocate([110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0] /* name conflict for mo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15257=allocate([61,115,116,100,105,110,0] /* =stdin\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16258=allocate([64,37,115,0] /* @%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17259=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18260=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19261=allocate([27,76,117,97,0] /* \1BLua\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20262=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21263=allocate([114,101,111,112,101,110,0] /* reopen\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22264=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23265=allocate([80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0] /* PANIC: unprotected e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24266=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25267=allocate([99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0] /* cannot %s %s: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str268=allocate([97,115,115,101,114,116,0] /* assert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1269=allocate([99,111,108,108,101,99,116,103,97,114,98,97,103,101,0] /* collectgarbage\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2270=allocate([100,111,102,105,108,101,0] /* dofile\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3271=allocate([101,114,114,111,114,0] /* error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4272=allocate([103,99,105,110,102,111,0] /* gcinfo\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5273=allocate([103,101,116,102,101,110,118,0] /* getfenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6274=allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7275=allocate([108,111,97,100,102,105,108,101,0] /* loadfile\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8276=allocate([108,111,97,100,0] /* load\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9277=allocate([108,111,97,100,115,116,114,105,110,103,0] /* loadstring\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10278=allocate([110,101,120,116,0] /* next\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11279=allocate([112,99,97,108,108,0] /* pcall\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12280=allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13281=allocate([114,97,119,101,113,117,97,108,0] /* rawequal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14282=allocate([114,97,119,103,101,116,0] /* rawget\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15283=allocate([114,97,119,115,101,116,0] /* rawset\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16284=allocate([115,101,108,101,99,116,0] /* select\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17285=allocate([115,101,116,102,101,110,118,0] /* setfenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18286=allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19287=allocate([116,111,110,117,109,98,101,114,0] /* tonumber\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20288=allocate([116,111,115,116,114,105,110,103,0] /* tostring\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21289=allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22290=allocate([117,110,112,97,99,107,0] /* unpack\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23291=allocate([120,112,99,97,108,108,0] /* xpcall\00 */, "i8", ALLOC_STATIC);
__ZL10base_funcs=allocate([0, 0, 0, 0, 58, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str24292=allocate([99,114,101,97,116,101,0] /* create\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25293=allocate([114,101,115,117,109,101,0] /* resume\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26294=allocate([114,117,110,110,105,110,103,0] /* running\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27295=allocate([115,116,97,116,117,115,0] /* status\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28296=allocate([119,114,97,112,0] /* wrap\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29297=allocate([121,105,101,108,100,0] /* yield\00 */, "i8", ALLOC_STATIC);
__ZL8co_funcs=allocate([0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str30298=allocate([99,111,114,111,117,116,105,110,101,0] /* coroutine\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31299=allocate([95,71,0] /* _G\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32300=allocate([76,117,97,32,53,46,49,0] /* Lua 5.1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33301=allocate([95,86,69,82,83,73,79,78,0] /* _VERSION\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34302=allocate([105,112,97,105,114,115,0] /* ipairs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35303=allocate([112,97,105,114,115,0] /* pairs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36304=allocate([107,118,0] /* kv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37305=allocate([95,95,109,111,100,101,0] /* __mode\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38306=allocate([110,101,119,112,114,111,120,121,0] /* newproxy\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39307=allocate([98,111,111,108,101,97,110,32,111,114,32,112,114,111,120,121,32,101,120,112,101,99,116,101,100,0] /* boolean or proxy exp */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40308=allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many arguments t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41309=allocate([99,97,110,110,111,116,32,114,101,115,117,109,101,32,37,115,32,99,111,114,111,117,116,105,110,101,0] /* cannot resume %s cor */, "i8", ALLOC_STATIC);
__ZL9statnames=allocate(16, "i8", ALLOC_STATIC);
STRING_TABLE.__str42310=allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0] /* too many results to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43311=allocate([115,117,115,112,101,110,100,101,100,0] /* suspended\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44312=allocate([110,111,114,109,97,108,0] /* normal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45313=allocate([100,101,97,100,0] /* dead\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46314=allocate([99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0] /* coroutine expected\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47315=allocate([76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0] /* Lua function expecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48=allocate([116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0] /* too many results to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49=allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50=allocate([116,114,117,101,0] /* true\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51=allocate([102,97,108,115,101,0] /* false\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([110,105,108,0] /* nil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([37,115,58,32,37,112,0] /* %s: %p\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54=allocate([98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* base out of range\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55=allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56=allocate([95,95,109,101,116,97,116,97,98,108,101,0] /* __metatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57=allocate([99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0] /* cannot change a prot */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58=allocate([39,115,101,116,102,101,110,118,39,32,99,97,110,110,111,116,32,99,104,97,110,103,101,32,101,110,118,105,114,111,110,109,101,110,116,32,111,102,32,103,105,118,101,110,32,111,98,106,101,99,116,0] /* 'setfenv' cannot cha */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([108,101,118,101,108,32,109,117,115,116,32,98,101,32,110,111,110,45,110,101,103,97,116,105,118,101,0] /* level must be non-ne */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60=allocate([105,110,118,97,108,105,100,32,108,101,118,101,108,0] /* invalid level\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61=allocate([102,0] /* f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62=allocate([110,111,32,102,117,110,99,116,105,111,110,32,101,110,118,105,114,111,110,109,101,110,116,32,102,111,114,32,116,97,105,108,32,99,97,108,108,32,97,116,32,108,101,118,101,108,32,37,100,0] /* no function environm */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63=allocate([105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* index out of range\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64=allocate([39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0] /* 'tostring' must retu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str65=allocate([9,0] /* \09\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67=allocate([61,40,108,111,97,100,41,0] /* =(load)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68=allocate([116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0] /* too many nested func */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69=allocate([114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0] /* reader function must */, "i8", ALLOC_STATIC);
__ZZ19luaB_collectgarbageP9lua_StateE4opts=allocate(32, "i8", ALLOC_STATIC);
STRING_TABLE.__str70=allocate([115,116,111,112,0] /* stop\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71=allocate([114,101,115,116,97,114,116,0] /* restart\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72316=allocate([99,111,108,108,101,99,116,0] /* collect\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73=allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74=allocate([115,116,101,112,0] /* step\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75=allocate([115,101,116,112,97,117,115,101,0] /* setpause\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76=allocate([115,101,116,115,116,101,112,109,117,108,0] /* setstepmul\00 */, "i8", ALLOC_STATIC);
__ZZ19luaB_collectgarbageP9lua_StateE7optsnum=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str77317=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0] /* assertion failed!\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str318=allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1319=allocate([103,101,116,102,101,110,118,0] /* getfenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2320=allocate([103,101,116,104,111,111,107,0] /* gethook\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3321=allocate([103,101,116,105,110,102,111,0] /* getinfo\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4322=allocate([103,101,116,108,111,99,97,108,0] /* getlocal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5323=allocate([103,101,116,114,101,103,105,115,116,114,121,0] /* getregistry\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6324=allocate([103,101,116,109,101,116,97,116,97,98,108,101,0] /* getmetatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7325=allocate([103,101,116,117,112,118,97,108,117,101,0] /* getupvalue\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8326=allocate([115,101,116,102,101,110,118,0] /* setfenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9327=allocate([115,101,116,104,111,111,107,0] /* sethook\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10328=allocate([115,101,116,108,111,99,97,108,0] /* setlocal\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11329=allocate([115,101,116,109,101,116,97,116,97,98,108,101,0] /* setmetatable\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12330=allocate([115,101,116,117,112,118,97,108,117,101,0] /* setupvalue\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13331=allocate([116,114,97,99,101,98,97,99,107,0] /* traceback\00 */, "i8", ALLOC_STATIC);
__ZL5dblib=allocate([0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 130, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
__str14332=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str15333=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16334=allocate([115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0] /* stack traceback:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17335=allocate([10,9,46,46,46,0] /* \0A\09...\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18336=allocate([10,9,0] /* \0A\09\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19337=allocate([83,110,108,0] /* Snl\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20338=allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21339=allocate([37,100,58,0] /* %d:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22340=allocate([32,105,110,32,102,117,110,99,116,105,111,110,32,39,37,115,39,0] /*  in function '%s'\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23341=allocate([32,105,110,32,109,97,105,110,32,99,104,117,110,107,0] /*  in main chunk\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24342=allocate([32,63,0] /*  ?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25343=allocate([32,105,110,32,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0] /*  in function _%s:%d_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26344=allocate([110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* nil or table expecte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27345=allocate([108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0] /* level out of range\0 */, "i8", ALLOC_STATIC);
__ZL8KEY_HOOK=allocate([104], ["i8",0,0,0], ALLOC_STATIC);
__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames=allocate(20, "i8", ALLOC_STATIC);
STRING_TABLE.__str28346=allocate([99,97,108,108,0] /* call\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29347=allocate([114,101,116,117,114,110,0] /* return\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30348=allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31349=allocate([99,111,117,110,116,0] /* count\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32350=allocate([116,97,105,108,32,114,101,116,117,114,110,0] /* tail return\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33351=allocate([39,115,101,116,102,101,110,118,39,32,99,97,110,110,111,116,32,99,104,97,110,103,101,32,101,110,118,105,114,111,110,109,101,110,116,32,111,102,32,103,105,118,101,110,32,111,98,106,101,99,116,0] /* 'setfenv' cannot cha */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34352=allocate([102,108,110,83,117,0] /* flnSu\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35353=allocate([62,37,115,0] /* _%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36354=allocate([102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0] /* function or level ex */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37355=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,0] /* invalid option\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38356=allocate([115,111,117,114,99,101,0] /* source\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39357=allocate([115,104,111,114,116,95,115,114,99,0] /* short_src\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40358=allocate([108,105,110,101,100,101,102,105,110,101,100,0] /* linedefined\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41359=allocate([108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0] /* lastlinedefined\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42360=allocate([119,104,97,116,0] /* what\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43361=allocate([99,117,114,114,101,110,116,108,105,110,101,0] /* currentline\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44362=allocate([110,117,112,115,0] /* nups\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45363=allocate([110,97,109,101,0] /* name\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46364=allocate([110,97,109,101,119,104,97,116,0] /* namewhat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47365=allocate([97,99,116,105,118,101,108,105,110,101,115,0] /* activelines\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48366=allocate([102,117,110,99,0] /* func\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49367=allocate([101,120,116,101,114,110,97,108,32,104,111,111,107,0] /* external hook\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50368=allocate([108,117,97,95,100,101,98,117,103,62,32,0] /* lua_debug_ \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51369=allocate([99,111,110,116,10,0] /* cont\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52370=allocate([61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0] /* =(debug command)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str371=allocate([99,108,111,115,101,0] /* close\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1372=allocate([102,108,117,115,104,0] /* flush\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2373=allocate([105,110,112,117,116,0] /* input\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3374=allocate([108,105,110,101,115,0] /* lines\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4375=allocate([111,112,101,110,0] /* open\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5376=allocate([111,117,116,112,117,116,0] /* output\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6377=allocate([112,111,112,101,110,0] /* popen\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7378=allocate([114,101,97,100,0] /* read\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8379=allocate([116,109,112,102,105,108,101,0] /* tmpfile\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9380=allocate([116,121,112,101,0] /* type\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10381=allocate([119,114,105,116,101,0] /* write\00 */, "i8", ALLOC_STATIC);
__ZL5iolib=allocate([0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 162, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str11382=allocate([115,101,101,107,0] /* seek\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12383=allocate([115,101,116,118,98,117,102,0] /* setvbuf\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13384=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14385=allocate([95,95,116,111,115,116,114,105,110,103,0] /* __tostring\00 */, "i8", ALLOC_STATIC);
__ZL4flib=allocate([0, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 166, 0, 0, 0, 0, 0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 0, 0, 0, 0, 0, 172, 0, 0, 0, 0, 0, 0, 0, 174, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str15386=allocate([105,111,0] /* io\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16387=allocate([115,116,100,105,110,0] /* stdin\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17388=allocate([115,116,100,111,117,116,0] /* stdout\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18389=allocate([115,116,100,101,114,114,0] /* stderr\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19390=allocate([70,73,76,69,42,0] /* FILE_\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20391=allocate([37,115,58,32,37,115,0] /* %s: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21392=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22393=allocate([99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0] /* cannot close standar */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23394=allocate([95,95,99,108,111,115,101,0] /* __close\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24395=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25396=allocate([102,105,108,101,32,40,99,108,111,115,101,100,41,0] /* file (closed)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26397=allocate([102,105,108,101,32,40,37,112,41,0] /* file (%p)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27398=allocate([97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0] /* attempt to use a clo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28399=allocate([37,46,49,52,103,0] /* %.14g\00 */, "i8", ALLOC_STATIC);
__ZZ9f_setvbufP9lua_StateE4mode=allocate([2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__ZZ9f_setvbufP9lua_StateE9modenames=allocate(16, "i8", ALLOC_STATIC);
STRING_TABLE.__str29400=allocate([110,111,0] /* no\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30401=allocate([102,117,108,108,0] /* full\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31402=allocate([108,105,110,101,0] /* line\00 */, "i8", ALLOC_STATIC);
__ZZ6f_seekP9lua_StateE4mode=allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__ZZ6f_seekP9lua_StateE9modenames=allocate(16, "i8", ALLOC_STATIC);
STRING_TABLE.__str32403=allocate([115,101,116,0] /* set\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33404=allocate([99,117,114,0] /* cur\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34405=allocate([101,110,100,0] /* end\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35406=allocate([116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0] /* too many arguments\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36407=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,0] /* invalid option\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37408=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,0] /* invalid format\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38409=allocate([37,108,102,0] /* %lf\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39410=allocate([102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0] /* file is already clos */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40411=allocate([115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0] /* standard %s file is  */, "i8", ALLOC_STATIC);
__ZL6fnames=allocate(8, "i8", ALLOC_STATIC);
STRING_TABLE.__str41412=allocate([99,108,111,115,101,100,32,102,105,108,101,0] /* closed file\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42413=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43414=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44415=allocate([39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* 'popen' not supporte */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45416=allocate([119,0] /* w\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str417=allocate([97,98,115,0] /* abs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1418=allocate([97,99,111,115,0] /* acos\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2419=allocate([97,115,105,110,0] /* asin\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3420=allocate([97,116,97,110,50,0] /* atan2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4421=allocate([97,116,97,110,0] /* atan\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5422=allocate([99,101,105,108,0] /* ceil\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6423=allocate([99,111,115,104,0] /* cosh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7424=allocate([99,111,115,0] /* cos\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8425=allocate([100,101,103,0] /* deg\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9426=allocate([101,120,112,0] /* exp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10427=allocate([102,108,111,111,114,0] /* floor\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11428=allocate([102,109,111,100,0] /* fmod\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12429=allocate([102,114,101,120,112,0] /* frexp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13430=allocate([108,100,101,120,112,0] /* ldexp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14431=allocate([108,111,103,49,48,0] /* log10\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15432=allocate([108,111,103,0] /* log\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16433=allocate([109,97,120,0] /* max\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17434=allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18435=allocate([109,111,100,102,0] /* modf\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19436=allocate([112,111,119,0] /* pow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20437=allocate([114,97,100,0] /* rad\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21438=allocate([114,97,110,100,111,109,0] /* random\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22439=allocate([114,97,110,100,111,109,115,101,101,100,0] /* randomseed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23440=allocate([115,105,110,104,0] /* sinh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24441=allocate([115,105,110,0] /* sin\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25442=allocate([115,113,114,116,0] /* sqrt\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26443=allocate([116,97,110,104,0] /* tanh\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27444=allocate([116,97,110,0] /* tan\00 */, "i8", ALLOC_STATIC);
__ZL7mathlib=allocate([0, 0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0, 0, 0, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 194, 0, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 202, 0, 0, 0, 0, 0, 0, 0, 204, 0, 0, 0, 0, 0, 0, 0, 206, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 212, 0, 0, 0, 0, 0, 0, 0, 214, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0, 0, 218, 0, 0, 0, 0, 0, 0, 0, 220, 0, 0, 0, 0, 0, 0, 0, 222, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 0, 0, 0, 0, 226, 0, 0, 0, 0, 0, 0, 0, 228, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, 232, 0, 0, 0, 0, 0, 0, 0, 234, 0, 0, 0, 0, 0, 0, 0, 236, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str28445=allocate([109,97,116,104,0] /* math\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29446=allocate([112,105,0] /* pi\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30447=allocate([104,117,103,101,0] /* huge\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31448=allocate([109,111,100,0] /* mod\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32449=allocate([105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0] /* interval is empty\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33450=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0] /* wrong number of argu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str452=allocate([99,108,111,99,107,0] /* clock\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1453=allocate([100,97,116,101,0] /* date\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2454=allocate([100,105,102,102,116,105,109,101,0] /* difftime\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3455=allocate([101,120,101,99,117,116,101,0] /* execute\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4456=allocate([101,120,105,116,0] /* exit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5457=allocate([103,101,116,101,110,118,0] /* getenv\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6458=allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7459=allocate([114,101,110,97,109,101,0] /* rename\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8460=allocate([115,101,116,108,111,99,97,108,101,0] /* setlocale\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9461=allocate([116,105,109,101,0] /* time\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10462=allocate([116,109,112,110,97,109,101,0] /* tmpname\00 */, "i8", ALLOC_STATIC);
__ZL6syslib=allocate([0, 0, 0, 0, 238, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 242, 0, 0, 0, 0, 0, 0, 0, 244, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 0, 0, 0, 252, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str11463=allocate([111,115,0] /* os\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12464=allocate([117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0] /* unable to generate a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13465=allocate([115,101,99,0] /* sec\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14466=allocate([109,105,110,0] /* min\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15467=allocate([104,111,117,114,0] /* hour\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16468=allocate([100,97,121,0] /* day\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17469=allocate([109,111,110,116,104,0] /* month\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18470=allocate([121,101,97,114,0] /* year\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19471=allocate([105,115,100,115,116,0] /* isdst\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20472=allocate([102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0] /* field '%s' missing i */, "i8", ALLOC_STATIC);
__ZZ12os_setlocaleP9lua_StateE3cat=allocate([6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
__ZZ12os_setlocaleP9lua_StateE8catnames=allocate(28, "i8", ALLOC_STATIC);
STRING_TABLE.__str21473=allocate([97,108,108,0] /* all\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22474=allocate([99,111,108,108,97,116,101,0] /* collate\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23475=allocate([99,116,121,112,101,0] /* ctype\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24476=allocate([109,111,110,101,116,97,114,121,0] /* monetary\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25477=allocate([110,117,109,101,114,105,99,0] /* numeric\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26478=allocate([37,115,58,32,37,115,0] /* %s: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27479=allocate([37,99,0] /* %c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28480=allocate([42,116,0] /* _t\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29481=allocate([119,100,97,121,0] /* wday\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30482=allocate([121,100,97,121,0] /* yday\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str483=allocate([99,111,110,99,97,116,0] /* concat\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1484=allocate([102,111,114,101,97,99,104,0] /* foreach\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2485=allocate([102,111,114,101,97,99,104,105,0] /* foreachi\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3486=allocate([103,101,116,110,0] /* getn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4487=allocate([109,97,120,110,0] /* maxn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5488=allocate([105,110,115,101,114,116,0] /* insert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6489=allocate([114,101,109,111,118,101,0] /* remove\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7490=allocate([115,101,116,110,0] /* setn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8491=allocate([115,111,114,116,0] /* sort\00 */, "i8", ALLOC_STATIC);
__ZL9tab_funcs=allocate([0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 268, 0, 0, 0, 0, 0, 0, 0, 270, 0, 0, 0, 0, 0, 0, 0, 272, 0, 0, 0, 0, 0, 0, 0, 274, 0, 0, 0, 0, 0, 0, 0, 276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str9492=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
__str10493=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str11494=allocate([105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0] /* invalid order functi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12495=allocate([39,115,101,116,110,39,32,105,115,32,111,98,115,111,108,101,116,101,0] /* 'setn' is obsolete\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13496=allocate([119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0] /* wrong number of argu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14497=allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0] /* invalid value (%s) a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str498=allocate([98,121,116,101,0] /* byte\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1499=allocate([99,104,97,114,0] /* char\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2500=allocate([100,117,109,112,0] /* dump\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3501=allocate([102,105,110,100,0] /* find\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4502=allocate([102,111,114,109,97,116,0] /* format\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5503=allocate([103,102,105,110,100,0] /* gfind\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6504=allocate([103,109,97,116,99,104,0] /* gmatch\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7505=allocate([103,115,117,98,0] /* gsub\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8506=allocate([108,101,110,0] /* len\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9507=allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10508=allocate([109,97,116,99,104,0] /* match\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11509=allocate([114,101,112,0] /* rep\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12510=allocate([114,101,118,101,114,115,101,0] /* reverse\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13511=allocate([115,117,98,0] /* sub\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14512=allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_STATIC);
__ZL6strlib=allocate([0, 0, 0, 0, 278, 0, 0, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 0, 0, 282, 0, 0, 0, 0, 0, 0, 0, 284, 0, 0, 0, 0, 0, 0, 0, 286, 0, 0, 0, 0, 0, 0, 0, 288, 0, 0, 0, 0, 0, 0, 0, 290, 0, 0, 0, 0, 0, 0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 294, 0, 0, 0, 0, 0, 0, 0, 296, 0, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 0, 300, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str15513=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
__str16514=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str17515=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18516=allocate([94,36,42,43,63,46,40,91,37,45,0] /* ^$_+?.([%-\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19517=allocate([116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0] /* too many captures\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20518=allocate([105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0] /* invalid capture inde */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21519=allocate([117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0] /* unfinished capture\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22520=allocate([109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0] /* missing '[' after '% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23521=allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0] /* malformed pattern (e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24522=allocate([109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0] /* malformed pattern (m */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25523=allocate([117,110,98,97,108,97,110,99,101,100,32,112,97,116,116,101,114,110,0] /* unbalanced pattern\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26524=allocate([105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0] /* invalid pattern capt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27525=allocate([115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0] /* string/function/tabl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28526=allocate([105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0] /* invalid replacement  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29527=allocate([39,115,116,114,105,110,103,46,103,102,105,110,100,39,32,119,97,115,32,114,101,110,97,109,101,100,32,116,111,32,39,115,116,114,105,110,103,46,103,109,97,116,99,104,39,0] /* 'string.gfind' was r */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30528=allocate([110,111,32,118,97,108,117,101,0] /* no value\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31529=allocate([105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0] /* invalid option '%%%c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32530=allocate([92,114,0] /* \5Cr\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33531=allocate([92,48,48,48,0] /* \5C000\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34532=allocate([108,0] /* l\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35533=allocate([45,43,32,35,48,0] /* -+ #0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36534=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0] /* invalid format (repe */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37535=allocate([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0] /* invalid format (widt */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38536=allocate([117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0] /* unable to dump given */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39537=allocate([105,110,118,97,108,105,100,32,118,97,108,117,101,0] /* invalid value\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40538=allocate([115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0] /* string slice too lon */, "i8", ALLOC_STATIC);
STRING_TABLE.__str539=allocate([108,111,97,100,108,105,98,0] /* loadlib\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1540=allocate([115,101,101,97,108,108,0] /* seeall\00 */, "i8", ALLOC_STATIC);
__ZL8pk_funcs=allocate([0, 0, 0, 0, 308, 0, 0, 0, 0, 0, 0, 0, 310, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str2541=allocate([109,111,100,117,108,101,0] /* module\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3542=allocate([114,101,113,117,105,114,101,0] /* require\00 */, "i8", ALLOC_STATIC);
__ZL8ll_funcs=allocate([0, 0, 0, 0, 312, 0, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
__ZL7loaders=allocate([316, 0, 0, 0, 318, 0, 0, 0, 320, 0, 0, 0, 322, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str4543=allocate([95,76,79,65,68,76,73,66,0] /* _LOADLIB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5544=allocate([95,95,103,99,0] /* __gc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6545=allocate([112,97,99,107,97,103,101,0] /* package\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7546=allocate([108,111,97,100,101,114,115,0] /* loaders\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8547=allocate([112,97,116,104,0] /* path\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9548=allocate([76,85,65,95,80,65,84,72,0] /* LUA_PATH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10549=allocate([46,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,49,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,49,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,63,47,105,110,105,116,46,108,117,97,0] /* ./?.lua;/usr/local/s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11550=allocate([99,112,97,116,104,0] /* cpath\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12551=allocate([76,85,65,95,67,80,65,84,72,0] /* LUA_CPATH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13552=allocate([46,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,49,47,108,111,97,100,97,108,108,46,115,111,0] /* ./?.so;/usr/local/li */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14553=allocate([47,10,59,10,63,10,33,10,45,0] /* /\0A;\0A?\0A!\0A-\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15554=allocate([99,111,110,102,105,103,0] /* config\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16555=allocate([95,76,79,65,68,69,68,0] /* _LOADED\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17556=allocate([108,111,97,100,101,100,0] /* loaded\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18557=allocate([112,114,101,108,111,97,100,0] /* preload\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19558=allocate([59,59,0] /* ;;\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20559=allocate([59,1,59,0] /* ;\01;\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21560=allocate([1,0] /* \01\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22561=allocate([10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0] /* \0A\09no module '%s' */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23562=allocate([101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0] /* error loading module */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24563=allocate([100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0] /* dynamic libraries no */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25564=allocate([37,115,37,115,0] /* %s%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26565=allocate([76,79,65,68,76,73,66,58,32,0] /* LOADLIB: \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27566=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28567=allocate([46,0] /* .\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29568=allocate([95,0] /* _\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30569=allocate([108,117,97,111,112,101,110,95,37,115,0] /* luaopen_%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31570=allocate([47,0] /* /\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32571=allocate([39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0] /* 'package.%s' must be */, "i8", ALLOC_STATIC);
__str33572=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str34573=allocate([63,0] /* ?\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35574=allocate([10,9,110,111,32,102,105,108,101,32,39,37,115,39,0] /* \0A\09no file '%s'\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36575=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37576=allocate([59,0] /* ;\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38577=allocate([39,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0] /* 'package.preload' mu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39578=allocate([10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0] /* \0A\09no field packa */, "i8", ALLOC_STATIC);
__ZL9sentinel_=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str40579=allocate([108,111,111,112,32,111,114,32,112,114,101,118,105,111,117,115,32,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,0] /* loop or previous err */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41580=allocate([39,112,97,99,107,97,103,101,46,108,111,97,100,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0] /* 'package.loaders' mu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42581=allocate([109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0] /* module '%s' not foun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43582=allocate([110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0] /* name conflict for mo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44583=allocate([95,78,65,77,69,0] /* _NAME\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45584=allocate([102,0] /* f\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46585=allocate([39,109,111,100,117,108,101,39,32,110,111,116,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,76,117,97,32,102,117,110,99,116,105,111,110,0] /* 'module' not called  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47586=allocate([95,77,0] /* _M\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48587=allocate([95,80,65,67,75,65,71,69,0] /* _PACKAGE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49588=allocate([95,95,105,110,100,101,120,0] /* __index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50589=allocate([97,98,115,101,110,116,0] /* absent\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51590=allocate([105,110,105,116,0] /* init\00 */, "i8", ALLOC_STATIC);
__str591=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str1592=allocate([112,97,99,107,97,103,101,0] /* package\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2593=allocate([116,97,98,108,101,0] /* table\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3594=allocate([105,111,0] /* io\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4595=allocate([111,115,0] /* os\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5596=allocate([115,116,114,105,110,103,0] /* string\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6597=allocate([109,97,116,104,0] /* math\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7598=allocate([100,101,98,117,103,0] /* debug\00 */, "i8", ALLOC_STATIC);
__ZL7lualibs=allocate([0, 0, 0, 0, 324, 0, 0, 0, 0, 0, 0, 0, 326, 0, 0, 0, 0, 0, 0, 0, 328, 0, 0, 0, 0, 0, 0, 0, 330, 0, 0, 0, 0, 0, 0, 0, 332, 0, 0, 0, 0, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate(4, "i8", ALLOC_STATIC);
__ZTVN10__cxxabiv117__class_type_infoE=allocate([1,0,0,0], ["i8*",0,0,0], ALLOC_STATIC);
HEAP32[((__ZTI11lua_longjmp)>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[(((__ZTI11lua_longjmp)+(4))>>2)]=((STRING_TABLE.__ZTS11lua_longjmp)|0);
HEAP32[((__ZTIP11lua_longjmp)>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[(((__ZTIP11lua_longjmp)+(4))>>2)]=((STRING_TABLE.__ZTSP11lua_longjmp)|0);
HEAP32[(((__ZTIP11lua_longjmp)+(12))>>2)]=__ZTI11lua_longjmp;
HEAP32[((_luaX_tokens)>>2)]=((STRING_TABLE.__str47)|0);
HEAP32[(((_luaX_tokens)+(4))>>2)]=((STRING_TABLE.__str148)|0);
HEAP32[(((_luaX_tokens)+(8))>>2)]=((STRING_TABLE.__str249)|0);
HEAP32[(((_luaX_tokens)+(12))>>2)]=((STRING_TABLE.__str350)|0);
HEAP32[(((_luaX_tokens)+(16))>>2)]=((STRING_TABLE.__str451)|0);
HEAP32[(((_luaX_tokens)+(20))>>2)]=((STRING_TABLE.__str552)|0);
HEAP32[(((_luaX_tokens)+(24))>>2)]=((STRING_TABLE.__str653)|0);
HEAP32[(((_luaX_tokens)+(28))>>2)]=((STRING_TABLE.__str754)|0);
HEAP32[(((_luaX_tokens)+(32))>>2)]=((STRING_TABLE.__str855)|0);
HEAP32[(((_luaX_tokens)+(36))>>2)]=((STRING_TABLE.__str956)|0);
HEAP32[(((_luaX_tokens)+(40))>>2)]=((STRING_TABLE.__str1057)|0);
HEAP32[(((_luaX_tokens)+(44))>>2)]=((STRING_TABLE.__str1158)|0);
HEAP32[(((_luaX_tokens)+(48))>>2)]=((STRING_TABLE.__str1259)|0);
HEAP32[(((_luaX_tokens)+(52))>>2)]=((STRING_TABLE.__str1360)|0);
HEAP32[(((_luaX_tokens)+(56))>>2)]=((STRING_TABLE.__str1461)|0);
HEAP32[(((_luaX_tokens)+(60))>>2)]=((STRING_TABLE.__str1562)|0);
HEAP32[(((_luaX_tokens)+(64))>>2)]=((STRING_TABLE.__str1663)|0);
HEAP32[(((_luaX_tokens)+(68))>>2)]=((STRING_TABLE.__str1764)|0);
HEAP32[(((_luaX_tokens)+(72))>>2)]=((STRING_TABLE.__str1865)|0);
HEAP32[(((_luaX_tokens)+(76))>>2)]=((STRING_TABLE.__str1966)|0);
HEAP32[(((_luaX_tokens)+(80))>>2)]=((STRING_TABLE.__str2067)|0);
HEAP32[(((_luaX_tokens)+(84))>>2)]=((STRING_TABLE.__str2168)|0);
HEAP32[(((_luaX_tokens)+(88))>>2)]=((STRING_TABLE.__str22)|0);
HEAP32[(((_luaX_tokens)+(92))>>2)]=((STRING_TABLE.__str23)|0);
HEAP32[(((_luaX_tokens)+(96))>>2)]=((STRING_TABLE.__str24)|0);
HEAP32[(((_luaX_tokens)+(100))>>2)]=((STRING_TABLE.__str25)|0);
HEAP32[(((_luaX_tokens)+(104))>>2)]=((STRING_TABLE.__str2669)|0);
HEAP32[(((_luaX_tokens)+(108))>>2)]=((STRING_TABLE.__str27)|0);
HEAP32[(((_luaX_tokens)+(112))>>2)]=((STRING_TABLE.__str28)|0);
HEAP32[(((_luaX_tokens)+(116))>>2)]=((STRING_TABLE.__str29)|0);
HEAP32[(((_luaX_tokens)+(120))>>2)]=((STRING_TABLE.__str30)|0);
HEAP32[((_luaP_opnames)>>2)]=((STRING_TABLE.__str90)|0);
HEAP32[(((_luaP_opnames)+(4))>>2)]=((STRING_TABLE.__str191)|0);
HEAP32[(((_luaP_opnames)+(8))>>2)]=((STRING_TABLE.__str292)|0);
HEAP32[(((_luaP_opnames)+(12))>>2)]=((STRING_TABLE.__str393)|0);
HEAP32[(((_luaP_opnames)+(16))>>2)]=((STRING_TABLE.__str494)|0);
HEAP32[(((_luaP_opnames)+(20))>>2)]=((STRING_TABLE.__str595)|0);
HEAP32[(((_luaP_opnames)+(24))>>2)]=((STRING_TABLE.__str696)|0);
HEAP32[(((_luaP_opnames)+(28))>>2)]=((STRING_TABLE.__str797)|0);
HEAP32[(((_luaP_opnames)+(32))>>2)]=((STRING_TABLE.__str898)|0);
HEAP32[(((_luaP_opnames)+(36))>>2)]=((STRING_TABLE.__str999)|0);
HEAP32[(((_luaP_opnames)+(40))>>2)]=((STRING_TABLE.__str10100)|0);
HEAP32[(((_luaP_opnames)+(44))>>2)]=((STRING_TABLE.__str11101)|0);
HEAP32[(((_luaP_opnames)+(48))>>2)]=((STRING_TABLE.__str12102)|0);
HEAP32[(((_luaP_opnames)+(52))>>2)]=((STRING_TABLE.__str13103)|0);
HEAP32[(((_luaP_opnames)+(56))>>2)]=((STRING_TABLE.__str14104)|0);
HEAP32[(((_luaP_opnames)+(60))>>2)]=((STRING_TABLE.__str15105)|0);
HEAP32[(((_luaP_opnames)+(64))>>2)]=((STRING_TABLE.__str16106)|0);
HEAP32[(((_luaP_opnames)+(68))>>2)]=((STRING_TABLE.__str17107)|0);
HEAP32[(((_luaP_opnames)+(72))>>2)]=((STRING_TABLE.__str18108)|0);
HEAP32[(((_luaP_opnames)+(76))>>2)]=((STRING_TABLE.__str19109)|0);
HEAP32[(((_luaP_opnames)+(80))>>2)]=((STRING_TABLE.__str20110)|0);
HEAP32[(((_luaP_opnames)+(84))>>2)]=((STRING_TABLE.__str21111)|0);
HEAP32[(((_luaP_opnames)+(88))>>2)]=((STRING_TABLE.__str22112)|0);
HEAP32[(((_luaP_opnames)+(92))>>2)]=((STRING_TABLE.__str23113)|0);
HEAP32[(((_luaP_opnames)+(96))>>2)]=((STRING_TABLE.__str24114)|0);
HEAP32[(((_luaP_opnames)+(100))>>2)]=((STRING_TABLE.__str25115)|0);
HEAP32[(((_luaP_opnames)+(104))>>2)]=((STRING_TABLE.__str26116)|0);
HEAP32[(((_luaP_opnames)+(108))>>2)]=((STRING_TABLE.__str27117)|0);
HEAP32[(((_luaP_opnames)+(112))>>2)]=((STRING_TABLE.__str28118)|0);
HEAP32[(((_luaP_opnames)+(116))>>2)]=((STRING_TABLE.__str29119)|0);
HEAP32[(((_luaP_opnames)+(120))>>2)]=((STRING_TABLE.__str30120)|0);
HEAP32[(((_luaP_opnames)+(124))>>2)]=((STRING_TABLE.__str31121)|0);
HEAP32[(((_luaP_opnames)+(128))>>2)]=((STRING_TABLE.__str32122)|0);
HEAP32[(((_luaP_opnames)+(132))>>2)]=((STRING_TABLE.__str33123)|0);
HEAP32[(((_luaP_opnames)+(136))>>2)]=((STRING_TABLE.__str34124)|0);
HEAP32[(((_luaP_opnames)+(140))>>2)]=((STRING_TABLE.__str35125)|0);
HEAP32[(((_luaP_opnames)+(144))>>2)]=((STRING_TABLE.__str36126)|0);
HEAP32[(((_luaP_opnames)+(148))>>2)]=((STRING_TABLE.__str37127)|0);
HEAP32[((_luaT_typenames)>>2)]=((STRING_TABLE.__str177)|0);
HEAP32[(((_luaT_typenames)+(4))>>2)]=((STRING_TABLE.__str1178)|0);
HEAP32[(((_luaT_typenames)+(8))>>2)]=((STRING_TABLE.__str2179)|0);
HEAP32[(((_luaT_typenames)+(12))>>2)]=((STRING_TABLE.__str3180)|0);
HEAP32[(((_luaT_typenames)+(16))>>2)]=((STRING_TABLE.__str4181)|0);
HEAP32[(((_luaT_typenames)+(20))>>2)]=((STRING_TABLE.__str5182)|0);
HEAP32[(((_luaT_typenames)+(24))>>2)]=((STRING_TABLE.__str6183)|0);
HEAP32[(((_luaT_typenames)+(28))>>2)]=((STRING_TABLE.__str2179)|0);
HEAP32[(((_luaT_typenames)+(32))>>2)]=((STRING_TABLE.__str7184)|0);
HEAP32[(((_luaT_typenames)+(36))>>2)]=((STRING_TABLE.__str8185)|0);
HEAP32[(((_luaT_typenames)+(40))>>2)]=((STRING_TABLE.__str9186)|0);
HEAP32[((__ZZ9luaT_initP9lua_StateE14luaT_eventname)>>2)]=((STRING_TABLE.__str10188)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(4))>>2)]=((STRING_TABLE.__str11189)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(8))>>2)]=((STRING_TABLE.__str12190)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(12))>>2)]=((STRING_TABLE.__str13191)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(16))>>2)]=((STRING_TABLE.__str14192)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(20))>>2)]=((STRING_TABLE.__str15193)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(24))>>2)]=((STRING_TABLE.__str16194)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(28))>>2)]=((STRING_TABLE.__str17195)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(32))>>2)]=((STRING_TABLE.__str18196)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(36))>>2)]=((STRING_TABLE.__str19197)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(40))>>2)]=((STRING_TABLE.__str20198)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(44))>>2)]=((STRING_TABLE.__str21199)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(48))>>2)]=((STRING_TABLE.__str22200)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(52))>>2)]=((STRING_TABLE.__str23201)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(56))>>2)]=((STRING_TABLE.__str24202)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(60))>>2)]=((STRING_TABLE.__str25203)|0);
HEAP32[(((__ZZ9luaT_initP9lua_StateE14luaT_eventname)+(64))>>2)]=((STRING_TABLE.__str26204)|0);
HEAP32[((__ZL10base_funcs)>>2)]=((STRING_TABLE.__str268)|0);
HEAP32[(((__ZL10base_funcs)+(8))>>2)]=((STRING_TABLE.__str1269)|0);
HEAP32[(((__ZL10base_funcs)+(16))>>2)]=((STRING_TABLE.__str2270)|0);
HEAP32[(((__ZL10base_funcs)+(24))>>2)]=((STRING_TABLE.__str3271)|0);
HEAP32[(((__ZL10base_funcs)+(32))>>2)]=((STRING_TABLE.__str4272)|0);
HEAP32[(((__ZL10base_funcs)+(40))>>2)]=((STRING_TABLE.__str5273)|0);
HEAP32[(((__ZL10base_funcs)+(48))>>2)]=((STRING_TABLE.__str6274)|0);
HEAP32[(((__ZL10base_funcs)+(56))>>2)]=((STRING_TABLE.__str7275)|0);
HEAP32[(((__ZL10base_funcs)+(64))>>2)]=((STRING_TABLE.__str8276)|0);
HEAP32[(((__ZL10base_funcs)+(72))>>2)]=((STRING_TABLE.__str9277)|0);
HEAP32[(((__ZL10base_funcs)+(80))>>2)]=((STRING_TABLE.__str10278)|0);
HEAP32[(((__ZL10base_funcs)+(88))>>2)]=((STRING_TABLE.__str11279)|0);
HEAP32[(((__ZL10base_funcs)+(96))>>2)]=((STRING_TABLE.__str12280)|0);
HEAP32[(((__ZL10base_funcs)+(104))>>2)]=((STRING_TABLE.__str13281)|0);
HEAP32[(((__ZL10base_funcs)+(112))>>2)]=((STRING_TABLE.__str14282)|0);
HEAP32[(((__ZL10base_funcs)+(120))>>2)]=((STRING_TABLE.__str15283)|0);
HEAP32[(((__ZL10base_funcs)+(128))>>2)]=((STRING_TABLE.__str16284)|0);
HEAP32[(((__ZL10base_funcs)+(136))>>2)]=((STRING_TABLE.__str17285)|0);
HEAP32[(((__ZL10base_funcs)+(144))>>2)]=((STRING_TABLE.__str18286)|0);
HEAP32[(((__ZL10base_funcs)+(152))>>2)]=((STRING_TABLE.__str19287)|0);
HEAP32[(((__ZL10base_funcs)+(160))>>2)]=((STRING_TABLE.__str20288)|0);
HEAP32[(((__ZL10base_funcs)+(168))>>2)]=((STRING_TABLE.__str21289)|0);
HEAP32[(((__ZL10base_funcs)+(176))>>2)]=((STRING_TABLE.__str22290)|0);
HEAP32[(((__ZL10base_funcs)+(184))>>2)]=((STRING_TABLE.__str23291)|0);
HEAP32[((__ZL8co_funcs)>>2)]=((STRING_TABLE.__str24292)|0);
HEAP32[(((__ZL8co_funcs)+(8))>>2)]=((STRING_TABLE.__str25293)|0);
HEAP32[(((__ZL8co_funcs)+(16))>>2)]=((STRING_TABLE.__str26294)|0);
HEAP32[(((__ZL8co_funcs)+(24))>>2)]=((STRING_TABLE.__str27295)|0);
HEAP32[(((__ZL8co_funcs)+(32))>>2)]=((STRING_TABLE.__str28296)|0);
HEAP32[(((__ZL8co_funcs)+(40))>>2)]=((STRING_TABLE.__str29297)|0);
HEAP32[((__ZL9statnames)>>2)]=((STRING_TABLE.__str26294)|0);
HEAP32[(((__ZL9statnames)+(4))>>2)]=((STRING_TABLE.__str43311)|0);
HEAP32[(((__ZL9statnames)+(8))>>2)]=((STRING_TABLE.__str44312)|0);
HEAP32[(((__ZL9statnames)+(12))>>2)]=((STRING_TABLE.__str45313)|0);
HEAP32[((__ZZ19luaB_collectgarbageP9lua_StateE4opts)>>2)]=((STRING_TABLE.__str70)|0);
HEAP32[(((__ZZ19luaB_collectgarbageP9lua_StateE4opts)+(4))>>2)]=((STRING_TABLE.__str71)|0);
HEAP32[(((__ZZ19luaB_collectgarbageP9lua_StateE4opts)+(8))>>2)]=((STRING_TABLE.__str72316)|0);
HEAP32[(((__ZZ19luaB_collectgarbageP9lua_StateE4opts)+(12))>>2)]=((STRING_TABLE.__str73)|0);
HEAP32[(((__ZZ19luaB_collectgarbageP9lua_StateE4opts)+(16))>>2)]=((STRING_TABLE.__str74)|0);
HEAP32[(((__ZZ19luaB_collectgarbageP9lua_StateE4opts)+(20))>>2)]=((STRING_TABLE.__str75)|0);
HEAP32[(((__ZZ19luaB_collectgarbageP9lua_StateE4opts)+(24))>>2)]=((STRING_TABLE.__str76)|0);
HEAP32[((__ZL5dblib)>>2)]=((STRING_TABLE.__str318)|0);
HEAP32[(((__ZL5dblib)+(8))>>2)]=((STRING_TABLE.__str1319)|0);
HEAP32[(((__ZL5dblib)+(16))>>2)]=((STRING_TABLE.__str2320)|0);
HEAP32[(((__ZL5dblib)+(24))>>2)]=((STRING_TABLE.__str3321)|0);
HEAP32[(((__ZL5dblib)+(32))>>2)]=((STRING_TABLE.__str4322)|0);
HEAP32[(((__ZL5dblib)+(40))>>2)]=((STRING_TABLE.__str5323)|0);
HEAP32[(((__ZL5dblib)+(48))>>2)]=((STRING_TABLE.__str6324)|0);
HEAP32[(((__ZL5dblib)+(56))>>2)]=((STRING_TABLE.__str7325)|0);
HEAP32[(((__ZL5dblib)+(64))>>2)]=((STRING_TABLE.__str8326)|0);
HEAP32[(((__ZL5dblib)+(72))>>2)]=((STRING_TABLE.__str9327)|0);
HEAP32[(((__ZL5dblib)+(80))>>2)]=((STRING_TABLE.__str10328)|0);
HEAP32[(((__ZL5dblib)+(88))>>2)]=((STRING_TABLE.__str11329)|0);
HEAP32[(((__ZL5dblib)+(96))>>2)]=((STRING_TABLE.__str12330)|0);
HEAP32[(((__ZL5dblib)+(104))>>2)]=((STRING_TABLE.__str13331)|0);
HEAP32[((__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames)>>2)]=((STRING_TABLE.__str28346)|0);
HEAP32[(((__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames)+(4))>>2)]=((STRING_TABLE.__str29347)|0);
HEAP32[(((__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames)+(8))>>2)]=((STRING_TABLE.__str30348)|0);
HEAP32[(((__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames)+(12))>>2)]=((STRING_TABLE.__str31349)|0);
HEAP32[(((__ZZ5hookfP9lua_StateP9lua_DebugE9hooknames)+(16))>>2)]=((STRING_TABLE.__str32350)|0);
HEAP32[((__ZL5iolib)>>2)]=((STRING_TABLE.__str371)|0);
HEAP32[(((__ZL5iolib)+(8))>>2)]=((STRING_TABLE.__str1372)|0);
HEAP32[(((__ZL5iolib)+(16))>>2)]=((STRING_TABLE.__str2373)|0);
HEAP32[(((__ZL5iolib)+(24))>>2)]=((STRING_TABLE.__str3374)|0);
HEAP32[(((__ZL5iolib)+(32))>>2)]=((STRING_TABLE.__str4375)|0);
HEAP32[(((__ZL5iolib)+(40))>>2)]=((STRING_TABLE.__str5376)|0);
HEAP32[(((__ZL5iolib)+(48))>>2)]=((STRING_TABLE.__str6377)|0);
HEAP32[(((__ZL5iolib)+(56))>>2)]=((STRING_TABLE.__str7378)|0);
HEAP32[(((__ZL5iolib)+(64))>>2)]=((STRING_TABLE.__str8379)|0);
HEAP32[(((__ZL5iolib)+(72))>>2)]=((STRING_TABLE.__str9380)|0);
HEAP32[(((__ZL5iolib)+(80))>>2)]=((STRING_TABLE.__str10381)|0);
HEAP32[((__ZL4flib)>>2)]=((STRING_TABLE.__str371)|0);
HEAP32[(((__ZL4flib)+(8))>>2)]=((STRING_TABLE.__str1372)|0);
HEAP32[(((__ZL4flib)+(16))>>2)]=((STRING_TABLE.__str3374)|0);
HEAP32[(((__ZL4flib)+(24))>>2)]=((STRING_TABLE.__str7378)|0);
HEAP32[(((__ZL4flib)+(32))>>2)]=((STRING_TABLE.__str11382)|0);
HEAP32[(((__ZL4flib)+(40))>>2)]=((STRING_TABLE.__str12383)|0);
HEAP32[(((__ZL4flib)+(48))>>2)]=((STRING_TABLE.__str10381)|0);
HEAP32[(((__ZL4flib)+(56))>>2)]=((STRING_TABLE.__str13384)|0);
HEAP32[(((__ZL4flib)+(64))>>2)]=((STRING_TABLE.__str14385)|0);
HEAP32[((__ZZ9f_setvbufP9lua_StateE9modenames)>>2)]=((STRING_TABLE.__str29400)|0);
HEAP32[(((__ZZ9f_setvbufP9lua_StateE9modenames)+(4))>>2)]=((STRING_TABLE.__str30401)|0);
HEAP32[(((__ZZ9f_setvbufP9lua_StateE9modenames)+(8))>>2)]=((STRING_TABLE.__str31402)|0);
HEAP32[((__ZZ6f_seekP9lua_StateE9modenames)>>2)]=((STRING_TABLE.__str32403)|0);
HEAP32[(((__ZZ6f_seekP9lua_StateE9modenames)+(4))>>2)]=((STRING_TABLE.__str33404)|0);
HEAP32[(((__ZZ6f_seekP9lua_StateE9modenames)+(8))>>2)]=((STRING_TABLE.__str34405)|0);
HEAP32[((__ZL6fnames)>>2)]=((STRING_TABLE.__str2373)|0);
HEAP32[(((__ZL6fnames)+(4))>>2)]=((STRING_TABLE.__str5376)|0);
HEAP32[((__ZL7mathlib)>>2)]=((STRING_TABLE.__str417)|0);
HEAP32[(((__ZL7mathlib)+(8))>>2)]=((STRING_TABLE.__str1418)|0);
HEAP32[(((__ZL7mathlib)+(16))>>2)]=((STRING_TABLE.__str2419)|0);
HEAP32[(((__ZL7mathlib)+(24))>>2)]=((STRING_TABLE.__str3420)|0);
HEAP32[(((__ZL7mathlib)+(32))>>2)]=((STRING_TABLE.__str4421)|0);
HEAP32[(((__ZL7mathlib)+(40))>>2)]=((STRING_TABLE.__str5422)|0);
HEAP32[(((__ZL7mathlib)+(48))>>2)]=((STRING_TABLE.__str6423)|0);
HEAP32[(((__ZL7mathlib)+(56))>>2)]=((STRING_TABLE.__str7424)|0);
HEAP32[(((__ZL7mathlib)+(64))>>2)]=((STRING_TABLE.__str8425)|0);
HEAP32[(((__ZL7mathlib)+(72))>>2)]=((STRING_TABLE.__str9426)|0);
HEAP32[(((__ZL7mathlib)+(80))>>2)]=((STRING_TABLE.__str10427)|0);
HEAP32[(((__ZL7mathlib)+(88))>>2)]=((STRING_TABLE.__str11428)|0);
HEAP32[(((__ZL7mathlib)+(96))>>2)]=((STRING_TABLE.__str12429)|0);
HEAP32[(((__ZL7mathlib)+(104))>>2)]=((STRING_TABLE.__str13430)|0);
HEAP32[(((__ZL7mathlib)+(112))>>2)]=((STRING_TABLE.__str14431)|0);
HEAP32[(((__ZL7mathlib)+(120))>>2)]=((STRING_TABLE.__str15432)|0);
HEAP32[(((__ZL7mathlib)+(128))>>2)]=((STRING_TABLE.__str16433)|0);
HEAP32[(((__ZL7mathlib)+(136))>>2)]=((STRING_TABLE.__str17434)|0);
HEAP32[(((__ZL7mathlib)+(144))>>2)]=((STRING_TABLE.__str18435)|0);
HEAP32[(((__ZL7mathlib)+(152))>>2)]=((STRING_TABLE.__str19436)|0);
HEAP32[(((__ZL7mathlib)+(160))>>2)]=((STRING_TABLE.__str20437)|0);
HEAP32[(((__ZL7mathlib)+(168))>>2)]=((STRING_TABLE.__str21438)|0);
HEAP32[(((__ZL7mathlib)+(176))>>2)]=((STRING_TABLE.__str22439)|0);
HEAP32[(((__ZL7mathlib)+(184))>>2)]=((STRING_TABLE.__str23440)|0);
HEAP32[(((__ZL7mathlib)+(192))>>2)]=((STRING_TABLE.__str24441)|0);
HEAP32[(((__ZL7mathlib)+(200))>>2)]=((STRING_TABLE.__str25442)|0);
HEAP32[(((__ZL7mathlib)+(208))>>2)]=((STRING_TABLE.__str26443)|0);
HEAP32[(((__ZL7mathlib)+(216))>>2)]=((STRING_TABLE.__str27444)|0);
HEAP32[((__ZL6syslib)>>2)]=((STRING_TABLE.__str452)|0);
HEAP32[(((__ZL6syslib)+(8))>>2)]=((STRING_TABLE.__str1453)|0);
HEAP32[(((__ZL6syslib)+(16))>>2)]=((STRING_TABLE.__str2454)|0);
HEAP32[(((__ZL6syslib)+(24))>>2)]=((STRING_TABLE.__str3455)|0);
HEAP32[(((__ZL6syslib)+(32))>>2)]=((STRING_TABLE.__str4456)|0);
HEAP32[(((__ZL6syslib)+(40))>>2)]=((STRING_TABLE.__str5457)|0);
HEAP32[(((__ZL6syslib)+(48))>>2)]=((STRING_TABLE.__str6458)|0);
HEAP32[(((__ZL6syslib)+(56))>>2)]=((STRING_TABLE.__str7459)|0);
HEAP32[(((__ZL6syslib)+(64))>>2)]=((STRING_TABLE.__str8460)|0);
HEAP32[(((__ZL6syslib)+(72))>>2)]=((STRING_TABLE.__str9461)|0);
HEAP32[(((__ZL6syslib)+(80))>>2)]=((STRING_TABLE.__str10462)|0);
HEAP32[((__ZZ12os_setlocaleP9lua_StateE8catnames)>>2)]=((STRING_TABLE.__str21473)|0);
HEAP32[(((__ZZ12os_setlocaleP9lua_StateE8catnames)+(4))>>2)]=((STRING_TABLE.__str22474)|0);
HEAP32[(((__ZZ12os_setlocaleP9lua_StateE8catnames)+(8))>>2)]=((STRING_TABLE.__str23475)|0);
HEAP32[(((__ZZ12os_setlocaleP9lua_StateE8catnames)+(12))>>2)]=((STRING_TABLE.__str24476)|0);
HEAP32[(((__ZZ12os_setlocaleP9lua_StateE8catnames)+(16))>>2)]=((STRING_TABLE.__str25477)|0);
HEAP32[(((__ZZ12os_setlocaleP9lua_StateE8catnames)+(20))>>2)]=((STRING_TABLE.__str9461)|0);
HEAP32[((__ZL9tab_funcs)>>2)]=((STRING_TABLE.__str483)|0);
HEAP32[(((__ZL9tab_funcs)+(8))>>2)]=((STRING_TABLE.__str1484)|0);
HEAP32[(((__ZL9tab_funcs)+(16))>>2)]=((STRING_TABLE.__str2485)|0);
HEAP32[(((__ZL9tab_funcs)+(24))>>2)]=((STRING_TABLE.__str3486)|0);
HEAP32[(((__ZL9tab_funcs)+(32))>>2)]=((STRING_TABLE.__str4487)|0);
HEAP32[(((__ZL9tab_funcs)+(40))>>2)]=((STRING_TABLE.__str5488)|0);
HEAP32[(((__ZL9tab_funcs)+(48))>>2)]=((STRING_TABLE.__str6489)|0);
HEAP32[(((__ZL9tab_funcs)+(56))>>2)]=((STRING_TABLE.__str7490)|0);
HEAP32[(((__ZL9tab_funcs)+(64))>>2)]=((STRING_TABLE.__str8491)|0);
HEAP32[((__ZL6strlib)>>2)]=((STRING_TABLE.__str498)|0);
HEAP32[(((__ZL6strlib)+(8))>>2)]=((STRING_TABLE.__str1499)|0);
HEAP32[(((__ZL6strlib)+(16))>>2)]=((STRING_TABLE.__str2500)|0);
HEAP32[(((__ZL6strlib)+(24))>>2)]=((STRING_TABLE.__str3501)|0);
HEAP32[(((__ZL6strlib)+(32))>>2)]=((STRING_TABLE.__str4502)|0);
HEAP32[(((__ZL6strlib)+(40))>>2)]=((STRING_TABLE.__str5503)|0);
HEAP32[(((__ZL6strlib)+(48))>>2)]=((STRING_TABLE.__str6504)|0);
HEAP32[(((__ZL6strlib)+(56))>>2)]=((STRING_TABLE.__str7505)|0);
HEAP32[(((__ZL6strlib)+(64))>>2)]=((STRING_TABLE.__str8506)|0);
HEAP32[(((__ZL6strlib)+(72))>>2)]=((STRING_TABLE.__str9507)|0);
HEAP32[(((__ZL6strlib)+(80))>>2)]=((STRING_TABLE.__str10508)|0);
HEAP32[(((__ZL6strlib)+(88))>>2)]=((STRING_TABLE.__str11509)|0);
HEAP32[(((__ZL6strlib)+(96))>>2)]=((STRING_TABLE.__str12510)|0);
HEAP32[(((__ZL6strlib)+(104))>>2)]=((STRING_TABLE.__str13511)|0);
HEAP32[(((__ZL6strlib)+(112))>>2)]=((STRING_TABLE.__str14512)|0);
HEAP32[((__ZL8pk_funcs)>>2)]=((STRING_TABLE.__str539)|0);
HEAP32[(((__ZL8pk_funcs)+(8))>>2)]=((STRING_TABLE.__str1540)|0);
HEAP32[((__ZL8ll_funcs)>>2)]=((STRING_TABLE.__str2541)|0);
HEAP32[(((__ZL8ll_funcs)+(8))>>2)]=((STRING_TABLE.__str3542)|0);
HEAP32[((__ZL7lualibs)>>2)]=((__str591)|0);
HEAP32[(((__ZL7lualibs)+(8))>>2)]=((STRING_TABLE.__str1592)|0);
HEAP32[(((__ZL7lualibs)+(16))>>2)]=((STRING_TABLE.__str2593)|0);
HEAP32[(((__ZL7lualibs)+(24))>>2)]=((STRING_TABLE.__str3594)|0);
HEAP32[(((__ZL7lualibs)+(32))>>2)]=((STRING_TABLE.__str4595)|0);
HEAP32[(((__ZL7lualibs)+(40))>>2)]=((STRING_TABLE.__str5596)|0);
HEAP32[(((__ZL7lualibs)+(48))>>2)]=((STRING_TABLE.__str6597)|0);
HEAP32[(((__ZL7lualibs)+(56))>>2)]=((STRING_TABLE.__str7598)|0);
FUNCTION_TABLE = [0,0,__Z6f_callP9lua_StatePv,0,__Z7f_CcallP9lua_StatePv,0,___gxx_personality_v0,0,__Z6resumeP9lua_StatePv,0,__Z11luaU_undumpP9lua_StateP3ZioP7MbufferPKc,0,__Z11luaY_parserP9lua_StateP3ZioP7MbufferPKc,0,__Z8f_parserP9lua_StatePv,0,__Z9f_luaopenP9lua_StatePv,0,__Z11callallgcTMP9lua_StatePv,0,__Z4getFP9lua_StatePvPj,0,__Z4getSP9lua_StatePvPj,0,__Z7l_allocPvS_jj,0,__Z5panicP9lua_State,0,__Z14generic_readerP9lua_StatePvPj,0,__Z5hookfP9lua_StateP9lua_Debug,0,__Z12luaB_auxwrapP9lua_State,0,__Z11luaB_ipairsP9lua_State,0,__Z9ipairsauxP9lua_State,0,__Z10luaB_pairsP9lua_State,0,__Z9luaB_nextP9lua_State,0,__Z13luaB_newproxyP9lua_State,0,__Z9io_fcloseP9lua_State,0,__Z10io_nocloseP9lua_State,0,__Z9io_pcloseP9lua_State,0,__Z11io_readlineP9lua_State,0,__Z6writerP9lua_StatePKvjPv,0,__Z10gmatch_auxP9lua_State,0,__Z4gctmP9lua_State,0,__Z11luaB_assertP9lua_State,0,__Z19luaB_collectgarbageP9lua_State,0,__Z11luaB_dofileP9lua_State,0,__Z10luaB_errorP9lua_State,0,__Z11luaB_gcinfoP9lua_State,0,__Z12luaB_getfenvP9lua_State,0,__Z17luaB_getmetatableP9lua_State,0,__Z13luaB_loadfileP9lua_State,0,__Z9luaB_loadP9lua_State,0,__Z15luaB_loadstringP9lua_State,0,__Z10luaB_pcallP9lua_State,0,__Z10luaB_printP9lua_State,0,__Z13luaB_rawequalP9lua_State,0,__Z11luaB_rawgetP9lua_State,0,__Z11luaB_rawsetP9lua_State,0,__Z11luaB_selectP9lua_State,0,__Z12luaB_setfenvP9lua_State,0,__Z17luaB_setmetatableP9lua_State,0,__Z13luaB_tonumberP9lua_State,0,__Z13luaB_tostringP9lua_State,0,__Z9luaB_typeP9lua_State,0,__Z11luaB_unpackP9lua_State,0,__Z11luaB_xpcallP9lua_State,0,__Z13luaB_cocreateP9lua_State,0,__Z13luaB_coresumeP9lua_State,0,__Z14luaB_corunningP9lua_State,0,__Z13luaB_costatusP9lua_State,0,__Z11luaB_cowrapP9lua_State,0,__Z10luaB_yieldP9lua_State,0,__Z8db_debugP9lua_State,0,__Z10db_getfenvP9lua_State,0,__Z10db_gethookP9lua_State,0,__Z10db_getinfoP9lua_State,0,__Z11db_getlocalP9lua_State,0,__Z14db_getregistryP9lua_State,0,__Z15db_getmetatableP9lua_State,0,__Z13db_getupvalueP9lua_State,0,__Z10db_setfenvP9lua_State,0,__Z10db_sethookP9lua_State,0,__Z11db_setlocalP9lua_State,0,__Z15db_setmetatableP9lua_State,0,__Z13db_setupvalueP9lua_State,0,__Z10db_errorfbP9lua_State,0,__Z8io_closeP9lua_State,0,__Z8io_flushP9lua_State,0,__Z8io_inputP9lua_State,0,__Z8io_linesP9lua_State,0,__Z7io_openP9lua_State,0,__Z9io_outputP9lua_State,0,__Z8io_popenP9lua_State,0,__Z7io_readP9lua_State,0,__Z10io_tmpfileP9lua_State,0,__Z7io_typeP9lua_State,0,__Z8io_writeP9lua_State,0,__Z7f_flushP9lua_State,0,__Z7f_linesP9lua_State,0,__Z6f_readP9lua_State,0,__Z6f_seekP9lua_State,0,__Z9f_setvbufP9lua_State,0,__Z7f_writeP9lua_State,0,__Z5io_gcP9lua_State,0,__Z11io_tostringP9lua_State,0,__Z8math_absP9lua_State,0,__Z9math_acosP9lua_State,0,__Z9math_asinP9lua_State,0,__Z10math_atan2P9lua_State,0,__Z9math_atanP9lua_State,0,__Z9math_ceilP9lua_State,0,__Z9math_coshP9lua_State,0,__Z8math_cosP9lua_State,0,__Z8math_degP9lua_State,0,__Z8math_expP9lua_State,0,__Z10math_floorP9lua_State,0,__Z9math_fmodP9lua_State,0,__Z10math_frexpP9lua_State,0,__Z10math_ldexpP9lua_State,0,__Z10math_log10P9lua_State,0,__Z8math_logP9lua_State,0,__Z8math_maxP9lua_State,0,__Z8math_minP9lua_State,0,__Z9math_modfP9lua_State,0,__Z8math_powP9lua_State,0,__Z8math_radP9lua_State,0,__Z11math_randomP9lua_State,0,__Z15math_randomseedP9lua_State,0,__Z9math_sinhP9lua_State,0,__Z8math_sinP9lua_State,0,__Z9math_sqrtP9lua_State,0,__Z9math_tanhP9lua_State,0,__Z8math_tanP9lua_State,0,__Z8os_clockP9lua_State,0,__Z7os_dateP9lua_State,0,__Z11os_difftimeP9lua_State,0,__Z10os_executeP9lua_State,0,__Z7os_exitP9lua_State,0,__Z9os_getenvP9lua_State,0,__Z9os_removeP9lua_State,0,__Z9os_renameP9lua_State,0,__Z12os_setlocaleP9lua_State,0,__Z7os_timeP9lua_State,0,__Z10os_tmpnameP9lua_State,0,__Z7tconcatP9lua_State,0,__Z7foreachP9lua_State,0,__Z8foreachiP9lua_State,0,__Z4getnP9lua_State,0,__Z4maxnP9lua_State,0,__Z7tinsertP9lua_State,0,__Z7tremoveP9lua_State,0,__Z4setnP9lua_State,0,__Z4sortP9lua_State,0,__Z8str_byteP9lua_State,0,__Z8str_charP9lua_State,0,__Z8str_dumpP9lua_State,0,__Z8str_findP9lua_State,0,__Z10str_formatP9lua_State,0,__Z11gfind_nodefP9lua_State,0,__Z6gmatchP9lua_State,0,__Z8str_gsubP9lua_State,0,__Z7str_lenP9lua_State,0,__Z9str_lowerP9lua_State,0,__Z9str_matchP9lua_State,0,__Z7str_repP9lua_State,0,__Z11str_reverseP9lua_State,0,__Z7str_subP9lua_State,0,__Z9str_upperP9lua_State,0,__Z10ll_loadlibP9lua_State,0,__Z9ll_seeallP9lua_State,0,__Z9ll_moduleP9lua_State,0,__Z10ll_requireP9lua_State,0,__Z14loader_preloadP9lua_State,0,__Z10loader_LuaP9lua_State,0,__Z8loader_CP9lua_State,0,__Z12loader_CrootP9lua_State,0,_luaopen_base,0,_luaopen_package,0,_luaopen_table,0,_luaopen_io,0,_luaopen_os,0,_luaopen_string,0,_luaopen_math,0,_luaopen_debug,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_lua_setlevel","_lua_atpanic","_lua_gettop","_lua_settop","__Z9index2adrP9lua_Statei","_lua_typename","__Z15luaA_pushobjectP9lua_StatePK10lua_TValue","_lua_checkstack","_lua_xmove","_lua_newthread","_lua_remove","_lua_insert","_lua_replace","_lua_pushvalue","_lua_type","_lua_pushnil","_lua_pushnumber","_lua_pushinteger","_lua_iscfunction","_lua_isnumber","_lua_isstring","_lua_isuserdata","_lua_rawequal","_lua_equal","_lua_lessthan","_lua_tonumber","_lua_tointeger","_lua_toboolean","_lua_tolstring","_lua_objlen","_lua_tocfunction","_lua_touserdata","_lua_tothread","_lua_topointer","_lua_pushlstring","_lua_pushstring","__Z10getcurrenvP9lua_State","_lua_pushboolean","_lua_pushlightuserdata","_lua_pushthread","_lua_pushvfstring","_lua_pushfstring","_lua_pushcclosure","_lua_gettable","_lua_getfield","_lua_rawget","_lua_rawgeti","_lua_createtable","_lua_getmetatable","_lua_getfenv","_lua_settable","_lua_setfield","_lua_rawset","_lua_status","_lua_rawseti","_lua_setmetatable","_lua_setfenv","_lua_call","_lua_pcall","__Z6f_callP9lua_StatePv","_lua_cpcall","__Z7f_CcallP9lua_StatePv","_lua_load","_lua_dump","_lua_getallocf","_lua_setallocf","__Z11aux_upvalueP10lua_TValueiPS0_","_lua_gc","_lua_error","_lua_next","_lua_concat","_lua_newuserdata","_lua_getupvalue","_lua_setupvalue","__Z8luaK_nilP9FuncStateii","__Z12luaK_codeABCP9FuncState6OpCodeiii","__Z9luaK_jumpP9FuncState","__Z12luaK_codeABxP9FuncState6OpCodeij","__Z13luaK_getlabelP9FuncState","__Z7getjumpP9FuncStatei","__Z14luaK_setoneretP9FuncStateP7expdesc","__Z7freeregP9FuncStatei","__Z11luaK_concatP9FuncStatePii","__Z8luaK_retP9FuncStateii","__Z14luaK_patchlistP9FuncStateii","__Z16luaK_patchtohereP9FuncStatei","__Z12patchlistauxP9FuncStateiiii","__Z7fixjumpP9FuncStateii","__Z15luaK_checkstackP9FuncStatei","__Z16luaK_reserveregsP9FuncStatei","__Z12luaK_stringKP9FuncStateP7TString","__Z4addkP9FuncStateP10lua_TValueS2_","__Z12luaK_numberKP9FuncStated","__Z15luaK_setreturnsP9FuncStateP7expdesci","__Z18luaK_dischargevarsP9FuncStateP7expdesc","__Z16luaK_exp2nextregP9FuncStateP7expdesc","__Z9isnumeralP7expdesc","__Z7freeexpP9FuncStateP7expdesc","__Z7exp2regP9FuncStateP7expdesci","__Z15luaK_exp2anyregP9FuncStateP7expdesc","__Z12luaK_exp2valP9FuncStateP7expdesc","__Z11luaK_exp2RKP9FuncStateP7expdesc","__Z4nilKP9FuncState","__Z5boolKP9FuncStatei","__Z13luaK_storevarP9FuncStateP7expdescS2_","__Z9luaK_selfP9FuncStateP7expdescS2_","__Z13luaK_goiftrueP9FuncStateP7expdesc","__Z10invertjumpP9FuncStateP7expdesc","__Z10jumponcondP9FuncStateP7expdesci","__Z12luaK_indexedP9FuncStateP7expdescS2_","__Z11luaK_prefixP9FuncState5UnOprP7expdesc","__Z12luaK_fixlineP9FuncStatei","__Z9codearithP9FuncState6OpCodeP7expdescS3_","__Z7codenotP9FuncStateP7expdesc","__Z10luaK_infixP9FuncState6BinOprP7expdesc","__Z14luaK_goiffalseP9FuncStateP7expdesc","__Z11luaK_posfixP9FuncState6BinOprP7expdescS3_","__Z8codecompP9FuncState6OpCodeiP7expdescS3_","__Z9luaK_codeP9FuncStateji","__Z12luaK_setlistP9FuncStateiii","__Z12dischargejpcP9FuncState","__Z8condjumpP9FuncState6OpCodeiii","__Z16discharge2anyregP9FuncStateP7expdesc","__Z12removevaluesP9FuncStatei","__Z14getjumpcontrolP9FuncStatei","_lua_sethook","_lua_gethook","_lua_gethookmask","_lua_gethookcount","_lua_getstack","__Z12patchtestregP9FuncStateii","__Z13discharge2regP9FuncStateP7expdesci","__Z12constfolding6OpCodeP7expdescS1_","__Z10need_valueP9FuncStatei","__Z10code_labelP9FuncStateiii","_lua_getlocal","__Z9findlocalP9lua_StateP8CallInfoi","_lua_setlocal","__Z16luaG_checkopenopj","_lua_getinfo","__Z10auxgetinfoP9lua_StatePKcP9lua_DebugP7ClosureP8CallInfo","__Z17collectvalidlinesP9lua_StateP7Closure","__Z14luaG_checkcodePK5Proto","__Z8symbexecPK5Protoii","__Z9isinstackP8CallInfoPK10lua_TValue","__Z11getluaprotoP8CallInfo","__Z9currentpcP9lua_StateP8CallInfo","__Z5knameP5Protoi","__Z14luaG_typeerrorP9lua_StatePK10lua_TValuePKc","__Z10getobjnameP9lua_StateP8CallInfoiPPKc","__Z13luaG_runerrorP9lua_StatePKcz","__Z16luaG_concaterrorP9lua_StateP10lua_TValueS2_","__Z15luaG_aritherrorP9lua_StatePK10lua_TValueS3_","__Z15luaG_ordererrorP9lua_StatePK10lua_TValueS3_","__Z13luaG_errormsgP9lua_State","__Z7addinfoP9lua_StatePKc","__Z11currentlineP9lua_StateP8CallInfo","__Z8precheckPK5Proto","__Z12checkArgModePK5Protoi9OpArgMask","__Z12correctstackP9lua_StateP10lua_TValue","__Z13info_tailcallP9lua_Debug","__Z8funcinfoP9lua_DebugP7Closure","__Z11getfuncnameP9lua_StateP8CallInfoPPKc","__Z16luaD_seterrorobjP9lua_StateiP10lua_TValue","__Z10resetstackP9lua_Statei","__Z20luaD_rawrunprotectedP9lua_StatePFvS0_PvES1_","__Z17luaD_reallocstackP9lua_Statei","__Z10luaD_throwP9lua_Statei","__Z14luaD_reallocCIP9lua_Statei","__Z14luaD_growstackP9lua_Statei","__Z13luaD_callhookP9lua_Stateii","__Z12luaD_precallP9lua_StateP10lua_TValuei","__Z9tryfuncTMP9lua_StateP10lua_TValue","__Z14adjust_varargsP9lua_StateP5Protoi","__Z6growCIP9lua_State","__Z12luaD_poscallP9lua_StateP10lua_TValue","__Z12callrethooksP9lua_StateP10lua_TValue","__Z9luaD_callP9lua_StateP10lua_TValuei","_lua_resume","__Z12resume_errorP9lua_StatePKc","__Z6resumeP9lua_StatePv","_lua_yield","__Z10luaD_pcallP9lua_StatePFvS0_PvES1_ii","__Z19restore_stack_limitP9lua_State","__Z20luaD_protectedparserP9lua_StateP3ZioPKc","__Z8f_parserP9lua_StatePv","__Z9luaU_dumpP9lua_StatePK5ProtoPFiS0_PKvjPvES6_i","__Z10DumpHeaderP9DumpState","__Z12DumpFunctionPK5ProtoPK7TStringP9DumpState","__Z10DumpStringPK7TStringP9DumpState","__Z7DumpIntiP9DumpState","__Z8DumpChariP9DumpState","__Z10DumpVectorPKvijP9DumpState","__Z13DumpConstantsPK5ProtoP9DumpState","__Z9DumpDebugPK5ProtoP9DumpState","__Z10DumpNumberdP9DumpState","__Z9DumpBlockPKvjP9DumpState","__Z11unlinkupvalP5UpVal","__Z17luaF_getlocalnamePK5Protoii","__Z16luaF_newCclosureP9lua_StateiP5Table","__Z16luaF_newLclosureP9lua_StateiP5Table","__Z13luaF_newupvalP9lua_State","__Z14luaF_findupvalP9lua_StateP10lua_TValue","__Z14luaF_freeupvalP9lua_StateP5UpVal","__Z10luaF_closeP9lua_StateP10lua_TValue","__Z13luaF_newprotoP9lua_State","__Z14luaF_freeprotoP9lua_StateP5Proto","__Z16luaF_freeclosureP9lua_StateP7Closure","__Z18luaC_separateudataP9lua_Statei","__Z13luaC_callGCTMP9lua_State","__Z4GCTMP9lua_State","__Z12luaC_freeallP9lua_State","__Z9sweeplistP9lua_StatePP8GCObjectj","__Z9luaC_stepP9lua_State","__Z10singlestepP9lua_State","__Z11luaC_fullgcP9lua_State","__Z8markrootP9lua_State","__Z16luaC_barrierbackP9lua_StateP5Table","__Z9luaC_linkP9lua_StateP8GCObjecth","__Z13luaC_barrierfP9lua_StateP8GCObjectS2_","__Z16reallymarkobjectP12global_StateP8GCObject","__Z14luaC_linkupvalP9lua_StateP5UpVal","__Z6markmtP12global_State","__Z13propagatemarkP12global_State","__Z6atomicP9lua_State","__Z9isclearedPK10lua_TValuei","__Z11removeentryP4Node","__Z10checkSizesP9lua_State","__Z12remarkupvalsP12global_State","__Z12propagateallP12global_State","__Z7marktmuP12global_State","__Z10cleartableP8GCObject","__Z13traversetableP12global_StateP5Table","__Z15traverseclosureP12global_StateP7Closure","__Z13traversestackP12global_StateP9lua_State","__Z13traverseprotoP12global_StateP5Proto","__Z15checkstacksizesP9lua_StateP10lua_TValue","__Z7freeobjP9lua_StateP8GCObject","__Z9luaX_initP9lua_State","__Z14luaX_token2strP8LexStatei","__Z13luaX_lexerrorP8LexStatePKci","__Z8txtTokenP8LexStatei","__Z16luaX_syntaxerrorP8LexStatePKc","__Z14luaX_newstringP8LexStatePKcj","__Z13luaX_setinputP9lua_StateP8LexStateP3ZioP7TString","__Z9luaX_nextP8LexState","__Z4llexP8LexStateP7SemInfo","__Z14luaX_lookaheadP8LexState","__Z13inclinenumberP8LexState","__Z8skip_sepP8LexState","__Z16read_long_stringP8LexStateP7SemInfoi","__Z11buffreplaceP8LexStatecc","__Z11read_stringP8LexStateiP7SemInfo","__Z4saveP8LexStatei","__Z10check_nextP8LexStatePKc","__Z12read_numeralP8LexStateP7SemInfo","__Z11trydecpointP8LexStateP7SemInfo","__Z11luaO_int2fbj","__Z11luaO_fb2inti","__Z9luaO_log2j","__Z16luaO_rawequalObjPK10lua_TValueS1_","__Z13luaM_growaux_P9lua_StatePvPijiPKc","__Z13luaM_realloc_P9lua_StatePvjj","__Z11luaM_toobigP9lua_State","__Z10luaO_str2dPKcPd","__Z17luaO_pushvfstringP9lua_StatePKcPc","__Z7pushstrP9lua_StatePKc","__Z16luaO_pushfstringP9lua_StatePKcz","__Z12luaO_chunkidPcPKcj","__Z12block_followi","__Z11luaY_parserP9lua_StateP3ZioP7MbufferPKc","__Z9open_funcP8LexStateP9FuncState","__Z5chunkP8LexState","__Z5checkP8LexStatei","__Z10close_funcP8LexState","__Z10enterlevelP8LexState","__Z9statementP8LexState","__Z8testnextP8LexStatei","__Z6ifstatP8LexStatei","__Z9whilestatP8LexStatei","__Z5blockP8LexState","__Z11check_matchP8LexStateiii","__Z7forstatP8LexStatei","__Z10repeatstatP8LexStatei","__Z8funcstatP8LexStatei","__Z9localfuncP8LexState","__Z9localstatP8LexState","__Z7retstatP8LexState","__Z9breakstatP8LexState","__Z8exprstatP8LexState","__Z10primaryexpP8LexStateP7expdesc","__Z10assignmentP8LexStateP10LHS_assigni","__Z14check_conflictP8LexStateP10LHS_assignP7expdesc","__Z10errorlimitP9FuncStateiPKc","__Z8getunopri","__Z9getbinopri","__Z8init_expP7expdesc7expkindi","__Z15adjustlocalvarsP8LexStatei","__Z9checknextP8LexStatei","__Z8explist1P8LexStateP7expdesc","__Z13adjust_assignP8LexStateiiP7expdesc","__Z4exprP8LexStateP7expdesc","__Z7subexprP8LexStateP7expdescj","__Z9simpleexpP8LexStateP7expdesc","__Z10codestringP8LexStateP7expdescP7TString","__Z11constructorP8LexStateP7expdesc","__Z4bodyP8LexStateP7expdescii","__Z12new_localvarP8LexStateP7TStringi","__Z7parlistP8LexState","__Z11pushclosureP8LexStateP9FuncStateP7expdesc","__Z13str_checknameP8LexState","__Z16registerlocalvarP8LexStateP7TString","__Z14closelistfieldP9FuncStateP11ConsControl","__Z9listfieldP8LexStateP11ConsControl","__Z8recfieldP8LexStateP11ConsControl","__Z13lastlistfieldP9FuncStateP11ConsControl","__Z9checknameP8LexStateP7expdesc","__Z6yindexP8LexStateP7expdesc","__Z9prefixexpP8LexStateP7expdesc","__Z5fieldP8LexStateP7expdesc","__Z9searchvarP9FuncStateP7TString","__Z9markupvalP9FuncStatei","__Z10enterblockP9FuncStateP8BlockCnth","__Z10removevarsP8LexStatei","__Z8funcargsP8LexStateP7expdesc","__Z9singlevarP8LexStateP7expdesc","__Z12singlevarauxP9FuncStateP7TStringP7expdesci","__Z12indexupvalueP9FuncStateP7TStringP7expdesc","__Z8funcnameP8LexStateP7expdesc","__Z4condP8LexState","__Z10leaveblockP9FuncState","__Z6fornumP8LexStateP7TStringi","__Z13preinit_stateP9lua_StateP12global_State","__Z7forlistP8LexStateP7TString","__Z7forbodyP8LexStateiiii","__Z4exp1P8LexState","__Z14error_expectedP8LexStatei","__Z15test_then_blockP8LexState","__Z12anchor_tokenP8LexState","__Z14luaE_newthreadP9lua_State","__Z10stack_initP9lua_StateS0_","__Z15luaE_freethreadP9lua_StateS0_","__Z9freestackP9lua_StateS0_","_lua_newstate","__Z9f_luaopenP9lua_StatePv","__Z11close_stateP9lua_State","_lua_close","__Z11callallgcTMP9lua_StatePv","__Z11luaS_resizeP9lua_Statei","__Z12luaS_newlstrP9lua_StatePKcj","__Z7newlstrP9lua_StatePKcjj","__Z13luaS_newudataP9lua_StatejP5Table","__Z9luaH_nextP9lua_StateP5TableP10lua_TValue","__Z9findindexP9lua_StateP5TableP10lua_TValue","__Z16luaH_resizearrayP9lua_StateP5Tablei","__Z11luaH_getstrP5TableP7TString","__Z6resizeP9lua_StateP5Tableii","__Z8luaH_newP9lua_Stateii","__Z14setarrayvectorP9lua_StateP5Tablei","__Z13setnodevectorP9lua_StateP5Tablei","__Z9luaH_freeP9lua_StateP5Table","__Z11luaH_getnumP5Tablei","__Z7hashnumPK5Tabled","__Z8luaH_getP5TablePK10lua_TValue","__Z10getfreeposP5Table","__Z11numusearrayPK5TablePi","__Z12mainpositionPK5TablePK10lua_TValue","__Z8luaH_setP9lua_StateP5TablePK10lua_TValue","__Z6newkeyP9lua_StateP5TablePK10lua_TValue","__Z11luaH_setnumP9lua_StateP5Tablei","__Z11luaH_setstrP9lua_StateP5TableP7TString","__Z9luaH_getnP5Table","__Z14unbound_searchP5Tablej","__Z6rehashP9lua_StateP5TablePK10lua_TValue","__Z12computesizesPiS_","__Z10arrayindexPK10lua_TValue","__Z10numusehashPK5TablePiS2_","__Z8countintPK10lua_TValuePi","__Z9luaT_initP9lua_State","__Z10luaT_gettmP5Table3TMSP7TString","__Z15luaT_gettmbyobjP9lua_StatePK10lua_TValue3TMS","__Z11luaU_undumpP9lua_StateP3ZioP7MbufferPKc","__Z10LoadHeaderP9LoadState","__Z12LoadFunctionP9LoadStateP7TString","__Z11luaU_headerPc","__Z5errorP9LoadStatePKc","__Z10LoadStringP9LoadState","__Z7LoadIntP9LoadState","__Z8LoadCharP9LoadState","__Z8LoadCodeP9LoadStateP5Proto","__Z13LoadConstantsP9LoadStateP5Proto","__Z9LoadDebugP9LoadStateP5Proto","__Z9LoadBlockP9LoadStatePvj","__Z10LoadNumberP9LoadState","__Z13luaV_tonumberPK10lua_TValuePS_","__Z13luaV_tostringP9lua_StateP10lua_TValue","__Z13luaV_gettableP9lua_StatePK10lua_TValuePS1_S4_","__Z9callTMresP9lua_StateP10lua_TValuePKS1_S4_S4_","__Z13luaV_settableP9lua_StatePK10lua_TValuePS1_S4_","__Z6callTMP9lua_StatePK10lua_TValueS3_S3_S3_","__Z13luaV_lessthanP9lua_StatePK10lua_TValueS3_","__Z8l_strcmpPK7TStringS1_","__Z12call_orderTMP9lua_StatePK10lua_TValueS3_3TMS","__Z13luaV_equalvalP9lua_StatePK10lua_TValueS3_","__Z10get_compTMP9lua_StateP5TableS2_3TMS","__Z11luaV_concatP9lua_Stateii","__Z10call_binTMP9lua_StatePK10lua_TValueS3_PS1_3TMS","__Z12luaV_executeP9lua_Statei","__Z9luaZ_initP9lua_StateP3ZioPFPKcS0_PvPjES5_","__Z9traceexecP9lua_StatePKj","__Z5ArithP9lua_StateP10lua_TValuePKS1_S4_3TMS","__Z9lessequalP9lua_StatePK10lua_TValueS3_","__Z9luaZ_fillP3Zio","__Z14luaZ_lookaheadP3Zio","__Z9luaZ_readP3ZioPvj","__Z14luaZ_openspaceP9lua_StateP7Mbufferj","_luaL_argerror","_luaL_error","_luaL_typerror","_luaL_where","__Z7libsizePK8luaL_Reg","_luaL_buffinit","_luaL_checkoption","_luaL_optlstring","_luaL_checklstring","_luaL_newmetatable","_luaL_checkudata","_luaL_checkstack","_luaL_checktype","__Z9tag_errorP9lua_Stateii","_luaL_checkany","_luaL_checknumber","_luaL_optnumber","_luaL_checkinteger","_luaL_optinteger","_luaL_getmetafield","_luaL_callmeta","_luaL_register","_luaL_openlib","_luaL_findtable","_luaL_gsub","__Z4getSP9lua_StatePvPj","_luaL_addlstring","_luaL_addstring","_luaL_pushresult","_luaL_prepbuffer","__Z11emptybufferP11luaL_Buffer","__Z11adjuststackP11luaL_Buffer","_luaL_addvalue","_luaL_ref","_luaL_unref","_luaL_loadfile","__Z7errfileP9lua_StatePKci","__Z4getFP9lua_StatePvPj","_luaL_loadbuffer","_luaL_loadstring","_luaL_newstate","__Z7l_allocPvS_jj","__Z5panicP9lua_State","__Z11luaB_assertP9lua_State","__Z19luaB_collectgarbageP9lua_State","__Z11luaB_dofileP9lua_State","__Z10luaB_errorP9lua_State","__Z11luaB_gcinfoP9lua_State","__Z12luaB_getfenvP9lua_State","__Z17luaB_getmetatableP9lua_State","__Z13luaB_loadfileP9lua_State","__Z9luaB_loadP9lua_State","__Z15luaB_loadstringP9lua_State","__Z9luaB_nextP9lua_State","__Z10luaB_pcallP9lua_State","__Z10luaB_printP9lua_State","__Z13luaB_rawequalP9lua_State","__Z11luaB_rawgetP9lua_State","__Z11luaB_rawsetP9lua_State","__Z11luaB_selectP9lua_State","__Z12luaB_setfenvP9lua_State","__Z17luaB_setmetatableP9lua_State","__Z13luaB_tonumberP9lua_State","__Z13luaB_tostringP9lua_State","__Z9luaB_typeP9lua_State","__Z11luaB_unpackP9lua_State","__Z11luaB_xpcallP9lua_State","__Z13luaB_cocreateP9lua_State","__Z13luaB_coresumeP9lua_State","__Z14luaB_corunningP9lua_State","__Z13luaB_costatusP9lua_State","__Z11luaB_cowrapP9lua_State","__Z10luaB_yieldP9lua_State","_luaopen_base","__Z9base_openP9lua_State","__Z7auxopenP9lua_StatePKcPFiS0_ES4_","__Z11luaB_ipairsP9lua_State","__Z9ipairsauxP9lua_State","__Z10luaB_pairsP9lua_State","__Z13luaB_newproxyP9lua_State","__Z12luaB_auxwrapP9lua_State","__Z9auxresumeP9lua_StateS0_i","__Z8costatusP9lua_StateS0_","__Z7getfuncP9lua_Statei","__Z8load_auxP9lua_Statei","__Z14generic_readerP9lua_StatePvPj","__Z8db_debugP9lua_State","__Z10db_getfenvP9lua_State","__Z10db_gethookP9lua_State","__Z10db_getinfoP9lua_State","__Z11db_getlocalP9lua_State","__Z14db_getregistryP9lua_State","__Z15db_getmetatableP9lua_State","__Z13db_getupvalueP9lua_State","__Z10db_setfenvP9lua_State","__Z10db_sethookP9lua_State","__Z11db_setlocalP9lua_State","__Z15db_setmetatableP9lua_State","__Z13db_setupvalueP9lua_State","__Z10db_errorfbP9lua_State","_luaopen_debug","__Z9getthreadP9lua_StatePi","__Z10auxupvalueP9lua_Statei","__Z5hookfP9lua_StateP9lua_Debug","__Z8makemaskPKci","__Z10unmakemaskiPc","__Z12gethooktableP9lua_State","__Z8settabssP9lua_StatePKcS2_","__Z8settabsiP9lua_StatePKci","__Z16treatstackoptionP9lua_StateS0_PKc","__Z8io_closeP9lua_State","__Z8io_flushP9lua_State","__Z8io_inputP9lua_State","__Z8io_linesP9lua_State","__Z7io_openP9lua_State","__Z9io_outputP9lua_State","__Z8io_popenP9lua_State","__Z7io_readP9lua_State","__Z10io_tmpfileP9lua_State","__Z7io_typeP9lua_State","__Z8io_writeP9lua_State","__Z7f_flushP9lua_State","__Z7f_linesP9lua_State","__Z6f_readP9lua_State","__Z6f_seekP9lua_State","__Z9f_setvbufP9lua_State","__Z7f_writeP9lua_State","__Z5io_gcP9lua_State","__Z11io_tostringP9lua_State","_luaopen_io","__Z10createmetaP9lua_State","__Z7newfenvP9lua_StatePFiS0_E","__Z9io_fcloseP9lua_State","__Z10io_nocloseP9lua_State","__Z13createstdfileP9lua_StateP8_IO_FILEiPKc","__Z9io_pcloseP9lua_State","__Z10pushresultP9lua_StateiPKc","__Z7newfileP9lua_State","__Z9aux_closeP9lua_State","__Z7g_writeP9lua_StateP8_IO_FILEi","__Z6tofileP9lua_State","__Z6g_readP9lua_StateP8_IO_FILEi","__Z9read_lineP9lua_StateP8_IO_FILE","__Z8test_eofP9lua_StateP8_IO_FILE","__Z10read_charsP9lua_StateP8_IO_FILEj","__Z11read_numberP9lua_StateP8_IO_FILE","__Z9aux_linesP9lua_Stateii","__Z11io_readlineP9lua_State","__Z9getiofileP9lua_Statei","__Z8g_iofileP9lua_StateiPKc","__Z9fileerrorP9lua_StateiPKc","__Z8math_absP9lua_State","__Z9math_acosP9lua_State","__Z9math_asinP9lua_State","__Z10math_atan2P9lua_State","__Z9math_atanP9lua_State","__Z9math_ceilP9lua_State","__Z9math_coshP9lua_State","__Z8math_cosP9lua_State","__Z8math_degP9lua_State","__Z8math_expP9lua_State","__Z10math_floorP9lua_State","__Z9math_fmodP9lua_State","__Z10math_frexpP9lua_State","__Z10math_ldexpP9lua_State","__Z10math_log10P9lua_State","__Z8math_logP9lua_State","__Z8math_maxP9lua_State","__Z8math_minP9lua_State","__Z9math_modfP9lua_State","__Z8math_powP9lua_State","__Z8math_radP9lua_State","__Z11math_randomP9lua_State","__Z15math_randomseedP9lua_State","__Z9math_sinhP9lua_State","__Z8math_sinP9lua_State","__Z9math_sqrtP9lua_State","__Z9math_tanhP9lua_State","__Z8math_tanP9lua_State","_luaopen_math","__Z8os_clockP9lua_State","__Z7os_dateP9lua_State","__Z11os_difftimeP9lua_State","__Z10os_executeP9lua_State","__Z9os_getenvP9lua_State","__Z9os_removeP9lua_State","__Z9os_renameP9lua_State","__Z12os_setlocaleP9lua_State","__Z7os_timeP9lua_State","__Z10os_tmpnameP9lua_State","_luaopen_os","__Z8getfieldP9lua_StatePKci","__Z12getboolfieldP9lua_StatePKc","__Z13os_pushresultP9lua_StateiPKc","__Z8setfieldP9lua_StatePKci","__Z12setboolfieldP9lua_StatePKci","__Z7tconcatP9lua_State","__Z7foreachP9lua_State","__Z7os_exitP9lua_State","__Z8foreachiP9lua_State","__Z4getnP9lua_State","__Z4maxnP9lua_State","__Z7tinsertP9lua_State","__Z7tremoveP9lua_State","__Z4setnP9lua_State","__Z4sortP9lua_State","_luaopen_table","__Z7auxsortP9lua_Stateii","__Z9sort_compP9lua_Stateii","__Z4set2P9lua_Stateii","__Z8addfieldP9lua_StateP11luaL_Bufferi","__Z8str_byteP9lua_State","__Z8str_charP9lua_State","__Z8str_dumpP9lua_State","__Z8str_findP9lua_State","__Z8posrelatij","__Z10str_formatP9lua_State","__Z11gfind_nodefP9lua_State","__Z6gmatchP9lua_State","__Z8str_gsubP9lua_State","__Z7str_lenP9lua_State","__Z9str_lowerP9lua_State","__Z9str_matchP9lua_State","__Z7str_repP9lua_State","__Z11str_reverseP9lua_State","__Z7str_subP9lua_State","__Z9str_upperP9lua_State","_luaopen_string","__Z15createmetatableP9lua_State","__Z12str_find_auxP9lua_Statei","__Z8lmemfindPKcjS0_j","__Z5matchP10MatchStatePKcS2_","__Z13push_capturesP10MatchStatePKcS2_","__Z15push_onecaptureP10MatchStateiPKcS2_","__Z13start_captureP10MatchStatePKcS2_i","__Z11end_captureP10MatchStatePKcS2_","__Z12matchbalanceP10MatchStatePKcS2_","__Z8classendP10MatchStatePKc","__Z17matchbracketclassiPKcS0_","__Z13match_captureP10MatchStatePKci","__Z11singlematchiPKcS0_","__Z10max_expandP10MatchStatePKcS2_S2_","__Z10min_expandP10MatchStatePKcS2_S2_","__Z11match_classii","__Z13check_captureP10MatchStatei","__Z16capture_to_closeP10MatchState","__Z9add_valueP10MatchStateP11luaL_BufferPKcS4_","__Z5add_sP10MatchStateP11luaL_BufferPKcS4_","__Z10gmatch_auxP9lua_State","__Z10scanformatP9lua_StatePKcPc","__Z9addintlenPc","__Z9addquotedP9lua_StateP11luaL_Bufferi","__Z6writerP9lua_StatePKvjPv","__Z10ll_loadlibP9lua_State","__Z9ll_seeallP9lua_State","__Z9ll_moduleP9lua_State","__Z12ll_unloadlibPv","__Z10ll_requireP9lua_State","__Z14loader_preloadP9lua_State","__Z10loader_LuaP9lua_State","__Z8loader_CP9lua_State","__Z12loader_CrootP9lua_State","_luaopen_package","__Z4gctmP9lua_State","__Z7setpathP9lua_StatePKcS2_S2_","__Z8findfileP9lua_StatePKcS2_","__Z10mkfuncnameP9lua_StatePKc","__Z11ll_loadfuncP9lua_StatePKcS2_","__Z9loaderrorP9lua_StatePKc","__Z11ll_registerP9lua_StatePKc","__Z7ll_loadP9lua_StatePKc","__Z6ll_symP9lua_StatePvPKc","__Z16pushnexttemplateP9lua_StatePKc","__Z8readablePKc","__Z7modinitP9lua_StatePKc","__Z7setfenvP9lua_State","__Z9dooptionsP9lua_Statei","_luaL_openlibs"]

